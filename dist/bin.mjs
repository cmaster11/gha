#!/usr/bin/env node
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined") return require.apply(this, arguments);
  throw Error('Dynamic require of "' + x + '" is not supported');
});
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require2() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// lib/cjs-shim.mts
import { createRequire } from "node:module";
import path2 from "node:path";
import url from "node:url";
var init_cjs_shim = __esm({
  "lib/cjs-shim.mts"() {
    "use strict";
    globalThis.require = createRequire(import.meta.url);
    globalThis.__filename = url.fileURLToPath(import.meta.url);
    globalThis.__dirname = path2.dirname(__filename);
  }
});

// node_modules/zx/build/esblib.cjs
var require_esblib = __commonJS({
  "node_modules/zx/build/esblib.cjs"(exports, module) {
    init_cjs_shim();
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __knownSymbol = /* @__PURE__ */ __name((name, symbol) => (symbol = Symbol[name]) ? symbol : Symbol.for("Symbol." + name), "__knownSymbol");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: /* @__PURE__ */ __name(() => from[key], "get"), enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toESM2 = /* @__PURE__ */ __name((mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    )), "__toESM");
    var __async = /* @__PURE__ */ __name((__this, __arguments, generator) => {
      return new Promise((resolve, reject) => {
        var fulfilled = /* @__PURE__ */ __name((value) => {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }, "fulfilled");
        var rejected = /* @__PURE__ */ __name((value) => {
          try {
            step(generator.throw(value));
          } catch (e) {
            reject(e);
          }
        }, "rejected");
        var step = /* @__PURE__ */ __name((x2) => x2.done ? resolve(x2.value) : Promise.resolve(x2.value).then(fulfilled, rejected), "step");
        step((generator = generator.apply(__this, __arguments)).next());
      });
    }, "__async");
    var __forAwait = /* @__PURE__ */ __name((obj, it, method) => (it = obj[__knownSymbol("asyncIterator")]) ? it.call(obj) : (obj = obj[__knownSymbol("iterator")](), it = {}, method = /* @__PURE__ */ __name((key, fn) => (fn = obj[key]) && (it[key] = (arg) => new Promise((yes, no, done) => (arg = fn.call(obj, arg), done = arg.done, Promise.resolve(arg.value).then((value) => yes({ value, done }), no)))), "method"), method("next"), method("return"), it), "__forAwait");
    var __getOwnPropSymbols = Object.getOwnPropertySymbols;
    var __propIsEnum = Object.prototype.propertyIsEnumerable;
    var __defNormalProp = /* @__PURE__ */ __name((obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value, "__defNormalProp");
    var __spreadValues = /* @__PURE__ */ __name((a2, b) => {
      for (var prop in b || (b = {}))
        if (__hasOwnProp2.call(b, prop))
          __defNormalProp(a2, prop, b[prop]);
      if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
          if (__propIsEnum.call(b, prop))
            __defNormalProp(a2, prop, b[prop]);
        }
      return a2;
    }, "__spreadValues");
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var __pow = Math.pow;
    var __reExport = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __defProps = Object.defineProperties;
    var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
    var __spreadProps = /* @__PURE__ */ __name((a2, b) => __defProps(a2, __getOwnPropDescs(b)), "__spreadProps");
    var __typeError = /* @__PURE__ */ __name((msg) => {
      throw TypeError(msg);
    }, "__typeError");
    var __esm2 = /* @__PURE__ */ __name((fn, res) => /* @__PURE__ */ __name(function __init() {
      return fn && (res = (0, fn[__getOwnPropNames2(fn)[0]])(fn = 0)), res;
    }, "__init"), "__esm");
    var __commonJS2 = /* @__PURE__ */ __name((cb, mod) => /* @__PURE__ */ __name(function __require2() {
      return mod || (0, cb[__getOwnPropNames2(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
    }, "__require"), "__commonJS");
    var __accessCheck = /* @__PURE__ */ __name((obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg), "__accessCheck");
    var __privateGet = /* @__PURE__ */ __name((obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj)), "__privateGet");
    var __privateAdd = /* @__PURE__ */ __name((obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value), "__privateAdd");
    var __privateSet = /* @__PURE__ */ __name((obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value), "__privateSet");
    var __await = /* @__PURE__ */ __name(function(promise, isYieldStar) {
      this[0] = promise;
      this[1] = isYieldStar;
    }, "__await");
    var __asyncGenerator = /* @__PURE__ */ __name((__this, __arguments, generator) => {
      var resume = /* @__PURE__ */ __name((k2, v2, yes, no) => {
        try {
          var x2 = generator[k2](v2), isAwait = (v2 = x2.value) instanceof __await, done = x2.done;
          Promise.resolve(isAwait ? v2[0] : v2).then((y) => isAwait ? resume(k2 === "return" ? k2 : "next", v2[1] ? { done: y.done, value: y.value } : y, yes, no) : yes({ value: y, done })).catch((e) => resume("throw", e, yes, no));
        } catch (e) {
          no(e);
        }
      }, "resume"), method = /* @__PURE__ */ __name((k2) => it[k2] = (x2) => new Promise((yes, no) => resume(k2, x2, yes, no)), "method"), it = {};
      return generator = generator.apply(__this, __arguments), it[__knownSymbol("asyncIterator")] = () => it, method("next"), method("throw"), method("return"), it;
    }, "__asyncGenerator");
    var __yieldStar = /* @__PURE__ */ __name((value) => {
      var obj = value[__knownSymbol("asyncIterator")], isAwait = false, method, it = {};
      if (obj == null) {
        obj = value[__knownSymbol("iterator")]();
        method = /* @__PURE__ */ __name((k2) => it[k2] = (x2) => obj[k2](x2), "method");
      } else {
        obj = obj.call(value);
        method = /* @__PURE__ */ __name((k2) => it[k2] = (v2) => {
          if (isAwait) {
            isAwait = false;
            if (k2 === "throw") throw v2;
            return v2;
          }
          isAwait = true;
          return {
            done: false,
            value: new __await(new Promise((resolve) => {
              var x2 = obj[k2](v2);
              if (!(x2 instanceof Object)) __typeError("Object expected");
              resolve(x2);
            }), 1)
          };
        }, "method");
      }
      return it[__knownSymbol("iterator")] = () => it, method("next"), "throw" in obj ? method("throw") : it.throw = (x2) => {
        throw x2;
      }, "return" in obj && method("return"), it;
    }, "__yieldStar");
    module.exports = {
      __create: __create2,
      __defProp: __defProp2,
      __getOwnPropDesc: __getOwnPropDesc2,
      __getOwnPropNames: __getOwnPropNames2,
      __getProtoOf: __getProtoOf2,
      __hasOwnProp: __hasOwnProp2,
      __knownSymbol,
      __copyProps: __copyProps2,
      __toESM: __toESM2,
      __async,
      __forAwait,
      __getOwnPropSymbols,
      __propIsEnum,
      __defNormalProp,
      __spreadValues,
      __export: __export2,
      __toCommonJS: __toCommonJS2,
      __pow,
      __reExport,
      __defProps,
      __getOwnPropDescs,
      __spreadProps,
      __typeError,
      __esm: __esm2,
      __commonJS: __commonJS2,
      __accessCheck,
      __privateGet,
      __privateAdd,
      __privateSet,
      __await,
      __asyncGenerator,
      __yieldStar
    };
  }
});

// node_modules/zx/build/vendor.cjs
var require_vendor = __commonJS({
  "node_modules/zx/build/vendor.cjs"(exports, module) {
    "use strict";
    init_cjs_shim();
    var {
      __create: __create2,
      __spreadValues,
      __spreadProps,
      __esm: __esm2,
      __commonJS: __commonJS2,
      __export: __export2,
      __toESM: __toESM2,
      __toCommonJS: __toCommonJS2,
      __privateGet,
      __privateAdd,
      __privateSet,
      __async,
      __await,
      __asyncGenerator,
      __yieldStar,
      __forAwait
    } = require_esblib();
    var require_array2 = __commonJS2({
      "node_modules/fast-glob/out/utils/array.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        exports2.splitWhen = exports2.flatten = void 0;
        function flatten(items) {
          return items.reduce((collection, item) => [].concat(collection, item), []);
        }
        __name(flatten, "flatten");
        exports2.flatten = flatten;
        function splitWhen(items, predicate) {
          const result = [[]];
          let groupIndex = 0;
          for (const item of items) {
            if (predicate(item)) {
              groupIndex++;
              result[groupIndex] = [];
            } else {
              result[groupIndex].push(item);
            }
          }
          return result;
        }
        __name(splitWhen, "splitWhen");
        exports2.splitWhen = splitWhen;
      }
    });
    var require_errno = __commonJS2({
      "node_modules/fast-glob/out/utils/errno.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        exports2.isEnoentCodeError = void 0;
        function isEnoentCodeError(error) {
          return error.code === "ENOENT";
        }
        __name(isEnoentCodeError, "isEnoentCodeError");
        exports2.isEnoentCodeError = isEnoentCodeError;
      }
    });
    var require_fs = __commonJS2({
      "node_modules/fast-glob/out/utils/fs.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        exports2.createDirentFromStats = void 0;
        var DirentFromStats = class {
          static {
            __name(this, "DirentFromStats");
          }
          constructor(name, stats) {
            this.name = name;
            this.isBlockDevice = stats.isBlockDevice.bind(stats);
            this.isCharacterDevice = stats.isCharacterDevice.bind(stats);
            this.isDirectory = stats.isDirectory.bind(stats);
            this.isFIFO = stats.isFIFO.bind(stats);
            this.isFile = stats.isFile.bind(stats);
            this.isSocket = stats.isSocket.bind(stats);
            this.isSymbolicLink = stats.isSymbolicLink.bind(stats);
          }
        };
        function createDirentFromStats(name, stats) {
          return new DirentFromStats(name, stats);
        }
        __name(createDirentFromStats, "createDirentFromStats");
        exports2.createDirentFromStats = createDirentFromStats;
      }
    });
    var require_path = __commonJS2({
      "node_modules/fast-glob/out/utils/path.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        exports2.convertPosixPathToPattern = exports2.convertWindowsPathToPattern = exports2.convertPathToPattern = exports2.escapePosixPath = exports2.escapeWindowsPath = exports2.escape = exports2.removeLeadingDotSegment = exports2.makeAbsolute = exports2.unixify = void 0;
        var os2 = __require("os");
        var path22 = __require("path");
        var IS_WINDOWS_PLATFORM = os2.platform() === "win32";
        var LEADING_DOT_SEGMENT_CHARACTERS_COUNT = 2;
        var POSIX_UNESCAPED_GLOB_SYMBOLS_RE = /(\\?)([()*?[\]{|}]|^!|[!+@](?=\()|\\(?![!()*+?@[\]{|}]))/g;
        var WINDOWS_UNESCAPED_GLOB_SYMBOLS_RE = /(\\?)([()[\]{}]|^!|[!+@](?=\())/g;
        var DOS_DEVICE_PATH_RE = /^\\\\([.?])/;
        var WINDOWS_BACKSLASHES_RE = /\\(?![!()+@[\]{}])/g;
        function unixify(filepath) {
          return filepath.replace(/\\/g, "/");
        }
        __name(unixify, "unixify");
        exports2.unixify = unixify;
        function makeAbsolute(cwd, filepath) {
          return path22.resolve(cwd, filepath);
        }
        __name(makeAbsolute, "makeAbsolute");
        exports2.makeAbsolute = makeAbsolute;
        function removeLeadingDotSegment(entry) {
          if (entry.charAt(0) === ".") {
            const secondCharactery = entry.charAt(1);
            if (secondCharactery === "/" || secondCharactery === "\\") {
              return entry.slice(LEADING_DOT_SEGMENT_CHARACTERS_COUNT);
            }
          }
          return entry;
        }
        __name(removeLeadingDotSegment, "removeLeadingDotSegment");
        exports2.removeLeadingDotSegment = removeLeadingDotSegment;
        exports2.escape = IS_WINDOWS_PLATFORM ? escapeWindowsPath : escapePosixPath;
        function escapeWindowsPath(pattern) {
          return pattern.replace(WINDOWS_UNESCAPED_GLOB_SYMBOLS_RE, "\\$2");
        }
        __name(escapeWindowsPath, "escapeWindowsPath");
        exports2.escapeWindowsPath = escapeWindowsPath;
        function escapePosixPath(pattern) {
          return pattern.replace(POSIX_UNESCAPED_GLOB_SYMBOLS_RE, "\\$2");
        }
        __name(escapePosixPath, "escapePosixPath");
        exports2.escapePosixPath = escapePosixPath;
        exports2.convertPathToPattern = IS_WINDOWS_PLATFORM ? convertWindowsPathToPattern : convertPosixPathToPattern;
        function convertWindowsPathToPattern(filepath) {
          return escapeWindowsPath(filepath).replace(DOS_DEVICE_PATH_RE, "//$1").replace(WINDOWS_BACKSLASHES_RE, "/");
        }
        __name(convertWindowsPathToPattern, "convertWindowsPathToPattern");
        exports2.convertWindowsPathToPattern = convertWindowsPathToPattern;
        function convertPosixPathToPattern(filepath) {
          return escapePosixPath(filepath);
        }
        __name(convertPosixPathToPattern, "convertPosixPathToPattern");
        exports2.convertPosixPathToPattern = convertPosixPathToPattern;
      }
    });
    var require_is_extglob = __commonJS2({
      "node_modules/is-extglob/index.js"(exports2, module2) {
        "use strict";
        module2.exports = /* @__PURE__ */ __name(function isExtglob(str) {
          if (typeof str !== "string" || str === "") {
            return false;
          }
          var match;
          while (match = /(\\).|([@?!+*]\(.*\))/g.exec(str)) {
            if (match[2]) return true;
            str = str.slice(match.index + match[0].length);
          }
          return false;
        }, "isExtglob");
      }
    });
    var require_is_glob = __commonJS2({
      "node_modules/is-glob/index.js"(exports2, module2) {
        "use strict";
        var isExtglob = require_is_extglob();
        var chars = { "{": "}", "(": ")", "[": "]" };
        var strictCheck = /* @__PURE__ */ __name(function(str) {
          if (str[0] === "!") {
            return true;
          }
          var index = 0;
          var pipeIndex = -2;
          var closeSquareIndex = -2;
          var closeCurlyIndex = -2;
          var closeParenIndex = -2;
          var backSlashIndex = -2;
          while (index < str.length) {
            if (str[index] === "*") {
              return true;
            }
            if (str[index + 1] === "?" && /[\].+)]/.test(str[index])) {
              return true;
            }
            if (closeSquareIndex !== -1 && str[index] === "[" && str[index + 1] !== "]") {
              if (closeSquareIndex < index) {
                closeSquareIndex = str.indexOf("]", index);
              }
              if (closeSquareIndex > index) {
                if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {
                  return true;
                }
                backSlashIndex = str.indexOf("\\", index);
                if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {
                  return true;
                }
              }
            }
            if (closeCurlyIndex !== -1 && str[index] === "{" && str[index + 1] !== "}") {
              closeCurlyIndex = str.indexOf("}", index);
              if (closeCurlyIndex > index) {
                backSlashIndex = str.indexOf("\\", index);
                if (backSlashIndex === -1 || backSlashIndex > closeCurlyIndex) {
                  return true;
                }
              }
            }
            if (closeParenIndex !== -1 && str[index] === "(" && str[index + 1] === "?" && /[:!=]/.test(str[index + 2]) && str[index + 3] !== ")") {
              closeParenIndex = str.indexOf(")", index);
              if (closeParenIndex > index) {
                backSlashIndex = str.indexOf("\\", index);
                if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {
                  return true;
                }
              }
            }
            if (pipeIndex !== -1 && str[index] === "(" && str[index + 1] !== "|") {
              if (pipeIndex < index) {
                pipeIndex = str.indexOf("|", index);
              }
              if (pipeIndex !== -1 && str[pipeIndex + 1] !== ")") {
                closeParenIndex = str.indexOf(")", pipeIndex);
                if (closeParenIndex > pipeIndex) {
                  backSlashIndex = str.indexOf("\\", pipeIndex);
                  if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {
                    return true;
                  }
                }
              }
            }
            if (str[index] === "\\") {
              var open = str[index + 1];
              index += 2;
              var close = chars[open];
              if (close) {
                var n3 = str.indexOf(close, index);
                if (n3 !== -1) {
                  index = n3 + 1;
                }
              }
              if (str[index] === "!") {
                return true;
              }
            } else {
              index++;
            }
          }
          return false;
        }, "strictCheck");
        var relaxedCheck = /* @__PURE__ */ __name(function(str) {
          if (str[0] === "!") {
            return true;
          }
          var index = 0;
          while (index < str.length) {
            if (/[*?{}()[\]]/.test(str[index])) {
              return true;
            }
            if (str[index] === "\\") {
              var open = str[index + 1];
              index += 2;
              var close = chars[open];
              if (close) {
                var n3 = str.indexOf(close, index);
                if (n3 !== -1) {
                  index = n3 + 1;
                }
              }
              if (str[index] === "!") {
                return true;
              }
            } else {
              index++;
            }
          }
          return false;
        }, "relaxedCheck");
        module2.exports = /* @__PURE__ */ __name(function isGlob(str, options) {
          if (typeof str !== "string" || str === "") {
            return false;
          }
          if (isExtglob(str)) {
            return true;
          }
          var check = strictCheck;
          if (options && options.strict === false) {
            check = relaxedCheck;
          }
          return check(str);
        }, "isGlob");
      }
    });
    var require_glob_parent = __commonJS2({
      "node_modules/glob-parent/index.js"(exports2, module2) {
        "use strict";
        var isGlob = require_is_glob();
        var pathPosixDirname = __require("path").posix.dirname;
        var isWin32 = __require("os").platform() === "win32";
        var slash2 = "/";
        var backslash = /\\/g;
        var enclosure = /[\{\[].*[\}\]]$/;
        var globby3 = /(^|[^\\])([\{\[]|\([^\)]+$)/;
        var escaped = /\\([\!\*\?\|\[\]\(\)\{\}])/g;
        module2.exports = /* @__PURE__ */ __name(function globParent(str, opts) {
          var options = Object.assign({ flipBackslashes: true }, opts);
          if (options.flipBackslashes && isWin32 && str.indexOf(slash2) < 0) {
            str = str.replace(backslash, slash2);
          }
          if (enclosure.test(str)) {
            str += slash2;
          }
          str += "a";
          do {
            str = pathPosixDirname(str);
          } while (isGlob(str) || globby3.test(str));
          return str.replace(escaped, "$1");
        }, "globParent");
      }
    });
    var require_utils4 = __commonJS2({
      "node_modules/braces/lib/utils.js"(exports2) {
        "use strict";
        exports2.isInteger = (num) => {
          if (typeof num === "number") {
            return Number.isInteger(num);
          }
          if (typeof num === "string" && num.trim() !== "") {
            return Number.isInteger(Number(num));
          }
          return false;
        };
        exports2.find = (node, type) => node.nodes.find((node2) => node2.type === type);
        exports2.exceedsLimit = (min, max, step = 1, limit) => {
          if (limit === false) return false;
          if (!exports2.isInteger(min) || !exports2.isInteger(max)) return false;
          return (Number(max) - Number(min)) / Number(step) >= limit;
        };
        exports2.escapeNode = (block, n3 = 0, type) => {
          let node = block.nodes[n3];
          if (!node) return;
          if (type && node.type === type || node.type === "open" || node.type === "close") {
            if (node.escaped !== true) {
              node.value = "\\" + node.value;
              node.escaped = true;
            }
          }
        };
        exports2.encloseBrace = (node) => {
          if (node.type !== "brace") return false;
          if (node.commas >> 0 + node.ranges >> 0 === 0) {
            node.invalid = true;
            return true;
          }
          return false;
        };
        exports2.isInvalidBrace = (block) => {
          if (block.type !== "brace") return false;
          if (block.invalid === true || block.dollar) return true;
          if (block.commas >> 0 + block.ranges >> 0 === 0) {
            block.invalid = true;
            return true;
          }
          if (block.open !== true || block.close !== true) {
            block.invalid = true;
            return true;
          }
          return false;
        };
        exports2.isOpenOrClose = (node) => {
          if (node.type === "open" || node.type === "close") {
            return true;
          }
          return node.open === true || node.close === true;
        };
        exports2.reduce = (nodes) => nodes.reduce((acc, node) => {
          if (node.type === "text") acc.push(node.value);
          if (node.type === "range") node.type = "text";
          return acc;
        }, []);
        exports2.flatten = (...args) => {
          const result = [];
          const flat = /* @__PURE__ */ __name((arr) => {
            for (let i = 0; i < arr.length; i++) {
              let ele = arr[i];
              Array.isArray(ele) ? flat(ele, result) : ele !== void 0 && result.push(ele);
            }
            return result;
          }, "flat");
          flat(args);
          return result;
        };
      }
    });
    var require_stringify2 = __commonJS2({
      "node_modules/braces/lib/stringify.js"(exports2, module2) {
        "use strict";
        var utils = require_utils4();
        module2.exports = (ast, options = {}) => {
          let stringify2 = /* @__PURE__ */ __name((node, parent = {}) => {
            let invalidBlock = options.escapeInvalid && utils.isInvalidBrace(parent);
            let invalidNode = node.invalid === true && options.escapeInvalid === true;
            let output = "";
            if (node.value) {
              if ((invalidBlock || invalidNode) && utils.isOpenOrClose(node)) {
                return "\\" + node.value;
              }
              return node.value;
            }
            if (node.value) {
              return node.value;
            }
            if (node.nodes) {
              for (let child of node.nodes) {
                output += stringify2(child);
              }
            }
            return output;
          }, "stringify");
          return stringify2(ast);
        };
      }
    });
    var require_is_number = __commonJS2({
      "node_modules/is-number/index.js"(exports2, module2) {
        "use strict";
        module2.exports = function(num) {
          if (typeof num === "number") {
            return num - num === 0;
          }
          if (typeof num === "string" && num.trim() !== "") {
            return Number.isFinite ? Number.isFinite(+num) : isFinite(+num);
          }
          return false;
        };
      }
    });
    var require_to_regex_range = __commonJS2({
      "node_modules/to-regex-range/index.js"(exports2, module2) {
        "use strict";
        var isNumber = require_is_number();
        var toRegexRange = /* @__PURE__ */ __name((min, max, options) => {
          if (isNumber(min) === false) {
            throw new TypeError("toRegexRange: expected the first argument to be a number");
          }
          if (max === void 0 || min === max) {
            return String(min);
          }
          if (isNumber(max) === false) {
            throw new TypeError("toRegexRange: expected the second argument to be a number.");
          }
          let opts = __spreadValues({ relaxZeros: true }, options);
          if (typeof opts.strictZeros === "boolean") {
            opts.relaxZeros = opts.strictZeros === false;
          }
          let relax = String(opts.relaxZeros);
          let shorthand = String(opts.shorthand);
          let capture = String(opts.capture);
          let wrap = String(opts.wrap);
          let cacheKey = min + ":" + max + "=" + relax + shorthand + capture + wrap;
          if (toRegexRange.cache.hasOwnProperty(cacheKey)) {
            return toRegexRange.cache[cacheKey].result;
          }
          let a2 = Math.min(min, max);
          let b = Math.max(min, max);
          if (Math.abs(a2 - b) === 1) {
            let result = min + "|" + max;
            if (opts.capture) {
              return `(${result})`;
            }
            if (opts.wrap === false) {
              return result;
            }
            return `(?:${result})`;
          }
          let isPadded = hasPadding(min) || hasPadding(max);
          let state = { min, max, a: a2, b };
          let positives = [];
          let negatives = [];
          if (isPadded) {
            state.isPadded = isPadded;
            state.maxLen = String(state.max).length;
          }
          if (a2 < 0) {
            let newMin = b < 0 ? Math.abs(b) : 1;
            negatives = splitToPatterns(newMin, Math.abs(a2), state, opts);
            a2 = state.a = 0;
          }
          if (b >= 0) {
            positives = splitToPatterns(a2, b, state, opts);
          }
          state.negatives = negatives;
          state.positives = positives;
          state.result = collatePatterns(negatives, positives, opts);
          if (opts.capture === true) {
            state.result = `(${state.result})`;
          } else if (opts.wrap !== false && positives.length + negatives.length > 1) {
            state.result = `(?:${state.result})`;
          }
          toRegexRange.cache[cacheKey] = state;
          return state.result;
        }, "toRegexRange");
        function collatePatterns(neg, pos, options) {
          let onlyNegative = filterPatterns(neg, pos, "-", false, options) || [];
          let onlyPositive = filterPatterns(pos, neg, "", false, options) || [];
          let intersected = filterPatterns(neg, pos, "-?", true, options) || [];
          let subpatterns = onlyNegative.concat(intersected).concat(onlyPositive);
          return subpatterns.join("|");
        }
        __name(collatePatterns, "collatePatterns");
        function splitToRanges(min, max) {
          let nines = 1;
          let zeros = 1;
          let stop = countNines(min, nines);
          let stops = /* @__PURE__ */ new Set([max]);
          while (min <= stop && stop <= max) {
            stops.add(stop);
            nines += 1;
            stop = countNines(min, nines);
          }
          stop = countZeros(max + 1, zeros) - 1;
          while (min < stop && stop <= max) {
            stops.add(stop);
            zeros += 1;
            stop = countZeros(max + 1, zeros) - 1;
          }
          stops = [...stops];
          stops.sort(compare);
          return stops;
        }
        __name(splitToRanges, "splitToRanges");
        function rangeToPattern(start, stop, options) {
          if (start === stop) {
            return { pattern: start, count: [], digits: 0 };
          }
          let zipped = zip(start, stop);
          let digits = zipped.length;
          let pattern = "";
          let count = 0;
          for (let i = 0; i < digits; i++) {
            let [startDigit, stopDigit] = zipped[i];
            if (startDigit === stopDigit) {
              pattern += startDigit;
            } else if (startDigit !== "0" || stopDigit !== "9") {
              pattern += toCharacterClass(startDigit, stopDigit, options);
            } else {
              count++;
            }
          }
          if (count) {
            pattern += options.shorthand === true ? "\\d" : "[0-9]";
          }
          return { pattern, count: [count], digits };
        }
        __name(rangeToPattern, "rangeToPattern");
        function splitToPatterns(min, max, tok, options) {
          let ranges = splitToRanges(min, max);
          let tokens = [];
          let start = min;
          let prev;
          for (let i = 0; i < ranges.length; i++) {
            let max2 = ranges[i];
            let obj = rangeToPattern(String(start), String(max2), options);
            let zeros = "";
            if (!tok.isPadded && prev && prev.pattern === obj.pattern) {
              if (prev.count.length > 1) {
                prev.count.pop();
              }
              prev.count.push(obj.count[0]);
              prev.string = prev.pattern + toQuantifier(prev.count);
              start = max2 + 1;
              continue;
            }
            if (tok.isPadded) {
              zeros = padZeros(max2, tok, options);
            }
            obj.string = zeros + obj.pattern + toQuantifier(obj.count);
            tokens.push(obj);
            start = max2 + 1;
            prev = obj;
          }
          return tokens;
        }
        __name(splitToPatterns, "splitToPatterns");
        function filterPatterns(arr, comparison, prefix, intersection, options) {
          let result = [];
          for (let ele of arr) {
            let { string } = ele;
            if (!intersection && !contains(comparison, "string", string)) {
              result.push(prefix + string);
            }
            if (intersection && contains(comparison, "string", string)) {
              result.push(prefix + string);
            }
          }
          return result;
        }
        __name(filterPatterns, "filterPatterns");
        function zip(a2, b) {
          let arr = [];
          for (let i = 0; i < a2.length; i++) arr.push([a2[i], b[i]]);
          return arr;
        }
        __name(zip, "zip");
        function compare(a2, b) {
          return a2 > b ? 1 : b > a2 ? -1 : 0;
        }
        __name(compare, "compare");
        function contains(arr, key, val) {
          return arr.some((ele) => ele[key] === val);
        }
        __name(contains, "contains");
        function countNines(min, len) {
          return Number(String(min).slice(0, -len) + "9".repeat(len));
        }
        __name(countNines, "countNines");
        function countZeros(integer, zeros) {
          return integer - integer % Math.pow(10, zeros);
        }
        __name(countZeros, "countZeros");
        function toQuantifier(digits) {
          let [start = 0, stop = ""] = digits;
          if (stop || start > 1) {
            return `{${start + (stop ? "," + stop : "")}}`;
          }
          return "";
        }
        __name(toQuantifier, "toQuantifier");
        function toCharacterClass(a2, b, options) {
          return `[${a2}${b - a2 === 1 ? "" : "-"}${b}]`;
        }
        __name(toCharacterClass, "toCharacterClass");
        function hasPadding(str) {
          return /^-?(0+)\d/.test(str);
        }
        __name(hasPadding, "hasPadding");
        function padZeros(value, tok, options) {
          if (!tok.isPadded) {
            return value;
          }
          let diff = Math.abs(tok.maxLen - String(value).length);
          let relax = options.relaxZeros !== false;
          switch (diff) {
            case 0:
              return "";
            case 1:
              return relax ? "0?" : "0";
            case 2:
              return relax ? "0{0,2}" : "00";
            default: {
              return relax ? `0{0,${diff}}` : `0{${diff}}`;
            }
          }
        }
        __name(padZeros, "padZeros");
        toRegexRange.cache = {};
        toRegexRange.clearCache = () => toRegexRange.cache = {};
        module2.exports = toRegexRange;
      }
    });
    var require_fill_range = __commonJS2({
      "node_modules/fill-range/index.js"(exports2, module2) {
        "use strict";
        var util = __require("util");
        var toRegexRange = require_to_regex_range();
        var isObject = /* @__PURE__ */ __name((val) => val !== null && typeof val === "object" && !Array.isArray(val), "isObject");
        var transform = /* @__PURE__ */ __name((toNumber) => {
          return (value) => toNumber === true ? Number(value) : String(value);
        }, "transform");
        var isValidValue = /* @__PURE__ */ __name((value) => {
          return typeof value === "number" || typeof value === "string" && value !== "";
        }, "isValidValue");
        var isNumber = /* @__PURE__ */ __name((num) => Number.isInteger(+num), "isNumber");
        var zeros = /* @__PURE__ */ __name((input) => {
          let value = `${input}`;
          let index = -1;
          if (value[0] === "-") value = value.slice(1);
          if (value === "0") return false;
          while (value[++index] === "0") ;
          return index > 0;
        }, "zeros");
        var stringify2 = /* @__PURE__ */ __name((start, end, options) => {
          if (typeof start === "string" || typeof end === "string") {
            return true;
          }
          return options.stringify === true;
        }, "stringify");
        var pad = /* @__PURE__ */ __name((input, maxLength, toNumber) => {
          if (maxLength > 0) {
            let dash = input[0] === "-" ? "-" : "";
            if (dash) input = input.slice(1);
            input = dash + input.padStart(dash ? maxLength - 1 : maxLength, "0");
          }
          if (toNumber === false) {
            return String(input);
          }
          return input;
        }, "pad");
        var toMaxLen = /* @__PURE__ */ __name((input, maxLength) => {
          let negative = input[0] === "-" ? "-" : "";
          if (negative) {
            input = input.slice(1);
            maxLength--;
          }
          while (input.length < maxLength) input = "0" + input;
          return negative ? "-" + input : input;
        }, "toMaxLen");
        var toSequence = /* @__PURE__ */ __name((parts, options) => {
          parts.negatives.sort((a2, b) => a2 < b ? -1 : a2 > b ? 1 : 0);
          parts.positives.sort((a2, b) => a2 < b ? -1 : a2 > b ? 1 : 0);
          let prefix = options.capture ? "" : "?:";
          let positives = "";
          let negatives = "";
          let result;
          if (parts.positives.length) {
            positives = parts.positives.join("|");
          }
          if (parts.negatives.length) {
            negatives = `-(${prefix}${parts.negatives.join("|")})`;
          }
          if (positives && negatives) {
            result = `${positives}|${negatives}`;
          } else {
            result = positives || negatives;
          }
          if (options.wrap) {
            return `(${prefix}${result})`;
          }
          return result;
        }, "toSequence");
        var toRange = /* @__PURE__ */ __name((a2, b, isNumbers, options) => {
          if (isNumbers) {
            return toRegexRange(a2, b, __spreadValues({ wrap: false }, options));
          }
          let start = String.fromCharCode(a2);
          if (a2 === b) return start;
          let stop = String.fromCharCode(b);
          return `[${start}-${stop}]`;
        }, "toRange");
        var toRegex = /* @__PURE__ */ __name((start, end, options) => {
          if (Array.isArray(start)) {
            let wrap = options.wrap === true;
            let prefix = options.capture ? "" : "?:";
            return wrap ? `(${prefix}${start.join("|")})` : start.join("|");
          }
          return toRegexRange(start, end, options);
        }, "toRegex");
        var rangeError = /* @__PURE__ */ __name((...args) => {
          return new RangeError("Invalid range arguments: " + util.inspect(...args));
        }, "rangeError");
        var invalidRange = /* @__PURE__ */ __name((start, end, options) => {
          if (options.strictRanges === true) throw rangeError([start, end]);
          return [];
        }, "invalidRange");
        var invalidStep = /* @__PURE__ */ __name((step, options) => {
          if (options.strictRanges === true) {
            throw new TypeError(`Expected step "${step}" to be a number`);
          }
          return [];
        }, "invalidStep");
        var fillNumbers = /* @__PURE__ */ __name((start, end, step = 1, options = {}) => {
          let a2 = Number(start);
          let b = Number(end);
          if (!Number.isInteger(a2) || !Number.isInteger(b)) {
            if (options.strictRanges === true) throw rangeError([start, end]);
            return [];
          }
          if (a2 === 0) a2 = 0;
          if (b === 0) b = 0;
          let descending = a2 > b;
          let startString = String(start);
          let endString = String(end);
          let stepString = String(step);
          step = Math.max(Math.abs(step), 1);
          let padded = zeros(startString) || zeros(endString) || zeros(stepString);
          let maxLen = padded ? Math.max(startString.length, endString.length, stepString.length) : 0;
          let toNumber = padded === false && stringify2(start, end, options) === false;
          let format = options.transform || transform(toNumber);
          if (options.toRegex && step === 1) {
            return toRange(toMaxLen(start, maxLen), toMaxLen(end, maxLen), true, options);
          }
          let parts = { negatives: [], positives: [] };
          let push = /* @__PURE__ */ __name((num) => parts[num < 0 ? "negatives" : "positives"].push(Math.abs(num)), "push");
          let range = [];
          let index = 0;
          while (descending ? a2 >= b : a2 <= b) {
            if (options.toRegex === true && step > 1) {
              push(a2);
            } else {
              range.push(pad(format(a2, index), maxLen, toNumber));
            }
            a2 = descending ? a2 - step : a2 + step;
            index++;
          }
          if (options.toRegex === true) {
            return step > 1 ? toSequence(parts, options) : toRegex(range, null, __spreadValues({ wrap: false }, options));
          }
          return range;
        }, "fillNumbers");
        var fillLetters = /* @__PURE__ */ __name((start, end, step = 1, options = {}) => {
          if (!isNumber(start) && start.length > 1 || !isNumber(end) && end.length > 1) {
            return invalidRange(start, end, options);
          }
          let format = options.transform || ((val) => String.fromCharCode(val));
          let a2 = `${start}`.charCodeAt(0);
          let b = `${end}`.charCodeAt(0);
          let descending = a2 > b;
          let min = Math.min(a2, b);
          let max = Math.max(a2, b);
          if (options.toRegex && step === 1) {
            return toRange(min, max, false, options);
          }
          let range = [];
          let index = 0;
          while (descending ? a2 >= b : a2 <= b) {
            range.push(format(a2, index));
            a2 = descending ? a2 - step : a2 + step;
            index++;
          }
          if (options.toRegex === true) {
            return toRegex(range, null, { wrap: false, options });
          }
          return range;
        }, "fillLetters");
        var fill = /* @__PURE__ */ __name((start, end, step, options = {}) => {
          if (end == null && isValidValue(start)) {
            return [start];
          }
          if (!isValidValue(start) || !isValidValue(end)) {
            return invalidRange(start, end, options);
          }
          if (typeof step === "function") {
            return fill(start, end, 1, { transform: step });
          }
          if (isObject(step)) {
            return fill(start, end, 0, step);
          }
          let opts = __spreadValues({}, options);
          if (opts.capture === true) opts.wrap = true;
          step = step || opts.step || 1;
          if (!isNumber(step)) {
            if (step != null && !isObject(step)) return invalidStep(step, opts);
            return fill(start, end, 1, step);
          }
          if (isNumber(start) && isNumber(end)) {
            return fillNumbers(start, end, step, opts);
          }
          return fillLetters(start, end, Math.max(Math.abs(step), 1), opts);
        }, "fill");
        module2.exports = fill;
      }
    });
    var require_compile2 = __commonJS2({
      "node_modules/braces/lib/compile.js"(exports2, module2) {
        "use strict";
        var fill = require_fill_range();
        var utils = require_utils4();
        var compile = /* @__PURE__ */ __name((ast, options = {}) => {
          let walk = /* @__PURE__ */ __name((node, parent = {}) => {
            let invalidBlock = utils.isInvalidBrace(parent);
            let invalidNode = node.invalid === true && options.escapeInvalid === true;
            let invalid = invalidBlock === true || invalidNode === true;
            let prefix = options.escapeInvalid === true ? "\\" : "";
            let output = "";
            if (node.isOpen === true) {
              return prefix + node.value;
            }
            if (node.isClose === true) {
              return prefix + node.value;
            }
            if (node.type === "open") {
              return invalid ? prefix + node.value : "(";
            }
            if (node.type === "close") {
              return invalid ? prefix + node.value : ")";
            }
            if (node.type === "comma") {
              return node.prev.type === "comma" ? "" : invalid ? node.value : "|";
            }
            if (node.value) {
              return node.value;
            }
            if (node.nodes && node.ranges > 0) {
              let args = utils.reduce(node.nodes);
              let range = fill(...args, __spreadProps(__spreadValues({}, options), { wrap: false, toRegex: true }));
              if (range.length !== 0) {
                return args.length > 1 && range.length > 1 ? `(${range})` : range;
              }
            }
            if (node.nodes) {
              for (let child of node.nodes) {
                output += walk(child, node);
              }
            }
            return output;
          }, "walk");
          return walk(ast);
        }, "compile");
        module2.exports = compile;
      }
    });
    var require_expand = __commonJS2({
      "node_modules/braces/lib/expand.js"(exports2, module2) {
        "use strict";
        var fill = require_fill_range();
        var stringify2 = require_stringify2();
        var utils = require_utils4();
        var append = /* @__PURE__ */ __name((queue = "", stash = "", enclose = false) => {
          let result = [];
          queue = [].concat(queue);
          stash = [].concat(stash);
          if (!stash.length) return queue;
          if (!queue.length) {
            return enclose ? utils.flatten(stash).map((ele) => `{${ele}}`) : stash;
          }
          for (let item of queue) {
            if (Array.isArray(item)) {
              for (let value of item) {
                result.push(append(value, stash, enclose));
              }
            } else {
              for (let ele of stash) {
                if (enclose === true && typeof ele === "string") ele = `{${ele}}`;
                result.push(Array.isArray(ele) ? append(item, ele, enclose) : item + ele);
              }
            }
          }
          return utils.flatten(result);
        }, "append");
        var expand = /* @__PURE__ */ __name((ast, options = {}) => {
          let rangeLimit = options.rangeLimit === void 0 ? 1e3 : options.rangeLimit;
          let walk = /* @__PURE__ */ __name((node, parent = {}) => {
            node.queue = [];
            let p = parent;
            let q = parent.queue;
            while (p.type !== "brace" && p.type !== "root" && p.parent) {
              p = p.parent;
              q = p.queue;
            }
            if (node.invalid || node.dollar) {
              q.push(append(q.pop(), stringify2(node, options)));
              return;
            }
            if (node.type === "brace" && node.invalid !== true && node.nodes.length === 2) {
              q.push(append(q.pop(), ["{}"]));
              return;
            }
            if (node.nodes && node.ranges > 0) {
              let args = utils.reduce(node.nodes);
              if (utils.exceedsLimit(...args, options.step, rangeLimit)) {
                throw new RangeError("expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.");
              }
              let range = fill(...args, options);
              if (range.length === 0) {
                range = stringify2(node, options);
              }
              q.push(append(q.pop(), range));
              node.nodes = [];
              return;
            }
            let enclose = utils.encloseBrace(node);
            let queue = node.queue;
            let block = node;
            while (block.type !== "brace" && block.type !== "root" && block.parent) {
              block = block.parent;
              queue = block.queue;
            }
            for (let i = 0; i < node.nodes.length; i++) {
              let child = node.nodes[i];
              if (child.type === "comma" && node.type === "brace") {
                if (i === 1) queue.push("");
                queue.push("");
                continue;
              }
              if (child.type === "close") {
                q.push(append(q.pop(), queue, enclose));
                continue;
              }
              if (child.value && child.type !== "open") {
                queue.push(append(queue.pop(), child.value));
                continue;
              }
              if (child.nodes) {
                walk(child, node);
              }
            }
            return queue;
          }, "walk");
          return utils.flatten(walk(ast));
        }, "expand");
        module2.exports = expand;
      }
    });
    var require_constants6 = __commonJS2({
      "node_modules/braces/lib/constants.js"(exports2, module2) {
        "use strict";
        module2.exports = {
          MAX_LENGTH: 1024 * 64,
          // Digits
          CHAR_0: "0",
          /* 0 */
          CHAR_9: "9",
          /* 9 */
          // Alphabet chars.
          CHAR_UPPERCASE_A: "A",
          /* A */
          CHAR_LOWERCASE_A: "a",
          /* a */
          CHAR_UPPERCASE_Z: "Z",
          /* Z */
          CHAR_LOWERCASE_Z: "z",
          /* z */
          CHAR_LEFT_PARENTHESES: "(",
          /* ( */
          CHAR_RIGHT_PARENTHESES: ")",
          /* ) */
          CHAR_ASTERISK: "*",
          /* * */
          // Non-alphabetic chars.
          CHAR_AMPERSAND: "&",
          /* & */
          CHAR_AT: "@",
          /* @ */
          CHAR_BACKSLASH: "\\",
          /* \ */
          CHAR_BACKTICK: "`",
          /* ` */
          CHAR_CARRIAGE_RETURN: "\r",
          /* \r */
          CHAR_CIRCUMFLEX_ACCENT: "^",
          /* ^ */
          CHAR_COLON: ":",
          /* : */
          CHAR_COMMA: ",",
          /* , */
          CHAR_DOLLAR: "$",
          /* . */
          CHAR_DOT: ".",
          /* . */
          CHAR_DOUBLE_QUOTE: '"',
          /* " */
          CHAR_EQUAL: "=",
          /* = */
          CHAR_EXCLAMATION_MARK: "!",
          /* ! */
          CHAR_FORM_FEED: "\f",
          /* \f */
          CHAR_FORWARD_SLASH: "/",
          /* / */
          CHAR_HASH: "#",
          /* # */
          CHAR_HYPHEN_MINUS: "-",
          /* - */
          CHAR_LEFT_ANGLE_BRACKET: "<",
          /* < */
          CHAR_LEFT_CURLY_BRACE: "{",
          /* { */
          CHAR_LEFT_SQUARE_BRACKET: "[",
          /* [ */
          CHAR_LINE_FEED: "\n",
          /* \n */
          CHAR_NO_BREAK_SPACE: "\xA0",
          /* \u00A0 */
          CHAR_PERCENT: "%",
          /* % */
          CHAR_PLUS: "+",
          /* + */
          CHAR_QUESTION_MARK: "?",
          /* ? */
          CHAR_RIGHT_ANGLE_BRACKET: ">",
          /* > */
          CHAR_RIGHT_CURLY_BRACE: "}",
          /* } */
          CHAR_RIGHT_SQUARE_BRACKET: "]",
          /* ] */
          CHAR_SEMICOLON: ";",
          /* ; */
          CHAR_SINGLE_QUOTE: "'",
          /* ' */
          CHAR_SPACE: " ",
          /*   */
          CHAR_TAB: "	",
          /* \t */
          CHAR_UNDERSCORE: "_",
          /* _ */
          CHAR_VERTICAL_LINE: "|",
          /* | */
          CHAR_ZERO_WIDTH_NOBREAK_SPACE: "\uFEFF"
          /* \uFEFF */
        };
      }
    });
    var require_parse2 = __commonJS2({
      "node_modules/braces/lib/parse.js"(exports2, module2) {
        "use strict";
        var stringify2 = require_stringify2();
        var {
          MAX_LENGTH,
          CHAR_BACKSLASH,
          /* \ */
          CHAR_BACKTICK,
          /* ` */
          CHAR_COMMA,
          /* , */
          CHAR_DOT,
          /* . */
          CHAR_LEFT_PARENTHESES,
          /* ( */
          CHAR_RIGHT_PARENTHESES,
          /* ) */
          CHAR_LEFT_CURLY_BRACE,
          /* { */
          CHAR_RIGHT_CURLY_BRACE,
          /* } */
          CHAR_LEFT_SQUARE_BRACKET,
          /* [ */
          CHAR_RIGHT_SQUARE_BRACKET,
          /* ] */
          CHAR_DOUBLE_QUOTE,
          /* " */
          CHAR_SINGLE_QUOTE,
          /* ' */
          CHAR_NO_BREAK_SPACE,
          CHAR_ZERO_WIDTH_NOBREAK_SPACE
        } = require_constants6();
        var parse22 = /* @__PURE__ */ __name((input, options = {}) => {
          if (typeof input !== "string") {
            throw new TypeError("Expected a string");
          }
          let opts = options || {};
          let max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
          if (input.length > max) {
            throw new SyntaxError(`Input length (${input.length}), exceeds max characters (${max})`);
          }
          let ast = { type: "root", input, nodes: [] };
          let stack = [ast];
          let block = ast;
          let prev = ast;
          let brackets = 0;
          let length = input.length;
          let index = 0;
          let depth = 0;
          let value;
          let memo = {};
          const advance = /* @__PURE__ */ __name(() => input[index++], "advance");
          const push = /* @__PURE__ */ __name((node) => {
            if (node.type === "text" && prev.type === "dot") {
              prev.type = "text";
            }
            if (prev && prev.type === "text" && node.type === "text") {
              prev.value += node.value;
              return;
            }
            block.nodes.push(node);
            node.parent = block;
            node.prev = prev;
            prev = node;
            return node;
          }, "push");
          push({ type: "bos" });
          while (index < length) {
            block = stack[stack.length - 1];
            value = advance();
            if (value === CHAR_ZERO_WIDTH_NOBREAK_SPACE || value === CHAR_NO_BREAK_SPACE) {
              continue;
            }
            if (value === CHAR_BACKSLASH) {
              push({ type: "text", value: (options.keepEscaping ? value : "") + advance() });
              continue;
            }
            if (value === CHAR_RIGHT_SQUARE_BRACKET) {
              push({ type: "text", value: "\\" + value });
              continue;
            }
            if (value === CHAR_LEFT_SQUARE_BRACKET) {
              brackets++;
              let closed = true;
              let next;
              while (index < length && (next = advance())) {
                value += next;
                if (next === CHAR_LEFT_SQUARE_BRACKET) {
                  brackets++;
                  continue;
                }
                if (next === CHAR_BACKSLASH) {
                  value += advance();
                  continue;
                }
                if (next === CHAR_RIGHT_SQUARE_BRACKET) {
                  brackets--;
                  if (brackets === 0) {
                    break;
                  }
                }
              }
              push({ type: "text", value });
              continue;
            }
            if (value === CHAR_LEFT_PARENTHESES) {
              block = push({ type: "paren", nodes: [] });
              stack.push(block);
              push({ type: "text", value });
              continue;
            }
            if (value === CHAR_RIGHT_PARENTHESES) {
              if (block.type !== "paren") {
                push({ type: "text", value });
                continue;
              }
              block = stack.pop();
              push({ type: "text", value });
              block = stack[stack.length - 1];
              continue;
            }
            if (value === CHAR_DOUBLE_QUOTE || value === CHAR_SINGLE_QUOTE || value === CHAR_BACKTICK) {
              let open = value;
              let next;
              if (options.keepQuotes !== true) {
                value = "";
              }
              while (index < length && (next = advance())) {
                if (next === CHAR_BACKSLASH) {
                  value += next + advance();
                  continue;
                }
                if (next === open) {
                  if (options.keepQuotes === true) value += next;
                  break;
                }
                value += next;
              }
              push({ type: "text", value });
              continue;
            }
            if (value === CHAR_LEFT_CURLY_BRACE) {
              depth++;
              let dollar = prev.value && prev.value.slice(-1) === "$" || block.dollar === true;
              let brace = {
                type: "brace",
                open: true,
                close: false,
                dollar,
                depth,
                commas: 0,
                ranges: 0,
                nodes: []
              };
              block = push(brace);
              stack.push(block);
              push({ type: "open", value });
              continue;
            }
            if (value === CHAR_RIGHT_CURLY_BRACE) {
              if (block.type !== "brace") {
                push({ type: "text", value });
                continue;
              }
              let type = "close";
              block = stack.pop();
              block.close = true;
              push({ type, value });
              depth--;
              block = stack[stack.length - 1];
              continue;
            }
            if (value === CHAR_COMMA && depth > 0) {
              if (block.ranges > 0) {
                block.ranges = 0;
                let open = block.nodes.shift();
                block.nodes = [open, { type: "text", value: stringify2(block) }];
              }
              push({ type: "comma", value });
              block.commas++;
              continue;
            }
            if (value === CHAR_DOT && depth > 0 && block.commas === 0) {
              let siblings = block.nodes;
              if (depth === 0 || siblings.length === 0) {
                push({ type: "text", value });
                continue;
              }
              if (prev.type === "dot") {
                block.range = [];
                prev.value += value;
                prev.type = "range";
                if (block.nodes.length !== 3 && block.nodes.length !== 5) {
                  block.invalid = true;
                  block.ranges = 0;
                  prev.type = "text";
                  continue;
                }
                block.ranges++;
                block.args = [];
                continue;
              }
              if (prev.type === "range") {
                siblings.pop();
                let before = siblings[siblings.length - 1];
                before.value += prev.value + value;
                prev = before;
                block.ranges--;
                continue;
              }
              push({ type: "dot", value });
              continue;
            }
            push({ type: "text", value });
          }
          do {
            block = stack.pop();
            if (block.type !== "root") {
              block.nodes.forEach((node) => {
                if (!node.nodes) {
                  if (node.type === "open") node.isOpen = true;
                  if (node.type === "close") node.isClose = true;
                  if (!node.nodes) node.type = "text";
                  node.invalid = true;
                }
              });
              let parent = stack[stack.length - 1];
              let index2 = parent.nodes.indexOf(block);
              parent.nodes.splice(index2, 1, ...block.nodes);
            }
          } while (stack.length > 0);
          push({ type: "eos" });
          return ast;
        }, "parse2");
        module2.exports = parse22;
      }
    });
    var require_braces = __commonJS2({
      "node_modules/braces/index.js"(exports2, module2) {
        "use strict";
        var stringify2 = require_stringify2();
        var compile = require_compile2();
        var expand = require_expand();
        var parse22 = require_parse2();
        var braces = /* @__PURE__ */ __name((input, options = {}) => {
          let output = [];
          if (Array.isArray(input)) {
            for (let pattern of input) {
              let result = braces.create(pattern, options);
              if (Array.isArray(result)) {
                output.push(...result);
              } else {
                output.push(result);
              }
            }
          } else {
            output = [].concat(braces.create(input, options));
          }
          if (options && options.expand === true && options.nodupes === true) {
            output = [...new Set(output)];
          }
          return output;
        }, "braces");
        braces.parse = (input, options = {}) => parse22(input, options);
        braces.stringify = (input, options = {}) => {
          if (typeof input === "string") {
            return stringify2(braces.parse(input, options), options);
          }
          return stringify2(input, options);
        };
        braces.compile = (input, options = {}) => {
          if (typeof input === "string") {
            input = braces.parse(input, options);
          }
          return compile(input, options);
        };
        braces.expand = (input, options = {}) => {
          if (typeof input === "string") {
            input = braces.parse(input, options);
          }
          let result = expand(input, options);
          if (options.noempty === true) {
            result = result.filter(Boolean);
          }
          if (options.nodupes === true) {
            result = [...new Set(result)];
          }
          return result;
        };
        braces.create = (input, options = {}) => {
          if (input === "" || input.length < 3) {
            return [input];
          }
          return options.expand !== true ? braces.compile(input, options) : braces.expand(input, options);
        };
        module2.exports = braces;
      }
    });
    var require_constants22 = __commonJS2({
      "node_modules/picomatch/lib/constants.js"(exports2, module2) {
        "use strict";
        var path22 = __require("path");
        var WIN_SLASH = "\\\\/";
        var WIN_NO_SLASH = `[^${WIN_SLASH}]`;
        var DOT_LITERAL = "\\.";
        var PLUS_LITERAL = "\\+";
        var QMARK_LITERAL = "\\?";
        var SLASH_LITERAL = "\\/";
        var ONE_CHAR = "(?=.)";
        var QMARK = "[^/]";
        var END_ANCHOR = `(?:${SLASH_LITERAL}|$)`;
        var START_ANCHOR = `(?:^|${SLASH_LITERAL})`;
        var DOTS_SLASH = `${DOT_LITERAL}{1,2}${END_ANCHOR}`;
        var NO_DOT = `(?!${DOT_LITERAL})`;
        var NO_DOTS = `(?!${START_ANCHOR}${DOTS_SLASH})`;
        var NO_DOT_SLASH = `(?!${DOT_LITERAL}{0,1}${END_ANCHOR})`;
        var NO_DOTS_SLASH = `(?!${DOTS_SLASH})`;
        var QMARK_NO_DOT = `[^.${SLASH_LITERAL}]`;
        var STAR = `${QMARK}*?`;
        var POSIX_CHARS = {
          DOT_LITERAL,
          PLUS_LITERAL,
          QMARK_LITERAL,
          SLASH_LITERAL,
          ONE_CHAR,
          QMARK,
          END_ANCHOR,
          DOTS_SLASH,
          NO_DOT,
          NO_DOTS,
          NO_DOT_SLASH,
          NO_DOTS_SLASH,
          QMARK_NO_DOT,
          STAR,
          START_ANCHOR
        };
        var WINDOWS_CHARS = __spreadProps(__spreadValues({}, POSIX_CHARS), {
          SLASH_LITERAL: `[${WIN_SLASH}]`,
          QMARK: WIN_NO_SLASH,
          STAR: `${WIN_NO_SLASH}*?`,
          DOTS_SLASH: `${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$)`,
          NO_DOT: `(?!${DOT_LITERAL})`,
          NO_DOTS: `(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
          NO_DOT_SLASH: `(?!${DOT_LITERAL}{0,1}(?:[${WIN_SLASH}]|$))`,
          NO_DOTS_SLASH: `(?!${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
          QMARK_NO_DOT: `[^.${WIN_SLASH}]`,
          START_ANCHOR: `(?:^|[${WIN_SLASH}])`,
          END_ANCHOR: `(?:[${WIN_SLASH}]|$)`
        });
        var POSIX_REGEX_SOURCE = {
          alnum: "a-zA-Z0-9",
          alpha: "a-zA-Z",
          ascii: "\\x00-\\x7F",
          blank: " \\t",
          cntrl: "\\x00-\\x1F\\x7F",
          digit: "0-9",
          graph: "\\x21-\\x7E",
          lower: "a-z",
          print: "\\x20-\\x7E ",
          punct: "\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",
          space: " \\t\\r\\n\\v\\f",
          upper: "A-Z",
          word: "A-Za-z0-9_",
          xdigit: "A-Fa-f0-9"
        };
        module2.exports = {
          MAX_LENGTH: 1024 * 64,
          POSIX_REGEX_SOURCE,
          // regular expressions
          REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g,
          REGEX_NON_SPECIAL_CHARS: /^[^@![\].,$*+?^{}()|\\/]+/,
          REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/,
          REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g,
          REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g,
          REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g,
          // Replace globs with equivalent patterns to reduce parsing time.
          REPLACEMENTS: {
            "***": "*",
            "**/**": "**",
            "**/**/**": "**"
          },
          // Digits
          CHAR_0: 48,
          /* 0 */
          CHAR_9: 57,
          /* 9 */
          // Alphabet chars.
          CHAR_UPPERCASE_A: 65,
          /* A */
          CHAR_LOWERCASE_A: 97,
          /* a */
          CHAR_UPPERCASE_Z: 90,
          /* Z */
          CHAR_LOWERCASE_Z: 122,
          /* z */
          CHAR_LEFT_PARENTHESES: 40,
          /* ( */
          CHAR_RIGHT_PARENTHESES: 41,
          /* ) */
          CHAR_ASTERISK: 42,
          /* * */
          // Non-alphabetic chars.
          CHAR_AMPERSAND: 38,
          /* & */
          CHAR_AT: 64,
          /* @ */
          CHAR_BACKWARD_SLASH: 92,
          /* \ */
          CHAR_CARRIAGE_RETURN: 13,
          /* \r */
          CHAR_CIRCUMFLEX_ACCENT: 94,
          /* ^ */
          CHAR_COLON: 58,
          /* : */
          CHAR_COMMA: 44,
          /* , */
          CHAR_DOT: 46,
          /* . */
          CHAR_DOUBLE_QUOTE: 34,
          /* " */
          CHAR_EQUAL: 61,
          /* = */
          CHAR_EXCLAMATION_MARK: 33,
          /* ! */
          CHAR_FORM_FEED: 12,
          /* \f */
          CHAR_FORWARD_SLASH: 47,
          /* / */
          CHAR_GRAVE_ACCENT: 96,
          /* ` */
          CHAR_HASH: 35,
          /* # */
          CHAR_HYPHEN_MINUS: 45,
          /* - */
          CHAR_LEFT_ANGLE_BRACKET: 60,
          /* < */
          CHAR_LEFT_CURLY_BRACE: 123,
          /* { */
          CHAR_LEFT_SQUARE_BRACKET: 91,
          /* [ */
          CHAR_LINE_FEED: 10,
          /* \n */
          CHAR_NO_BREAK_SPACE: 160,
          /* \u00A0 */
          CHAR_PERCENT: 37,
          /* % */
          CHAR_PLUS: 43,
          /* + */
          CHAR_QUESTION_MARK: 63,
          /* ? */
          CHAR_RIGHT_ANGLE_BRACKET: 62,
          /* > */
          CHAR_RIGHT_CURLY_BRACE: 125,
          /* } */
          CHAR_RIGHT_SQUARE_BRACKET: 93,
          /* ] */
          CHAR_SEMICOLON: 59,
          /* ; */
          CHAR_SINGLE_QUOTE: 39,
          /* ' */
          CHAR_SPACE: 32,
          /*   */
          CHAR_TAB: 9,
          /* \t */
          CHAR_UNDERSCORE: 95,
          /* _ */
          CHAR_VERTICAL_LINE: 124,
          /* | */
          CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279,
          /* \uFEFF */
          SEP: path22.sep,
          /**
           * Create EXTGLOB_CHARS
           */
          extglobChars(chars) {
            return {
              "!": { type: "negate", open: "(?:(?!(?:", close: `))${chars.STAR})` },
              "?": { type: "qmark", open: "(?:", close: ")?" },
              "+": { type: "plus", open: "(?:", close: ")+" },
              "*": { type: "star", open: "(?:", close: ")*" },
              "@": { type: "at", open: "(?:", close: ")" }
            };
          },
          /**
           * Create GLOB_CHARS
           */
          globChars(win32) {
            return win32 === true ? WINDOWS_CHARS : POSIX_CHARS;
          }
        };
      }
    });
    var require_utils22 = __commonJS2({
      "node_modules/picomatch/lib/utils.js"(exports2) {
        "use strict";
        var path22 = __require("path");
        var win32 = process.platform === "win32";
        var {
          REGEX_BACKSLASH,
          REGEX_REMOVE_BACKSLASH,
          REGEX_SPECIAL_CHARS,
          REGEX_SPECIAL_CHARS_GLOBAL
        } = require_constants22();
        exports2.isObject = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
        exports2.hasRegexChars = (str) => REGEX_SPECIAL_CHARS.test(str);
        exports2.isRegexChar = (str) => str.length === 1 && exports2.hasRegexChars(str);
        exports2.escapeRegex = (str) => str.replace(REGEX_SPECIAL_CHARS_GLOBAL, "\\$1");
        exports2.toPosixSlashes = (str) => str.replace(REGEX_BACKSLASH, "/");
        exports2.removeBackslashes = (str) => {
          return str.replace(REGEX_REMOVE_BACKSLASH, (match) => {
            return match === "\\" ? "" : match;
          });
        };
        exports2.supportsLookbehinds = () => {
          const segs = process.version.slice(1).split(".").map(Number);
          if (segs.length === 3 && segs[0] >= 9 || segs[0] === 8 && segs[1] >= 10) {
            return true;
          }
          return false;
        };
        exports2.isWindows = (options) => {
          if (options && typeof options.windows === "boolean") {
            return options.windows;
          }
          return win32 === true || path22.sep === "\\";
        };
        exports2.escapeLast = (input, char, lastIdx) => {
          const idx = input.lastIndexOf(char, lastIdx);
          if (idx === -1) return input;
          if (input[idx - 1] === "\\") return exports2.escapeLast(input, char, idx - 1);
          return `${input.slice(0, idx)}\\${input.slice(idx)}`;
        };
        exports2.removePrefix = (input, state = {}) => {
          let output = input;
          if (output.startsWith("./")) {
            output = output.slice(2);
            state.prefix = "./";
          }
          return output;
        };
        exports2.wrapOutput = (input, state = {}, options = {}) => {
          const prepend = options.contains ? "" : "^";
          const append = options.contains ? "" : "$";
          let output = `${prepend}(?:${input})${append}`;
          if (state.negated === true) {
            output = `(?:^(?!${output}).*$)`;
          }
          return output;
        };
      }
    });
    var require_scan = __commonJS2({
      "node_modules/picomatch/lib/scan.js"(exports2, module2) {
        "use strict";
        var utils = require_utils22();
        var {
          CHAR_ASTERISK,
          /* * */
          CHAR_AT,
          /* @ */
          CHAR_BACKWARD_SLASH,
          /* \ */
          CHAR_COMMA,
          /* , */
          CHAR_DOT,
          /* . */
          CHAR_EXCLAMATION_MARK,
          /* ! */
          CHAR_FORWARD_SLASH,
          /* / */
          CHAR_LEFT_CURLY_BRACE,
          /* { */
          CHAR_LEFT_PARENTHESES,
          /* ( */
          CHAR_LEFT_SQUARE_BRACKET,
          /* [ */
          CHAR_PLUS,
          /* + */
          CHAR_QUESTION_MARK,
          /* ? */
          CHAR_RIGHT_CURLY_BRACE,
          /* } */
          CHAR_RIGHT_PARENTHESES,
          /* ) */
          CHAR_RIGHT_SQUARE_BRACKET
          /* ] */
        } = require_constants22();
        var isPathSeparator = /* @__PURE__ */ __name((code) => {
          return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;
        }, "isPathSeparator");
        var depth = /* @__PURE__ */ __name((token) => {
          if (token.isPrefix !== true) {
            token.depth = token.isGlobstar ? Infinity : 1;
          }
        }, "depth");
        var scan = /* @__PURE__ */ __name((input, options) => {
          const opts = options || {};
          const length = input.length - 1;
          const scanToEnd = opts.parts === true || opts.scanToEnd === true;
          const slashes = [];
          const tokens = [];
          const parts = [];
          let str = input;
          let index = -1;
          let start = 0;
          let lastIndex = 0;
          let isBrace = false;
          let isBracket = false;
          let isGlob = false;
          let isExtglob = false;
          let isGlobstar = false;
          let braceEscaped = false;
          let backslashes = false;
          let negated = false;
          let negatedExtglob = false;
          let finished2 = false;
          let braces = 0;
          let prev;
          let code;
          let token = { value: "", depth: 0, isGlob: false };
          const eos = /* @__PURE__ */ __name(() => index >= length, "eos");
          const peek = /* @__PURE__ */ __name(() => str.charCodeAt(index + 1), "peek");
          const advance = /* @__PURE__ */ __name(() => {
            prev = code;
            return str.charCodeAt(++index);
          }, "advance");
          while (index < length) {
            code = advance();
            let next;
            if (code === CHAR_BACKWARD_SLASH) {
              backslashes = token.backslashes = true;
              code = advance();
              if (code === CHAR_LEFT_CURLY_BRACE) {
                braceEscaped = true;
              }
              continue;
            }
            if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE) {
              braces++;
              while (eos() !== true && (code = advance())) {
                if (code === CHAR_BACKWARD_SLASH) {
                  backslashes = token.backslashes = true;
                  advance();
                  continue;
                }
                if (code === CHAR_LEFT_CURLY_BRACE) {
                  braces++;
                  continue;
                }
                if (braceEscaped !== true && code === CHAR_DOT && (code = advance()) === CHAR_DOT) {
                  isBrace = token.isBrace = true;
                  isGlob = token.isGlob = true;
                  finished2 = true;
                  if (scanToEnd === true) {
                    continue;
                  }
                  break;
                }
                if (braceEscaped !== true && code === CHAR_COMMA) {
                  isBrace = token.isBrace = true;
                  isGlob = token.isGlob = true;
                  finished2 = true;
                  if (scanToEnd === true) {
                    continue;
                  }
                  break;
                }
                if (code === CHAR_RIGHT_CURLY_BRACE) {
                  braces--;
                  if (braces === 0) {
                    braceEscaped = false;
                    isBrace = token.isBrace = true;
                    finished2 = true;
                    break;
                  }
                }
              }
              if (scanToEnd === true) {
                continue;
              }
              break;
            }
            if (code === CHAR_FORWARD_SLASH) {
              slashes.push(index);
              tokens.push(token);
              token = { value: "", depth: 0, isGlob: false };
              if (finished2 === true) continue;
              if (prev === CHAR_DOT && index === start + 1) {
                start += 2;
                continue;
              }
              lastIndex = index + 1;
              continue;
            }
            if (opts.noext !== true) {
              const isExtglobChar = code === CHAR_PLUS || code === CHAR_AT || code === CHAR_ASTERISK || code === CHAR_QUESTION_MARK || code === CHAR_EXCLAMATION_MARK;
              if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES) {
                isGlob = token.isGlob = true;
                isExtglob = token.isExtglob = true;
                finished2 = true;
                if (code === CHAR_EXCLAMATION_MARK && index === start) {
                  negatedExtglob = true;
                }
                if (scanToEnd === true) {
                  while (eos() !== true && (code = advance())) {
                    if (code === CHAR_BACKWARD_SLASH) {
                      backslashes = token.backslashes = true;
                      code = advance();
                      continue;
                    }
                    if (code === CHAR_RIGHT_PARENTHESES) {
                      isGlob = token.isGlob = true;
                      finished2 = true;
                      break;
                    }
                  }
                  continue;
                }
                break;
              }
            }
            if (code === CHAR_ASTERISK) {
              if (prev === CHAR_ASTERISK) isGlobstar = token.isGlobstar = true;
              isGlob = token.isGlob = true;
              finished2 = true;
              if (scanToEnd === true) {
                continue;
              }
              break;
            }
            if (code === CHAR_QUESTION_MARK) {
              isGlob = token.isGlob = true;
              finished2 = true;
              if (scanToEnd === true) {
                continue;
              }
              break;
            }
            if (code === CHAR_LEFT_SQUARE_BRACKET) {
              while (eos() !== true && (next = advance())) {
                if (next === CHAR_BACKWARD_SLASH) {
                  backslashes = token.backslashes = true;
                  advance();
                  continue;
                }
                if (next === CHAR_RIGHT_SQUARE_BRACKET) {
                  isBracket = token.isBracket = true;
                  isGlob = token.isGlob = true;
                  finished2 = true;
                  break;
                }
              }
              if (scanToEnd === true) {
                continue;
              }
              break;
            }
            if (opts.nonegate !== true && code === CHAR_EXCLAMATION_MARK && index === start) {
              negated = token.negated = true;
              start++;
              continue;
            }
            if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES) {
              isGlob = token.isGlob = true;
              if (scanToEnd === true) {
                while (eos() !== true && (code = advance())) {
                  if (code === CHAR_LEFT_PARENTHESES) {
                    backslashes = token.backslashes = true;
                    code = advance();
                    continue;
                  }
                  if (code === CHAR_RIGHT_PARENTHESES) {
                    finished2 = true;
                    break;
                  }
                }
                continue;
              }
              break;
            }
            if (isGlob === true) {
              finished2 = true;
              if (scanToEnd === true) {
                continue;
              }
              break;
            }
          }
          if (opts.noext === true) {
            isExtglob = false;
            isGlob = false;
          }
          let base = str;
          let prefix = "";
          let glob22 = "";
          if (start > 0) {
            prefix = str.slice(0, start);
            str = str.slice(start);
            lastIndex -= start;
          }
          if (base && isGlob === true && lastIndex > 0) {
            base = str.slice(0, lastIndex);
            glob22 = str.slice(lastIndex);
          } else if (isGlob === true) {
            base = "";
            glob22 = str;
          } else {
            base = str;
          }
          if (base && base !== "" && base !== "/" && base !== str) {
            if (isPathSeparator(base.charCodeAt(base.length - 1))) {
              base = base.slice(0, -1);
            }
          }
          if (opts.unescape === true) {
            if (glob22) glob22 = utils.removeBackslashes(glob22);
            if (base && backslashes === true) {
              base = utils.removeBackslashes(base);
            }
          }
          const state = {
            prefix,
            input,
            start,
            base,
            glob: glob22,
            isBrace,
            isBracket,
            isGlob,
            isExtglob,
            isGlobstar,
            negated,
            negatedExtglob
          };
          if (opts.tokens === true) {
            state.maxDepth = 0;
            if (!isPathSeparator(code)) {
              tokens.push(token);
            }
            state.tokens = tokens;
          }
          if (opts.parts === true || opts.tokens === true) {
            let prevIndex;
            for (let idx = 0; idx < slashes.length; idx++) {
              const n3 = prevIndex ? prevIndex + 1 : start;
              const i = slashes[idx];
              const value = input.slice(n3, i);
              if (opts.tokens) {
                if (idx === 0 && start !== 0) {
                  tokens[idx].isPrefix = true;
                  tokens[idx].value = prefix;
                } else {
                  tokens[idx].value = value;
                }
                depth(tokens[idx]);
                state.maxDepth += tokens[idx].depth;
              }
              if (idx !== 0 || value !== "") {
                parts.push(value);
              }
              prevIndex = i;
            }
            if (prevIndex && prevIndex + 1 < input.length) {
              const value = input.slice(prevIndex + 1);
              parts.push(value);
              if (opts.tokens) {
                tokens[tokens.length - 1].value = value;
                depth(tokens[tokens.length - 1]);
                state.maxDepth += tokens[tokens.length - 1].depth;
              }
            }
            state.slashes = slashes;
            state.parts = parts;
          }
          return state;
        }, "scan");
        module2.exports = scan;
      }
    });
    var require_parse22 = __commonJS2({
      "node_modules/picomatch/lib/parse.js"(exports2, module2) {
        "use strict";
        var constants = require_constants22();
        var utils = require_utils22();
        var {
          MAX_LENGTH,
          POSIX_REGEX_SOURCE,
          REGEX_NON_SPECIAL_CHARS,
          REGEX_SPECIAL_CHARS_BACKREF,
          REPLACEMENTS
        } = constants;
        var expandRange = /* @__PURE__ */ __name((args, options) => {
          if (typeof options.expandRange === "function") {
            return options.expandRange(...args, options);
          }
          args.sort();
          const value = `[${args.join("-")}]`;
          try {
            new RegExp(value);
          } catch (ex) {
            return args.map((v2) => utils.escapeRegex(v2)).join("..");
          }
          return value;
        }, "expandRange");
        var syntaxError = /* @__PURE__ */ __name((type, char) => {
          return `Missing ${type}: "${char}" - use "\\\\${char}" to match literal characters`;
        }, "syntaxError");
        var parse22 = /* @__PURE__ */ __name((input, options) => {
          if (typeof input !== "string") {
            throw new TypeError("Expected a string");
          }
          input = REPLACEMENTS[input] || input;
          const opts = __spreadValues({}, options);
          const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
          let len = input.length;
          if (len > max) {
            throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
          }
          const bos = { type: "bos", value: "", output: opts.prepend || "" };
          const tokens = [bos];
          const capture = opts.capture ? "" : "?:";
          const win32 = utils.isWindows(options);
          const PLATFORM_CHARS = constants.globChars(win32);
          const EXTGLOB_CHARS = constants.extglobChars(PLATFORM_CHARS);
          const {
            DOT_LITERAL,
            PLUS_LITERAL,
            SLASH_LITERAL,
            ONE_CHAR,
            DOTS_SLASH,
            NO_DOT,
            NO_DOT_SLASH,
            NO_DOTS_SLASH,
            QMARK,
            QMARK_NO_DOT,
            STAR,
            START_ANCHOR
          } = PLATFORM_CHARS;
          const globstar = /* @__PURE__ */ __name((opts2) => {
            return `(${capture}(?:(?!${START_ANCHOR}${opts2.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
          }, "globstar");
          const nodot = opts.dot ? "" : NO_DOT;
          const qmarkNoDot = opts.dot ? QMARK : QMARK_NO_DOT;
          let star = opts.bash === true ? globstar(opts) : STAR;
          if (opts.capture) {
            star = `(${star})`;
          }
          if (typeof opts.noext === "boolean") {
            opts.noextglob = opts.noext;
          }
          const state = {
            input,
            index: -1,
            start: 0,
            dot: opts.dot === true,
            consumed: "",
            output: "",
            prefix: "",
            backtrack: false,
            negated: false,
            brackets: 0,
            braces: 0,
            parens: 0,
            quotes: 0,
            globstar: false,
            tokens
          };
          input = utils.removePrefix(input, state);
          len = input.length;
          const extglobs = [];
          const braces = [];
          const stack = [];
          let prev = bos;
          let value;
          const eos = /* @__PURE__ */ __name(() => state.index === len - 1, "eos");
          const peek = state.peek = (n3 = 1) => input[state.index + n3];
          const advance = state.advance = () => input[++state.index] || "";
          const remaining = /* @__PURE__ */ __name(() => input.slice(state.index + 1), "remaining");
          const consume = /* @__PURE__ */ __name((value2 = "", num = 0) => {
            state.consumed += value2;
            state.index += num;
          }, "consume");
          const append = /* @__PURE__ */ __name((token) => {
            state.output += token.output != null ? token.output : token.value;
            consume(token.value);
          }, "append");
          const negate = /* @__PURE__ */ __name(() => {
            let count = 1;
            while (peek() === "!" && (peek(2) !== "(" || peek(3) === "?")) {
              advance();
              state.start++;
              count++;
            }
            if (count % 2 === 0) {
              return false;
            }
            state.negated = true;
            state.start++;
            return true;
          }, "negate");
          const increment = /* @__PURE__ */ __name((type) => {
            state[type]++;
            stack.push(type);
          }, "increment");
          const decrement = /* @__PURE__ */ __name((type) => {
            state[type]--;
            stack.pop();
          }, "decrement");
          const push = /* @__PURE__ */ __name((tok) => {
            if (prev.type === "globstar") {
              const isBrace = state.braces > 0 && (tok.type === "comma" || tok.type === "brace");
              const isExtglob = tok.extglob === true || extglobs.length && (tok.type === "pipe" || tok.type === "paren");
              if (tok.type !== "slash" && tok.type !== "paren" && !isBrace && !isExtglob) {
                state.output = state.output.slice(0, -prev.output.length);
                prev.type = "star";
                prev.value = "*";
                prev.output = star;
                state.output += prev.output;
              }
            }
            if (extglobs.length && tok.type !== "paren") {
              extglobs[extglobs.length - 1].inner += tok.value;
            }
            if (tok.value || tok.output) append(tok);
            if (prev && prev.type === "text" && tok.type === "text") {
              prev.value += tok.value;
              prev.output = (prev.output || "") + tok.value;
              return;
            }
            tok.prev = prev;
            tokens.push(tok);
            prev = tok;
          }, "push");
          const extglobOpen = /* @__PURE__ */ __name((type, value2) => {
            const token = __spreadProps(__spreadValues({}, EXTGLOB_CHARS[value2]), { conditions: 1, inner: "" });
            token.prev = prev;
            token.parens = state.parens;
            token.output = state.output;
            const output = (opts.capture ? "(" : "") + token.open;
            increment("parens");
            push({ type, value: value2, output: state.output ? "" : ONE_CHAR });
            push({ type: "paren", extglob: true, value: advance(), output });
            extglobs.push(token);
          }, "extglobOpen");
          const extglobClose = /* @__PURE__ */ __name((token) => {
            let output = token.close + (opts.capture ? ")" : "");
            let rest;
            if (token.type === "negate") {
              let extglobStar = star;
              if (token.inner && token.inner.length > 1 && token.inner.includes("/")) {
                extglobStar = globstar(opts);
              }
              if (extglobStar !== star || eos() || /^\)+$/.test(remaining())) {
                output = token.close = `)$))${extglobStar}`;
              }
              if (token.inner.includes("*") && (rest = remaining()) && /^\.[^\\/.]+$/.test(rest)) {
                const expression = parse22(rest, __spreadProps(__spreadValues({}, options), { fastpaths: false })).output;
                output = token.close = `)${expression})${extglobStar})`;
              }
              if (token.prev.type === "bos") {
                state.negatedExtglob = true;
              }
            }
            push({ type: "paren", extglob: true, value, output });
            decrement("parens");
          }, "extglobClose");
          if (opts.fastpaths !== false && !/(^[*!]|[/()[\]{}"])/.test(input)) {
            let backslashes = false;
            let output = input.replace(REGEX_SPECIAL_CHARS_BACKREF, (m2, esc, chars, first, rest, index) => {
              if (first === "\\") {
                backslashes = true;
                return m2;
              }
              if (first === "?") {
                if (esc) {
                  return esc + first + (rest ? QMARK.repeat(rest.length) : "");
                }
                if (index === 0) {
                  return qmarkNoDot + (rest ? QMARK.repeat(rest.length) : "");
                }
                return QMARK.repeat(chars.length);
              }
              if (first === ".") {
                return DOT_LITERAL.repeat(chars.length);
              }
              if (first === "*") {
                if (esc) {
                  return esc + first + (rest ? star : "");
                }
                return star;
              }
              return esc ? m2 : `\\${m2}`;
            });
            if (backslashes === true) {
              if (opts.unescape === true) {
                output = output.replace(/\\/g, "");
              } else {
                output = output.replace(/\\+/g, (m2) => {
                  return m2.length % 2 === 0 ? "\\\\" : m2 ? "\\" : "";
                });
              }
            }
            if (output === input && opts.contains === true) {
              state.output = input;
              return state;
            }
            state.output = utils.wrapOutput(output, state, options);
            return state;
          }
          while (!eos()) {
            value = advance();
            if (value === "\0") {
              continue;
            }
            if (value === "\\") {
              const next = peek();
              if (next === "/" && opts.bash !== true) {
                continue;
              }
              if (next === "." || next === ";") {
                continue;
              }
              if (!next) {
                value += "\\";
                push({ type: "text", value });
                continue;
              }
              const match = /^\\+/.exec(remaining());
              let slashes = 0;
              if (match && match[0].length > 2) {
                slashes = match[0].length;
                state.index += slashes;
                if (slashes % 2 !== 0) {
                  value += "\\";
                }
              }
              if (opts.unescape === true) {
                value = advance();
              } else {
                value += advance();
              }
              if (state.brackets === 0) {
                push({ type: "text", value });
                continue;
              }
            }
            if (state.brackets > 0 && (value !== "]" || prev.value === "[" || prev.value === "[^")) {
              if (opts.posix !== false && value === ":") {
                const inner = prev.value.slice(1);
                if (inner.includes("[")) {
                  prev.posix = true;
                  if (inner.includes(":")) {
                    const idx = prev.value.lastIndexOf("[");
                    const pre = prev.value.slice(0, idx);
                    const rest2 = prev.value.slice(idx + 2);
                    const posix = POSIX_REGEX_SOURCE[rest2];
                    if (posix) {
                      prev.value = pre + posix;
                      state.backtrack = true;
                      advance();
                      if (!bos.output && tokens.indexOf(prev) === 1) {
                        bos.output = ONE_CHAR;
                      }
                      continue;
                    }
                  }
                }
              }
              if (value === "[" && peek() !== ":" || value === "-" && peek() === "]") {
                value = `\\${value}`;
              }
              if (value === "]" && (prev.value === "[" || prev.value === "[^")) {
                value = `\\${value}`;
              }
              if (opts.posix === true && value === "!" && prev.value === "[") {
                value = "^";
              }
              prev.value += value;
              append({ value });
              continue;
            }
            if (state.quotes === 1 && value !== '"') {
              value = utils.escapeRegex(value);
              prev.value += value;
              append({ value });
              continue;
            }
            if (value === '"') {
              state.quotes = state.quotes === 1 ? 0 : 1;
              if (opts.keepQuotes === true) {
                push({ type: "text", value });
              }
              continue;
            }
            if (value === "(") {
              increment("parens");
              push({ type: "paren", value });
              continue;
            }
            if (value === ")") {
              if (state.parens === 0 && opts.strictBrackets === true) {
                throw new SyntaxError(syntaxError("opening", "("));
              }
              const extglob = extglobs[extglobs.length - 1];
              if (extglob && state.parens === extglob.parens + 1) {
                extglobClose(extglobs.pop());
                continue;
              }
              push({ type: "paren", value, output: state.parens ? ")" : "\\)" });
              decrement("parens");
              continue;
            }
            if (value === "[") {
              if (opts.nobracket === true || !remaining().includes("]")) {
                if (opts.nobracket !== true && opts.strictBrackets === true) {
                  throw new SyntaxError(syntaxError("closing", "]"));
                }
                value = `\\${value}`;
              } else {
                increment("brackets");
              }
              push({ type: "bracket", value });
              continue;
            }
            if (value === "]") {
              if (opts.nobracket === true || prev && prev.type === "bracket" && prev.value.length === 1) {
                push({ type: "text", value, output: `\\${value}` });
                continue;
              }
              if (state.brackets === 0) {
                if (opts.strictBrackets === true) {
                  throw new SyntaxError(syntaxError("opening", "["));
                }
                push({ type: "text", value, output: `\\${value}` });
                continue;
              }
              decrement("brackets");
              const prevValue = prev.value.slice(1);
              if (prev.posix !== true && prevValue[0] === "^" && !prevValue.includes("/")) {
                value = `/${value}`;
              }
              prev.value += value;
              append({ value });
              if (opts.literalBrackets === false || utils.hasRegexChars(prevValue)) {
                continue;
              }
              const escaped = utils.escapeRegex(prev.value);
              state.output = state.output.slice(0, -prev.value.length);
              if (opts.literalBrackets === true) {
                state.output += escaped;
                prev.value = escaped;
                continue;
              }
              prev.value = `(${capture}${escaped}|${prev.value})`;
              state.output += prev.value;
              continue;
            }
            if (value === "{" && opts.nobrace !== true) {
              increment("braces");
              const open = {
                type: "brace",
                value,
                output: "(",
                outputIndex: state.output.length,
                tokensIndex: state.tokens.length
              };
              braces.push(open);
              push(open);
              continue;
            }
            if (value === "}") {
              const brace = braces[braces.length - 1];
              if (opts.nobrace === true || !brace) {
                push({ type: "text", value, output: value });
                continue;
              }
              let output = ")";
              if (brace.dots === true) {
                const arr = tokens.slice();
                const range = [];
                for (let i = arr.length - 1; i >= 0; i--) {
                  tokens.pop();
                  if (arr[i].type === "brace") {
                    break;
                  }
                  if (arr[i].type !== "dots") {
                    range.unshift(arr[i].value);
                  }
                }
                output = expandRange(range, opts);
                state.backtrack = true;
              }
              if (brace.comma !== true && brace.dots !== true) {
                const out = state.output.slice(0, brace.outputIndex);
                const toks = state.tokens.slice(brace.tokensIndex);
                brace.value = brace.output = "\\{";
                value = output = "\\}";
                state.output = out;
                for (const t4 of toks) {
                  state.output += t4.output || t4.value;
                }
              }
              push({ type: "brace", value, output });
              decrement("braces");
              braces.pop();
              continue;
            }
            if (value === "|") {
              if (extglobs.length > 0) {
                extglobs[extglobs.length - 1].conditions++;
              }
              push({ type: "text", value });
              continue;
            }
            if (value === ",") {
              let output = value;
              const brace = braces[braces.length - 1];
              if (brace && stack[stack.length - 1] === "braces") {
                brace.comma = true;
                output = "|";
              }
              push({ type: "comma", value, output });
              continue;
            }
            if (value === "/") {
              if (prev.type === "dot" && state.index === state.start + 1) {
                state.start = state.index + 1;
                state.consumed = "";
                state.output = "";
                tokens.pop();
                prev = bos;
                continue;
              }
              push({ type: "slash", value, output: SLASH_LITERAL });
              continue;
            }
            if (value === ".") {
              if (state.braces > 0 && prev.type === "dot") {
                if (prev.value === ".") prev.output = DOT_LITERAL;
                const brace = braces[braces.length - 1];
                prev.type = "dots";
                prev.output += value;
                prev.value += value;
                brace.dots = true;
                continue;
              }
              if (state.braces + state.parens === 0 && prev.type !== "bos" && prev.type !== "slash") {
                push({ type: "text", value, output: DOT_LITERAL });
                continue;
              }
              push({ type: "dot", value, output: DOT_LITERAL });
              continue;
            }
            if (value === "?") {
              const isGroup = prev && prev.value === "(";
              if (!isGroup && opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
                extglobOpen("qmark", value);
                continue;
              }
              if (prev && prev.type === "paren") {
                const next = peek();
                let output = value;
                if (next === "<" && !utils.supportsLookbehinds()) {
                  throw new Error("Node.js v10 or higher is required for regex lookbehinds");
                }
                if (prev.value === "(" && !/[!=<:]/.test(next) || next === "<" && !/<([!=]|\w+>)/.test(remaining())) {
                  output = `\\${value}`;
                }
                push({ type: "text", value, output });
                continue;
              }
              if (opts.dot !== true && (prev.type === "slash" || prev.type === "bos")) {
                push({ type: "qmark", value, output: QMARK_NO_DOT });
                continue;
              }
              push({ type: "qmark", value, output: QMARK });
              continue;
            }
            if (value === "!") {
              if (opts.noextglob !== true && peek() === "(") {
                if (peek(2) !== "?" || !/[!=<:]/.test(peek(3))) {
                  extglobOpen("negate", value);
                  continue;
                }
              }
              if (opts.nonegate !== true && state.index === 0) {
                negate();
                continue;
              }
            }
            if (value === "+") {
              if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
                extglobOpen("plus", value);
                continue;
              }
              if (prev && prev.value === "(" || opts.regex === false) {
                push({ type: "plus", value, output: PLUS_LITERAL });
                continue;
              }
              if (prev && (prev.type === "bracket" || prev.type === "paren" || prev.type === "brace") || state.parens > 0) {
                push({ type: "plus", value });
                continue;
              }
              push({ type: "plus", value: PLUS_LITERAL });
              continue;
            }
            if (value === "@") {
              if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
                push({ type: "at", extglob: true, value, output: "" });
                continue;
              }
              push({ type: "text", value });
              continue;
            }
            if (value !== "*") {
              if (value === "$" || value === "^") {
                value = `\\${value}`;
              }
              const match = REGEX_NON_SPECIAL_CHARS.exec(remaining());
              if (match) {
                value += match[0];
                state.index += match[0].length;
              }
              push({ type: "text", value });
              continue;
            }
            if (prev && (prev.type === "globstar" || prev.star === true)) {
              prev.type = "star";
              prev.star = true;
              prev.value += value;
              prev.output = star;
              state.backtrack = true;
              state.globstar = true;
              consume(value);
              continue;
            }
            let rest = remaining();
            if (opts.noextglob !== true && /^\([^?]/.test(rest)) {
              extglobOpen("star", value);
              continue;
            }
            if (prev.type === "star") {
              if (opts.noglobstar === true) {
                consume(value);
                continue;
              }
              const prior = prev.prev;
              const before = prior.prev;
              const isStart = prior.type === "slash" || prior.type === "bos";
              const afterStar = before && (before.type === "star" || before.type === "globstar");
              if (opts.bash === true && (!isStart || rest[0] && rest[0] !== "/")) {
                push({ type: "star", value, output: "" });
                continue;
              }
              const isBrace = state.braces > 0 && (prior.type === "comma" || prior.type === "brace");
              const isExtglob = extglobs.length && (prior.type === "pipe" || prior.type === "paren");
              if (!isStart && prior.type !== "paren" && !isBrace && !isExtglob) {
                push({ type: "star", value, output: "" });
                continue;
              }
              while (rest.slice(0, 3) === "/**") {
                const after = input[state.index + 4];
                if (after && after !== "/") {
                  break;
                }
                rest = rest.slice(3);
                consume("/**", 3);
              }
              if (prior.type === "bos" && eos()) {
                prev.type = "globstar";
                prev.value += value;
                prev.output = globstar(opts);
                state.output = prev.output;
                state.globstar = true;
                consume(value);
                continue;
              }
              if (prior.type === "slash" && prior.prev.type !== "bos" && !afterStar && eos()) {
                state.output = state.output.slice(0, -(prior.output + prev.output).length);
                prior.output = `(?:${prior.output}`;
                prev.type = "globstar";
                prev.output = globstar(opts) + (opts.strictSlashes ? ")" : "|$)");
                prev.value += value;
                state.globstar = true;
                state.output += prior.output + prev.output;
                consume(value);
                continue;
              }
              if (prior.type === "slash" && prior.prev.type !== "bos" && rest[0] === "/") {
                const end = rest[1] !== void 0 ? "|$" : "";
                state.output = state.output.slice(0, -(prior.output + prev.output).length);
                prior.output = `(?:${prior.output}`;
                prev.type = "globstar";
                prev.output = `${globstar(opts)}${SLASH_LITERAL}|${SLASH_LITERAL}${end})`;
                prev.value += value;
                state.output += prior.output + prev.output;
                state.globstar = true;
                consume(value + advance());
                push({ type: "slash", value: "/", output: "" });
                continue;
              }
              if (prior.type === "bos" && rest[0] === "/") {
                prev.type = "globstar";
                prev.value += value;
                prev.output = `(?:^|${SLASH_LITERAL}|${globstar(opts)}${SLASH_LITERAL})`;
                state.output = prev.output;
                state.globstar = true;
                consume(value + advance());
                push({ type: "slash", value: "/", output: "" });
                continue;
              }
              state.output = state.output.slice(0, -prev.output.length);
              prev.type = "globstar";
              prev.output = globstar(opts);
              prev.value += value;
              state.output += prev.output;
              state.globstar = true;
              consume(value);
              continue;
            }
            const token = { type: "star", value, output: star };
            if (opts.bash === true) {
              token.output = ".*?";
              if (prev.type === "bos" || prev.type === "slash") {
                token.output = nodot + token.output;
              }
              push(token);
              continue;
            }
            if (prev && (prev.type === "bracket" || prev.type === "paren") && opts.regex === true) {
              token.output = value;
              push(token);
              continue;
            }
            if (state.index === state.start || prev.type === "slash" || prev.type === "dot") {
              if (prev.type === "dot") {
                state.output += NO_DOT_SLASH;
                prev.output += NO_DOT_SLASH;
              } else if (opts.dot === true) {
                state.output += NO_DOTS_SLASH;
                prev.output += NO_DOTS_SLASH;
              } else {
                state.output += nodot;
                prev.output += nodot;
              }
              if (peek() !== "*") {
                state.output += ONE_CHAR;
                prev.output += ONE_CHAR;
              }
            }
            push(token);
          }
          while (state.brackets > 0) {
            if (opts.strictBrackets === true) throw new SyntaxError(syntaxError("closing", "]"));
            state.output = utils.escapeLast(state.output, "[");
            decrement("brackets");
          }
          while (state.parens > 0) {
            if (opts.strictBrackets === true) throw new SyntaxError(syntaxError("closing", ")"));
            state.output = utils.escapeLast(state.output, "(");
            decrement("parens");
          }
          while (state.braces > 0) {
            if (opts.strictBrackets === true) throw new SyntaxError(syntaxError("closing", "}"));
            state.output = utils.escapeLast(state.output, "{");
            decrement("braces");
          }
          if (opts.strictSlashes !== true && (prev.type === "star" || prev.type === "bracket")) {
            push({ type: "maybe_slash", value: "", output: `${SLASH_LITERAL}?` });
          }
          if (state.backtrack === true) {
            state.output = "";
            for (const token of state.tokens) {
              state.output += token.output != null ? token.output : token.value;
              if (token.suffix) {
                state.output += token.suffix;
              }
            }
          }
          return state;
        }, "parse2");
        parse22.fastpaths = (input, options) => {
          const opts = __spreadValues({}, options);
          const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
          const len = input.length;
          if (len > max) {
            throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
          }
          input = REPLACEMENTS[input] || input;
          const win32 = utils.isWindows(options);
          const {
            DOT_LITERAL,
            SLASH_LITERAL,
            ONE_CHAR,
            DOTS_SLASH,
            NO_DOT,
            NO_DOTS,
            NO_DOTS_SLASH,
            STAR,
            START_ANCHOR
          } = constants.globChars(win32);
          const nodot = opts.dot ? NO_DOTS : NO_DOT;
          const slashDot = opts.dot ? NO_DOTS_SLASH : NO_DOT;
          const capture = opts.capture ? "" : "?:";
          const state = { negated: false, prefix: "" };
          let star = opts.bash === true ? ".*?" : STAR;
          if (opts.capture) {
            star = `(${star})`;
          }
          const globstar = /* @__PURE__ */ __name((opts2) => {
            if (opts2.noglobstar === true) return star;
            return `(${capture}(?:(?!${START_ANCHOR}${opts2.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
          }, "globstar");
          const create = /* @__PURE__ */ __name((str) => {
            switch (str) {
              case "*":
                return `${nodot}${ONE_CHAR}${star}`;
              case ".*":
                return `${DOT_LITERAL}${ONE_CHAR}${star}`;
              case "*.*":
                return `${nodot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;
              case "*/*":
                return `${nodot}${star}${SLASH_LITERAL}${ONE_CHAR}${slashDot}${star}`;
              case "**":
                return nodot + globstar(opts);
              case "**/*":
                return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${ONE_CHAR}${star}`;
              case "**/*.*":
                return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;
              case "**/.*":
                return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${DOT_LITERAL}${ONE_CHAR}${star}`;
              default: {
                const match = /^(.*?)\.(\w+)$/.exec(str);
                if (!match) return;
                const source2 = create(match[1]);
                if (!source2) return;
                return source2 + DOT_LITERAL + match[2];
              }
            }
          }, "create");
          const output = utils.removePrefix(input, state);
          let source = create(output);
          if (source && opts.strictSlashes !== true) {
            source += `${SLASH_LITERAL}?`;
          }
          return source;
        };
        module2.exports = parse22;
      }
    });
    var require_picomatch = __commonJS2({
      "node_modules/picomatch/lib/picomatch.js"(exports2, module2) {
        "use strict";
        var path22 = __require("path");
        var scan = require_scan();
        var parse22 = require_parse22();
        var utils = require_utils22();
        var constants = require_constants22();
        var isObject = /* @__PURE__ */ __name((val) => val && typeof val === "object" && !Array.isArray(val), "isObject");
        var picomatch = /* @__PURE__ */ __name((glob22, options, returnState = false) => {
          if (Array.isArray(glob22)) {
            const fns = glob22.map((input) => picomatch(input, options, returnState));
            const arrayMatcher = /* @__PURE__ */ __name((str) => {
              for (const isMatch of fns) {
                const state2 = isMatch(str);
                if (state2) return state2;
              }
              return false;
            }, "arrayMatcher");
            return arrayMatcher;
          }
          const isState = isObject(glob22) && glob22.tokens && glob22.input;
          if (glob22 === "" || typeof glob22 !== "string" && !isState) {
            throw new TypeError("Expected pattern to be a non-empty string");
          }
          const opts = options || {};
          const posix = utils.isWindows(options);
          const regex = isState ? picomatch.compileRe(glob22, options) : picomatch.makeRe(glob22, options, false, true);
          const state = regex.state;
          delete regex.state;
          let isIgnored = /* @__PURE__ */ __name(() => false, "isIgnored");
          if (opts.ignore) {
            const ignoreOpts = __spreadProps(__spreadValues({}, options), { ignore: null, onMatch: null, onResult: null });
            isIgnored = picomatch(opts.ignore, ignoreOpts, returnState);
          }
          const matcher = /* @__PURE__ */ __name((input, returnObject = false) => {
            const { isMatch, match, output } = picomatch.test(input, regex, options, { glob: glob22, posix });
            const result = { glob: glob22, state, regex, posix, input, output, match, isMatch };
            if (typeof opts.onResult === "function") {
              opts.onResult(result);
            }
            if (isMatch === false) {
              result.isMatch = false;
              return returnObject ? result : false;
            }
            if (isIgnored(input)) {
              if (typeof opts.onIgnore === "function") {
                opts.onIgnore(result);
              }
              result.isMatch = false;
              return returnObject ? result : false;
            }
            if (typeof opts.onMatch === "function") {
              opts.onMatch(result);
            }
            return returnObject ? result : true;
          }, "matcher");
          if (returnState) {
            matcher.state = state;
          }
          return matcher;
        }, "picomatch");
        picomatch.test = (input, regex, options, { glob: glob22, posix } = {}) => {
          if (typeof input !== "string") {
            throw new TypeError("Expected input to be a string");
          }
          if (input === "") {
            return { isMatch: false, output: "" };
          }
          const opts = options || {};
          const format = opts.format || (posix ? utils.toPosixSlashes : null);
          let match = input === glob22;
          let output = match && format ? format(input) : input;
          if (match === false) {
            output = format ? format(input) : input;
            match = output === glob22;
          }
          if (match === false || opts.capture === true) {
            if (opts.matchBase === true || opts.basename === true) {
              match = picomatch.matchBase(input, regex, options, posix);
            } else {
              match = regex.exec(output);
            }
          }
          return { isMatch: Boolean(match), match, output };
        };
        picomatch.matchBase = (input, glob22, options, posix = utils.isWindows(options)) => {
          const regex = glob22 instanceof RegExp ? glob22 : picomatch.makeRe(glob22, options);
          return regex.test(path22.basename(input));
        };
        picomatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);
        picomatch.parse = (pattern, options) => {
          if (Array.isArray(pattern)) return pattern.map((p) => picomatch.parse(p, options));
          return parse22(pattern, __spreadProps(__spreadValues({}, options), { fastpaths: false }));
        };
        picomatch.scan = (input, options) => scan(input, options);
        picomatch.compileRe = (state, options, returnOutput = false, returnState = false) => {
          if (returnOutput === true) {
            return state.output;
          }
          const opts = options || {};
          const prepend = opts.contains ? "" : "^";
          const append = opts.contains ? "" : "$";
          let source = `${prepend}(?:${state.output})${append}`;
          if (state && state.negated === true) {
            source = `^(?!${source}).*$`;
          }
          const regex = picomatch.toRegex(source, options);
          if (returnState === true) {
            regex.state = state;
          }
          return regex;
        };
        picomatch.makeRe = (input, options = {}, returnOutput = false, returnState = false) => {
          if (!input || typeof input !== "string") {
            throw new TypeError("Expected a non-empty string");
          }
          let parsed = { negated: false, fastpaths: true };
          if (options.fastpaths !== false && (input[0] === "." || input[0] === "*")) {
            parsed.output = parse22.fastpaths(input, options);
          }
          if (!parsed.output) {
            parsed = parse22(input, options);
          }
          return picomatch.compileRe(parsed, options, returnOutput, returnState);
        };
        picomatch.toRegex = (source, options) => {
          try {
            const opts = options || {};
            return new RegExp(source, opts.flags || (opts.nocase ? "i" : ""));
          } catch (err) {
            if (options && options.debug === true) throw err;
            return /$^/;
          }
        };
        picomatch.constants = constants;
        module2.exports = picomatch;
      }
    });
    var require_picomatch2 = __commonJS2({
      "node_modules/picomatch/index.js"(exports2, module2) {
        "use strict";
        module2.exports = require_picomatch();
      }
    });
    var require_micromatch = __commonJS2({
      "node_modules/micromatch/index.js"(exports2, module2) {
        "use strict";
        var util = __require("util");
        var braces = require_braces();
        var picomatch = require_picomatch2();
        var utils = require_utils22();
        var isEmptyString = /* @__PURE__ */ __name((val) => val === "" || val === "./", "isEmptyString");
        var micromatch = /* @__PURE__ */ __name((list, patterns, options) => {
          patterns = [].concat(patterns);
          list = [].concat(list);
          let omit = /* @__PURE__ */ new Set();
          let keep = /* @__PURE__ */ new Set();
          let items = /* @__PURE__ */ new Set();
          let negatives = 0;
          let onResult = /* @__PURE__ */ __name((state) => {
            items.add(state.output);
            if (options && options.onResult) {
              options.onResult(state);
            }
          }, "onResult");
          for (let i = 0; i < patterns.length; i++) {
            let isMatch = picomatch(String(patterns[i]), __spreadProps(__spreadValues({}, options), { onResult }), true);
            let negated = isMatch.state.negated || isMatch.state.negatedExtglob;
            if (negated) negatives++;
            for (let item of list) {
              let matched = isMatch(item, true);
              let match = negated ? !matched.isMatch : matched.isMatch;
              if (!match) continue;
              if (negated) {
                omit.add(matched.output);
              } else {
                omit.delete(matched.output);
                keep.add(matched.output);
              }
            }
          }
          let result = negatives === patterns.length ? [...items] : [...keep];
          let matches = result.filter((item) => !omit.has(item));
          if (options && matches.length === 0) {
            if (options.failglob === true) {
              throw new Error(`No matches found for "${patterns.join(", ")}"`);
            }
            if (options.nonull === true || options.nullglob === true) {
              return options.unescape ? patterns.map((p) => p.replace(/\\/g, "")) : patterns;
            }
          }
          return matches;
        }, "micromatch");
        micromatch.match = micromatch;
        micromatch.matcher = (pattern, options) => picomatch(pattern, options);
        micromatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);
        micromatch.any = micromatch.isMatch;
        micromatch.not = (list, patterns, options = {}) => {
          patterns = [].concat(patterns).map(String);
          let result = /* @__PURE__ */ new Set();
          let items = [];
          let onResult = /* @__PURE__ */ __name((state) => {
            if (options.onResult) options.onResult(state);
            items.push(state.output);
          }, "onResult");
          let matches = new Set(micromatch(list, patterns, __spreadProps(__spreadValues({}, options), { onResult })));
          for (let item of items) {
            if (!matches.has(item)) {
              result.add(item);
            }
          }
          return [...result];
        };
        micromatch.contains = (str, pattern, options) => {
          if (typeof str !== "string") {
            throw new TypeError(`Expected a string: "${util.inspect(str)}"`);
          }
          if (Array.isArray(pattern)) {
            return pattern.some((p) => micromatch.contains(str, p, options));
          }
          if (typeof pattern === "string") {
            if (isEmptyString(str) || isEmptyString(pattern)) {
              return false;
            }
            if (str.includes(pattern) || str.startsWith("./") && str.slice(2).includes(pattern)) {
              return true;
            }
          }
          return micromatch.isMatch(str, pattern, __spreadProps(__spreadValues({}, options), { contains: true }));
        };
        micromatch.matchKeys = (obj, patterns, options) => {
          if (!utils.isObject(obj)) {
            throw new TypeError("Expected the first argument to be an object");
          }
          let keys = micromatch(Object.keys(obj), patterns, options);
          let res = {};
          for (let key of keys) res[key] = obj[key];
          return res;
        };
        micromatch.some = (list, patterns, options) => {
          let items = [].concat(list);
          for (let pattern of [].concat(patterns)) {
            let isMatch = picomatch(String(pattern), options);
            if (items.some((item) => isMatch(item))) {
              return true;
            }
          }
          return false;
        };
        micromatch.every = (list, patterns, options) => {
          let items = [].concat(list);
          for (let pattern of [].concat(patterns)) {
            let isMatch = picomatch(String(pattern), options);
            if (!items.every((item) => isMatch(item))) {
              return false;
            }
          }
          return true;
        };
        micromatch.all = (str, patterns, options) => {
          if (typeof str !== "string") {
            throw new TypeError(`Expected a string: "${util.inspect(str)}"`);
          }
          return [].concat(patterns).every((p) => picomatch(p, options)(str));
        };
        micromatch.capture = (glob22, input, options) => {
          let posix = utils.isWindows(options);
          let regex = picomatch.makeRe(String(glob22), __spreadProps(__spreadValues({}, options), { capture: true }));
          let match = regex.exec(posix ? utils.toPosixSlashes(input) : input);
          if (match) {
            return match.slice(1).map((v2) => v2 === void 0 ? "" : v2);
          }
        };
        micromatch.makeRe = (...args) => picomatch.makeRe(...args);
        micromatch.scan = (...args) => picomatch.scan(...args);
        micromatch.parse = (patterns, options) => {
          let res = [];
          for (let pattern of [].concat(patterns || [])) {
            for (let str of braces(String(pattern), options)) {
              res.push(picomatch.parse(str, options));
            }
          }
          return res;
        };
        micromatch.braces = (pattern, options) => {
          if (typeof pattern !== "string") throw new TypeError("Expected a string");
          if (options && options.nobrace === true || !/\{.*\}/.test(pattern)) {
            return [pattern];
          }
          return braces(pattern, options);
        };
        micromatch.braceExpand = (pattern, options) => {
          if (typeof pattern !== "string") throw new TypeError("Expected a string");
          return micromatch.braces(pattern, __spreadProps(__spreadValues({}, options), { expand: true }));
        };
        module2.exports = micromatch;
      }
    });
    var require_pattern = __commonJS2({
      "node_modules/fast-glob/out/utils/pattern.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        exports2.removeDuplicateSlashes = exports2.matchAny = exports2.convertPatternsToRe = exports2.makeRe = exports2.getPatternParts = exports2.expandBraceExpansion = exports2.expandPatternsWithBraceExpansion = exports2.isAffectDepthOfReadingPattern = exports2.endsWithSlashGlobStar = exports2.hasGlobStar = exports2.getBaseDirectory = exports2.isPatternRelatedToParentDirectory = exports2.getPatternsOutsideCurrentDirectory = exports2.getPatternsInsideCurrentDirectory = exports2.getPositivePatterns = exports2.getNegativePatterns = exports2.isPositivePattern = exports2.isNegativePattern = exports2.convertToNegativePattern = exports2.convertToPositivePattern = exports2.isDynamicPattern = exports2.isStaticPattern = void 0;
        var path22 = __require("path");
        var globParent = require_glob_parent();
        var micromatch = require_micromatch();
        var GLOBSTAR = "**";
        var ESCAPE_SYMBOL = "\\";
        var COMMON_GLOB_SYMBOLS_RE = /[*?]|^!/;
        var REGEX_CHARACTER_CLASS_SYMBOLS_RE = /\[[^[]*]/;
        var REGEX_GROUP_SYMBOLS_RE = /(?:^|[^!*+?@])\([^(]*\|[^|]*\)/;
        var GLOB_EXTENSION_SYMBOLS_RE = /[!*+?@]\([^(]*\)/;
        var BRACE_EXPANSION_SEPARATORS_RE = /,|\.\./;
        var DOUBLE_SLASH_RE = /(?!^)\/{2,}/g;
        function isStaticPattern(pattern, options = {}) {
          return !isDynamicPattern2(pattern, options);
        }
        __name(isStaticPattern, "isStaticPattern");
        exports2.isStaticPattern = isStaticPattern;
        function isDynamicPattern2(pattern, options = {}) {
          if (pattern === "") {
            return false;
          }
          if (options.caseSensitiveMatch === false || pattern.includes(ESCAPE_SYMBOL)) {
            return true;
          }
          if (COMMON_GLOB_SYMBOLS_RE.test(pattern) || REGEX_CHARACTER_CLASS_SYMBOLS_RE.test(pattern) || REGEX_GROUP_SYMBOLS_RE.test(pattern)) {
            return true;
          }
          if (options.extglob !== false && GLOB_EXTENSION_SYMBOLS_RE.test(pattern)) {
            return true;
          }
          if (options.braceExpansion !== false && hasBraceExpansion(pattern)) {
            return true;
          }
          return false;
        }
        __name(isDynamicPattern2, "isDynamicPattern2");
        exports2.isDynamicPattern = isDynamicPattern2;
        function hasBraceExpansion(pattern) {
          const openingBraceIndex = pattern.indexOf("{");
          if (openingBraceIndex === -1) {
            return false;
          }
          const closingBraceIndex = pattern.indexOf("}", openingBraceIndex + 1);
          if (closingBraceIndex === -1) {
            return false;
          }
          const braceContent = pattern.slice(openingBraceIndex, closingBraceIndex);
          return BRACE_EXPANSION_SEPARATORS_RE.test(braceContent);
        }
        __name(hasBraceExpansion, "hasBraceExpansion");
        function convertToPositivePattern(pattern) {
          return isNegativePattern2(pattern) ? pattern.slice(1) : pattern;
        }
        __name(convertToPositivePattern, "convertToPositivePattern");
        exports2.convertToPositivePattern = convertToPositivePattern;
        function convertToNegativePattern(pattern) {
          return "!" + pattern;
        }
        __name(convertToNegativePattern, "convertToNegativePattern");
        exports2.convertToNegativePattern = convertToNegativePattern;
        function isNegativePattern2(pattern) {
          return pattern.startsWith("!") && pattern[1] !== "(";
        }
        __name(isNegativePattern2, "isNegativePattern2");
        exports2.isNegativePattern = isNegativePattern2;
        function isPositivePattern(pattern) {
          return !isNegativePattern2(pattern);
        }
        __name(isPositivePattern, "isPositivePattern");
        exports2.isPositivePattern = isPositivePattern;
        function getNegativePatterns(patterns) {
          return patterns.filter(isNegativePattern2);
        }
        __name(getNegativePatterns, "getNegativePatterns");
        exports2.getNegativePatterns = getNegativePatterns;
        function getPositivePatterns(patterns) {
          return patterns.filter(isPositivePattern);
        }
        __name(getPositivePatterns, "getPositivePatterns");
        exports2.getPositivePatterns = getPositivePatterns;
        function getPatternsInsideCurrentDirectory(patterns) {
          return patterns.filter((pattern) => !isPatternRelatedToParentDirectory(pattern));
        }
        __name(getPatternsInsideCurrentDirectory, "getPatternsInsideCurrentDirectory");
        exports2.getPatternsInsideCurrentDirectory = getPatternsInsideCurrentDirectory;
        function getPatternsOutsideCurrentDirectory(patterns) {
          return patterns.filter(isPatternRelatedToParentDirectory);
        }
        __name(getPatternsOutsideCurrentDirectory, "getPatternsOutsideCurrentDirectory");
        exports2.getPatternsOutsideCurrentDirectory = getPatternsOutsideCurrentDirectory;
        function isPatternRelatedToParentDirectory(pattern) {
          return pattern.startsWith("..") || pattern.startsWith("./..");
        }
        __name(isPatternRelatedToParentDirectory, "isPatternRelatedToParentDirectory");
        exports2.isPatternRelatedToParentDirectory = isPatternRelatedToParentDirectory;
        function getBaseDirectory(pattern) {
          return globParent(pattern, { flipBackslashes: false });
        }
        __name(getBaseDirectory, "getBaseDirectory");
        exports2.getBaseDirectory = getBaseDirectory;
        function hasGlobStar(pattern) {
          return pattern.includes(GLOBSTAR);
        }
        __name(hasGlobStar, "hasGlobStar");
        exports2.hasGlobStar = hasGlobStar;
        function endsWithSlashGlobStar(pattern) {
          return pattern.endsWith("/" + GLOBSTAR);
        }
        __name(endsWithSlashGlobStar, "endsWithSlashGlobStar");
        exports2.endsWithSlashGlobStar = endsWithSlashGlobStar;
        function isAffectDepthOfReadingPattern(pattern) {
          const basename = path22.basename(pattern);
          return endsWithSlashGlobStar(pattern) || isStaticPattern(basename);
        }
        __name(isAffectDepthOfReadingPattern, "isAffectDepthOfReadingPattern");
        exports2.isAffectDepthOfReadingPattern = isAffectDepthOfReadingPattern;
        function expandPatternsWithBraceExpansion(patterns) {
          return patterns.reduce((collection, pattern) => {
            return collection.concat(expandBraceExpansion(pattern));
          }, []);
        }
        __name(expandPatternsWithBraceExpansion, "expandPatternsWithBraceExpansion");
        exports2.expandPatternsWithBraceExpansion = expandPatternsWithBraceExpansion;
        function expandBraceExpansion(pattern) {
          const patterns = micromatch.braces(pattern, { expand: true, nodupes: true, keepEscaping: true });
          patterns.sort((a2, b) => a2.length - b.length);
          return patterns.filter((pattern2) => pattern2 !== "");
        }
        __name(expandBraceExpansion, "expandBraceExpansion");
        exports2.expandBraceExpansion = expandBraceExpansion;
        function getPatternParts(pattern, options) {
          let { parts } = micromatch.scan(pattern, Object.assign(Object.assign({}, options), { parts: true }));
          if (parts.length === 0) {
            parts = [pattern];
          }
          if (parts[0].startsWith("/")) {
            parts[0] = parts[0].slice(1);
            parts.unshift("");
          }
          return parts;
        }
        __name(getPatternParts, "getPatternParts");
        exports2.getPatternParts = getPatternParts;
        function makeRe(pattern, options) {
          return micromatch.makeRe(pattern, options);
        }
        __name(makeRe, "makeRe");
        exports2.makeRe = makeRe;
        function convertPatternsToRe(patterns, options) {
          return patterns.map((pattern) => makeRe(pattern, options));
        }
        __name(convertPatternsToRe, "convertPatternsToRe");
        exports2.convertPatternsToRe = convertPatternsToRe;
        function matchAny(entry, patternsRe) {
          return patternsRe.some((patternRe) => patternRe.test(entry));
        }
        __name(matchAny, "matchAny");
        exports2.matchAny = matchAny;
        function removeDuplicateSlashes(pattern) {
          return pattern.replace(DOUBLE_SLASH_RE, "/");
        }
        __name(removeDuplicateSlashes, "removeDuplicateSlashes");
        exports2.removeDuplicateSlashes = removeDuplicateSlashes;
      }
    });
    var require_merge2 = __commonJS2({
      "node_modules/merge2/index.js"(exports2, module2) {
        "use strict";
        var Stream5 = __require("stream");
        var PassThrough = Stream5.PassThrough;
        var slice = Array.prototype.slice;
        module2.exports = merge2;
        function merge2() {
          const streamsQueue = [];
          const args = slice.call(arguments);
          let merging = false;
          let options = args[args.length - 1];
          if (options && !Array.isArray(options) && options.pipe == null) {
            args.pop();
          } else {
            options = {};
          }
          const doEnd = options.end !== false;
          const doPipeError = options.pipeError === true;
          if (options.objectMode == null) {
            options.objectMode = true;
          }
          if (options.highWaterMark == null) {
            options.highWaterMark = 64 * 1024;
          }
          const mergedStream = PassThrough(options);
          function addStream() {
            for (let i = 0, len = arguments.length; i < len; i++) {
              streamsQueue.push(pauseStreams(arguments[i], options));
            }
            mergeStream();
            return this;
          }
          __name(addStream, "addStream");
          function mergeStream() {
            if (merging) {
              return;
            }
            merging = true;
            let streams = streamsQueue.shift();
            if (!streams) {
              process.nextTick(endStream2);
              return;
            }
            if (!Array.isArray(streams)) {
              streams = [streams];
            }
            let pipesCount = streams.length + 1;
            function next() {
              if (--pipesCount > 0) {
                return;
              }
              merging = false;
              mergeStream();
            }
            __name(next, "next");
            function pipe(stream) {
              function onend() {
                stream.removeListener("merge2UnpipeEnd", onend);
                stream.removeListener("end", onend);
                if (doPipeError) {
                  stream.removeListener("error", onerror);
                }
                next();
              }
              __name(onend, "onend");
              function onerror(err) {
                mergedStream.emit("error", err);
              }
              __name(onerror, "onerror");
              if (stream._readableState.endEmitted) {
                return next();
              }
              stream.on("merge2UnpipeEnd", onend);
              stream.on("end", onend);
              if (doPipeError) {
                stream.on("error", onerror);
              }
              stream.pipe(mergedStream, { end: false });
              stream.resume();
            }
            __name(pipe, "pipe");
            for (let i = 0; i < streams.length; i++) {
              pipe(streams[i]);
            }
            next();
          }
          __name(mergeStream, "mergeStream");
          function endStream2() {
            merging = false;
            mergedStream.emit("queueDrain");
            if (doEnd) {
              mergedStream.end();
            }
          }
          __name(endStream2, "endStream2");
          mergedStream.setMaxListeners(0);
          mergedStream.add = addStream;
          mergedStream.on("unpipe", function(stream) {
            stream.emit("merge2UnpipeEnd");
          });
          if (args.length) {
            addStream.apply(null, args);
          }
          return mergedStream;
        }
        __name(merge2, "merge2");
        function pauseStreams(streams, options) {
          if (!Array.isArray(streams)) {
            if (!streams._readableState && streams.pipe) {
              streams = streams.pipe(PassThrough(options));
            }
            if (!streams._readableState || !streams.pause || !streams.pipe) {
              throw new Error("Only readable stream can be merged.");
            }
            streams.pause();
          } else {
            for (let i = 0, len = streams.length; i < len; i++) {
              streams[i] = pauseStreams(streams[i], options);
            }
          }
          return streams;
        }
        __name(pauseStreams, "pauseStreams");
      }
    });
    var require_stream = __commonJS2({
      "node_modules/fast-glob/out/utils/stream.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        exports2.merge = void 0;
        var merge2 = require_merge2();
        function merge(streams) {
          const mergedStream = merge2(streams);
          streams.forEach((stream) => {
            stream.once("error", (error) => mergedStream.emit("error", error));
          });
          mergedStream.once("close", () => propagateCloseEventToSources(streams));
          mergedStream.once("end", () => propagateCloseEventToSources(streams));
          return mergedStream;
        }
        __name(merge, "merge");
        exports2.merge = merge;
        function propagateCloseEventToSources(streams) {
          streams.forEach((stream) => stream.emit("close"));
        }
        __name(propagateCloseEventToSources, "propagateCloseEventToSources");
      }
    });
    var require_string2 = __commonJS2({
      "node_modules/fast-glob/out/utils/string.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        exports2.isEmpty = exports2.isString = void 0;
        function isString(input) {
          return typeof input === "string";
        }
        __name(isString, "isString");
        exports2.isString = isString;
        function isEmpty(input) {
          return input === "";
        }
        __name(isEmpty, "isEmpty");
        exports2.isEmpty = isEmpty;
      }
    });
    var require_utils32 = __commonJS2({
      "node_modules/fast-glob/out/utils/index.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        exports2.string = exports2.stream = exports2.pattern = exports2.path = exports2.fs = exports2.errno = exports2.array = void 0;
        var array = require_array2();
        exports2.array = array;
        var errno = require_errno();
        exports2.errno = errno;
        var fs6 = require_fs();
        exports2.fs = fs6;
        var path22 = require_path();
        exports2.path = path22;
        var pattern = require_pattern();
        exports2.pattern = pattern;
        var stream = require_stream();
        exports2.stream = stream;
        var string = require_string2();
        exports2.string = string;
      }
    });
    var require_tasks = __commonJS2({
      "node_modules/fast-glob/out/managers/tasks.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        exports2.convertPatternGroupToTask = exports2.convertPatternGroupsToTasks = exports2.groupPatternsByBaseDirectory = exports2.getNegativePatternsAsPositive = exports2.getPositivePatterns = exports2.convertPatternsToTasks = exports2.generate = void 0;
        var utils = require_utils32();
        function generate(input, settings) {
          const patterns = processPatterns(input, settings);
          const ignore = processPatterns(settings.ignore, settings);
          const positivePatterns = getPositivePatterns(patterns);
          const negativePatterns = getNegativePatternsAsPositive(patterns, ignore);
          const staticPatterns = positivePatterns.filter((pattern) => utils.pattern.isStaticPattern(pattern, settings));
          const dynamicPatterns = positivePatterns.filter((pattern) => utils.pattern.isDynamicPattern(pattern, settings));
          const staticTasks = convertPatternsToTasks(
            staticPatterns,
            negativePatterns,
            /* dynamic */
            false
          );
          const dynamicTasks = convertPatternsToTasks(
            dynamicPatterns,
            negativePatterns,
            /* dynamic */
            true
          );
          return staticTasks.concat(dynamicTasks);
        }
        __name(generate, "generate");
        exports2.generate = generate;
        function processPatterns(input, settings) {
          let patterns = input;
          if (settings.braceExpansion) {
            patterns = utils.pattern.expandPatternsWithBraceExpansion(patterns);
          }
          if (settings.baseNameMatch) {
            patterns = patterns.map((pattern) => pattern.includes("/") ? pattern : `**/${pattern}`);
          }
          return patterns.map((pattern) => utils.pattern.removeDuplicateSlashes(pattern));
        }
        __name(processPatterns, "processPatterns");
        function convertPatternsToTasks(positive, negative, dynamic) {
          const tasks = [];
          const patternsOutsideCurrentDirectory = utils.pattern.getPatternsOutsideCurrentDirectory(positive);
          const patternsInsideCurrentDirectory = utils.pattern.getPatternsInsideCurrentDirectory(positive);
          const outsideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsOutsideCurrentDirectory);
          const insideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsInsideCurrentDirectory);
          tasks.push(...convertPatternGroupsToTasks(outsideCurrentDirectoryGroup, negative, dynamic));
          if ("." in insideCurrentDirectoryGroup) {
            tasks.push(convertPatternGroupToTask(".", patternsInsideCurrentDirectory, negative, dynamic));
          } else {
            tasks.push(...convertPatternGroupsToTasks(insideCurrentDirectoryGroup, negative, dynamic));
          }
          return tasks;
        }
        __name(convertPatternsToTasks, "convertPatternsToTasks");
        exports2.convertPatternsToTasks = convertPatternsToTasks;
        function getPositivePatterns(patterns) {
          return utils.pattern.getPositivePatterns(patterns);
        }
        __name(getPositivePatterns, "getPositivePatterns");
        exports2.getPositivePatterns = getPositivePatterns;
        function getNegativePatternsAsPositive(patterns, ignore) {
          const negative = utils.pattern.getNegativePatterns(patterns).concat(ignore);
          const positive = negative.map(utils.pattern.convertToPositivePattern);
          return positive;
        }
        __name(getNegativePatternsAsPositive, "getNegativePatternsAsPositive");
        exports2.getNegativePatternsAsPositive = getNegativePatternsAsPositive;
        function groupPatternsByBaseDirectory(patterns) {
          const group = {};
          return patterns.reduce((collection, pattern) => {
            const base = utils.pattern.getBaseDirectory(pattern);
            if (base in collection) {
              collection[base].push(pattern);
            } else {
              collection[base] = [pattern];
            }
            return collection;
          }, group);
        }
        __name(groupPatternsByBaseDirectory, "groupPatternsByBaseDirectory");
        exports2.groupPatternsByBaseDirectory = groupPatternsByBaseDirectory;
        function convertPatternGroupsToTasks(positive, negative, dynamic) {
          return Object.keys(positive).map((base) => {
            return convertPatternGroupToTask(base, positive[base], negative, dynamic);
          });
        }
        __name(convertPatternGroupsToTasks, "convertPatternGroupsToTasks");
        exports2.convertPatternGroupsToTasks = convertPatternGroupsToTasks;
        function convertPatternGroupToTask(base, positive, negative, dynamic) {
          return {
            dynamic,
            positive,
            negative,
            base,
            patterns: [].concat(positive, negative.map(utils.pattern.convertToNegativePattern))
          };
        }
        __name(convertPatternGroupToTask, "convertPatternGroupToTask");
        exports2.convertPatternGroupToTask = convertPatternGroupToTask;
      }
    });
    var require_async = __commonJS2({
      "node_modules/@nodelib/fs.stat/out/providers/async.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        exports2.read = void 0;
        function read(path22, settings, callback) {
          settings.fs.lstat(path22, (lstatError, lstat) => {
            if (lstatError !== null) {
              callFailureCallback(callback, lstatError);
              return;
            }
            if (!lstat.isSymbolicLink() || !settings.followSymbolicLink) {
              callSuccessCallback(callback, lstat);
              return;
            }
            settings.fs.stat(path22, (statError, stat) => {
              if (statError !== null) {
                if (settings.throwErrorOnBrokenSymbolicLink) {
                  callFailureCallback(callback, statError);
                  return;
                }
                callSuccessCallback(callback, lstat);
                return;
              }
              if (settings.markSymbolicLink) {
                stat.isSymbolicLink = () => true;
              }
              callSuccessCallback(callback, stat);
            });
          });
        }
        __name(read, "read");
        exports2.read = read;
        function callFailureCallback(callback, error) {
          callback(error);
        }
        __name(callFailureCallback, "callFailureCallback");
        function callSuccessCallback(callback, result) {
          callback(null, result);
        }
        __name(callSuccessCallback, "callSuccessCallback");
      }
    });
    var require_sync = __commonJS2({
      "node_modules/@nodelib/fs.stat/out/providers/sync.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        exports2.read = void 0;
        function read(path22, settings) {
          const lstat = settings.fs.lstatSync(path22);
          if (!lstat.isSymbolicLink() || !settings.followSymbolicLink) {
            return lstat;
          }
          try {
            const stat = settings.fs.statSync(path22);
            if (settings.markSymbolicLink) {
              stat.isSymbolicLink = () => true;
            }
            return stat;
          } catch (error) {
            if (!settings.throwErrorOnBrokenSymbolicLink) {
              return lstat;
            }
            throw error;
          }
        }
        __name(read, "read");
        exports2.read = read;
      }
    });
    var require_fs2 = __commonJS2({
      "node_modules/@nodelib/fs.stat/out/adapters/fs.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        exports2.createFileSystemAdapter = exports2.FILE_SYSTEM_ADAPTER = void 0;
        var fs6 = __require("fs");
        exports2.FILE_SYSTEM_ADAPTER = {
          lstat: fs6.lstat,
          stat: fs6.stat,
          lstatSync: fs6.lstatSync,
          statSync: fs6.statSync
        };
        function createFileSystemAdapter(fsMethods) {
          if (fsMethods === void 0) {
            return exports2.FILE_SYSTEM_ADAPTER;
          }
          return Object.assign(Object.assign({}, exports2.FILE_SYSTEM_ADAPTER), fsMethods);
        }
        __name(createFileSystemAdapter, "createFileSystemAdapter");
        exports2.createFileSystemAdapter = createFileSystemAdapter;
      }
    });
    var require_settings = __commonJS2({
      "node_modules/@nodelib/fs.stat/out/settings.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var fs6 = require_fs2();
        var Settings = class {
          static {
            __name(this, "Settings");
          }
          constructor(_options = {}) {
            this._options = _options;
            this.followSymbolicLink = this._getValue(this._options.followSymbolicLink, true);
            this.fs = fs6.createFileSystemAdapter(this._options.fs);
            this.markSymbolicLink = this._getValue(this._options.markSymbolicLink, false);
            this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);
          }
          _getValue(option, value) {
            return option !== null && option !== void 0 ? option : value;
          }
        };
        exports2.default = Settings;
      }
    });
    var require_out = __commonJS2({
      "node_modules/@nodelib/fs.stat/out/index.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        exports2.statSync = exports2.stat = exports2.Settings = void 0;
        var async = require_async();
        var sync = require_sync();
        var settings_1 = require_settings();
        exports2.Settings = settings_1.default;
        function stat(path22, optionsOrSettingsOrCallback, callback) {
          if (typeof optionsOrSettingsOrCallback === "function") {
            async.read(path22, getSettings(), optionsOrSettingsOrCallback);
            return;
          }
          async.read(path22, getSettings(optionsOrSettingsOrCallback), callback);
        }
        __name(stat, "stat");
        exports2.stat = stat;
        function statSync(path22, optionsOrSettings) {
          const settings = getSettings(optionsOrSettings);
          return sync.read(path22, settings);
        }
        __name(statSync, "statSync");
        exports2.statSync = statSync;
        function getSettings(settingsOrOptions = {}) {
          if (settingsOrOptions instanceof settings_1.default) {
            return settingsOrOptions;
          }
          return new settings_1.default(settingsOrOptions);
        }
        __name(getSettings, "getSettings");
      }
    });
    var require_queue_microtask = __commonJS2({
      "node_modules/queue-microtask/index.js"(exports2, module2) {
        "use strict";
        var promise;
        module2.exports = typeof queueMicrotask === "function" ? queueMicrotask.bind(typeof window !== "undefined" ? window : global) : (cb) => (promise || (promise = Promise.resolve())).then(cb).catch((err) => setTimeout(() => {
          throw err;
        }, 0));
      }
    });
    var require_run_parallel = __commonJS2({
      "node_modules/run-parallel/index.js"(exports2, module2) {
        "use strict";
        module2.exports = runParallel;
        var queueMicrotask2 = require_queue_microtask();
        function runParallel(tasks, cb) {
          let results, pending, keys;
          let isSync = true;
          if (Array.isArray(tasks)) {
            results = [];
            pending = tasks.length;
          } else {
            keys = Object.keys(tasks);
            results = {};
            pending = keys.length;
          }
          function done(err) {
            function end() {
              if (cb) cb(err, results);
              cb = null;
            }
            __name(end, "end");
            if (isSync) queueMicrotask2(end);
            else end();
          }
          __name(done, "done");
          function each(i, err, result) {
            results[i] = result;
            if (--pending === 0 || err) {
              done(err);
            }
          }
          __name(each, "each");
          if (!pending) {
            done(null);
          } else if (keys) {
            keys.forEach(function(key) {
              tasks[key](function(err, result) {
                each(key, err, result);
              });
            });
          } else {
            tasks.forEach(function(task, i) {
              task(function(err, result) {
                each(i, err, result);
              });
            });
          }
          isSync = false;
        }
        __name(runParallel, "runParallel");
      }
    });
    var require_constants32 = __commonJS2({
      "node_modules/@nodelib/fs.scandir/out/constants.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        exports2.IS_SUPPORT_READDIR_WITH_FILE_TYPES = void 0;
        var NODE_PROCESS_VERSION_PARTS = process.versions.node.split(".");
        if (NODE_PROCESS_VERSION_PARTS[0] === void 0 || NODE_PROCESS_VERSION_PARTS[1] === void 0) {
          throw new Error(`Unexpected behavior. The 'process.versions.node' variable has invalid value: ${process.versions.node}`);
        }
        var MAJOR_VERSION = Number.parseInt(NODE_PROCESS_VERSION_PARTS[0], 10);
        var MINOR_VERSION = Number.parseInt(NODE_PROCESS_VERSION_PARTS[1], 10);
        var SUPPORTED_MAJOR_VERSION = 10;
        var SUPPORTED_MINOR_VERSION = 10;
        var IS_MATCHED_BY_MAJOR = MAJOR_VERSION > SUPPORTED_MAJOR_VERSION;
        var IS_MATCHED_BY_MAJOR_AND_MINOR = MAJOR_VERSION === SUPPORTED_MAJOR_VERSION && MINOR_VERSION >= SUPPORTED_MINOR_VERSION;
        exports2.IS_SUPPORT_READDIR_WITH_FILE_TYPES = IS_MATCHED_BY_MAJOR || IS_MATCHED_BY_MAJOR_AND_MINOR;
      }
    });
    var require_fs3 = __commonJS2({
      "node_modules/@nodelib/fs.scandir/out/utils/fs.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        exports2.createDirentFromStats = void 0;
        var DirentFromStats = class {
          static {
            __name(this, "DirentFromStats");
          }
          constructor(name, stats) {
            this.name = name;
            this.isBlockDevice = stats.isBlockDevice.bind(stats);
            this.isCharacterDevice = stats.isCharacterDevice.bind(stats);
            this.isDirectory = stats.isDirectory.bind(stats);
            this.isFIFO = stats.isFIFO.bind(stats);
            this.isFile = stats.isFile.bind(stats);
            this.isSocket = stats.isSocket.bind(stats);
            this.isSymbolicLink = stats.isSymbolicLink.bind(stats);
          }
        };
        function createDirentFromStats(name, stats) {
          return new DirentFromStats(name, stats);
        }
        __name(createDirentFromStats, "createDirentFromStats");
        exports2.createDirentFromStats = createDirentFromStats;
      }
    });
    var require_utils42 = __commonJS2({
      "node_modules/@nodelib/fs.scandir/out/utils/index.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        exports2.fs = void 0;
        var fs6 = require_fs3();
        exports2.fs = fs6;
      }
    });
    var require_common2 = __commonJS2({
      "node_modules/@nodelib/fs.scandir/out/providers/common.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        exports2.joinPathSegments = void 0;
        function joinPathSegments(a2, b, separator) {
          if (a2.endsWith(separator)) {
            return a2 + b;
          }
          return a2 + separator + b;
        }
        __name(joinPathSegments, "joinPathSegments");
        exports2.joinPathSegments = joinPathSegments;
      }
    });
    var require_async2 = __commonJS2({
      "node_modules/@nodelib/fs.scandir/out/providers/async.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        exports2.readdir = exports2.readdirWithFileTypes = exports2.read = void 0;
        var fsStat = require_out();
        var rpl = require_run_parallel();
        var constants_1 = require_constants32();
        var utils = require_utils42();
        var common = require_common2();
        function read(directory, settings, callback) {
          if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {
            readdirWithFileTypes(directory, settings, callback);
            return;
          }
          readdir(directory, settings, callback);
        }
        __name(read, "read");
        exports2.read = read;
        function readdirWithFileTypes(directory, settings, callback) {
          settings.fs.readdir(directory, { withFileTypes: true }, (readdirError, dirents) => {
            if (readdirError !== null) {
              callFailureCallback(callback, readdirError);
              return;
            }
            const entries = dirents.map((dirent) => ({
              dirent,
              name: dirent.name,
              path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)
            }));
            if (!settings.followSymbolicLinks) {
              callSuccessCallback(callback, entries);
              return;
            }
            const tasks = entries.map((entry) => makeRplTaskEntry(entry, settings));
            rpl(tasks, (rplError, rplEntries) => {
              if (rplError !== null) {
                callFailureCallback(callback, rplError);
                return;
              }
              callSuccessCallback(callback, rplEntries);
            });
          });
        }
        __name(readdirWithFileTypes, "readdirWithFileTypes");
        exports2.readdirWithFileTypes = readdirWithFileTypes;
        function makeRplTaskEntry(entry, settings) {
          return (done) => {
            if (!entry.dirent.isSymbolicLink()) {
              done(null, entry);
              return;
            }
            settings.fs.stat(entry.path, (statError, stats) => {
              if (statError !== null) {
                if (settings.throwErrorOnBrokenSymbolicLink) {
                  done(statError);
                  return;
                }
                done(null, entry);
                return;
              }
              entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);
              done(null, entry);
            });
          };
        }
        __name(makeRplTaskEntry, "makeRplTaskEntry");
        function readdir(directory, settings, callback) {
          settings.fs.readdir(directory, (readdirError, names) => {
            if (readdirError !== null) {
              callFailureCallback(callback, readdirError);
              return;
            }
            const tasks = names.map((name) => {
              const path22 = common.joinPathSegments(directory, name, settings.pathSegmentSeparator);
              return (done) => {
                fsStat.stat(path22, settings.fsStatSettings, (error, stats) => {
                  if (error !== null) {
                    done(error);
                    return;
                  }
                  const entry = {
                    name,
                    path: path22,
                    dirent: utils.fs.createDirentFromStats(name, stats)
                  };
                  if (settings.stats) {
                    entry.stats = stats;
                  }
                  done(null, entry);
                });
              };
            });
            rpl(tasks, (rplError, entries) => {
              if (rplError !== null) {
                callFailureCallback(callback, rplError);
                return;
              }
              callSuccessCallback(callback, entries);
            });
          });
        }
        __name(readdir, "readdir");
        exports2.readdir = readdir;
        function callFailureCallback(callback, error) {
          callback(error);
        }
        __name(callFailureCallback, "callFailureCallback");
        function callSuccessCallback(callback, result) {
          callback(null, result);
        }
        __name(callSuccessCallback, "callSuccessCallback");
      }
    });
    var require_sync2 = __commonJS2({
      "node_modules/@nodelib/fs.scandir/out/providers/sync.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        exports2.readdir = exports2.readdirWithFileTypes = exports2.read = void 0;
        var fsStat = require_out();
        var constants_1 = require_constants32();
        var utils = require_utils42();
        var common = require_common2();
        function read(directory, settings) {
          if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {
            return readdirWithFileTypes(directory, settings);
          }
          return readdir(directory, settings);
        }
        __name(read, "read");
        exports2.read = read;
        function readdirWithFileTypes(directory, settings) {
          const dirents = settings.fs.readdirSync(directory, { withFileTypes: true });
          return dirents.map((dirent) => {
            const entry = {
              dirent,
              name: dirent.name,
              path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)
            };
            if (entry.dirent.isSymbolicLink() && settings.followSymbolicLinks) {
              try {
                const stats = settings.fs.statSync(entry.path);
                entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);
              } catch (error) {
                if (settings.throwErrorOnBrokenSymbolicLink) {
                  throw error;
                }
              }
            }
            return entry;
          });
        }
        __name(readdirWithFileTypes, "readdirWithFileTypes");
        exports2.readdirWithFileTypes = readdirWithFileTypes;
        function readdir(directory, settings) {
          const names = settings.fs.readdirSync(directory);
          return names.map((name) => {
            const entryPath = common.joinPathSegments(directory, name, settings.pathSegmentSeparator);
            const stats = fsStat.statSync(entryPath, settings.fsStatSettings);
            const entry = {
              name,
              path: entryPath,
              dirent: utils.fs.createDirentFromStats(name, stats)
            };
            if (settings.stats) {
              entry.stats = stats;
            }
            return entry;
          });
        }
        __name(readdir, "readdir");
        exports2.readdir = readdir;
      }
    });
    var require_fs4 = __commonJS2({
      "node_modules/@nodelib/fs.scandir/out/adapters/fs.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        exports2.createFileSystemAdapter = exports2.FILE_SYSTEM_ADAPTER = void 0;
        var fs6 = __require("fs");
        exports2.FILE_SYSTEM_ADAPTER = {
          lstat: fs6.lstat,
          stat: fs6.stat,
          lstatSync: fs6.lstatSync,
          statSync: fs6.statSync,
          readdir: fs6.readdir,
          readdirSync: fs6.readdirSync
        };
        function createFileSystemAdapter(fsMethods) {
          if (fsMethods === void 0) {
            return exports2.FILE_SYSTEM_ADAPTER;
          }
          return Object.assign(Object.assign({}, exports2.FILE_SYSTEM_ADAPTER), fsMethods);
        }
        __name(createFileSystemAdapter, "createFileSystemAdapter");
        exports2.createFileSystemAdapter = createFileSystemAdapter;
      }
    });
    var require_settings2 = __commonJS2({
      "node_modules/@nodelib/fs.scandir/out/settings.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var path22 = __require("path");
        var fsStat = require_out();
        var fs6 = require_fs4();
        var Settings = class {
          static {
            __name(this, "Settings");
          }
          constructor(_options = {}) {
            this._options = _options;
            this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, false);
            this.fs = fs6.createFileSystemAdapter(this._options.fs);
            this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path22.sep);
            this.stats = this._getValue(this._options.stats, false);
            this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);
            this.fsStatSettings = new fsStat.Settings({
              followSymbolicLink: this.followSymbolicLinks,
              fs: this.fs,
              throwErrorOnBrokenSymbolicLink: this.throwErrorOnBrokenSymbolicLink
            });
          }
          _getValue(option, value) {
            return option !== null && option !== void 0 ? option : value;
          }
        };
        exports2.default = Settings;
      }
    });
    var require_out2 = __commonJS2({
      "node_modules/@nodelib/fs.scandir/out/index.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        exports2.Settings = exports2.scandirSync = exports2.scandir = void 0;
        var async = require_async2();
        var sync = require_sync2();
        var settings_1 = require_settings2();
        exports2.Settings = settings_1.default;
        function scandir(path22, optionsOrSettingsOrCallback, callback) {
          if (typeof optionsOrSettingsOrCallback === "function") {
            async.read(path22, getSettings(), optionsOrSettingsOrCallback);
            return;
          }
          async.read(path22, getSettings(optionsOrSettingsOrCallback), callback);
        }
        __name(scandir, "scandir");
        exports2.scandir = scandir;
        function scandirSync(path22, optionsOrSettings) {
          const settings = getSettings(optionsOrSettings);
          return sync.read(path22, settings);
        }
        __name(scandirSync, "scandirSync");
        exports2.scandirSync = scandirSync;
        function getSettings(settingsOrOptions = {}) {
          if (settingsOrOptions instanceof settings_1.default) {
            return settingsOrOptions;
          }
          return new settings_1.default(settingsOrOptions);
        }
        __name(getSettings, "getSettings");
      }
    });
    var require_reusify = __commonJS2({
      "node_modules/reusify/reusify.js"(exports2, module2) {
        "use strict";
        function reusify(Constructor) {
          var head = new Constructor();
          var tail = head;
          function get() {
            var current = head;
            if (current.next) {
              head = current.next;
            } else {
              head = new Constructor();
              tail = head;
            }
            current.next = null;
            return current;
          }
          __name(get, "get");
          function release(obj) {
            tail.next = obj;
            tail = obj;
          }
          __name(release, "release");
          return {
            get,
            release
          };
        }
        __name(reusify, "reusify");
        module2.exports = reusify;
      }
    });
    var require_queue = __commonJS2({
      "node_modules/fastq/queue.js"(exports2, module2) {
        "use strict";
        var reusify = require_reusify();
        function fastqueue(context, worker, concurrency) {
          if (typeof context === "function") {
            concurrency = worker;
            worker = context;
            context = null;
          }
          if (concurrency < 1) {
            throw new Error("fastqueue concurrency must be greater than 1");
          }
          var cache = reusify(Task);
          var queueHead = null;
          var queueTail = null;
          var _running = 0;
          var errorHandler = null;
          var self2 = {
            push,
            drain: noop5,
            saturated: noop5,
            pause,
            paused: false,
            concurrency,
            running,
            resume,
            idle,
            length,
            getQueue,
            unshift,
            empty: noop5,
            kill: kill2,
            killAndDrain,
            error
          };
          return self2;
          function running() {
            return _running;
          }
          __name(running, "running");
          function pause() {
            self2.paused = true;
          }
          __name(pause, "pause");
          function length() {
            var current = queueHead;
            var counter = 0;
            while (current) {
              current = current.next;
              counter++;
            }
            return counter;
          }
          __name(length, "length");
          function getQueue() {
            var current = queueHead;
            var tasks = [];
            while (current) {
              tasks.push(current.value);
              current = current.next;
            }
            return tasks;
          }
          __name(getQueue, "getQueue");
          function resume() {
            if (!self2.paused) return;
            self2.paused = false;
            for (var i = 0; i < self2.concurrency; i++) {
              _running++;
              release();
            }
          }
          __name(resume, "resume");
          function idle() {
            return _running === 0 && self2.length() === 0;
          }
          __name(idle, "idle");
          function push(value, done) {
            var current = cache.get();
            current.context = context;
            current.release = release;
            current.value = value;
            current.callback = done || noop5;
            current.errorHandler = errorHandler;
            if (_running === self2.concurrency || self2.paused) {
              if (queueTail) {
                queueTail.next = current;
                queueTail = current;
              } else {
                queueHead = current;
                queueTail = current;
                self2.saturated();
              }
            } else {
              _running++;
              worker.call(context, current.value, current.worked);
            }
          }
          __name(push, "push");
          function unshift(value, done) {
            var current = cache.get();
            current.context = context;
            current.release = release;
            current.value = value;
            current.callback = done || noop5;
            if (_running === self2.concurrency || self2.paused) {
              if (queueHead) {
                current.next = queueHead;
                queueHead = current;
              } else {
                queueHead = current;
                queueTail = current;
                self2.saturated();
              }
            } else {
              _running++;
              worker.call(context, current.value, current.worked);
            }
          }
          __name(unshift, "unshift");
          function release(holder) {
            if (holder) {
              cache.release(holder);
            }
            var next = queueHead;
            if (next) {
              if (!self2.paused) {
                if (queueTail === queueHead) {
                  queueTail = null;
                }
                queueHead = next.next;
                next.next = null;
                worker.call(context, next.value, next.worked);
                if (queueTail === null) {
                  self2.empty();
                }
              } else {
                _running--;
              }
            } else if (--_running === 0) {
              self2.drain();
            }
          }
          __name(release, "release");
          function kill2() {
            queueHead = null;
            queueTail = null;
            self2.drain = noop5;
          }
          __name(kill2, "kill2");
          function killAndDrain() {
            queueHead = null;
            queueTail = null;
            self2.drain();
            self2.drain = noop5;
          }
          __name(killAndDrain, "killAndDrain");
          function error(handler) {
            errorHandler = handler;
          }
          __name(error, "error");
        }
        __name(fastqueue, "fastqueue");
        function noop5() {
        }
        __name(noop5, "noop5");
        function Task() {
          this.value = null;
          this.callback = noop5;
          this.next = null;
          this.release = noop5;
          this.context = null;
          this.errorHandler = null;
          var self2 = this;
          this.worked = /* @__PURE__ */ __name(function worked(err, result) {
            var callback = self2.callback;
            var errorHandler = self2.errorHandler;
            var val = self2.value;
            self2.value = null;
            self2.callback = noop5;
            if (self2.errorHandler) {
              errorHandler(err, val);
            }
            callback.call(self2.context, err, result);
            self2.release(self2);
          }, "worked");
        }
        __name(Task, "Task");
        function queueAsPromised(context, worker, concurrency) {
          if (typeof context === "function") {
            concurrency = worker;
            worker = context;
            context = null;
          }
          function asyncWrapper(arg, cb) {
            worker.call(this, arg).then(function(res) {
              cb(null, res);
            }, cb);
          }
          __name(asyncWrapper, "asyncWrapper");
          var queue = fastqueue(context, asyncWrapper, concurrency);
          var pushCb = queue.push;
          var unshiftCb = queue.unshift;
          queue.push = push;
          queue.unshift = unshift;
          queue.drained = drained;
          return queue;
          function push(value) {
            var p = new Promise(function(resolve, reject) {
              pushCb(value, function(err, result) {
                if (err) {
                  reject(err);
                  return;
                }
                resolve(result);
              });
            });
            p.catch(noop5);
            return p;
          }
          __name(push, "push");
          function unshift(value) {
            var p = new Promise(function(resolve, reject) {
              unshiftCb(value, function(err, result) {
                if (err) {
                  reject(err);
                  return;
                }
                resolve(result);
              });
            });
            p.catch(noop5);
            return p;
          }
          __name(unshift, "unshift");
          function drained() {
            var previousDrain = queue.drain;
            var p = new Promise(function(resolve) {
              queue.drain = function() {
                previousDrain();
                resolve();
              };
            });
            return p;
          }
          __name(drained, "drained");
        }
        __name(queueAsPromised, "queueAsPromised");
        module2.exports = fastqueue;
        module2.exports.promise = queueAsPromised;
      }
    });
    var require_common22 = __commonJS2({
      "node_modules/@nodelib/fs.walk/out/readers/common.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        exports2.joinPathSegments = exports2.replacePathSegmentSeparator = exports2.isAppliedFilter = exports2.isFatalError = void 0;
        function isFatalError(settings, error) {
          if (settings.errorFilter === null) {
            return true;
          }
          return !settings.errorFilter(error);
        }
        __name(isFatalError, "isFatalError");
        exports2.isFatalError = isFatalError;
        function isAppliedFilter(filter, value) {
          return filter === null || filter(value);
        }
        __name(isAppliedFilter, "isAppliedFilter");
        exports2.isAppliedFilter = isAppliedFilter;
        function replacePathSegmentSeparator(filepath, separator) {
          return filepath.split(/[/\\]/).join(separator);
        }
        __name(replacePathSegmentSeparator, "replacePathSegmentSeparator");
        exports2.replacePathSegmentSeparator = replacePathSegmentSeparator;
        function joinPathSegments(a2, b, separator) {
          if (a2 === "") {
            return b;
          }
          if (a2.endsWith(separator)) {
            return a2 + b;
          }
          return a2 + separator + b;
        }
        __name(joinPathSegments, "joinPathSegments");
        exports2.joinPathSegments = joinPathSegments;
      }
    });
    var require_reader = __commonJS2({
      "node_modules/@nodelib/fs.walk/out/readers/reader.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var common = require_common22();
        var Reader = class {
          static {
            __name(this, "Reader");
          }
          constructor(_root, _settings) {
            this._root = _root;
            this._settings = _settings;
            this._root = common.replacePathSegmentSeparator(_root, _settings.pathSegmentSeparator);
          }
        };
        exports2.default = Reader;
      }
    });
    var require_async3 = __commonJS2({
      "node_modules/@nodelib/fs.walk/out/readers/async.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var events_1 = __require("events");
        var fsScandir = require_out2();
        var fastq = require_queue();
        var common = require_common22();
        var reader_1 = require_reader();
        var AsyncReader = class extends reader_1.default {
          static {
            __name(this, "AsyncReader");
          }
          constructor(_root, _settings) {
            super(_root, _settings);
            this._settings = _settings;
            this._scandir = fsScandir.scandir;
            this._emitter = new events_1.EventEmitter();
            this._queue = fastq(this._worker.bind(this), this._settings.concurrency);
            this._isFatalError = false;
            this._isDestroyed = false;
            this._queue.drain = () => {
              if (!this._isFatalError) {
                this._emitter.emit("end");
              }
            };
          }
          read() {
            this._isFatalError = false;
            this._isDestroyed = false;
            setImmediate(() => {
              this._pushToQueue(this._root, this._settings.basePath);
            });
            return this._emitter;
          }
          get isDestroyed() {
            return this._isDestroyed;
          }
          destroy() {
            if (this._isDestroyed) {
              throw new Error("The reader is already destroyed");
            }
            this._isDestroyed = true;
            this._queue.killAndDrain();
          }
          onEntry(callback) {
            this._emitter.on("entry", callback);
          }
          onError(callback) {
            this._emitter.once("error", callback);
          }
          onEnd(callback) {
            this._emitter.once("end", callback);
          }
          _pushToQueue(directory, base) {
            const queueItem = { directory, base };
            this._queue.push(queueItem, (error) => {
              if (error !== null) {
                this._handleError(error);
              }
            });
          }
          _worker(item, done) {
            this._scandir(item.directory, this._settings.fsScandirSettings, (error, entries) => {
              if (error !== null) {
                done(error, void 0);
                return;
              }
              for (const entry of entries) {
                this._handleEntry(entry, item.base);
              }
              done(null, void 0);
            });
          }
          _handleError(error) {
            if (this._isDestroyed || !common.isFatalError(this._settings, error)) {
              return;
            }
            this._isFatalError = true;
            this._isDestroyed = true;
            this._emitter.emit("error", error);
          }
          _handleEntry(entry, base) {
            if (this._isDestroyed || this._isFatalError) {
              return;
            }
            const fullpath = entry.path;
            if (base !== void 0) {
              entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);
            }
            if (common.isAppliedFilter(this._settings.entryFilter, entry)) {
              this._emitEntry(entry);
            }
            if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) {
              this._pushToQueue(fullpath, base === void 0 ? void 0 : entry.path);
            }
          }
          _emitEntry(entry) {
            this._emitter.emit("entry", entry);
          }
        };
        exports2.default = AsyncReader;
      }
    });
    var require_async4 = __commonJS2({
      "node_modules/@nodelib/fs.walk/out/providers/async.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var async_1 = require_async3();
        var AsyncProvider = class {
          static {
            __name(this, "AsyncProvider");
          }
          constructor(_root, _settings) {
            this._root = _root;
            this._settings = _settings;
            this._reader = new async_1.default(this._root, this._settings);
            this._storage = [];
          }
          read(callback) {
            this._reader.onError((error) => {
              callFailureCallback(callback, error);
            });
            this._reader.onEntry((entry) => {
              this._storage.push(entry);
            });
            this._reader.onEnd(() => {
              callSuccessCallback(callback, this._storage);
            });
            this._reader.read();
          }
        };
        exports2.default = AsyncProvider;
        function callFailureCallback(callback, error) {
          callback(error);
        }
        __name(callFailureCallback, "callFailureCallback");
        function callSuccessCallback(callback, entries) {
          callback(null, entries);
        }
        __name(callSuccessCallback, "callSuccessCallback");
      }
    });
    var require_stream2 = __commonJS2({
      "node_modules/@nodelib/fs.walk/out/providers/stream.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var stream_1 = __require("stream");
        var async_1 = require_async3();
        var StreamProvider = class {
          static {
            __name(this, "StreamProvider");
          }
          constructor(_root, _settings) {
            this._root = _root;
            this._settings = _settings;
            this._reader = new async_1.default(this._root, this._settings);
            this._stream = new stream_1.Readable({
              objectMode: true,
              read: /* @__PURE__ */ __name(() => {
              }, "read"),
              destroy: /* @__PURE__ */ __name(() => {
                if (!this._reader.isDestroyed) {
                  this._reader.destroy();
                }
              }, "destroy")
            });
          }
          read() {
            this._reader.onError((error) => {
              this._stream.emit("error", error);
            });
            this._reader.onEntry((entry) => {
              this._stream.push(entry);
            });
            this._reader.onEnd(() => {
              this._stream.push(null);
            });
            this._reader.read();
            return this._stream;
          }
        };
        exports2.default = StreamProvider;
      }
    });
    var require_sync3 = __commonJS2({
      "node_modules/@nodelib/fs.walk/out/readers/sync.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var fsScandir = require_out2();
        var common = require_common22();
        var reader_1 = require_reader();
        var SyncReader = class extends reader_1.default {
          static {
            __name(this, "SyncReader");
          }
          constructor() {
            super(...arguments);
            this._scandir = fsScandir.scandirSync;
            this._storage = [];
            this._queue = /* @__PURE__ */ new Set();
          }
          read() {
            this._pushToQueue(this._root, this._settings.basePath);
            this._handleQueue();
            return this._storage;
          }
          _pushToQueue(directory, base) {
            this._queue.add({ directory, base });
          }
          _handleQueue() {
            for (const item of this._queue.values()) {
              this._handleDirectory(item.directory, item.base);
            }
          }
          _handleDirectory(directory, base) {
            try {
              const entries = this._scandir(directory, this._settings.fsScandirSettings);
              for (const entry of entries) {
                this._handleEntry(entry, base);
              }
            } catch (error) {
              this._handleError(error);
            }
          }
          _handleError(error) {
            if (!common.isFatalError(this._settings, error)) {
              return;
            }
            throw error;
          }
          _handleEntry(entry, base) {
            const fullpath = entry.path;
            if (base !== void 0) {
              entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);
            }
            if (common.isAppliedFilter(this._settings.entryFilter, entry)) {
              this._pushToStorage(entry);
            }
            if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) {
              this._pushToQueue(fullpath, base === void 0 ? void 0 : entry.path);
            }
          }
          _pushToStorage(entry) {
            this._storage.push(entry);
          }
        };
        exports2.default = SyncReader;
      }
    });
    var require_sync4 = __commonJS2({
      "node_modules/@nodelib/fs.walk/out/providers/sync.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var sync_1 = require_sync3();
        var SyncProvider = class {
          static {
            __name(this, "SyncProvider");
          }
          constructor(_root, _settings) {
            this._root = _root;
            this._settings = _settings;
            this._reader = new sync_1.default(this._root, this._settings);
          }
          read() {
            return this._reader.read();
          }
        };
        exports2.default = SyncProvider;
      }
    });
    var require_settings3 = __commonJS2({
      "node_modules/@nodelib/fs.walk/out/settings.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var path22 = __require("path");
        var fsScandir = require_out2();
        var Settings = class {
          static {
            __name(this, "Settings");
          }
          constructor(_options = {}) {
            this._options = _options;
            this.basePath = this._getValue(this._options.basePath, void 0);
            this.concurrency = this._getValue(this._options.concurrency, Number.POSITIVE_INFINITY);
            this.deepFilter = this._getValue(this._options.deepFilter, null);
            this.entryFilter = this._getValue(this._options.entryFilter, null);
            this.errorFilter = this._getValue(this._options.errorFilter, null);
            this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path22.sep);
            this.fsScandirSettings = new fsScandir.Settings({
              followSymbolicLinks: this._options.followSymbolicLinks,
              fs: this._options.fs,
              pathSegmentSeparator: this._options.pathSegmentSeparator,
              stats: this._options.stats,
              throwErrorOnBrokenSymbolicLink: this._options.throwErrorOnBrokenSymbolicLink
            });
          }
          _getValue(option, value) {
            return option !== null && option !== void 0 ? option : value;
          }
        };
        exports2.default = Settings;
      }
    });
    var require_out3 = __commonJS2({
      "node_modules/@nodelib/fs.walk/out/index.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        exports2.Settings = exports2.walkStream = exports2.walkSync = exports2.walk = void 0;
        var async_1 = require_async4();
        var stream_1 = require_stream2();
        var sync_1 = require_sync4();
        var settings_1 = require_settings3();
        exports2.Settings = settings_1.default;
        function walk(directory, optionsOrSettingsOrCallback, callback) {
          if (typeof optionsOrSettingsOrCallback === "function") {
            new async_1.default(directory, getSettings()).read(optionsOrSettingsOrCallback);
            return;
          }
          new async_1.default(directory, getSettings(optionsOrSettingsOrCallback)).read(callback);
        }
        __name(walk, "walk");
        exports2.walk = walk;
        function walkSync(directory, optionsOrSettings) {
          const settings = getSettings(optionsOrSettings);
          const provider = new sync_1.default(directory, settings);
          return provider.read();
        }
        __name(walkSync, "walkSync");
        exports2.walkSync = walkSync;
        function walkStream(directory, optionsOrSettings) {
          const settings = getSettings(optionsOrSettings);
          const provider = new stream_1.default(directory, settings);
          return provider.read();
        }
        __name(walkStream, "walkStream");
        exports2.walkStream = walkStream;
        function getSettings(settingsOrOptions = {}) {
          if (settingsOrOptions instanceof settings_1.default) {
            return settingsOrOptions;
          }
          return new settings_1.default(settingsOrOptions);
        }
        __name(getSettings, "getSettings");
      }
    });
    var require_reader2 = __commonJS2({
      "node_modules/fast-glob/out/readers/reader.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var path22 = __require("path");
        var fsStat = require_out();
        var utils = require_utils32();
        var Reader = class {
          static {
            __name(this, "Reader");
          }
          constructor(_settings) {
            this._settings = _settings;
            this._fsStatSettings = new fsStat.Settings({
              followSymbolicLink: this._settings.followSymbolicLinks,
              fs: this._settings.fs,
              throwErrorOnBrokenSymbolicLink: this._settings.followSymbolicLinks
            });
          }
          _getFullEntryPath(filepath) {
            return path22.resolve(this._settings.cwd, filepath);
          }
          _makeEntry(stats, pattern) {
            const entry = {
              name: pattern,
              path: pattern,
              dirent: utils.fs.createDirentFromStats(pattern, stats)
            };
            if (this._settings.stats) {
              entry.stats = stats;
            }
            return entry;
          }
          _isFatalError(error) {
            return !utils.errno.isEnoentCodeError(error) && !this._settings.suppressErrors;
          }
        };
        exports2.default = Reader;
      }
    });
    var require_stream3 = __commonJS2({
      "node_modules/fast-glob/out/readers/stream.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var stream_1 = __require("stream");
        var fsStat = require_out();
        var fsWalk = require_out3();
        var reader_1 = require_reader2();
        var ReaderStream = class extends reader_1.default {
          static {
            __name(this, "ReaderStream");
          }
          constructor() {
            super(...arguments);
            this._walkStream = fsWalk.walkStream;
            this._stat = fsStat.stat;
          }
          dynamic(root, options) {
            return this._walkStream(root, options);
          }
          static(patterns, options) {
            const filepaths = patterns.map(this._getFullEntryPath, this);
            const stream = new stream_1.PassThrough({ objectMode: true });
            stream._write = (index, _enc, done) => {
              return this._getEntry(filepaths[index], patterns[index], options).then((entry) => {
                if (entry !== null && options.entryFilter(entry)) {
                  stream.push(entry);
                }
                if (index === filepaths.length - 1) {
                  stream.end();
                }
                done();
              }).catch(done);
            };
            for (let i = 0; i < filepaths.length; i++) {
              stream.write(i);
            }
            return stream;
          }
          _getEntry(filepath, pattern, options) {
            return this._getStat(filepath).then((stats) => this._makeEntry(stats, pattern)).catch((error) => {
              if (options.errorFilter(error)) {
                return null;
              }
              throw error;
            });
          }
          _getStat(filepath) {
            return new Promise((resolve, reject) => {
              this._stat(filepath, this._fsStatSettings, (error, stats) => {
                return error === null ? resolve(stats) : reject(error);
              });
            });
          }
        };
        exports2.default = ReaderStream;
      }
    });
    var require_async5 = __commonJS2({
      "node_modules/fast-glob/out/readers/async.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var fsWalk = require_out3();
        var reader_1 = require_reader2();
        var stream_1 = require_stream3();
        var ReaderAsync = class extends reader_1.default {
          static {
            __name(this, "ReaderAsync");
          }
          constructor() {
            super(...arguments);
            this._walkAsync = fsWalk.walk;
            this._readerStream = new stream_1.default(this._settings);
          }
          dynamic(root, options) {
            return new Promise((resolve, reject) => {
              this._walkAsync(root, options, (error, entries) => {
                if (error === null) {
                  resolve(entries);
                } else {
                  reject(error);
                }
              });
            });
          }
          static(patterns, options) {
            return __async(this, null, function* () {
              const entries = [];
              const stream = this._readerStream.static(patterns, options);
              return new Promise((resolve, reject) => {
                stream.once("error", reject);
                stream.on("data", (entry) => entries.push(entry));
                stream.once("end", () => resolve(entries));
              });
            });
          }
        };
        exports2.default = ReaderAsync;
      }
    });
    var require_matcher = __commonJS2({
      "node_modules/fast-glob/out/providers/matchers/matcher.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var utils = require_utils32();
        var Matcher = class {
          static {
            __name(this, "Matcher");
          }
          constructor(_patterns, _settings, _micromatchOptions) {
            this._patterns = _patterns;
            this._settings = _settings;
            this._micromatchOptions = _micromatchOptions;
            this._storage = [];
            this._fillStorage();
          }
          _fillStorage() {
            for (const pattern of this._patterns) {
              const segments = this._getPatternSegments(pattern);
              const sections = this._splitSegmentsIntoSections(segments);
              this._storage.push({
                complete: sections.length <= 1,
                pattern,
                segments,
                sections
              });
            }
          }
          _getPatternSegments(pattern) {
            const parts = utils.pattern.getPatternParts(pattern, this._micromatchOptions);
            return parts.map((part) => {
              const dynamic = utils.pattern.isDynamicPattern(part, this._settings);
              if (!dynamic) {
                return {
                  dynamic: false,
                  pattern: part
                };
              }
              return {
                dynamic: true,
                pattern: part,
                patternRe: utils.pattern.makeRe(part, this._micromatchOptions)
              };
            });
          }
          _splitSegmentsIntoSections(segments) {
            return utils.array.splitWhen(segments, (segment) => segment.dynamic && utils.pattern.hasGlobStar(segment.pattern));
          }
        };
        exports2.default = Matcher;
      }
    });
    var require_partial = __commonJS2({
      "node_modules/fast-glob/out/providers/matchers/partial.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var matcher_1 = require_matcher();
        var PartialMatcher = class extends matcher_1.default {
          static {
            __name(this, "PartialMatcher");
          }
          match(filepath) {
            const parts = filepath.split("/");
            const levels = parts.length;
            const patterns = this._storage.filter((info) => !info.complete || info.segments.length > levels);
            for (const pattern of patterns) {
              const section = pattern.sections[0];
              if (!pattern.complete && levels > section.length) {
                return true;
              }
              const match = parts.every((part, index) => {
                const segment = pattern.segments[index];
                if (segment.dynamic && segment.patternRe.test(part)) {
                  return true;
                }
                if (!segment.dynamic && segment.pattern === part) {
                  return true;
                }
                return false;
              });
              if (match) {
                return true;
              }
            }
            return false;
          }
        };
        exports2.default = PartialMatcher;
      }
    });
    var require_deep = __commonJS2({
      "node_modules/fast-glob/out/providers/filters/deep.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var utils = require_utils32();
        var partial_1 = require_partial();
        var DeepFilter = class {
          static {
            __name(this, "DeepFilter");
          }
          constructor(_settings, _micromatchOptions) {
            this._settings = _settings;
            this._micromatchOptions = _micromatchOptions;
          }
          getFilter(basePath, positive, negative) {
            const matcher = this._getMatcher(positive);
            const negativeRe = this._getNegativePatternsRe(negative);
            return (entry) => this._filter(basePath, entry, matcher, negativeRe);
          }
          _getMatcher(patterns) {
            return new partial_1.default(patterns, this._settings, this._micromatchOptions);
          }
          _getNegativePatternsRe(patterns) {
            const affectDepthOfReadingPatterns = patterns.filter(utils.pattern.isAffectDepthOfReadingPattern);
            return utils.pattern.convertPatternsToRe(affectDepthOfReadingPatterns, this._micromatchOptions);
          }
          _filter(basePath, entry, matcher, negativeRe) {
            if (this._isSkippedByDeep(basePath, entry.path)) {
              return false;
            }
            if (this._isSkippedSymbolicLink(entry)) {
              return false;
            }
            const filepath = utils.path.removeLeadingDotSegment(entry.path);
            if (this._isSkippedByPositivePatterns(filepath, matcher)) {
              return false;
            }
            return this._isSkippedByNegativePatterns(filepath, negativeRe);
          }
          _isSkippedByDeep(basePath, entryPath) {
            if (this._settings.deep === Infinity) {
              return false;
            }
            return this._getEntryLevel(basePath, entryPath) >= this._settings.deep;
          }
          _getEntryLevel(basePath, entryPath) {
            const entryPathDepth = entryPath.split("/").length;
            if (basePath === "") {
              return entryPathDepth;
            }
            const basePathDepth = basePath.split("/").length;
            return entryPathDepth - basePathDepth;
          }
          _isSkippedSymbolicLink(entry) {
            return !this._settings.followSymbolicLinks && entry.dirent.isSymbolicLink();
          }
          _isSkippedByPositivePatterns(entryPath, matcher) {
            return !this._settings.baseNameMatch && !matcher.match(entryPath);
          }
          _isSkippedByNegativePatterns(entryPath, patternsRe) {
            return !utils.pattern.matchAny(entryPath, patternsRe);
          }
        };
        exports2.default = DeepFilter;
      }
    });
    var require_entry = __commonJS2({
      "node_modules/fast-glob/out/providers/filters/entry.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var utils = require_utils32();
        var EntryFilter = class {
          static {
            __name(this, "EntryFilter");
          }
          constructor(_settings, _micromatchOptions) {
            this._settings = _settings;
            this._micromatchOptions = _micromatchOptions;
            this.index = /* @__PURE__ */ new Map();
          }
          getFilter(positive, negative) {
            const positiveRe = utils.pattern.convertPatternsToRe(positive, this._micromatchOptions);
            const negativeRe = utils.pattern.convertPatternsToRe(negative, Object.assign(Object.assign({}, this._micromatchOptions), { dot: true }));
            return (entry) => this._filter(entry, positiveRe, negativeRe);
          }
          _filter(entry, positiveRe, negativeRe) {
            const filepath = utils.path.removeLeadingDotSegment(entry.path);
            if (this._settings.unique && this._isDuplicateEntry(filepath)) {
              return false;
            }
            if (this._onlyFileFilter(entry) || this._onlyDirectoryFilter(entry)) {
              return false;
            }
            if (this._isSkippedByAbsoluteNegativePatterns(filepath, negativeRe)) {
              return false;
            }
            const isDirectory2 = entry.dirent.isDirectory();
            const isMatched = this._isMatchToPatterns(filepath, positiveRe, isDirectory2) && !this._isMatchToPatterns(filepath, negativeRe, isDirectory2);
            if (this._settings.unique && isMatched) {
              this._createIndexRecord(filepath);
            }
            return isMatched;
          }
          _isDuplicateEntry(filepath) {
            return this.index.has(filepath);
          }
          _createIndexRecord(filepath) {
            this.index.set(filepath, void 0);
          }
          _onlyFileFilter(entry) {
            return this._settings.onlyFiles && !entry.dirent.isFile();
          }
          _onlyDirectoryFilter(entry) {
            return this._settings.onlyDirectories && !entry.dirent.isDirectory();
          }
          _isSkippedByAbsoluteNegativePatterns(entryPath, patternsRe) {
            if (!this._settings.absolute) {
              return false;
            }
            const fullpath = utils.path.makeAbsolute(this._settings.cwd, entryPath);
            return utils.pattern.matchAny(fullpath, patternsRe);
          }
          _isMatchToPatterns(filepath, patternsRe, isDirectory2) {
            const isMatched = utils.pattern.matchAny(filepath, patternsRe);
            if (!isMatched && isDirectory2) {
              return utils.pattern.matchAny(filepath + "/", patternsRe);
            }
            return isMatched;
          }
        };
        exports2.default = EntryFilter;
      }
    });
    var require_error2 = __commonJS2({
      "node_modules/fast-glob/out/providers/filters/error.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var utils = require_utils32();
        var ErrorFilter = class {
          static {
            __name(this, "ErrorFilter");
          }
          constructor(_settings) {
            this._settings = _settings;
          }
          getFilter() {
            return (error) => this._isNonFatalError(error);
          }
          _isNonFatalError(error) {
            return utils.errno.isEnoentCodeError(error) || this._settings.suppressErrors;
          }
        };
        exports2.default = ErrorFilter;
      }
    });
    var require_entry2 = __commonJS2({
      "node_modules/fast-glob/out/providers/transformers/entry.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var utils = require_utils32();
        var EntryTransformer = class {
          static {
            __name(this, "EntryTransformer");
          }
          constructor(_settings) {
            this._settings = _settings;
          }
          getTransformer() {
            return (entry) => this._transform(entry);
          }
          _transform(entry) {
            let filepath = entry.path;
            if (this._settings.absolute) {
              filepath = utils.path.makeAbsolute(this._settings.cwd, filepath);
              filepath = utils.path.unixify(filepath);
            }
            if (this._settings.markDirectories && entry.dirent.isDirectory()) {
              filepath += "/";
            }
            if (!this._settings.objectMode) {
              return filepath;
            }
            return Object.assign(Object.assign({}, entry), { path: filepath });
          }
        };
        exports2.default = EntryTransformer;
      }
    });
    var require_provider = __commonJS2({
      "node_modules/fast-glob/out/providers/provider.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var path22 = __require("path");
        var deep_1 = require_deep();
        var entry_1 = require_entry();
        var error_1 = require_error2();
        var entry_2 = require_entry2();
        var Provider = class {
          static {
            __name(this, "Provider");
          }
          constructor(_settings) {
            this._settings = _settings;
            this.errorFilter = new error_1.default(this._settings);
            this.entryFilter = new entry_1.default(this._settings, this._getMicromatchOptions());
            this.deepFilter = new deep_1.default(this._settings, this._getMicromatchOptions());
            this.entryTransformer = new entry_2.default(this._settings);
          }
          _getRootDirectory(task) {
            return path22.resolve(this._settings.cwd, task.base);
          }
          _getReaderOptions(task) {
            const basePath = task.base === "." ? "" : task.base;
            return {
              basePath,
              pathSegmentSeparator: "/",
              concurrency: this._settings.concurrency,
              deepFilter: this.deepFilter.getFilter(basePath, task.positive, task.negative),
              entryFilter: this.entryFilter.getFilter(task.positive, task.negative),
              errorFilter: this.errorFilter.getFilter(),
              followSymbolicLinks: this._settings.followSymbolicLinks,
              fs: this._settings.fs,
              stats: this._settings.stats,
              throwErrorOnBrokenSymbolicLink: this._settings.throwErrorOnBrokenSymbolicLink,
              transform: this.entryTransformer.getTransformer()
            };
          }
          _getMicromatchOptions() {
            return {
              dot: this._settings.dot,
              matchBase: this._settings.baseNameMatch,
              nobrace: !this._settings.braceExpansion,
              nocase: !this._settings.caseSensitiveMatch,
              noext: !this._settings.extglob,
              noglobstar: !this._settings.globstar,
              posix: true,
              strictSlashes: false
            };
          }
        };
        exports2.default = Provider;
      }
    });
    var require_async6 = __commonJS2({
      "node_modules/fast-glob/out/providers/async.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var async_1 = require_async5();
        var provider_1 = require_provider();
        var ProviderAsync = class extends provider_1.default {
          static {
            __name(this, "ProviderAsync");
          }
          constructor() {
            super(...arguments);
            this._reader = new async_1.default(this._settings);
          }
          read(task) {
            return __async(this, null, function* () {
              const root = this._getRootDirectory(task);
              const options = this._getReaderOptions(task);
              const entries = yield this.api(root, task, options);
              return entries.map((entry) => options.transform(entry));
            });
          }
          api(root, task, options) {
            if (task.dynamic) {
              return this._reader.dynamic(root, options);
            }
            return this._reader.static(task.patterns, options);
          }
        };
        exports2.default = ProviderAsync;
      }
    });
    var require_stream4 = __commonJS2({
      "node_modules/fast-glob/out/providers/stream.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var stream_1 = __require("stream");
        var stream_2 = require_stream3();
        var provider_1 = require_provider();
        var ProviderStream = class extends provider_1.default {
          static {
            __name(this, "ProviderStream");
          }
          constructor() {
            super(...arguments);
            this._reader = new stream_2.default(this._settings);
          }
          read(task) {
            const root = this._getRootDirectory(task);
            const options = this._getReaderOptions(task);
            const source = this.api(root, task, options);
            const destination = new stream_1.Readable({ objectMode: true, read: /* @__PURE__ */ __name(() => {
            }, "read") });
            source.once("error", (error) => destination.emit("error", error)).on("data", (entry) => destination.emit("data", options.transform(entry))).once("end", () => destination.emit("end"));
            destination.once("close", () => source.destroy());
            return destination;
          }
          api(root, task, options) {
            if (task.dynamic) {
              return this._reader.dynamic(root, options);
            }
            return this._reader.static(task.patterns, options);
          }
        };
        exports2.default = ProviderStream;
      }
    });
    var require_sync5 = __commonJS2({
      "node_modules/fast-glob/out/readers/sync.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var fsStat = require_out();
        var fsWalk = require_out3();
        var reader_1 = require_reader2();
        var ReaderSync = class extends reader_1.default {
          static {
            __name(this, "ReaderSync");
          }
          constructor() {
            super(...arguments);
            this._walkSync = fsWalk.walkSync;
            this._statSync = fsStat.statSync;
          }
          dynamic(root, options) {
            return this._walkSync(root, options);
          }
          static(patterns, options) {
            const entries = [];
            for (const pattern of patterns) {
              const filepath = this._getFullEntryPath(pattern);
              const entry = this._getEntry(filepath, pattern, options);
              if (entry === null || !options.entryFilter(entry)) {
                continue;
              }
              entries.push(entry);
            }
            return entries;
          }
          _getEntry(filepath, pattern, options) {
            try {
              const stats = this._getStat(filepath);
              return this._makeEntry(stats, pattern);
            } catch (error) {
              if (options.errorFilter(error)) {
                return null;
              }
              throw error;
            }
          }
          _getStat(filepath) {
            return this._statSync(filepath, this._fsStatSettings);
          }
        };
        exports2.default = ReaderSync;
      }
    });
    var require_sync6 = __commonJS2({
      "node_modules/fast-glob/out/providers/sync.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var sync_1 = require_sync5();
        var provider_1 = require_provider();
        var ProviderSync = class extends provider_1.default {
          static {
            __name(this, "ProviderSync");
          }
          constructor() {
            super(...arguments);
            this._reader = new sync_1.default(this._settings);
          }
          read(task) {
            const root = this._getRootDirectory(task);
            const options = this._getReaderOptions(task);
            const entries = this.api(root, task, options);
            return entries.map(options.transform);
          }
          api(root, task, options) {
            if (task.dynamic) {
              return this._reader.dynamic(root, options);
            }
            return this._reader.static(task.patterns, options);
          }
        };
        exports2.default = ProviderSync;
      }
    });
    var require_settings4 = __commonJS2({
      "node_modules/fast-glob/out/settings.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        exports2.DEFAULT_FILE_SYSTEM_ADAPTER = void 0;
        var fs6 = __require("fs");
        var os2 = __require("os");
        var CPU_COUNT = Math.max(os2.cpus().length, 1);
        exports2.DEFAULT_FILE_SYSTEM_ADAPTER = {
          lstat: fs6.lstat,
          lstatSync: fs6.lstatSync,
          stat: fs6.stat,
          statSync: fs6.statSync,
          readdir: fs6.readdir,
          readdirSync: fs6.readdirSync
        };
        var Settings = class {
          static {
            __name(this, "Settings");
          }
          constructor(_options = {}) {
            this._options = _options;
            this.absolute = this._getValue(this._options.absolute, false);
            this.baseNameMatch = this._getValue(this._options.baseNameMatch, false);
            this.braceExpansion = this._getValue(this._options.braceExpansion, true);
            this.caseSensitiveMatch = this._getValue(this._options.caseSensitiveMatch, true);
            this.concurrency = this._getValue(this._options.concurrency, CPU_COUNT);
            this.cwd = this._getValue(this._options.cwd, process.cwd());
            this.deep = this._getValue(this._options.deep, Infinity);
            this.dot = this._getValue(this._options.dot, false);
            this.extglob = this._getValue(this._options.extglob, true);
            this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, true);
            this.fs = this._getFileSystemMethods(this._options.fs);
            this.globstar = this._getValue(this._options.globstar, true);
            this.ignore = this._getValue(this._options.ignore, []);
            this.markDirectories = this._getValue(this._options.markDirectories, false);
            this.objectMode = this._getValue(this._options.objectMode, false);
            this.onlyDirectories = this._getValue(this._options.onlyDirectories, false);
            this.onlyFiles = this._getValue(this._options.onlyFiles, true);
            this.stats = this._getValue(this._options.stats, false);
            this.suppressErrors = this._getValue(this._options.suppressErrors, false);
            this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, false);
            this.unique = this._getValue(this._options.unique, true);
            if (this.onlyDirectories) {
              this.onlyFiles = false;
            }
            if (this.stats) {
              this.objectMode = true;
            }
            this.ignore = [].concat(this.ignore);
          }
          _getValue(option, value) {
            return option === void 0 ? value : option;
          }
          _getFileSystemMethods(methods = {}) {
            return Object.assign(Object.assign({}, exports2.DEFAULT_FILE_SYSTEM_ADAPTER), methods);
          }
        };
        exports2.default = Settings;
      }
    });
    var require_out4 = __commonJS2({
      "node_modules/fast-glob/out/index.js"(exports2, module2) {
        "use strict";
        var taskManager = require_tasks();
        var async_1 = require_async6();
        var stream_1 = require_stream4();
        var sync_1 = require_sync6();
        var settings_1 = require_settings4();
        var utils = require_utils32();
        function FastGlob(source, options) {
          return __async(this, null, function* () {
            assertPatternsInput2(source);
            const works = getWorks(source, async_1.default, options);
            const result = yield Promise.all(works);
            return utils.array.flatten(result);
          });
        }
        __name(FastGlob, "FastGlob");
        (function(FastGlob2) {
          FastGlob2.glob = FastGlob2;
          FastGlob2.globSync = sync;
          FastGlob2.globStream = stream;
          FastGlob2.async = FastGlob2;
          function sync(source, options) {
            assertPatternsInput2(source);
            const works = getWorks(source, sync_1.default, options);
            return utils.array.flatten(works);
          }
          __name(sync, "sync");
          FastGlob2.sync = sync;
          function stream(source, options) {
            assertPatternsInput2(source);
            const works = getWorks(source, stream_1.default, options);
            return utils.stream.merge(works);
          }
          __name(stream, "stream");
          FastGlob2.stream = stream;
          function generateTasks2(source, options) {
            assertPatternsInput2(source);
            const patterns = [].concat(source);
            const settings = new settings_1.default(options);
            return taskManager.generate(patterns, settings);
          }
          __name(generateTasks2, "generateTasks2");
          FastGlob2.generateTasks = generateTasks2;
          function isDynamicPattern2(source, options) {
            assertPatternsInput2(source);
            const settings = new settings_1.default(options);
            return utils.pattern.isDynamicPattern(source, settings);
          }
          __name(isDynamicPattern2, "isDynamicPattern2");
          FastGlob2.isDynamicPattern = isDynamicPattern2;
          function escapePath(source) {
            assertPatternsInput2(source);
            return utils.path.escape(source);
          }
          __name(escapePath, "escapePath");
          FastGlob2.escapePath = escapePath;
          function convertPathToPattern2(source) {
            assertPatternsInput2(source);
            return utils.path.convertPathToPattern(source);
          }
          __name(convertPathToPattern2, "convertPathToPattern2");
          FastGlob2.convertPathToPattern = convertPathToPattern2;
          let posix;
          (function(posix2) {
            function escapePath2(source) {
              assertPatternsInput2(source);
              return utils.path.escapePosixPath(source);
            }
            __name(escapePath2, "escapePath2");
            posix2.escapePath = escapePath2;
            function convertPathToPattern3(source) {
              assertPatternsInput2(source);
              return utils.path.convertPosixPathToPattern(source);
            }
            __name(convertPathToPattern3, "convertPathToPattern3");
            posix2.convertPathToPattern = convertPathToPattern3;
          })(posix = FastGlob2.posix || (FastGlob2.posix = {}));
          let win32;
          (function(win322) {
            function escapePath2(source) {
              assertPatternsInput2(source);
              return utils.path.escapeWindowsPath(source);
            }
            __name(escapePath2, "escapePath2");
            win322.escapePath = escapePath2;
            function convertPathToPattern3(source) {
              assertPatternsInput2(source);
              return utils.path.convertWindowsPathToPattern(source);
            }
            __name(convertPathToPattern3, "convertPathToPattern3");
            win322.convertPathToPattern = convertPathToPattern3;
          })(win32 = FastGlob2.win32 || (FastGlob2.win32 = {}));
        })(FastGlob || (FastGlob = {}));
        function getWorks(source, _Provider, options) {
          const patterns = [].concat(source);
          const settings = new settings_1.default(options);
          const tasks = taskManager.generate(patterns, settings);
          const provider = new _Provider(settings);
          return tasks.map(provider.read, provider);
        }
        __name(getWorks, "getWorks");
        function assertPatternsInput2(input) {
          const source = [].concat(input);
          const isValidSource = source.every((item) => utils.string.isString(item) && !utils.string.isEmpty(item));
          if (!isValidSource) {
            throw new TypeError("Patterns must be a string (non empty) or an array of strings");
          }
        }
        __name(assertPatternsInput2, "assertPatternsInput2");
        module2.exports = FastGlob;
      }
    });
    var require_ignore2 = __commonJS2({
      "node_modules/ignore/index.js"(exports2, module2) {
        "use strict";
        function makeArray(subject) {
          return Array.isArray(subject) ? subject : [subject];
        }
        __name(makeArray, "makeArray");
        var EMPTY = "";
        var SPACE = " ";
        var ESCAPE = "\\";
        var REGEX_TEST_BLANK_LINE = /^\s+$/;
        var REGEX_INVALID_TRAILING_BACKSLASH = /(?:[^\\]|^)\\$/;
        var REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION = /^\\!/;
        var REGEX_REPLACE_LEADING_EXCAPED_HASH = /^\\#/;
        var REGEX_SPLITALL_CRLF = /\r?\n/g;
        var REGEX_TEST_INVALID_PATH = /^\.*\/|^\.+$/;
        var SLASH = "/";
        var TMP_KEY_IGNORE = "node-ignore";
        if (typeof Symbol !== "undefined") {
          TMP_KEY_IGNORE = Symbol.for("node-ignore");
        }
        var KEY_IGNORE = TMP_KEY_IGNORE;
        var define = /* @__PURE__ */ __name((object, key, value) => Object.defineProperty(object, key, { value }), "define");
        var REGEX_REGEXP_RANGE = /([0-z])-([0-z])/g;
        var RETURN_FALSE = /* @__PURE__ */ __name(() => false, "RETURN_FALSE");
        var sanitizeRange = /* @__PURE__ */ __name((range) => range.replace(
          REGEX_REGEXP_RANGE,
          (match, from, to) => from.charCodeAt(0) <= to.charCodeAt(0) ? match : EMPTY
        ), "sanitizeRange");
        var cleanRangeBackSlash = /* @__PURE__ */ __name((slashes) => {
          const { length } = slashes;
          return slashes.slice(0, length - length % 2);
        }, "cleanRangeBackSlash");
        var REPLACERS = [
          [
            // remove BOM
            // TODO:
            // Other similar zero-width characters?
            /^\uFEFF/,
            () => EMPTY
          ],
          // > Trailing spaces are ignored unless they are quoted with backslash ("\")
          [
            // (a\ ) -> (a )
            // (a  ) -> (a)
            // (a \ ) -> (a  )
            /\\?\s+$/,
            (match) => match.indexOf("\\") === 0 ? SPACE : EMPTY
          ],
          // replace (\ ) with ' '
          [
            /\\\s/g,
            () => SPACE
          ],
          // Escape metacharacters
          // which is written down by users but means special for regular expressions.
          // > There are 12 characters with special meanings:
          // > - the backslash \,
          // > - the caret ^,
          // > - the dollar sign $,
          // > - the period or dot .,
          // > - the vertical bar or pipe symbol |,
          // > - the question mark ?,
          // > - the asterisk or star *,
          // > - the plus sign +,
          // > - the opening parenthesis (,
          // > - the closing parenthesis ),
          // > - and the opening square bracket [,
          // > - the opening curly brace {,
          // > These special characters are often called "metacharacters".
          [
            /[\\$.|*+(){^]/g,
            (match) => `\\${match}`
          ],
          [
            // > a question mark (?) matches a single character
            /(?!\\)\?/g,
            () => "[^/]"
          ],
          // leading slash
          [
            // > A leading slash matches the beginning of the pathname.
            // > For example, "/*.c" matches "cat-file.c" but not "mozilla-sha1/sha1.c".
            // A leading slash matches the beginning of the pathname
            /^\//,
            () => "^"
          ],
          // replace special metacharacter slash after the leading slash
          [
            /\//g,
            () => "\\/"
          ],
          [
            // > A leading "**" followed by a slash means match in all directories.
            // > For example, "**/foo" matches file or directory "foo" anywhere,
            // > the same as pattern "foo".
            // > "**/foo/bar" matches file or directory "bar" anywhere that is directly
            // >   under directory "foo".
            // Notice that the '*'s have been replaced as '\\*'
            /^\^*\\\*\\\*\\\//,
            // '**/foo' <-> 'foo'
            () => "^(?:.*\\/)?"
          ],
          // starting
          [
            // there will be no leading '/'
            //   (which has been replaced by section "leading slash")
            // If starts with '**', adding a '^' to the regular expression also works
            /^(?=[^^])/,
            /* @__PURE__ */ __name(function startingReplacer() {
              return !/\/(?!$)/.test(this) ? "(?:^|\\/)" : "^";
            }, "startingReplacer")
          ],
          // two globstars
          [
            // Use lookahead assertions so that we could match more than one `'/**'`
            /\\\/\\\*\\\*(?=\\\/|$)/g,
            // Zero, one or several directories
            // should not use '*', or it will be replaced by the next replacer
            // Check if it is not the last `'/**'`
            (_, index, str) => index + 6 < str.length ? "(?:\\/[^\\/]+)*" : "\\/.+"
          ],
          // normal intermediate wildcards
          [
            // Never replace escaped '*'
            // ignore rule '\*' will match the path '*'
            // 'abc.*/' -> go
            // 'abc.*'  -> skip this rule,
            //    coz trailing single wildcard will be handed by [trailing wildcard]
            /(^|[^\\]+)(\\\*)+(?=.+)/g,
            // '*.js' matches '.js'
            // '*.js' doesn't match 'abc'
            (_, p1, p2) => {
              const unescaped = p2.replace(/\\\*/g, "[^\\/]*");
              return p1 + unescaped;
            }
          ],
          [
            // unescape, revert step 3 except for back slash
            // For example, if a user escape a '\\*',
            // after step 3, the result will be '\\\\\\*'
            /\\\\\\(?=[$.|*+(){^])/g,
            () => ESCAPE
          ],
          [
            // '\\\\' -> '\\'
            /\\\\/g,
            () => ESCAPE
          ],
          [
            // > The range notation, e.g. [a-zA-Z],
            // > can be used to match one of the characters in a range.
            // `\` is escaped by step 3
            /(\\)?\[([^\]/]*?)(\\*)($|\])/g,
            (match, leadEscape, range, endEscape, close) => leadEscape === ESCAPE ? `\\[${range}${cleanRangeBackSlash(endEscape)}${close}` : close === "]" ? endEscape.length % 2 === 0 ? `[${sanitizeRange(range)}${endEscape}]` : "[]" : "[]"
          ],
          // ending
          [
            // 'js' will not match 'js.'
            // 'ab' will not match 'abc'
            /(?:[^*])$/,
            // WTF!
            // https://git-scm.com/docs/gitignore
            // changes in [2.22.1](https://git-scm.com/docs/gitignore/2.22.1)
            // which re-fixes #24, #38
            // > If there is a separator at the end of the pattern then the pattern
            // > will only match directories, otherwise the pattern can match both
            // > files and directories.
            // 'js*' will not match 'a.js'
            // 'js/' will not match 'a.js'
            // 'js' will match 'a.js' and 'a.js/'
            (match) => /\/$/.test(match) ? `${match}$` : `${match}(?=$|\\/$)`
          ],
          // trailing wildcard
          [
            /(\^|\\\/)?\\\*$/,
            (_, p1) => {
              const prefix = p1 ? `${p1}[^/]+` : "[^/]*";
              return `${prefix}(?=$|\\/$)`;
            }
          ]
        ];
        var regexCache = /* @__PURE__ */ Object.create(null);
        var makeRegex = /* @__PURE__ */ __name((pattern, ignoreCase) => {
          let source = regexCache[pattern];
          if (!source) {
            source = REPLACERS.reduce(
              (prev, current) => prev.replace(current[0], current[1].bind(pattern)),
              pattern
            );
            regexCache[pattern] = source;
          }
          return ignoreCase ? new RegExp(source, "i") : new RegExp(source);
        }, "makeRegex");
        var isString = /* @__PURE__ */ __name((subject) => typeof subject === "string", "isString");
        var checkPattern = /* @__PURE__ */ __name((pattern) => pattern && isString(pattern) && !REGEX_TEST_BLANK_LINE.test(pattern) && !REGEX_INVALID_TRAILING_BACKSLASH.test(pattern) && pattern.indexOf("#") !== 0, "checkPattern");
        var splitPattern = /* @__PURE__ */ __name((pattern) => pattern.split(REGEX_SPLITALL_CRLF), "splitPattern");
        var IgnoreRule = class {
          static {
            __name(this, "IgnoreRule");
          }
          constructor(origin, pattern, negative, regex) {
            this.origin = origin;
            this.pattern = pattern;
            this.negative = negative;
            this.regex = regex;
          }
        };
        var createRule = /* @__PURE__ */ __name((pattern, ignoreCase) => {
          const origin = pattern;
          let negative = false;
          if (pattern.indexOf("!") === 0) {
            negative = true;
            pattern = pattern.substr(1);
          }
          pattern = pattern.replace(REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION, "!").replace(REGEX_REPLACE_LEADING_EXCAPED_HASH, "#");
          const regex = makeRegex(pattern, ignoreCase);
          return new IgnoreRule(
            origin,
            pattern,
            negative,
            regex
          );
        }, "createRule");
        var throwError = /* @__PURE__ */ __name((message, Ctor) => {
          throw new Ctor(message);
        }, "throwError");
        var checkPath = /* @__PURE__ */ __name((path22, originalPath, doThrow) => {
          if (!isString(path22)) {
            return doThrow(
              `path must be a string, but got \`${originalPath}\``,
              TypeError
            );
          }
          if (!path22) {
            return doThrow(`path must not be empty`, TypeError);
          }
          if (checkPath.isNotRelative(path22)) {
            const r = "`path.relative()`d";
            return doThrow(
              `path should be a ${r} string, but got "${originalPath}"`,
              RangeError
            );
          }
          return true;
        }, "checkPath");
        var isNotRelative = /* @__PURE__ */ __name((path22) => REGEX_TEST_INVALID_PATH.test(path22), "isNotRelative");
        checkPath.isNotRelative = isNotRelative;
        checkPath.convert = (p) => p;
        var Ignore = class {
          static {
            __name(this, "Ignore");
          }
          constructor({
            ignorecase = true,
            ignoreCase = ignorecase,
            allowRelativePaths = false
          } = {}) {
            define(this, KEY_IGNORE, true);
            this._rules = [];
            this._ignoreCase = ignoreCase;
            this._allowRelativePaths = allowRelativePaths;
            this._initCache();
          }
          _initCache() {
            this._ignoreCache = /* @__PURE__ */ Object.create(null);
            this._testCache = /* @__PURE__ */ Object.create(null);
          }
          _addPattern(pattern) {
            if (pattern && pattern[KEY_IGNORE]) {
              this._rules = this._rules.concat(pattern._rules);
              this._added = true;
              return;
            }
            if (checkPattern(pattern)) {
              const rule = createRule(pattern, this._ignoreCase);
              this._added = true;
              this._rules.push(rule);
            }
          }
          // @param {Array<string> | string | Ignore} pattern
          add(pattern) {
            this._added = false;
            makeArray(
              isString(pattern) ? splitPattern(pattern) : pattern
            ).forEach(this._addPattern, this);
            if (this._added) {
              this._initCache();
            }
            return this;
          }
          // legacy
          addPattern(pattern) {
            return this.add(pattern);
          }
          //          |           ignored : unignored
          // negative |   0:0   |   0:1   |   1:0   |   1:1
          // -------- | ------- | ------- | ------- | --------
          //     0    |  TEST   |  TEST   |  SKIP   |    X
          //     1    |  TESTIF |  SKIP   |  TEST   |    X
          // - SKIP: always skip
          // - TEST: always test
          // - TESTIF: only test if checkUnignored
          // - X: that never happen
          // @param {boolean} whether should check if the path is unignored,
          //   setting `checkUnignored` to `false` could reduce additional
          //   path matching.
          // @returns {TestResult} true if a file is ignored
          _testOne(path22, checkUnignored) {
            let ignored = false;
            let unignored = false;
            this._rules.forEach((rule) => {
              const { negative } = rule;
              if (unignored === negative && ignored !== unignored || negative && !ignored && !unignored && !checkUnignored) {
                return;
              }
              const matched = rule.regex.test(path22);
              if (matched) {
                ignored = !negative;
                unignored = negative;
              }
            });
            return {
              ignored,
              unignored
            };
          }
          // @returns {TestResult}
          _test(originalPath, cache, checkUnignored, slices) {
            const path22 = originalPath && checkPath.convert(originalPath);
            checkPath(
              path22,
              originalPath,
              this._allowRelativePaths ? RETURN_FALSE : throwError
            );
            return this._t(path22, cache, checkUnignored, slices);
          }
          _t(path22, cache, checkUnignored, slices) {
            if (path22 in cache) {
              return cache[path22];
            }
            if (!slices) {
              slices = path22.split(SLASH);
            }
            slices.pop();
            if (!slices.length) {
              return cache[path22] = this._testOne(path22, checkUnignored);
            }
            const parent = this._t(
              slices.join(SLASH) + SLASH,
              cache,
              checkUnignored,
              slices
            );
            return cache[path22] = parent.ignored ? parent : this._testOne(path22, checkUnignored);
          }
          ignores(path22) {
            return this._test(path22, this._ignoreCache, false).ignored;
          }
          createFilter() {
            return (path22) => !this.ignores(path22);
          }
          filter(paths) {
            return makeArray(paths).filter(this.createFilter());
          }
          // @returns {TestResult}
          test(path22) {
            return this._test(path22, this._testCache, true);
          }
        };
        var factory = /* @__PURE__ */ __name((options) => new Ignore(options), "factory");
        var isPathValid = /* @__PURE__ */ __name((path22) => checkPath(path22 && checkPath.convert(path22), path22, RETURN_FALSE), "isPathValid");
        factory.isPathValid = isPathValid;
        factory.default = factory;
        module2.exports = factory;
        if (
          // Detect `process` so that it can run in browsers.
          typeof process !== "undefined" && (process.env && process.env.IGNORE_TEST_WIN32 || process.platform === "win32")
        ) {
          const makePosix = /* @__PURE__ */ __name((str) => /^\\\\\?\\/.test(str) || /["<>|\u0000-\u001F]+/u.test(str) ? str : str.replace(/\\/g, "/"), "makePosix");
          checkPath.convert = makePosix;
          const REGIX_IS_WINDOWS_PATH_ABSOLUTE = /^[a-z]:\//i;
          checkPath.isNotRelative = (path22) => REGIX_IS_WINDOWS_PATH_ABSOLUTE.test(path22) || isNotRelative(path22);
        }
      }
    });
    var require_identity = __commonJS2({
      "node_modules/yaml/dist/nodes/identity.js"(exports2) {
        "use strict";
        var ALIAS = Symbol.for("yaml.alias");
        var DOC = Symbol.for("yaml.document");
        var MAP = Symbol.for("yaml.map");
        var PAIR = Symbol.for("yaml.pair");
        var SCALAR = Symbol.for("yaml.scalar");
        var SEQ = Symbol.for("yaml.seq");
        var NODE_TYPE = Symbol.for("yaml.node.type");
        var isAlias = /* @__PURE__ */ __name((node) => !!node && typeof node === "object" && node[NODE_TYPE] === ALIAS, "isAlias");
        var isDocument = /* @__PURE__ */ __name((node) => !!node && typeof node === "object" && node[NODE_TYPE] === DOC, "isDocument");
        var isMap = /* @__PURE__ */ __name((node) => !!node && typeof node === "object" && node[NODE_TYPE] === MAP, "isMap");
        var isPair = /* @__PURE__ */ __name((node) => !!node && typeof node === "object" && node[NODE_TYPE] === PAIR, "isPair");
        var isScalar = /* @__PURE__ */ __name((node) => !!node && typeof node === "object" && node[NODE_TYPE] === SCALAR, "isScalar");
        var isSeq = /* @__PURE__ */ __name((node) => !!node && typeof node === "object" && node[NODE_TYPE] === SEQ, "isSeq");
        function isCollection(node) {
          if (node && typeof node === "object")
            switch (node[NODE_TYPE]) {
              case MAP:
              case SEQ:
                return true;
            }
          return false;
        }
        __name(isCollection, "isCollection");
        function isNode(node) {
          if (node && typeof node === "object")
            switch (node[NODE_TYPE]) {
              case ALIAS:
              case MAP:
              case SCALAR:
              case SEQ:
                return true;
            }
          return false;
        }
        __name(isNode, "isNode");
        var hasAnchor = /* @__PURE__ */ __name((node) => (isScalar(node) || isCollection(node)) && !!node.anchor, "hasAnchor");
        exports2.ALIAS = ALIAS;
        exports2.DOC = DOC;
        exports2.MAP = MAP;
        exports2.NODE_TYPE = NODE_TYPE;
        exports2.PAIR = PAIR;
        exports2.SCALAR = SCALAR;
        exports2.SEQ = SEQ;
        exports2.hasAnchor = hasAnchor;
        exports2.isAlias = isAlias;
        exports2.isCollection = isCollection;
        exports2.isDocument = isDocument;
        exports2.isMap = isMap;
        exports2.isNode = isNode;
        exports2.isPair = isPair;
        exports2.isScalar = isScalar;
        exports2.isSeq = isSeq;
      }
    });
    var require_visit = __commonJS2({
      "node_modules/yaml/dist/visit.js"(exports2) {
        "use strict";
        var identity2 = require_identity();
        var BREAK = Symbol("break visit");
        var SKIP = Symbol("skip children");
        var REMOVE = Symbol("remove node");
        function visit(node, visitor) {
          const visitor_ = initVisitor(visitor);
          if (identity2.isDocument(node)) {
            const cd2 = visit_(null, node.contents, visitor_, Object.freeze([node]));
            if (cd2 === REMOVE)
              node.contents = null;
          } else
            visit_(null, node, visitor_, Object.freeze([]));
        }
        __name(visit, "visit");
        visit.BREAK = BREAK;
        visit.SKIP = SKIP;
        visit.REMOVE = REMOVE;
        function visit_(key, node, visitor, path22) {
          const ctrl = callVisitor(key, node, visitor, path22);
          if (identity2.isNode(ctrl) || identity2.isPair(ctrl)) {
            replaceNode(key, path22, ctrl);
            return visit_(key, ctrl, visitor, path22);
          }
          if (typeof ctrl !== "symbol") {
            if (identity2.isCollection(node)) {
              path22 = Object.freeze(path22.concat(node));
              for (let i = 0; i < node.items.length; ++i) {
                const ci2 = visit_(i, node.items[i], visitor, path22);
                if (typeof ci2 === "number")
                  i = ci2 - 1;
                else if (ci2 === BREAK)
                  return BREAK;
                else if (ci2 === REMOVE) {
                  node.items.splice(i, 1);
                  i -= 1;
                }
              }
            } else if (identity2.isPair(node)) {
              path22 = Object.freeze(path22.concat(node));
              const ck = visit_("key", node.key, visitor, path22);
              if (ck === BREAK)
                return BREAK;
              else if (ck === REMOVE)
                node.key = null;
              const cv = visit_("value", node.value, visitor, path22);
              if (cv === BREAK)
                return BREAK;
              else if (cv === REMOVE)
                node.value = null;
            }
          }
          return ctrl;
        }
        __name(visit_, "visit_");
        function visitAsync(node, visitor) {
          return __async(this, null, function* () {
            const visitor_ = initVisitor(visitor);
            if (identity2.isDocument(node)) {
              const cd2 = yield visitAsync_(null, node.contents, visitor_, Object.freeze([node]));
              if (cd2 === REMOVE)
                node.contents = null;
            } else
              yield visitAsync_(null, node, visitor_, Object.freeze([]));
          });
        }
        __name(visitAsync, "visitAsync");
        visitAsync.BREAK = BREAK;
        visitAsync.SKIP = SKIP;
        visitAsync.REMOVE = REMOVE;
        function visitAsync_(key, node, visitor, path22) {
          return __async(this, null, function* () {
            const ctrl = yield callVisitor(key, node, visitor, path22);
            if (identity2.isNode(ctrl) || identity2.isPair(ctrl)) {
              replaceNode(key, path22, ctrl);
              return visitAsync_(key, ctrl, visitor, path22);
            }
            if (typeof ctrl !== "symbol") {
              if (identity2.isCollection(node)) {
                path22 = Object.freeze(path22.concat(node));
                for (let i = 0; i < node.items.length; ++i) {
                  const ci2 = yield visitAsync_(i, node.items[i], visitor, path22);
                  if (typeof ci2 === "number")
                    i = ci2 - 1;
                  else if (ci2 === BREAK)
                    return BREAK;
                  else if (ci2 === REMOVE) {
                    node.items.splice(i, 1);
                    i -= 1;
                  }
                }
              } else if (identity2.isPair(node)) {
                path22 = Object.freeze(path22.concat(node));
                const ck = yield visitAsync_("key", node.key, visitor, path22);
                if (ck === BREAK)
                  return BREAK;
                else if (ck === REMOVE)
                  node.key = null;
                const cv = yield visitAsync_("value", node.value, visitor, path22);
                if (cv === BREAK)
                  return BREAK;
                else if (cv === REMOVE)
                  node.value = null;
              }
            }
            return ctrl;
          });
        }
        __name(visitAsync_, "visitAsync_");
        function initVisitor(visitor) {
          if (typeof visitor === "object" && (visitor.Collection || visitor.Node || visitor.Value)) {
            return Object.assign({
              Alias: visitor.Node,
              Map: visitor.Node,
              Scalar: visitor.Node,
              Seq: visitor.Node
            }, visitor.Value && {
              Map: visitor.Value,
              Scalar: visitor.Value,
              Seq: visitor.Value
            }, visitor.Collection && {
              Map: visitor.Collection,
              Seq: visitor.Collection
            }, visitor);
          }
          return visitor;
        }
        __name(initVisitor, "initVisitor");
        function callVisitor(key, node, visitor, path22) {
          var _a2, _b2, _c, _d, _e;
          if (typeof visitor === "function")
            return visitor(key, node, path22);
          if (identity2.isMap(node))
            return (_a2 = visitor.Map) == null ? void 0 : _a2.call(visitor, key, node, path22);
          if (identity2.isSeq(node))
            return (_b2 = visitor.Seq) == null ? void 0 : _b2.call(visitor, key, node, path22);
          if (identity2.isPair(node))
            return (_c = visitor.Pair) == null ? void 0 : _c.call(visitor, key, node, path22);
          if (identity2.isScalar(node))
            return (_d = visitor.Scalar) == null ? void 0 : _d.call(visitor, key, node, path22);
          if (identity2.isAlias(node))
            return (_e = visitor.Alias) == null ? void 0 : _e.call(visitor, key, node, path22);
          return void 0;
        }
        __name(callVisitor, "callVisitor");
        function replaceNode(key, path22, node) {
          const parent = path22[path22.length - 1];
          if (identity2.isCollection(parent)) {
            parent.items[key] = node;
          } else if (identity2.isPair(parent)) {
            if (key === "key")
              parent.key = node;
            else
              parent.value = node;
          } else if (identity2.isDocument(parent)) {
            parent.contents = node;
          } else {
            const pt2 = identity2.isAlias(parent) ? "alias" : "scalar";
            throw new Error(`Cannot replace node with ${pt2} parent`);
          }
        }
        __name(replaceNode, "replaceNode");
        exports2.visit = visit;
        exports2.visitAsync = visitAsync;
      }
    });
    var require_directives = __commonJS2({
      "node_modules/yaml/dist/doc/directives.js"(exports2) {
        "use strict";
        var identity2 = require_identity();
        var visit = require_visit();
        var escapeChars = {
          "!": "%21",
          ",": "%2C",
          "[": "%5B",
          "]": "%5D",
          "{": "%7B",
          "}": "%7D"
        };
        var escapeTagName = /* @__PURE__ */ __name((tn) => tn.replace(/[!,[\]{}]/g, (ch) => escapeChars[ch]), "escapeTagName");
        var Directives = class _Directives {
          static {
            __name(this, "_Directives");
          }
          constructor(yaml2, tags) {
            this.docStart = null;
            this.docEnd = false;
            this.yaml = Object.assign({}, _Directives.defaultYaml, yaml2);
            this.tags = Object.assign({}, _Directives.defaultTags, tags);
          }
          clone() {
            const copy = new _Directives(this.yaml, this.tags);
            copy.docStart = this.docStart;
            return copy;
          }
          /**
           * During parsing, get a Directives instance for the current document and
           * update the stream state according to the current version's spec.
           */
          atDocument() {
            const res = new _Directives(this.yaml, this.tags);
            switch (this.yaml.version) {
              case "1.1":
                this.atNextDocument = true;
                break;
              case "1.2":
                this.atNextDocument = false;
                this.yaml = {
                  explicit: _Directives.defaultYaml.explicit,
                  version: "1.2"
                };
                this.tags = Object.assign({}, _Directives.defaultTags);
                break;
            }
            return res;
          }
          /**
           * @param onError - May be called even if the action was successful
           * @returns `true` on success
           */
          add(line, onError) {
            if (this.atNextDocument) {
              this.yaml = { explicit: _Directives.defaultYaml.explicit, version: "1.1" };
              this.tags = Object.assign({}, _Directives.defaultTags);
              this.atNextDocument = false;
            }
            const parts = line.trim().split(/[ \t]+/);
            const name = parts.shift();
            switch (name) {
              case "%TAG": {
                if (parts.length !== 2) {
                  onError(0, "%TAG directive should contain exactly two parts");
                  if (parts.length < 2)
                    return false;
                }
                const [handle, prefix] = parts;
                this.tags[handle] = prefix;
                return true;
              }
              case "%YAML": {
                this.yaml.explicit = true;
                if (parts.length !== 1) {
                  onError(0, "%YAML directive should contain exactly one part");
                  return false;
                }
                const [version2] = parts;
                if (version2 === "1.1" || version2 === "1.2") {
                  this.yaml.version = version2;
                  return true;
                } else {
                  const isValid = /^\d+\.\d+$/.test(version2);
                  onError(6, `Unsupported YAML version ${version2}`, isValid);
                  return false;
                }
              }
              default:
                onError(0, `Unknown directive ${name}`, true);
                return false;
            }
          }
          /**
           * Resolves a tag, matching handles to those defined in %TAG directives.
           *
           * @returns Resolved tag, which may also be the non-specific tag `'!'` or a
           *   `'!local'` tag, or `null` if unresolvable.
           */
          tagName(source, onError) {
            if (source === "!")
              return "!";
            if (source[0] !== "!") {
              onError(`Not a valid tag: ${source}`);
              return null;
            }
            if (source[1] === "<") {
              const verbatim = source.slice(2, -1);
              if (verbatim === "!" || verbatim === "!!") {
                onError(`Verbatim tags aren't resolved, so ${source} is invalid.`);
                return null;
              }
              if (source[source.length - 1] !== ">")
                onError("Verbatim tags must end with a >");
              return verbatim;
            }
            const [, handle, suffix] = source.match(new RegExp("^(.*!)([^!]*)$", "s"));
            if (!suffix)
              onError(`The ${source} tag has no suffix`);
            const prefix = this.tags[handle];
            if (prefix) {
              try {
                return prefix + decodeURIComponent(suffix);
              } catch (error) {
                onError(String(error));
                return null;
              }
            }
            if (handle === "!")
              return source;
            onError(`Could not resolve tag: ${source}`);
            return null;
          }
          /**
           * Given a fully resolved tag, returns its printable string form,
           * taking into account current tag prefixes and defaults.
           */
          tagString(tag) {
            for (const [handle, prefix] of Object.entries(this.tags)) {
              if (tag.startsWith(prefix))
                return handle + escapeTagName(tag.substring(prefix.length));
            }
            return tag[0] === "!" ? tag : `!<${tag}>`;
          }
          toString(doc) {
            const lines = this.yaml.explicit ? [`%YAML ${this.yaml.version || "1.2"}`] : [];
            const tagEntries = Object.entries(this.tags);
            let tagNames;
            if (doc && tagEntries.length > 0 && identity2.isNode(doc.contents)) {
              const tags = {};
              visit.visit(doc.contents, (_key, node) => {
                if (identity2.isNode(node) && node.tag)
                  tags[node.tag] = true;
              });
              tagNames = Object.keys(tags);
            } else
              tagNames = [];
            for (const [handle, prefix] of tagEntries) {
              if (handle === "!!" && prefix === "tag:yaml.org,2002:")
                continue;
              if (!doc || tagNames.some((tn) => tn.startsWith(prefix)))
                lines.push(`%TAG ${handle} ${prefix}`);
            }
            return lines.join("\n");
          }
        };
        Directives.defaultYaml = { explicit: false, version: "1.2" };
        Directives.defaultTags = { "!!": "tag:yaml.org,2002:" };
        exports2.Directives = Directives;
      }
    });
    var require_anchors = __commonJS2({
      "node_modules/yaml/dist/doc/anchors.js"(exports2) {
        "use strict";
        var identity2 = require_identity();
        var visit = require_visit();
        function anchorIsValid(anchor) {
          if (/[\x00-\x19\s,[\]{}]/.test(anchor)) {
            const sa = JSON.stringify(anchor);
            const msg = `Anchor must not contain whitespace or control characters: ${sa}`;
            throw new Error(msg);
          }
          return true;
        }
        __name(anchorIsValid, "anchorIsValid");
        function anchorNames(root) {
          const anchors = /* @__PURE__ */ new Set();
          visit.visit(root, {
            Value(_key, node) {
              if (node.anchor)
                anchors.add(node.anchor);
            }
          });
          return anchors;
        }
        __name(anchorNames, "anchorNames");
        function findNewAnchor(prefix, exclude) {
          for (let i = 1; true; ++i) {
            const name = `${prefix}${i}`;
            if (!exclude.has(name))
              return name;
          }
        }
        __name(findNewAnchor, "findNewAnchor");
        function createNodeAnchors(doc, prefix) {
          const aliasObjects = [];
          const sourceObjects = /* @__PURE__ */ new Map();
          let prevAnchors = null;
          return {
            onAnchor: /* @__PURE__ */ __name((source) => {
              aliasObjects.push(source);
              if (!prevAnchors)
                prevAnchors = anchorNames(doc);
              const anchor = findNewAnchor(prefix, prevAnchors);
              prevAnchors.add(anchor);
              return anchor;
            }, "onAnchor"),
            /**
             * With circular references, the source node is only resolved after all
             * of its child nodes are. This is why anchors are set only after all of
             * the nodes have been created.
             */
            setAnchors: /* @__PURE__ */ __name(() => {
              for (const source of aliasObjects) {
                const ref = sourceObjects.get(source);
                if (typeof ref === "object" && ref.anchor && (identity2.isScalar(ref.node) || identity2.isCollection(ref.node))) {
                  ref.node.anchor = ref.anchor;
                } else {
                  const error = new Error("Failed to resolve repeated object (this should not happen)");
                  error.source = source;
                  throw error;
                }
              }
            }, "setAnchors"),
            sourceObjects
          };
        }
        __name(createNodeAnchors, "createNodeAnchors");
        exports2.anchorIsValid = anchorIsValid;
        exports2.anchorNames = anchorNames;
        exports2.createNodeAnchors = createNodeAnchors;
        exports2.findNewAnchor = findNewAnchor;
      }
    });
    var require_applyReviver = __commonJS2({
      "node_modules/yaml/dist/doc/applyReviver.js"(exports2) {
        "use strict";
        function applyReviver(reviver, obj, key, val) {
          if (val && typeof val === "object") {
            if (Array.isArray(val)) {
              for (let i = 0, len = val.length; i < len; ++i) {
                const v0 = val[i];
                const v12 = applyReviver(reviver, val, String(i), v0);
                if (v12 === void 0)
                  delete val[i];
                else if (v12 !== v0)
                  val[i] = v12;
              }
            } else if (val instanceof Map) {
              for (const k2 of Array.from(val.keys())) {
                const v0 = val.get(k2);
                const v12 = applyReviver(reviver, val, k2, v0);
                if (v12 === void 0)
                  val.delete(k2);
                else if (v12 !== v0)
                  val.set(k2, v12);
              }
            } else if (val instanceof Set) {
              for (const v0 of Array.from(val)) {
                const v12 = applyReviver(reviver, val, v0, v0);
                if (v12 === void 0)
                  val.delete(v0);
                else if (v12 !== v0) {
                  val.delete(v0);
                  val.add(v12);
                }
              }
            } else {
              for (const [k2, v0] of Object.entries(val)) {
                const v12 = applyReviver(reviver, val, k2, v0);
                if (v12 === void 0)
                  delete val[k2];
                else if (v12 !== v0)
                  val[k2] = v12;
              }
            }
          }
          return reviver.call(obj, key, val);
        }
        __name(applyReviver, "applyReviver");
        exports2.applyReviver = applyReviver;
      }
    });
    var require_toJS = __commonJS2({
      "node_modules/yaml/dist/nodes/toJS.js"(exports2) {
        "use strict";
        var identity2 = require_identity();
        function toJS(value, arg, ctx) {
          if (Array.isArray(value))
            return value.map((v2, i) => toJS(v2, String(i), ctx));
          if (value && typeof value.toJSON === "function") {
            if (!ctx || !identity2.hasAnchor(value))
              return value.toJSON(arg, ctx);
            const data = { aliasCount: 0, count: 1, res: void 0 };
            ctx.anchors.set(value, data);
            ctx.onCreate = (res2) => {
              data.res = res2;
              delete ctx.onCreate;
            };
            const res = value.toJSON(arg, ctx);
            if (ctx.onCreate)
              ctx.onCreate(res);
            return res;
          }
          if (typeof value === "bigint" && !(ctx == null ? void 0 : ctx.keep))
            return Number(value);
          return value;
        }
        __name(toJS, "toJS");
        exports2.toJS = toJS;
      }
    });
    var require_Node = __commonJS2({
      "node_modules/yaml/dist/nodes/Node.js"(exports2) {
        "use strict";
        var applyReviver = require_applyReviver();
        var identity2 = require_identity();
        var toJS = require_toJS();
        var NodeBase = class {
          static {
            __name(this, "NodeBase");
          }
          constructor(type) {
            Object.defineProperty(this, identity2.NODE_TYPE, { value: type });
          }
          /** Create a copy of this node.  */
          clone() {
            const copy = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));
            if (this.range)
              copy.range = this.range.slice();
            return copy;
          }
          /** A plain JavaScript representation of this node. */
          toJS(doc, { mapAsMap, maxAliasCount, onAnchor, reviver } = {}) {
            if (!identity2.isDocument(doc))
              throw new TypeError("A document argument is required");
            const ctx = {
              anchors: /* @__PURE__ */ new Map(),
              doc,
              keep: true,
              mapAsMap: mapAsMap === true,
              mapKeyWarned: false,
              maxAliasCount: typeof maxAliasCount === "number" ? maxAliasCount : 100
            };
            const res = toJS.toJS(this, "", ctx);
            if (typeof onAnchor === "function")
              for (const { count, res: res2 } of ctx.anchors.values())
                onAnchor(res2, count);
            return typeof reviver === "function" ? applyReviver.applyReviver(reviver, { "": res }, "", res) : res;
          }
        };
        exports2.NodeBase = NodeBase;
      }
    });
    var require_Alias = __commonJS2({
      "node_modules/yaml/dist/nodes/Alias.js"(exports2) {
        "use strict";
        var anchors = require_anchors();
        var visit = require_visit();
        var identity2 = require_identity();
        var Node = require_Node();
        var toJS = require_toJS();
        var Alias = class extends Node.NodeBase {
          static {
            __name(this, "Alias");
          }
          constructor(source) {
            super(identity2.ALIAS);
            this.source = source;
            Object.defineProperty(this, "tag", {
              set() {
                throw new Error("Alias nodes cannot have tags");
              }
            });
          }
          /**
           * Resolve the value of this alias within `doc`, finding the last
           * instance of the `source` anchor before this node.
           */
          resolve(doc) {
            let found = void 0;
            visit.visit(doc, {
              Node: /* @__PURE__ */ __name((_key, node) => {
                if (node === this)
                  return visit.visit.BREAK;
                if (node.anchor === this.source)
                  found = node;
              }, "Node")
            });
            return found;
          }
          toJSON(_arg, ctx) {
            if (!ctx)
              return { source: this.source };
            const { anchors: anchors2, doc, maxAliasCount } = ctx;
            const source = this.resolve(doc);
            if (!source) {
              const msg = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;
              throw new ReferenceError(msg);
            }
            let data = anchors2.get(source);
            if (!data) {
              toJS.toJS(source, null, ctx);
              data = anchors2.get(source);
            }
            if (!data || data.res === void 0) {
              const msg = "This should not happen: Alias anchor was not resolved?";
              throw new ReferenceError(msg);
            }
            if (maxAliasCount >= 0) {
              data.count += 1;
              if (data.aliasCount === 0)
                data.aliasCount = getAliasCount(doc, source, anchors2);
              if (data.count * data.aliasCount > maxAliasCount) {
                const msg = "Excessive alias count indicates a resource exhaustion attack";
                throw new ReferenceError(msg);
              }
            }
            return data.res;
          }
          toString(ctx, _onComment, _onChompKeep) {
            const src = `*${this.source}`;
            if (ctx) {
              anchors.anchorIsValid(this.source);
              if (ctx.options.verifyAliasOrder && !ctx.anchors.has(this.source)) {
                const msg = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;
                throw new Error(msg);
              }
              if (ctx.implicitKey)
                return `${src} `;
            }
            return src;
          }
        };
        function getAliasCount(doc, node, anchors2) {
          if (identity2.isAlias(node)) {
            const source = node.resolve(doc);
            const anchor = anchors2 && source && anchors2.get(source);
            return anchor ? anchor.count * anchor.aliasCount : 0;
          } else if (identity2.isCollection(node)) {
            let count = 0;
            for (const item of node.items) {
              const c = getAliasCount(doc, item, anchors2);
              if (c > count)
                count = c;
            }
            return count;
          } else if (identity2.isPair(node)) {
            const kc = getAliasCount(doc, node.key, anchors2);
            const vc = getAliasCount(doc, node.value, anchors2);
            return Math.max(kc, vc);
          }
          return 1;
        }
        __name(getAliasCount, "getAliasCount");
        exports2.Alias = Alias;
      }
    });
    var require_Scalar = __commonJS2({
      "node_modules/yaml/dist/nodes/Scalar.js"(exports2) {
        "use strict";
        var identity2 = require_identity();
        var Node = require_Node();
        var toJS = require_toJS();
        var isScalarValue = /* @__PURE__ */ __name((value) => !value || typeof value !== "function" && typeof value !== "object", "isScalarValue");
        var Scalar = class extends Node.NodeBase {
          static {
            __name(this, "Scalar");
          }
          constructor(value) {
            super(identity2.SCALAR);
            this.value = value;
          }
          toJSON(arg, ctx) {
            return (ctx == null ? void 0 : ctx.keep) ? this.value : toJS.toJS(this.value, arg, ctx);
          }
          toString() {
            return String(this.value);
          }
        };
        Scalar.BLOCK_FOLDED = "BLOCK_FOLDED";
        Scalar.BLOCK_LITERAL = "BLOCK_LITERAL";
        Scalar.PLAIN = "PLAIN";
        Scalar.QUOTE_DOUBLE = "QUOTE_DOUBLE";
        Scalar.QUOTE_SINGLE = "QUOTE_SINGLE";
        exports2.Scalar = Scalar;
        exports2.isScalarValue = isScalarValue;
      }
    });
    var require_createNode = __commonJS2({
      "node_modules/yaml/dist/doc/createNode.js"(exports2) {
        "use strict";
        var Alias = require_Alias();
        var identity2 = require_identity();
        var Scalar = require_Scalar();
        var defaultTagPrefix = "tag:yaml.org,2002:";
        function findTagObject(value, tagName, tags) {
          var _a2;
          if (tagName) {
            const match = tags.filter((t4) => t4.tag === tagName);
            const tagObj = (_a2 = match.find((t4) => !t4.format)) != null ? _a2 : match[0];
            if (!tagObj)
              throw new Error(`Tag ${tagName} not found`);
            return tagObj;
          }
          return tags.find((t4) => {
            var _a3;
            return ((_a3 = t4.identify) == null ? void 0 : _a3.call(t4, value)) && !t4.format;
          });
        }
        __name(findTagObject, "findTagObject");
        function createNode(value, tagName, ctx) {
          var _a2, _b2, _c;
          if (identity2.isDocument(value))
            value = value.contents;
          if (identity2.isNode(value))
            return value;
          if (identity2.isPair(value)) {
            const map = (_b2 = (_a2 = ctx.schema[identity2.MAP]).createNode) == null ? void 0 : _b2.call(_a2, ctx.schema, null, ctx);
            map.items.push(value);
            return map;
          }
          if (value instanceof String || value instanceof Number || value instanceof Boolean || typeof BigInt !== "undefined" && value instanceof BigInt) {
            value = value.valueOf();
          }
          const { aliasDuplicateObjects, onAnchor, onTagObj, schema, sourceObjects } = ctx;
          let ref = void 0;
          if (aliasDuplicateObjects && value && typeof value === "object") {
            ref = sourceObjects.get(value);
            if (ref) {
              if (!ref.anchor)
                ref.anchor = onAnchor(value);
              return new Alias.Alias(ref.anchor);
            } else {
              ref = { anchor: null, node: null };
              sourceObjects.set(value, ref);
            }
          }
          if (tagName == null ? void 0 : tagName.startsWith("!!"))
            tagName = defaultTagPrefix + tagName.slice(2);
          let tagObj = findTagObject(value, tagName, schema.tags);
          if (!tagObj) {
            if (value && typeof value.toJSON === "function") {
              value = value.toJSON();
            }
            if (!value || typeof value !== "object") {
              const node2 = new Scalar.Scalar(value);
              if (ref)
                ref.node = node2;
              return node2;
            }
            tagObj = value instanceof Map ? schema[identity2.MAP] : Symbol.iterator in Object(value) ? schema[identity2.SEQ] : schema[identity2.MAP];
          }
          if (onTagObj) {
            onTagObj(tagObj);
            delete ctx.onTagObj;
          }
          const node = (tagObj == null ? void 0 : tagObj.createNode) ? tagObj.createNode(ctx.schema, value, ctx) : typeof ((_c = tagObj == null ? void 0 : tagObj.nodeClass) == null ? void 0 : _c.from) === "function" ? tagObj.nodeClass.from(ctx.schema, value, ctx) : new Scalar.Scalar(value);
          if (tagName)
            node.tag = tagName;
          else if (!tagObj.default)
            node.tag = tagObj.tag;
          if (ref)
            ref.node = node;
          return node;
        }
        __name(createNode, "createNode");
        exports2.createNode = createNode;
      }
    });
    var require_Collection = __commonJS2({
      "node_modules/yaml/dist/nodes/Collection.js"(exports2) {
        "use strict";
        var createNode = require_createNode();
        var identity2 = require_identity();
        var Node = require_Node();
        function collectionFromPath(schema, path22, value) {
          let v2 = value;
          for (let i = path22.length - 1; i >= 0; --i) {
            const k2 = path22[i];
            if (typeof k2 === "number" && Number.isInteger(k2) && k2 >= 0) {
              const a2 = [];
              a2[k2] = v2;
              v2 = a2;
            } else {
              v2 = /* @__PURE__ */ new Map([[k2, v2]]);
            }
          }
          return createNode.createNode(v2, void 0, {
            aliasDuplicateObjects: false,
            keepUndefined: false,
            onAnchor: /* @__PURE__ */ __name(() => {
              throw new Error("This should not happen, please report a bug.");
            }, "onAnchor"),
            schema,
            sourceObjects: /* @__PURE__ */ new Map()
          });
        }
        __name(collectionFromPath, "collectionFromPath");
        var isEmptyPath = /* @__PURE__ */ __name((path22) => path22 == null || typeof path22 === "object" && !!path22[Symbol.iterator]().next().done, "isEmptyPath");
        var Collection = class extends Node.NodeBase {
          static {
            __name(this, "Collection");
          }
          constructor(type, schema) {
            super(type);
            Object.defineProperty(this, "schema", {
              value: schema,
              configurable: true,
              enumerable: false,
              writable: true
            });
          }
          /**
           * Create a copy of this collection.
           *
           * @param schema - If defined, overwrites the original's schema
           */
          clone(schema) {
            const copy = Object.create(Object.getPrototypeOf(this), Object.getOwnPropertyDescriptors(this));
            if (schema)
              copy.schema = schema;
            copy.items = copy.items.map((it) => identity2.isNode(it) || identity2.isPair(it) ? it.clone(schema) : it);
            if (this.range)
              copy.range = this.range.slice();
            return copy;
          }
          /**
           * Adds a value to the collection. For `!!map` and `!!omap` the value must
           * be a Pair instance or a `{ key, value }` object, which may not have a key
           * that already exists in the map.
           */
          addIn(path22, value) {
            if (isEmptyPath(path22))
              this.add(value);
            else {
              const [key, ...rest] = path22;
              const node = this.get(key, true);
              if (identity2.isCollection(node))
                node.addIn(rest, value);
              else if (node === void 0 && this.schema)
                this.set(key, collectionFromPath(this.schema, rest, value));
              else
                throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);
            }
          }
          /**
           * Removes a value from the collection.
           * @returns `true` if the item was found and removed.
           */
          deleteIn(path22) {
            const [key, ...rest] = path22;
            if (rest.length === 0)
              return this.delete(key);
            const node = this.get(key, true);
            if (identity2.isCollection(node))
              return node.deleteIn(rest);
            else
              throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);
          }
          /**
           * Returns item at `key`, or `undefined` if not found. By default unwraps
           * scalar values from their surrounding node; to disable set `keepScalar` to
           * `true` (collections are always returned intact).
           */
          getIn(path22, keepScalar) {
            const [key, ...rest] = path22;
            const node = this.get(key, true);
            if (rest.length === 0)
              return !keepScalar && identity2.isScalar(node) ? node.value : node;
            else
              return identity2.isCollection(node) ? node.getIn(rest, keepScalar) : void 0;
          }
          hasAllNullValues(allowScalar) {
            return this.items.every((node) => {
              if (!identity2.isPair(node))
                return false;
              const n3 = node.value;
              return n3 == null || allowScalar && identity2.isScalar(n3) && n3.value == null && !n3.commentBefore && !n3.comment && !n3.tag;
            });
          }
          /**
           * Checks if the collection includes a value with the key `key`.
           */
          hasIn(path22) {
            const [key, ...rest] = path22;
            if (rest.length === 0)
              return this.has(key);
            const node = this.get(key, true);
            return identity2.isCollection(node) ? node.hasIn(rest) : false;
          }
          /**
           * Sets a value in this collection. For `!!set`, `value` needs to be a
           * boolean to add/remove the item from the set.
           */
          setIn(path22, value) {
            const [key, ...rest] = path22;
            if (rest.length === 0) {
              this.set(key, value);
            } else {
              const node = this.get(key, true);
              if (identity2.isCollection(node))
                node.setIn(rest, value);
              else if (node === void 0 && this.schema)
                this.set(key, collectionFromPath(this.schema, rest, value));
              else
                throw new Error(`Expected YAML collection at ${key}. Remaining path: ${rest}`);
            }
          }
        };
        Collection.maxFlowStringSingleLineLength = 60;
        exports2.Collection = Collection;
        exports2.collectionFromPath = collectionFromPath;
        exports2.isEmptyPath = isEmptyPath;
      }
    });
    var require_stringifyComment = __commonJS2({
      "node_modules/yaml/dist/stringify/stringifyComment.js"(exports2) {
        "use strict";
        var stringifyComment = /* @__PURE__ */ __name((str) => str.replace(/^(?!$)(?: $)?/gm, "#"), "stringifyComment");
        function indentComment(comment, indent) {
          if (/^\n+$/.test(comment))
            return comment.substring(1);
          return indent ? comment.replace(/^(?! *$)/gm, indent) : comment;
        }
        __name(indentComment, "indentComment");
        var lineComment = /* @__PURE__ */ __name((str, indent, comment) => str.endsWith("\n") ? indentComment(comment, indent) : comment.includes("\n") ? "\n" + indentComment(comment, indent) : (str.endsWith(" ") ? "" : " ") + comment, "lineComment");
        exports2.indentComment = indentComment;
        exports2.lineComment = lineComment;
        exports2.stringifyComment = stringifyComment;
      }
    });
    var require_foldFlowLines = __commonJS2({
      "node_modules/yaml/dist/stringify/foldFlowLines.js"(exports2) {
        "use strict";
        var FOLD_FLOW = "flow";
        var FOLD_BLOCK = "block";
        var FOLD_QUOTED = "quoted";
        function foldFlowLines(text, indent, mode = "flow", { indentAtStart, lineWidth = 80, minContentWidth = 20, onFold, onOverflow } = {}) {
          if (!lineWidth || lineWidth < 0)
            return text;
          const endStep = Math.max(1 + minContentWidth, 1 + lineWidth - indent.length);
          if (text.length <= endStep)
            return text;
          const folds = [];
          const escapedFolds = {};
          let end = lineWidth - indent.length;
          if (typeof indentAtStart === "number") {
            if (indentAtStart > lineWidth - Math.max(2, minContentWidth))
              folds.push(0);
            else
              end = lineWidth - indentAtStart;
          }
          let split = void 0;
          let prev = void 0;
          let overflow = false;
          let i = -1;
          let escStart = -1;
          let escEnd = -1;
          if (mode === FOLD_BLOCK) {
            i = consumeMoreIndentedLines(text, i, indent.length);
            if (i !== -1)
              end = i + endStep;
          }
          for (let ch; ch = text[i += 1]; ) {
            if (mode === FOLD_QUOTED && ch === "\\") {
              escStart = i;
              switch (text[i + 1]) {
                case "x":
                  i += 3;
                  break;
                case "u":
                  i += 5;
                  break;
                case "U":
                  i += 9;
                  break;
                default:
                  i += 1;
              }
              escEnd = i;
            }
            if (ch === "\n") {
              if (mode === FOLD_BLOCK)
                i = consumeMoreIndentedLines(text, i, indent.length);
              end = i + indent.length + endStep;
              split = void 0;
            } else {
              if (ch === " " && prev && prev !== " " && prev !== "\n" && prev !== "	") {
                const next = text[i + 1];
                if (next && next !== " " && next !== "\n" && next !== "	")
                  split = i;
              }
              if (i >= end) {
                if (split) {
                  folds.push(split);
                  end = split + endStep;
                  split = void 0;
                } else if (mode === FOLD_QUOTED) {
                  while (prev === " " || prev === "	") {
                    prev = ch;
                    ch = text[i += 1];
                    overflow = true;
                  }
                  const j = i > escEnd + 1 ? i - 2 : escStart - 1;
                  if (escapedFolds[j])
                    return text;
                  folds.push(j);
                  escapedFolds[j] = true;
                  end = j + endStep;
                  split = void 0;
                } else {
                  overflow = true;
                }
              }
            }
            prev = ch;
          }
          if (overflow && onOverflow)
            onOverflow();
          if (folds.length === 0)
            return text;
          if (onFold)
            onFold();
          let res = text.slice(0, folds[0]);
          for (let i2 = 0; i2 < folds.length; ++i2) {
            const fold = folds[i2];
            const end2 = folds[i2 + 1] || text.length;
            if (fold === 0)
              res = `
${indent}${text.slice(0, end2)}`;
            else {
              if (mode === FOLD_QUOTED && escapedFolds[fold])
                res += `${text[fold]}\\`;
              res += `
${indent}${text.slice(fold + 1, end2)}`;
            }
          }
          return res;
        }
        __name(foldFlowLines, "foldFlowLines");
        function consumeMoreIndentedLines(text, i, indent) {
          let end = i;
          let start = i + 1;
          let ch = text[start];
          while (ch === " " || ch === "	") {
            if (i < start + indent) {
              ch = text[++i];
            } else {
              do {
                ch = text[++i];
              } while (ch && ch !== "\n");
              end = i;
              start = i + 1;
              ch = text[start];
            }
          }
          return end;
        }
        __name(consumeMoreIndentedLines, "consumeMoreIndentedLines");
        exports2.FOLD_BLOCK = FOLD_BLOCK;
        exports2.FOLD_FLOW = FOLD_FLOW;
        exports2.FOLD_QUOTED = FOLD_QUOTED;
        exports2.foldFlowLines = foldFlowLines;
      }
    });
    var require_stringifyString = __commonJS2({
      "node_modules/yaml/dist/stringify/stringifyString.js"(exports2) {
        "use strict";
        var Scalar = require_Scalar();
        var foldFlowLines = require_foldFlowLines();
        var getFoldOptions = /* @__PURE__ */ __name((ctx, isBlock) => ({
          indentAtStart: isBlock ? ctx.indent.length : ctx.indentAtStart,
          lineWidth: ctx.options.lineWidth,
          minContentWidth: ctx.options.minContentWidth
        }), "getFoldOptions");
        var containsDocumentMarker = /* @__PURE__ */ __name((str) => /^(%|---|\.\.\.)/m.test(str), "containsDocumentMarker");
        function lineLengthOverLimit(str, lineWidth, indentLength) {
          if (!lineWidth || lineWidth < 0)
            return false;
          const limit = lineWidth - indentLength;
          const strLen = str.length;
          if (strLen <= limit)
            return false;
          for (let i = 0, start = 0; i < strLen; ++i) {
            if (str[i] === "\n") {
              if (i - start > limit)
                return true;
              start = i + 1;
              if (strLen - start <= limit)
                return false;
            }
          }
          return true;
        }
        __name(lineLengthOverLimit, "lineLengthOverLimit");
        function doubleQuotedString(value, ctx) {
          const json = JSON.stringify(value);
          if (ctx.options.doubleQuotedAsJSON)
            return json;
          const { implicitKey } = ctx;
          const minMultiLineLength = ctx.options.doubleQuotedMinMultiLineLength;
          const indent = ctx.indent || (containsDocumentMarker(value) ? "  " : "");
          let str = "";
          let start = 0;
          for (let i = 0, ch = json[i]; ch; ch = json[++i]) {
            if (ch === " " && json[i + 1] === "\\" && json[i + 2] === "n") {
              str += json.slice(start, i) + "\\ ";
              i += 1;
              start = i;
              ch = "\\";
            }
            if (ch === "\\")
              switch (json[i + 1]) {
                case "u":
                  {
                    str += json.slice(start, i);
                    const code = json.substr(i + 2, 4);
                    switch (code) {
                      case "0000":
                        str += "\\0";
                        break;
                      case "0007":
                        str += "\\a";
                        break;
                      case "000b":
                        str += "\\v";
                        break;
                      case "001b":
                        str += "\\e";
                        break;
                      case "0085":
                        str += "\\N";
                        break;
                      case "00a0":
                        str += "\\_";
                        break;
                      case "2028":
                        str += "\\L";
                        break;
                      case "2029":
                        str += "\\P";
                        break;
                      default:
                        if (code.substr(0, 2) === "00")
                          str += "\\x" + code.substr(2);
                        else
                          str += json.substr(i, 6);
                    }
                    i += 5;
                    start = i + 1;
                  }
                  break;
                case "n":
                  if (implicitKey || json[i + 2] === '"' || json.length < minMultiLineLength) {
                    i += 1;
                  } else {
                    str += json.slice(start, i) + "\n\n";
                    while (json[i + 2] === "\\" && json[i + 3] === "n" && json[i + 4] !== '"') {
                      str += "\n";
                      i += 2;
                    }
                    str += indent;
                    if (json[i + 2] === " ")
                      str += "\\";
                    i += 1;
                    start = i + 1;
                  }
                  break;
                default:
                  i += 1;
              }
          }
          str = start ? str + json.slice(start) : json;
          return implicitKey ? str : foldFlowLines.foldFlowLines(str, indent, foldFlowLines.FOLD_QUOTED, getFoldOptions(ctx, false));
        }
        __name(doubleQuotedString, "doubleQuotedString");
        function singleQuotedString(value, ctx) {
          if (ctx.options.singleQuote === false || ctx.implicitKey && value.includes("\n") || /[ \t]\n|\n[ \t]/.test(value))
            return doubleQuotedString(value, ctx);
          const indent = ctx.indent || (containsDocumentMarker(value) ? "  " : "");
          const res = "'" + value.replace(/'/g, "''").replace(/\n+/g, `$&
${indent}`) + "'";
          return ctx.implicitKey ? res : foldFlowLines.foldFlowLines(res, indent, foldFlowLines.FOLD_FLOW, getFoldOptions(ctx, false));
        }
        __name(singleQuotedString, "singleQuotedString");
        function quotedString(value, ctx) {
          const { singleQuote } = ctx.options;
          let qs2;
          if (singleQuote === false)
            qs2 = doubleQuotedString;
          else {
            const hasDouble = value.includes('"');
            const hasSingle = value.includes("'");
            if (hasDouble && !hasSingle)
              qs2 = singleQuotedString;
            else if (hasSingle && !hasDouble)
              qs2 = doubleQuotedString;
            else
              qs2 = singleQuote ? singleQuotedString : doubleQuotedString;
          }
          return qs2(value, ctx);
        }
        __name(quotedString, "quotedString");
        var blockEndNewlines;
        try {
          blockEndNewlines = new RegExp("(^|(?<!\n))\n+(?!\n|$)", "g");
        } catch (e) {
          blockEndNewlines = /\n+(?!\n|$)/g;
        }
        function blockString({ comment, type, value }, ctx, onComment, onChompKeep) {
          const { blockQuote, commentString, lineWidth } = ctx.options;
          if (!blockQuote || /\n[\t ]+$/.test(value) || /^\s*$/.test(value)) {
            return quotedString(value, ctx);
          }
          const indent = ctx.indent || (ctx.forceBlockIndent || containsDocumentMarker(value) ? "  " : "");
          const literal = blockQuote === "literal" ? true : blockQuote === "folded" || type === Scalar.Scalar.BLOCK_FOLDED ? false : type === Scalar.Scalar.BLOCK_LITERAL ? true : !lineLengthOverLimit(value, lineWidth, indent.length);
          if (!value)
            return literal ? "|\n" : ">\n";
          let chomp;
          let endStart;
          for (endStart = value.length; endStart > 0; --endStart) {
            const ch = value[endStart - 1];
            if (ch !== "\n" && ch !== "	" && ch !== " ")
              break;
          }
          let end = value.substring(endStart);
          const endNlPos = end.indexOf("\n");
          if (endNlPos === -1) {
            chomp = "-";
          } else if (value === end || endNlPos !== end.length - 1) {
            chomp = "+";
            if (onChompKeep)
              onChompKeep();
          } else {
            chomp = "";
          }
          if (end) {
            value = value.slice(0, -end.length);
            if (end[end.length - 1] === "\n")
              end = end.slice(0, -1);
            end = end.replace(blockEndNewlines, `$&${indent}`);
          }
          let startWithSpace = false;
          let startEnd;
          let startNlPos = -1;
          for (startEnd = 0; startEnd < value.length; ++startEnd) {
            const ch = value[startEnd];
            if (ch === " ")
              startWithSpace = true;
            else if (ch === "\n")
              startNlPos = startEnd;
            else
              break;
          }
          let start = value.substring(0, startNlPos < startEnd ? startNlPos + 1 : startEnd);
          if (start) {
            value = value.substring(start.length);
            start = start.replace(/\n+/g, `$&${indent}`);
          }
          const indentSize = indent ? "2" : "1";
          let header = (literal ? "|" : ">") + (startWithSpace ? indentSize : "") + chomp;
          if (comment) {
            header += " " + commentString(comment.replace(/ ?[\r\n]+/g, " "));
            if (onComment)
              onComment();
          }
          if (literal) {
            value = value.replace(/\n+/g, `$&${indent}`);
            return `${header}
${indent}${start}${value}${end}`;
          }
          value = value.replace(/\n+/g, "\n$&").replace(/(?:^|\n)([\t ].*)(?:([\n\t ]*)\n(?![\n\t ]))?/g, "$1$2").replace(/\n+/g, `$&${indent}`);
          const body = foldFlowLines.foldFlowLines(`${start}${value}${end}`, indent, foldFlowLines.FOLD_BLOCK, getFoldOptions(ctx, true));
          return `${header}
${indent}${body}`;
        }
        __name(blockString, "blockString");
        function plainString(item, ctx, onComment, onChompKeep) {
          const { type, value } = item;
          const { actualString, implicitKey, indent, indentStep, inFlow } = ctx;
          if (implicitKey && value.includes("\n") || inFlow && /[[\]{},]/.test(value)) {
            return quotedString(value, ctx);
          }
          if (!value || /^[\n\t ,[\]{}#&*!|>'"%@`]|^[?-]$|^[?-][ \t]|[\n:][ \t]|[ \t]\n|[\n\t ]#|[\n\t :]$/.test(value)) {
            return implicitKey || inFlow || !value.includes("\n") ? quotedString(value, ctx) : blockString(item, ctx, onComment, onChompKeep);
          }
          if (!implicitKey && !inFlow && type !== Scalar.Scalar.PLAIN && value.includes("\n")) {
            return blockString(item, ctx, onComment, onChompKeep);
          }
          if (containsDocumentMarker(value)) {
            if (indent === "") {
              ctx.forceBlockIndent = true;
              return blockString(item, ctx, onComment, onChompKeep);
            } else if (implicitKey && indent === indentStep) {
              return quotedString(value, ctx);
            }
          }
          const str = value.replace(/\n+/g, `$&
${indent}`);
          if (actualString) {
            const test = /* @__PURE__ */ __name((tag) => {
              var _a2;
              return tag.default && tag.tag !== "tag:yaml.org,2002:str" && ((_a2 = tag.test) == null ? void 0 : _a2.test(str));
            }, "test");
            const { compat, tags } = ctx.doc.schema;
            if (tags.some(test) || (compat == null ? void 0 : compat.some(test)))
              return quotedString(value, ctx);
          }
          return implicitKey ? str : foldFlowLines.foldFlowLines(str, indent, foldFlowLines.FOLD_FLOW, getFoldOptions(ctx, false));
        }
        __name(plainString, "plainString");
        function stringifyString(item, ctx, onComment, onChompKeep) {
          const { implicitKey, inFlow } = ctx;
          const ss = typeof item.value === "string" ? item : Object.assign({}, item, { value: String(item.value) });
          let { type } = item;
          if (type !== Scalar.Scalar.QUOTE_DOUBLE) {
            if (/[\x00-\x08\x0b-\x1f\x7f-\x9f\u{D800}-\u{DFFF}]/u.test(ss.value))
              type = Scalar.Scalar.QUOTE_DOUBLE;
          }
          const _stringify = /* @__PURE__ */ __name((_type) => {
            switch (_type) {
              case Scalar.Scalar.BLOCK_FOLDED:
              case Scalar.Scalar.BLOCK_LITERAL:
                return implicitKey || inFlow ? quotedString(ss.value, ctx) : blockString(ss, ctx, onComment, onChompKeep);
              case Scalar.Scalar.QUOTE_DOUBLE:
                return doubleQuotedString(ss.value, ctx);
              case Scalar.Scalar.QUOTE_SINGLE:
                return singleQuotedString(ss.value, ctx);
              case Scalar.Scalar.PLAIN:
                return plainString(ss, ctx, onComment, onChompKeep);
              default:
                return null;
            }
          }, "_stringify");
          let res = _stringify(type);
          if (res === null) {
            const { defaultKeyType, defaultStringType } = ctx.options;
            const t4 = implicitKey && defaultKeyType || defaultStringType;
            res = _stringify(t4);
            if (res === null)
              throw new Error(`Unsupported default string type ${t4}`);
          }
          return res;
        }
        __name(stringifyString, "stringifyString");
        exports2.stringifyString = stringifyString;
      }
    });
    var require_stringify22 = __commonJS2({
      "node_modules/yaml/dist/stringify/stringify.js"(exports2) {
        "use strict";
        var anchors = require_anchors();
        var identity2 = require_identity();
        var stringifyComment = require_stringifyComment();
        var stringifyString = require_stringifyString();
        function createStringifyContext(doc, options) {
          const opt = Object.assign({
            blockQuote: true,
            commentString: stringifyComment.stringifyComment,
            defaultKeyType: null,
            defaultStringType: "PLAIN",
            directives: null,
            doubleQuotedAsJSON: false,
            doubleQuotedMinMultiLineLength: 40,
            falseStr: "false",
            flowCollectionPadding: true,
            indentSeq: true,
            lineWidth: 80,
            minContentWidth: 20,
            nullStr: "null",
            simpleKeys: false,
            singleQuote: null,
            trueStr: "true",
            verifyAliasOrder: true
          }, doc.schema.toStringOptions, options);
          let inFlow;
          switch (opt.collectionStyle) {
            case "block":
              inFlow = false;
              break;
            case "flow":
              inFlow = true;
              break;
            default:
              inFlow = null;
          }
          return {
            anchors: /* @__PURE__ */ new Set(),
            doc,
            flowCollectionPadding: opt.flowCollectionPadding ? " " : "",
            indent: "",
            indentStep: typeof opt.indent === "number" ? " ".repeat(opt.indent) : "  ",
            inFlow,
            options: opt
          };
        }
        __name(createStringifyContext, "createStringifyContext");
        function getTagObject(tags, item) {
          var _a2, _b2, _c, _d;
          if (item.tag) {
            const match = tags.filter((t4) => t4.tag === item.tag);
            if (match.length > 0)
              return (_a2 = match.find((t4) => t4.format === item.format)) != null ? _a2 : match[0];
          }
          let tagObj = void 0;
          let obj;
          if (identity2.isScalar(item)) {
            obj = item.value;
            const match = tags.filter((t4) => {
              var _a3;
              return (_a3 = t4.identify) == null ? void 0 : _a3.call(t4, obj);
            });
            tagObj = (_b2 = match.find((t4) => t4.format === item.format)) != null ? _b2 : match.find((t4) => !t4.format);
          } else {
            obj = item;
            tagObj = tags.find((t4) => t4.nodeClass && obj instanceof t4.nodeClass);
          }
          if (!tagObj) {
            const name = (_d = (_c = obj == null ? void 0 : obj.constructor) == null ? void 0 : _c.name) != null ? _d : typeof obj;
            throw new Error(`Tag not resolved for ${name} value`);
          }
          return tagObj;
        }
        __name(getTagObject, "getTagObject");
        function stringifyProps(node, tagObj, { anchors: anchors$1, doc }) {
          if (!doc.directives)
            return "";
          const props = [];
          const anchor = (identity2.isScalar(node) || identity2.isCollection(node)) && node.anchor;
          if (anchor && anchors.anchorIsValid(anchor)) {
            anchors$1.add(anchor);
            props.push(`&${anchor}`);
          }
          const tag = node.tag ? node.tag : tagObj.default ? null : tagObj.tag;
          if (tag)
            props.push(doc.directives.tagString(tag));
          return props.join(" ");
        }
        __name(stringifyProps, "stringifyProps");
        function stringify2(item, ctx, onComment, onChompKeep) {
          var _a2, _b2;
          if (identity2.isPair(item))
            return item.toString(ctx, onComment, onChompKeep);
          if (identity2.isAlias(item)) {
            if (ctx.doc.directives)
              return item.toString(ctx);
            if ((_a2 = ctx.resolvedAliases) == null ? void 0 : _a2.has(item)) {
              throw new TypeError(`Cannot stringify circular structure without alias nodes`);
            } else {
              if (ctx.resolvedAliases)
                ctx.resolvedAliases.add(item);
              else
                ctx.resolvedAliases = /* @__PURE__ */ new Set([item]);
              item = item.resolve(ctx.doc);
            }
          }
          let tagObj = void 0;
          const node = identity2.isNode(item) ? item : ctx.doc.createNode(item, { onTagObj: /* @__PURE__ */ __name((o3) => tagObj = o3, "onTagObj") });
          if (!tagObj)
            tagObj = getTagObject(ctx.doc.schema.tags, node);
          const props = stringifyProps(node, tagObj, ctx);
          if (props.length > 0)
            ctx.indentAtStart = ((_b2 = ctx.indentAtStart) != null ? _b2 : 0) + props.length + 1;
          const str = typeof tagObj.stringify === "function" ? tagObj.stringify(node, ctx, onComment, onChompKeep) : identity2.isScalar(node) ? stringifyString.stringifyString(node, ctx, onComment, onChompKeep) : node.toString(ctx, onComment, onChompKeep);
          if (!props)
            return str;
          return identity2.isScalar(node) || str[0] === "{" || str[0] === "[" ? `${props} ${str}` : `${props}
${ctx.indent}${str}`;
        }
        __name(stringify2, "stringify");
        exports2.createStringifyContext = createStringifyContext;
        exports2.stringify = stringify2;
      }
    });
    var require_stringifyPair = __commonJS2({
      "node_modules/yaml/dist/stringify/stringifyPair.js"(exports2) {
        "use strict";
        var identity2 = require_identity();
        var Scalar = require_Scalar();
        var stringify2 = require_stringify22();
        var stringifyComment = require_stringifyComment();
        function stringifyPair({ key, value }, ctx, onComment, onChompKeep) {
          var _a2, _b2;
          const { allNullValues, doc, indent, indentStep, options: { commentString, indentSeq, simpleKeys } } = ctx;
          let keyComment = identity2.isNode(key) && key.comment || null;
          if (simpleKeys) {
            if (keyComment) {
              throw new Error("With simple keys, key nodes cannot have comments");
            }
            if (identity2.isCollection(key)) {
              const msg = "With simple keys, collection cannot be used as a key value";
              throw new Error(msg);
            }
          }
          let explicitKey = !simpleKeys && (!key || keyComment && value == null && !ctx.inFlow || identity2.isCollection(key) || (identity2.isScalar(key) ? key.type === Scalar.Scalar.BLOCK_FOLDED || key.type === Scalar.Scalar.BLOCK_LITERAL : typeof key === "object"));
          ctx = Object.assign({}, ctx, {
            allNullValues: false,
            implicitKey: !explicitKey && (simpleKeys || !allNullValues),
            indent: indent + indentStep
          });
          let keyCommentDone = false;
          let chompKeep = false;
          let str = stringify2.stringify(key, ctx, () => keyCommentDone = true, () => chompKeep = true);
          if (!explicitKey && !ctx.inFlow && str.length > 1024) {
            if (simpleKeys)
              throw new Error("With simple keys, single line scalar must not span more than 1024 characters");
            explicitKey = true;
          }
          if (ctx.inFlow) {
            if (allNullValues || value == null) {
              if (keyCommentDone && onComment)
                onComment();
              return str === "" ? "?" : explicitKey ? `? ${str}` : str;
            }
          } else if (allNullValues && !simpleKeys || value == null && explicitKey) {
            str = `? ${str}`;
            if (keyComment && !keyCommentDone) {
              str += stringifyComment.lineComment(str, ctx.indent, commentString(keyComment));
            } else if (chompKeep && onChompKeep)
              onChompKeep();
            return str;
          }
          if (keyCommentDone)
            keyComment = null;
          if (explicitKey) {
            if (keyComment)
              str += stringifyComment.lineComment(str, ctx.indent, commentString(keyComment));
            str = `? ${str}
${indent}:`;
          } else {
            str = `${str}:`;
            if (keyComment)
              str += stringifyComment.lineComment(str, ctx.indent, commentString(keyComment));
          }
          let vsb, vcb, valueComment;
          if (identity2.isNode(value)) {
            vsb = !!value.spaceBefore;
            vcb = value.commentBefore;
            valueComment = value.comment;
          } else {
            vsb = false;
            vcb = null;
            valueComment = null;
            if (value && typeof value === "object")
              value = doc.createNode(value);
          }
          ctx.implicitKey = false;
          if (!explicitKey && !keyComment && identity2.isScalar(value))
            ctx.indentAtStart = str.length + 1;
          chompKeep = false;
          if (!indentSeq && indentStep.length >= 2 && !ctx.inFlow && !explicitKey && identity2.isSeq(value) && !value.flow && !value.tag && !value.anchor) {
            ctx.indent = ctx.indent.substring(2);
          }
          let valueCommentDone = false;
          const valueStr = stringify2.stringify(value, ctx, () => valueCommentDone = true, () => chompKeep = true);
          let ws = " ";
          if (keyComment || vsb || vcb) {
            ws = vsb ? "\n" : "";
            if (vcb) {
              const cs = commentString(vcb);
              ws += `
${stringifyComment.indentComment(cs, ctx.indent)}`;
            }
            if (valueStr === "" && !ctx.inFlow) {
              if (ws === "\n")
                ws = "\n\n";
            } else {
              ws += `
${ctx.indent}`;
            }
          } else if (!explicitKey && identity2.isCollection(value)) {
            const vs0 = valueStr[0];
            const nl0 = valueStr.indexOf("\n");
            const hasNewline = nl0 !== -1;
            const flow = (_b2 = (_a2 = ctx.inFlow) != null ? _a2 : value.flow) != null ? _b2 : value.items.length === 0;
            if (hasNewline || !flow) {
              let hasPropsLine = false;
              if (hasNewline && (vs0 === "&" || vs0 === "!")) {
                let sp0 = valueStr.indexOf(" ");
                if (vs0 === "&" && sp0 !== -1 && sp0 < nl0 && valueStr[sp0 + 1] === "!") {
                  sp0 = valueStr.indexOf(" ", sp0 + 1);
                }
                if (sp0 === -1 || nl0 < sp0)
                  hasPropsLine = true;
              }
              if (!hasPropsLine)
                ws = `
${ctx.indent}`;
            }
          } else if (valueStr === "" || valueStr[0] === "\n") {
            ws = "";
          }
          str += ws + valueStr;
          if (ctx.inFlow) {
            if (valueCommentDone && onComment)
              onComment();
          } else if (valueComment && !valueCommentDone) {
            str += stringifyComment.lineComment(str, ctx.indent, commentString(valueComment));
          } else if (chompKeep && onChompKeep) {
            onChompKeep();
          }
          return str;
        }
        __name(stringifyPair, "stringifyPair");
        exports2.stringifyPair = stringifyPair;
      }
    });
    var require_log = __commonJS2({
      "node_modules/yaml/dist/log.js"(exports2) {
        "use strict";
        function debug(logLevel, ...messages) {
          if (logLevel === "debug")
            console.log(...messages);
        }
        __name(debug, "debug");
        function warn(logLevel, warning) {
          if (logLevel === "debug" || logLevel === "warn") {
            if (typeof process !== "undefined" && process.emitWarning)
              process.emitWarning(warning);
            else
              console.warn(warning);
          }
        }
        __name(warn, "warn");
        exports2.debug = debug;
        exports2.warn = warn;
      }
    });
    var require_addPairToJSMap = __commonJS2({
      "node_modules/yaml/dist/nodes/addPairToJSMap.js"(exports2) {
        "use strict";
        var log = require_log();
        var stringify2 = require_stringify22();
        var identity2 = require_identity();
        var Scalar = require_Scalar();
        var toJS = require_toJS();
        var MERGE_KEY = "<<";
        function addPairToJSMap(ctx, map, { key, value }) {
          if ((ctx == null ? void 0 : ctx.doc.schema.merge) && isMergeKey(key)) {
            value = identity2.isAlias(value) ? value.resolve(ctx.doc) : value;
            if (identity2.isSeq(value))
              for (const it of value.items)
                mergeToJSMap(ctx, map, it);
            else if (Array.isArray(value))
              for (const it of value)
                mergeToJSMap(ctx, map, it);
            else
              mergeToJSMap(ctx, map, value);
          } else {
            const jsKey = toJS.toJS(key, "", ctx);
            if (map instanceof Map) {
              map.set(jsKey, toJS.toJS(value, jsKey, ctx));
            } else if (map instanceof Set) {
              map.add(jsKey);
            } else {
              const stringKey = stringifyKey(key, jsKey, ctx);
              const jsValue = toJS.toJS(value, stringKey, ctx);
              if (stringKey in map)
                Object.defineProperty(map, stringKey, {
                  value: jsValue,
                  writable: true,
                  enumerable: true,
                  configurable: true
                });
              else
                map[stringKey] = jsValue;
            }
          }
          return map;
        }
        __name(addPairToJSMap, "addPairToJSMap");
        var isMergeKey = /* @__PURE__ */ __name((key) => key === MERGE_KEY || identity2.isScalar(key) && key.value === MERGE_KEY && (!key.type || key.type === Scalar.Scalar.PLAIN), "isMergeKey");
        function mergeToJSMap(ctx, map, value) {
          const source = ctx && identity2.isAlias(value) ? value.resolve(ctx.doc) : value;
          if (!identity2.isMap(source))
            throw new Error("Merge sources must be maps or map aliases");
          const srcMap = source.toJSON(null, ctx, Map);
          for (const [key, value2] of srcMap) {
            if (map instanceof Map) {
              if (!map.has(key))
                map.set(key, value2);
            } else if (map instanceof Set) {
              map.add(key);
            } else if (!Object.prototype.hasOwnProperty.call(map, key)) {
              Object.defineProperty(map, key, {
                value: value2,
                writable: true,
                enumerable: true,
                configurable: true
              });
            }
          }
          return map;
        }
        __name(mergeToJSMap, "mergeToJSMap");
        function stringifyKey(key, jsKey, ctx) {
          if (jsKey === null)
            return "";
          if (typeof jsKey !== "object")
            return String(jsKey);
          if (identity2.isNode(key) && (ctx == null ? void 0 : ctx.doc)) {
            const strCtx = stringify2.createStringifyContext(ctx.doc, {});
            strCtx.anchors = /* @__PURE__ */ new Set();
            for (const node of ctx.anchors.keys())
              strCtx.anchors.add(node.anchor);
            strCtx.inFlow = true;
            strCtx.inStringifyKey = true;
            const strKey = key.toString(strCtx);
            if (!ctx.mapKeyWarned) {
              let jsonStr = JSON.stringify(strKey);
              if (jsonStr.length > 40)
                jsonStr = jsonStr.substring(0, 36) + '..."';
              log.warn(ctx.doc.options.logLevel, `Keys with collection values will be stringified due to JS Object restrictions: ${jsonStr}. Set mapAsMap: true to use object keys.`);
              ctx.mapKeyWarned = true;
            }
            return strKey;
          }
          return JSON.stringify(jsKey);
        }
        __name(stringifyKey, "stringifyKey");
        exports2.addPairToJSMap = addPairToJSMap;
      }
    });
    var require_Pair = __commonJS2({
      "node_modules/yaml/dist/nodes/Pair.js"(exports2) {
        "use strict";
        var createNode = require_createNode();
        var stringifyPair = require_stringifyPair();
        var addPairToJSMap = require_addPairToJSMap();
        var identity2 = require_identity();
        function createPair(key, value, ctx) {
          const k2 = createNode.createNode(key, void 0, ctx);
          const v2 = createNode.createNode(value, void 0, ctx);
          return new Pair(k2, v2);
        }
        __name(createPair, "createPair");
        var Pair = class _Pair {
          static {
            __name(this, "_Pair");
          }
          constructor(key, value = null) {
            Object.defineProperty(this, identity2.NODE_TYPE, { value: identity2.PAIR });
            this.key = key;
            this.value = value;
          }
          clone(schema) {
            let { key, value } = this;
            if (identity2.isNode(key))
              key = key.clone(schema);
            if (identity2.isNode(value))
              value = value.clone(schema);
            return new _Pair(key, value);
          }
          toJSON(_, ctx) {
            const pair = (ctx == null ? void 0 : ctx.mapAsMap) ? /* @__PURE__ */ new Map() : {};
            return addPairToJSMap.addPairToJSMap(ctx, pair, this);
          }
          toString(ctx, onComment, onChompKeep) {
            return (ctx == null ? void 0 : ctx.doc) ? stringifyPair.stringifyPair(this, ctx, onComment, onChompKeep) : JSON.stringify(this);
          }
        };
        exports2.Pair = Pair;
        exports2.createPair = createPair;
      }
    });
    var require_stringifyCollection = __commonJS2({
      "node_modules/yaml/dist/stringify/stringifyCollection.js"(exports2) {
        "use strict";
        var identity2 = require_identity();
        var stringify2 = require_stringify22();
        var stringifyComment = require_stringifyComment();
        function stringifyCollection(collection, ctx, options) {
          var _a2;
          const flow = (_a2 = ctx.inFlow) != null ? _a2 : collection.flow;
          const stringify22 = flow ? stringifyFlowCollection : stringifyBlockCollection;
          return stringify22(collection, ctx, options);
        }
        __name(stringifyCollection, "stringifyCollection");
        function stringifyBlockCollection({ comment, items }, ctx, { blockItemPrefix, flowChars, itemIndent, onChompKeep, onComment }) {
          const { indent, options: { commentString } } = ctx;
          const itemCtx = Object.assign({}, ctx, { indent: itemIndent, type: null });
          let chompKeep = false;
          const lines = [];
          for (let i = 0; i < items.length; ++i) {
            const item = items[i];
            let comment2 = null;
            if (identity2.isNode(item)) {
              if (!chompKeep && item.spaceBefore)
                lines.push("");
              addCommentBefore(ctx, lines, item.commentBefore, chompKeep);
              if (item.comment)
                comment2 = item.comment;
            } else if (identity2.isPair(item)) {
              const ik = identity2.isNode(item.key) ? item.key : null;
              if (ik) {
                if (!chompKeep && ik.spaceBefore)
                  lines.push("");
                addCommentBefore(ctx, lines, ik.commentBefore, chompKeep);
              }
            }
            chompKeep = false;
            let str2 = stringify2.stringify(item, itemCtx, () => comment2 = null, () => chompKeep = true);
            if (comment2)
              str2 += stringifyComment.lineComment(str2, itemIndent, commentString(comment2));
            if (chompKeep && comment2)
              chompKeep = false;
            lines.push(blockItemPrefix + str2);
          }
          let str;
          if (lines.length === 0) {
            str = flowChars.start + flowChars.end;
          } else {
            str = lines[0];
            for (let i = 1; i < lines.length; ++i) {
              const line = lines[i];
              str += line ? `
${indent}${line}` : "\n";
            }
          }
          if (comment) {
            str += "\n" + stringifyComment.indentComment(commentString(comment), indent);
            if (onComment)
              onComment();
          } else if (chompKeep && onChompKeep)
            onChompKeep();
          return str;
        }
        __name(stringifyBlockCollection, "stringifyBlockCollection");
        function stringifyFlowCollection({ items }, ctx, { flowChars, itemIndent }) {
          const { indent, indentStep, flowCollectionPadding: fcPadding, options: { commentString } } = ctx;
          itemIndent += indentStep;
          const itemCtx = Object.assign({}, ctx, {
            indent: itemIndent,
            inFlow: true,
            type: null
          });
          let reqNewline = false;
          let linesAtValue = 0;
          const lines = [];
          for (let i = 0; i < items.length; ++i) {
            const item = items[i];
            let comment = null;
            if (identity2.isNode(item)) {
              if (item.spaceBefore)
                lines.push("");
              addCommentBefore(ctx, lines, item.commentBefore, false);
              if (item.comment)
                comment = item.comment;
            } else if (identity2.isPair(item)) {
              const ik = identity2.isNode(item.key) ? item.key : null;
              if (ik) {
                if (ik.spaceBefore)
                  lines.push("");
                addCommentBefore(ctx, lines, ik.commentBefore, false);
                if (ik.comment)
                  reqNewline = true;
              }
              const iv = identity2.isNode(item.value) ? item.value : null;
              if (iv) {
                if (iv.comment)
                  comment = iv.comment;
                if (iv.commentBefore)
                  reqNewline = true;
              } else if (item.value == null && (ik == null ? void 0 : ik.comment)) {
                comment = ik.comment;
              }
            }
            if (comment)
              reqNewline = true;
            let str = stringify2.stringify(item, itemCtx, () => comment = null);
            if (i < items.length - 1)
              str += ",";
            if (comment)
              str += stringifyComment.lineComment(str, itemIndent, commentString(comment));
            if (!reqNewline && (lines.length > linesAtValue || str.includes("\n")))
              reqNewline = true;
            lines.push(str);
            linesAtValue = lines.length;
          }
          const { start, end } = flowChars;
          if (lines.length === 0) {
            return start + end;
          } else {
            if (!reqNewline) {
              const len = lines.reduce((sum, line) => sum + line.length + 2, 2);
              reqNewline = ctx.options.lineWidth > 0 && len > ctx.options.lineWidth;
            }
            if (reqNewline) {
              let str = start;
              for (const line of lines)
                str += line ? `
${indentStep}${indent}${line}` : "\n";
              return `${str}
${indent}${end}`;
            } else {
              return `${start}${fcPadding}${lines.join(" ")}${fcPadding}${end}`;
            }
          }
        }
        __name(stringifyFlowCollection, "stringifyFlowCollection");
        function addCommentBefore({ indent, options: { commentString } }, lines, comment, chompKeep) {
          if (comment && chompKeep)
            comment = comment.replace(/^\n+/, "");
          if (comment) {
            const ic = stringifyComment.indentComment(commentString(comment), indent);
            lines.push(ic.trimStart());
          }
        }
        __name(addCommentBefore, "addCommentBefore");
        exports2.stringifyCollection = stringifyCollection;
      }
    });
    var require_YAMLMap = __commonJS2({
      "node_modules/yaml/dist/nodes/YAMLMap.js"(exports2) {
        "use strict";
        var stringifyCollection = require_stringifyCollection();
        var addPairToJSMap = require_addPairToJSMap();
        var Collection = require_Collection();
        var identity2 = require_identity();
        var Pair = require_Pair();
        var Scalar = require_Scalar();
        function findPair(items, key) {
          const k2 = identity2.isScalar(key) ? key.value : key;
          for (const it of items) {
            if (identity2.isPair(it)) {
              if (it.key === key || it.key === k2)
                return it;
              if (identity2.isScalar(it.key) && it.key.value === k2)
                return it;
            }
          }
          return void 0;
        }
        __name(findPair, "findPair");
        var YAMLMap = class extends Collection.Collection {
          static {
            __name(this, "YAMLMap");
          }
          static get tagName() {
            return "tag:yaml.org,2002:map";
          }
          constructor(schema) {
            super(identity2.MAP, schema);
            this.items = [];
          }
          /**
           * A generic collection parsing method that can be extended
           * to other node classes that inherit from YAMLMap
           */
          static from(schema, obj, ctx) {
            const { keepUndefined, replacer } = ctx;
            const map = new this(schema);
            const add = /* @__PURE__ */ __name((key, value) => {
              if (typeof replacer === "function")
                value = replacer.call(obj, key, value);
              else if (Array.isArray(replacer) && !replacer.includes(key))
                return;
              if (value !== void 0 || keepUndefined)
                map.items.push(Pair.createPair(key, value, ctx));
            }, "add");
            if (obj instanceof Map) {
              for (const [key, value] of obj)
                add(key, value);
            } else if (obj && typeof obj === "object") {
              for (const key of Object.keys(obj))
                add(key, obj[key]);
            }
            if (typeof schema.sortMapEntries === "function") {
              map.items.sort(schema.sortMapEntries);
            }
            return map;
          }
          /**
           * Adds a value to the collection.
           *
           * @param overwrite - If not set `true`, using a key that is already in the
           *   collection will throw. Otherwise, overwrites the previous value.
           */
          add(pair, overwrite) {
            var _a2;
            let _pair;
            if (identity2.isPair(pair))
              _pair = pair;
            else if (!pair || typeof pair !== "object" || !("key" in pair)) {
              _pair = new Pair.Pair(pair, pair == null ? void 0 : pair.value);
            } else
              _pair = new Pair.Pair(pair.key, pair.value);
            const prev = findPair(this.items, _pair.key);
            const sortEntries = (_a2 = this.schema) == null ? void 0 : _a2.sortMapEntries;
            if (prev) {
              if (!overwrite)
                throw new Error(`Key ${_pair.key} already set`);
              if (identity2.isScalar(prev.value) && Scalar.isScalarValue(_pair.value))
                prev.value.value = _pair.value;
              else
                prev.value = _pair.value;
            } else if (sortEntries) {
              const i = this.items.findIndex((item) => sortEntries(_pair, item) < 0);
              if (i === -1)
                this.items.push(_pair);
              else
                this.items.splice(i, 0, _pair);
            } else {
              this.items.push(_pair);
            }
          }
          delete(key) {
            const it = findPair(this.items, key);
            if (!it)
              return false;
            const del = this.items.splice(this.items.indexOf(it), 1);
            return del.length > 0;
          }
          get(key, keepScalar) {
            var _a2;
            const it = findPair(this.items, key);
            const node = it == null ? void 0 : it.value;
            return (_a2 = !keepScalar && identity2.isScalar(node) ? node.value : node) != null ? _a2 : void 0;
          }
          has(key) {
            return !!findPair(this.items, key);
          }
          set(key, value) {
            this.add(new Pair.Pair(key, value), true);
          }
          /**
           * @param ctx - Conversion context, originally set in Document#toJS()
           * @param {Class} Type - If set, forces the returned collection type
           * @returns Instance of Type, Map, or Object
           */
          toJSON(_, ctx, Type) {
            const map = Type ? new Type() : (ctx == null ? void 0 : ctx.mapAsMap) ? /* @__PURE__ */ new Map() : {};
            if (ctx == null ? void 0 : ctx.onCreate)
              ctx.onCreate(map);
            for (const item of this.items)
              addPairToJSMap.addPairToJSMap(ctx, map, item);
            return map;
          }
          toString(ctx, onComment, onChompKeep) {
            if (!ctx)
              return JSON.stringify(this);
            for (const item of this.items) {
              if (!identity2.isPair(item))
                throw new Error(`Map items must all be pairs; found ${JSON.stringify(item)} instead`);
            }
            if (!ctx.allNullValues && this.hasAllNullValues(false))
              ctx = Object.assign({}, ctx, { allNullValues: true });
            return stringifyCollection.stringifyCollection(this, ctx, {
              blockItemPrefix: "",
              flowChars: { start: "{", end: "}" },
              itemIndent: ctx.indent || "",
              onChompKeep,
              onComment
            });
          }
        };
        exports2.YAMLMap = YAMLMap;
        exports2.findPair = findPair;
      }
    });
    var require_map = __commonJS2({
      "node_modules/yaml/dist/schema/common/map.js"(exports2) {
        "use strict";
        var identity2 = require_identity();
        var YAMLMap = require_YAMLMap();
        var map = {
          collection: "map",
          default: true,
          nodeClass: YAMLMap.YAMLMap,
          tag: "tag:yaml.org,2002:map",
          resolve(map2, onError) {
            if (!identity2.isMap(map2))
              onError("Expected a mapping for this tag");
            return map2;
          },
          createNode: /* @__PURE__ */ __name((schema, obj, ctx) => YAMLMap.YAMLMap.from(schema, obj, ctx), "createNode")
        };
        exports2.map = map;
      }
    });
    var require_YAMLSeq = __commonJS2({
      "node_modules/yaml/dist/nodes/YAMLSeq.js"(exports2) {
        "use strict";
        var createNode = require_createNode();
        var stringifyCollection = require_stringifyCollection();
        var Collection = require_Collection();
        var identity2 = require_identity();
        var Scalar = require_Scalar();
        var toJS = require_toJS();
        var YAMLSeq = class extends Collection.Collection {
          static {
            __name(this, "YAMLSeq");
          }
          static get tagName() {
            return "tag:yaml.org,2002:seq";
          }
          constructor(schema) {
            super(identity2.SEQ, schema);
            this.items = [];
          }
          add(value) {
            this.items.push(value);
          }
          /**
           * Removes a value from the collection.
           *
           * `key` must contain a representation of an integer for this to succeed.
           * It may be wrapped in a `Scalar`.
           *
           * @returns `true` if the item was found and removed.
           */
          delete(key) {
            const idx = asItemIndex(key);
            if (typeof idx !== "number")
              return false;
            const del = this.items.splice(idx, 1);
            return del.length > 0;
          }
          get(key, keepScalar) {
            const idx = asItemIndex(key);
            if (typeof idx !== "number")
              return void 0;
            const it = this.items[idx];
            return !keepScalar && identity2.isScalar(it) ? it.value : it;
          }
          /**
           * Checks if the collection includes a value with the key `key`.
           *
           * `key` must contain a representation of an integer for this to succeed.
           * It may be wrapped in a `Scalar`.
           */
          has(key) {
            const idx = asItemIndex(key);
            return typeof idx === "number" && idx < this.items.length;
          }
          /**
           * Sets a value in this collection. For `!!set`, `value` needs to be a
           * boolean to add/remove the item from the set.
           *
           * If `key` does not contain a representation of an integer, this will throw.
           * It may be wrapped in a `Scalar`.
           */
          set(key, value) {
            const idx = asItemIndex(key);
            if (typeof idx !== "number")
              throw new Error(`Expected a valid index, not ${key}.`);
            const prev = this.items[idx];
            if (identity2.isScalar(prev) && Scalar.isScalarValue(value))
              prev.value = value;
            else
              this.items[idx] = value;
          }
          toJSON(_, ctx) {
            const seq = [];
            if (ctx == null ? void 0 : ctx.onCreate)
              ctx.onCreate(seq);
            let i = 0;
            for (const item of this.items)
              seq.push(toJS.toJS(item, String(i++), ctx));
            return seq;
          }
          toString(ctx, onComment, onChompKeep) {
            if (!ctx)
              return JSON.stringify(this);
            return stringifyCollection.stringifyCollection(this, ctx, {
              blockItemPrefix: "- ",
              flowChars: { start: "[", end: "]" },
              itemIndent: (ctx.indent || "") + "  ",
              onChompKeep,
              onComment
            });
          }
          static from(schema, obj, ctx) {
            const { replacer } = ctx;
            const seq = new this(schema);
            if (obj && Symbol.iterator in Object(obj)) {
              let i = 0;
              for (let it of obj) {
                if (typeof replacer === "function") {
                  const key = obj instanceof Set ? it : String(i++);
                  it = replacer.call(obj, key, it);
                }
                seq.items.push(createNode.createNode(it, void 0, ctx));
              }
            }
            return seq;
          }
        };
        function asItemIndex(key) {
          let idx = identity2.isScalar(key) ? key.value : key;
          if (idx && typeof idx === "string")
            idx = Number(idx);
          return typeof idx === "number" && Number.isInteger(idx) && idx >= 0 ? idx : null;
        }
        __name(asItemIndex, "asItemIndex");
        exports2.YAMLSeq = YAMLSeq;
      }
    });
    var require_seq = __commonJS2({
      "node_modules/yaml/dist/schema/common/seq.js"(exports2) {
        "use strict";
        var identity2 = require_identity();
        var YAMLSeq = require_YAMLSeq();
        var seq = {
          collection: "seq",
          default: true,
          nodeClass: YAMLSeq.YAMLSeq,
          tag: "tag:yaml.org,2002:seq",
          resolve(seq2, onError) {
            if (!identity2.isSeq(seq2))
              onError("Expected a sequence for this tag");
            return seq2;
          },
          createNode: /* @__PURE__ */ __name((schema, obj, ctx) => YAMLSeq.YAMLSeq.from(schema, obj, ctx), "createNode")
        };
        exports2.seq = seq;
      }
    });
    var require_string22 = __commonJS2({
      "node_modules/yaml/dist/schema/common/string.js"(exports2) {
        "use strict";
        var stringifyString = require_stringifyString();
        var string = {
          identify: /* @__PURE__ */ __name((value) => typeof value === "string", "identify"),
          default: true,
          tag: "tag:yaml.org,2002:str",
          resolve: /* @__PURE__ */ __name((str) => str, "resolve"),
          stringify(item, ctx, onComment, onChompKeep) {
            ctx = Object.assign({ actualString: true }, ctx);
            return stringifyString.stringifyString(item, ctx, onComment, onChompKeep);
          }
        };
        exports2.string = string;
      }
    });
    var require_null = __commonJS2({
      "node_modules/yaml/dist/schema/common/null.js"(exports2) {
        "use strict";
        var Scalar = require_Scalar();
        var nullTag = {
          identify: /* @__PURE__ */ __name((value) => value == null, "identify"),
          createNode: /* @__PURE__ */ __name(() => new Scalar.Scalar(null), "createNode"),
          default: true,
          tag: "tag:yaml.org,2002:null",
          test: /^(?:~|[Nn]ull|NULL)?$/,
          resolve: /* @__PURE__ */ __name(() => new Scalar.Scalar(null), "resolve"),
          stringify: /* @__PURE__ */ __name(({ source }, ctx) => typeof source === "string" && nullTag.test.test(source) ? source : ctx.options.nullStr, "stringify")
        };
        exports2.nullTag = nullTag;
      }
    });
    var require_bool = __commonJS2({
      "node_modules/yaml/dist/schema/core/bool.js"(exports2) {
        "use strict";
        var Scalar = require_Scalar();
        var boolTag = {
          identify: /* @__PURE__ */ __name((value) => typeof value === "boolean", "identify"),
          default: true,
          tag: "tag:yaml.org,2002:bool",
          test: /^(?:[Tt]rue|TRUE|[Ff]alse|FALSE)$/,
          resolve: /* @__PURE__ */ __name((str) => new Scalar.Scalar(str[0] === "t" || str[0] === "T"), "resolve"),
          stringify({ source, value }, ctx) {
            if (source && boolTag.test.test(source)) {
              const sv = source[0] === "t" || source[0] === "T";
              if (value === sv)
                return source;
            }
            return value ? ctx.options.trueStr : ctx.options.falseStr;
          }
        };
        exports2.boolTag = boolTag;
      }
    });
    var require_stringifyNumber = __commonJS2({
      "node_modules/yaml/dist/stringify/stringifyNumber.js"(exports2) {
        "use strict";
        function stringifyNumber({ format, minFractionDigits, tag, value }) {
          if (typeof value === "bigint")
            return String(value);
          const num = typeof value === "number" ? value : Number(value);
          if (!isFinite(num))
            return isNaN(num) ? ".nan" : num < 0 ? "-.inf" : ".inf";
          let n3 = JSON.stringify(value);
          if (!format && minFractionDigits && (!tag || tag === "tag:yaml.org,2002:float") && /^\d/.test(n3)) {
            let i = n3.indexOf(".");
            if (i < 0) {
              i = n3.length;
              n3 += ".";
            }
            let d2 = minFractionDigits - (n3.length - i - 1);
            while (d2-- > 0)
              n3 += "0";
          }
          return n3;
        }
        __name(stringifyNumber, "stringifyNumber");
        exports2.stringifyNumber = stringifyNumber;
      }
    });
    var require_float = __commonJS2({
      "node_modules/yaml/dist/schema/core/float.js"(exports2) {
        "use strict";
        var Scalar = require_Scalar();
        var stringifyNumber = require_stringifyNumber();
        var floatNaN = {
          identify: /* @__PURE__ */ __name((value) => typeof value === "number", "identify"),
          default: true,
          tag: "tag:yaml.org,2002:float",
          test: /^(?:[-+]?\.(?:inf|Inf|INF|nan|NaN|NAN))$/,
          resolve: /* @__PURE__ */ __name((str) => str.slice(-3).toLowerCase() === "nan" ? NaN : str[0] === "-" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, "resolve"),
          stringify: stringifyNumber.stringifyNumber
        };
        var floatExp = {
          identify: /* @__PURE__ */ __name((value) => typeof value === "number", "identify"),
          default: true,
          tag: "tag:yaml.org,2002:float",
          format: "EXP",
          test: /^[-+]?(?:\.[0-9]+|[0-9]+(?:\.[0-9]*)?)[eE][-+]?[0-9]+$/,
          resolve: /* @__PURE__ */ __name((str) => parseFloat(str), "resolve"),
          stringify(node) {
            const num = Number(node.value);
            return isFinite(num) ? num.toExponential() : stringifyNumber.stringifyNumber(node);
          }
        };
        var float = {
          identify: /* @__PURE__ */ __name((value) => typeof value === "number", "identify"),
          default: true,
          tag: "tag:yaml.org,2002:float",
          test: /^[-+]?(?:\.[0-9]+|[0-9]+\.[0-9]*)$/,
          resolve(str) {
            const node = new Scalar.Scalar(parseFloat(str));
            const dot = str.indexOf(".");
            if (dot !== -1 && str[str.length - 1] === "0")
              node.minFractionDigits = str.length - dot - 1;
            return node;
          },
          stringify: stringifyNumber.stringifyNumber
        };
        exports2.float = float;
        exports2.floatExp = floatExp;
        exports2.floatNaN = floatNaN;
      }
    });
    var require_int = __commonJS2({
      "node_modules/yaml/dist/schema/core/int.js"(exports2) {
        "use strict";
        var stringifyNumber = require_stringifyNumber();
        var intIdentify = /* @__PURE__ */ __name((value) => typeof value === "bigint" || Number.isInteger(value), "intIdentify");
        var intResolve = /* @__PURE__ */ __name((str, offset, radix, { intAsBigInt }) => intAsBigInt ? BigInt(str) : parseInt(str.substring(offset), radix), "intResolve");
        function intStringify(node, radix, prefix) {
          const { value } = node;
          if (intIdentify(value) && value >= 0)
            return prefix + value.toString(radix);
          return stringifyNumber.stringifyNumber(node);
        }
        __name(intStringify, "intStringify");
        var intOct = {
          identify: /* @__PURE__ */ __name((value) => intIdentify(value) && value >= 0, "identify"),
          default: true,
          tag: "tag:yaml.org,2002:int",
          format: "OCT",
          test: /^0o[0-7]+$/,
          resolve: /* @__PURE__ */ __name((str, _onError, opt) => intResolve(str, 2, 8, opt), "resolve"),
          stringify: /* @__PURE__ */ __name((node) => intStringify(node, 8, "0o"), "stringify")
        };
        var int = {
          identify: intIdentify,
          default: true,
          tag: "tag:yaml.org,2002:int",
          test: /^[-+]?[0-9]+$/,
          resolve: /* @__PURE__ */ __name((str, _onError, opt) => intResolve(str, 0, 10, opt), "resolve"),
          stringify: stringifyNumber.stringifyNumber
        };
        var intHex = {
          identify: /* @__PURE__ */ __name((value) => intIdentify(value) && value >= 0, "identify"),
          default: true,
          tag: "tag:yaml.org,2002:int",
          format: "HEX",
          test: /^0x[0-9a-fA-F]+$/,
          resolve: /* @__PURE__ */ __name((str, _onError, opt) => intResolve(str, 2, 16, opt), "resolve"),
          stringify: /* @__PURE__ */ __name((node) => intStringify(node, 16, "0x"), "stringify")
        };
        exports2.int = int;
        exports2.intHex = intHex;
        exports2.intOct = intOct;
      }
    });
    var require_schema = __commonJS2({
      "node_modules/yaml/dist/schema/core/schema.js"(exports2) {
        "use strict";
        var map = require_map();
        var _null = require_null();
        var seq = require_seq();
        var string = require_string22();
        var bool = require_bool();
        var float = require_float();
        var int = require_int();
        var schema = [
          map.map,
          seq.seq,
          string.string,
          _null.nullTag,
          bool.boolTag,
          int.intOct,
          int.int,
          int.intHex,
          float.floatNaN,
          float.floatExp,
          float.float
        ];
        exports2.schema = schema;
      }
    });
    var require_schema2 = __commonJS2({
      "node_modules/yaml/dist/schema/json/schema.js"(exports2) {
        "use strict";
        var Scalar = require_Scalar();
        var map = require_map();
        var seq = require_seq();
        function intIdentify(value) {
          return typeof value === "bigint" || Number.isInteger(value);
        }
        __name(intIdentify, "intIdentify");
        var stringifyJSON = /* @__PURE__ */ __name(({ value }) => JSON.stringify(value), "stringifyJSON");
        var jsonScalars = [
          {
            identify: /* @__PURE__ */ __name((value) => typeof value === "string", "identify"),
            default: true,
            tag: "tag:yaml.org,2002:str",
            resolve: /* @__PURE__ */ __name((str) => str, "resolve"),
            stringify: stringifyJSON
          },
          {
            identify: /* @__PURE__ */ __name((value) => value == null, "identify"),
            createNode: /* @__PURE__ */ __name(() => new Scalar.Scalar(null), "createNode"),
            default: true,
            tag: "tag:yaml.org,2002:null",
            test: /^null$/,
            resolve: /* @__PURE__ */ __name(() => null, "resolve"),
            stringify: stringifyJSON
          },
          {
            identify: /* @__PURE__ */ __name((value) => typeof value === "boolean", "identify"),
            default: true,
            tag: "tag:yaml.org,2002:bool",
            test: /^true|false$/,
            resolve: /* @__PURE__ */ __name((str) => str === "true", "resolve"),
            stringify: stringifyJSON
          },
          {
            identify: intIdentify,
            default: true,
            tag: "tag:yaml.org,2002:int",
            test: /^-?(?:0|[1-9][0-9]*)$/,
            resolve: /* @__PURE__ */ __name((str, _onError, { intAsBigInt }) => intAsBigInt ? BigInt(str) : parseInt(str, 10), "resolve"),
            stringify: /* @__PURE__ */ __name(({ value }) => intIdentify(value) ? value.toString() : JSON.stringify(value), "stringify")
          },
          {
            identify: /* @__PURE__ */ __name((value) => typeof value === "number", "identify"),
            default: true,
            tag: "tag:yaml.org,2002:float",
            test: /^-?(?:0|[1-9][0-9]*)(?:\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,
            resolve: /* @__PURE__ */ __name((str) => parseFloat(str), "resolve"),
            stringify: stringifyJSON
          }
        ];
        var jsonError = {
          default: true,
          tag: "",
          test: /^/,
          resolve(str, onError) {
            onError(`Unresolved plain scalar ${JSON.stringify(str)}`);
            return str;
          }
        };
        var schema = [map.map, seq.seq].concat(jsonScalars, jsonError);
        exports2.schema = schema;
      }
    });
    var require_binary2 = __commonJS2({
      "node_modules/yaml/dist/schema/yaml-1.1/binary.js"(exports2) {
        "use strict";
        var Scalar = require_Scalar();
        var stringifyString = require_stringifyString();
        var binary = {
          identify: /* @__PURE__ */ __name((value) => value instanceof Uint8Array, "identify"),
          // Buffer inherits from Uint8Array
          default: false,
          tag: "tag:yaml.org,2002:binary",
          /**
           * Returns a Buffer in node and an Uint8Array in browsers
           *
           * To use the resulting buffer as an image, you'll want to do something like:
           *
           *   const blob = new Blob([buffer], { type: 'image/jpeg' })
           *   document.querySelector('#photo').src = URL.createObjectURL(blob)
           */
          resolve(src, onError) {
            if (typeof Buffer === "function") {
              return Buffer.from(src, "base64");
            } else if (typeof atob === "function") {
              const str = atob(src.replace(/[\n\r]/g, ""));
              const buffer = new Uint8Array(str.length);
              for (let i = 0; i < str.length; ++i)
                buffer[i] = str.charCodeAt(i);
              return buffer;
            } else {
              onError("This environment does not support reading binary tags; either Buffer or atob is required");
              return src;
            }
          },
          stringify({ comment, type, value }, ctx, onComment, onChompKeep) {
            const buf = value;
            let str;
            if (typeof Buffer === "function") {
              str = buf instanceof Buffer ? buf.toString("base64") : Buffer.from(buf.buffer).toString("base64");
            } else if (typeof btoa === "function") {
              let s2 = "";
              for (let i = 0; i < buf.length; ++i)
                s2 += String.fromCharCode(buf[i]);
              str = btoa(s2);
            } else {
              throw new Error("This environment does not support writing binary tags; either Buffer or btoa is required");
            }
            if (!type)
              type = Scalar.Scalar.BLOCK_LITERAL;
            if (type !== Scalar.Scalar.QUOTE_DOUBLE) {
              const lineWidth = Math.max(ctx.options.lineWidth - ctx.indent.length, ctx.options.minContentWidth);
              const n3 = Math.ceil(str.length / lineWidth);
              const lines = new Array(n3);
              for (let i = 0, o3 = 0; i < n3; ++i, o3 += lineWidth) {
                lines[i] = str.substr(o3, lineWidth);
              }
              str = lines.join(type === Scalar.Scalar.BLOCK_LITERAL ? "\n" : " ");
            }
            return stringifyString.stringifyString({ comment, type, value: str }, ctx, onComment, onChompKeep);
          }
        };
        exports2.binary = binary;
      }
    });
    var require_pairs = __commonJS2({
      "node_modules/yaml/dist/schema/yaml-1.1/pairs.js"(exports2) {
        "use strict";
        var identity2 = require_identity();
        var Pair = require_Pair();
        var Scalar = require_Scalar();
        var YAMLSeq = require_YAMLSeq();
        function resolvePairs(seq, onError) {
          var _a2;
          if (identity2.isSeq(seq)) {
            for (let i = 0; i < seq.items.length; ++i) {
              let item = seq.items[i];
              if (identity2.isPair(item))
                continue;
              else if (identity2.isMap(item)) {
                if (item.items.length > 1)
                  onError("Each pair must have its own sequence indicator");
                const pair = item.items[0] || new Pair.Pair(new Scalar.Scalar(null));
                if (item.commentBefore)
                  pair.key.commentBefore = pair.key.commentBefore ? `${item.commentBefore}
${pair.key.commentBefore}` : item.commentBefore;
                if (item.comment) {
                  const cn = (_a2 = pair.value) != null ? _a2 : pair.key;
                  cn.comment = cn.comment ? `${item.comment}
${cn.comment}` : item.comment;
                }
                item = pair;
              }
              seq.items[i] = identity2.isPair(item) ? item : new Pair.Pair(item);
            }
          } else
            onError("Expected a sequence for this tag");
          return seq;
        }
        __name(resolvePairs, "resolvePairs");
        function createPairs(schema, iterable, ctx) {
          const { replacer } = ctx;
          const pairs2 = new YAMLSeq.YAMLSeq(schema);
          pairs2.tag = "tag:yaml.org,2002:pairs";
          let i = 0;
          if (iterable && Symbol.iterator in Object(iterable))
            for (let it of iterable) {
              if (typeof replacer === "function")
                it = replacer.call(iterable, String(i++), it);
              let key, value;
              if (Array.isArray(it)) {
                if (it.length === 2) {
                  key = it[0];
                  value = it[1];
                } else
                  throw new TypeError(`Expected [key, value] tuple: ${it}`);
              } else if (it && it instanceof Object) {
                const keys = Object.keys(it);
                if (keys.length === 1) {
                  key = keys[0];
                  value = it[key];
                } else {
                  throw new TypeError(`Expected tuple with one key, not ${keys.length} keys`);
                }
              } else {
                key = it;
              }
              pairs2.items.push(Pair.createPair(key, value, ctx));
            }
          return pairs2;
        }
        __name(createPairs, "createPairs");
        var pairs = {
          collection: "seq",
          default: false,
          tag: "tag:yaml.org,2002:pairs",
          resolve: resolvePairs,
          createNode: createPairs
        };
        exports2.createPairs = createPairs;
        exports2.pairs = pairs;
        exports2.resolvePairs = resolvePairs;
      }
    });
    var require_omap = __commonJS2({
      "node_modules/yaml/dist/schema/yaml-1.1/omap.js"(exports2) {
        "use strict";
        var identity2 = require_identity();
        var toJS = require_toJS();
        var YAMLMap = require_YAMLMap();
        var YAMLSeq = require_YAMLSeq();
        var pairs = require_pairs();
        var YAMLOMap = class _YAMLOMap extends YAMLSeq.YAMLSeq {
          static {
            __name(this, "_YAMLOMap");
          }
          constructor() {
            super();
            this.add = YAMLMap.YAMLMap.prototype.add.bind(this);
            this.delete = YAMLMap.YAMLMap.prototype.delete.bind(this);
            this.get = YAMLMap.YAMLMap.prototype.get.bind(this);
            this.has = YAMLMap.YAMLMap.prototype.has.bind(this);
            this.set = YAMLMap.YAMLMap.prototype.set.bind(this);
            this.tag = _YAMLOMap.tag;
          }
          /**
           * If `ctx` is given, the return type is actually `Map<unknown, unknown>`,
           * but TypeScript won't allow widening the signature of a child method.
           */
          toJSON(_, ctx) {
            if (!ctx)
              return super.toJSON(_);
            const map = /* @__PURE__ */ new Map();
            if (ctx == null ? void 0 : ctx.onCreate)
              ctx.onCreate(map);
            for (const pair of this.items) {
              let key, value;
              if (identity2.isPair(pair)) {
                key = toJS.toJS(pair.key, "", ctx);
                value = toJS.toJS(pair.value, key, ctx);
              } else {
                key = toJS.toJS(pair, "", ctx);
              }
              if (map.has(key))
                throw new Error("Ordered maps must not include duplicate keys");
              map.set(key, value);
            }
            return map;
          }
          static from(schema, iterable, ctx) {
            const pairs$1 = pairs.createPairs(schema, iterable, ctx);
            const omap2 = new this();
            omap2.items = pairs$1.items;
            return omap2;
          }
        };
        YAMLOMap.tag = "tag:yaml.org,2002:omap";
        var omap = {
          collection: "seq",
          identify: /* @__PURE__ */ __name((value) => value instanceof Map, "identify"),
          nodeClass: YAMLOMap,
          default: false,
          tag: "tag:yaml.org,2002:omap",
          resolve(seq, onError) {
            const pairs$1 = pairs.resolvePairs(seq, onError);
            const seenKeys = [];
            for (const { key } of pairs$1.items) {
              if (identity2.isScalar(key)) {
                if (seenKeys.includes(key.value)) {
                  onError(`Ordered maps must not include duplicate keys: ${key.value}`);
                } else {
                  seenKeys.push(key.value);
                }
              }
            }
            return Object.assign(new YAMLOMap(), pairs$1);
          },
          createNode: /* @__PURE__ */ __name((schema, iterable, ctx) => YAMLOMap.from(schema, iterable, ctx), "createNode")
        };
        exports2.YAMLOMap = YAMLOMap;
        exports2.omap = omap;
      }
    });
    var require_bool2 = __commonJS2({
      "node_modules/yaml/dist/schema/yaml-1.1/bool.js"(exports2) {
        "use strict";
        var Scalar = require_Scalar();
        function boolStringify({ value, source }, ctx) {
          const boolObj = value ? trueTag : falseTag;
          if (source && boolObj.test.test(source))
            return source;
          return value ? ctx.options.trueStr : ctx.options.falseStr;
        }
        __name(boolStringify, "boolStringify");
        var trueTag = {
          identify: /* @__PURE__ */ __name((value) => value === true, "identify"),
          default: true,
          tag: "tag:yaml.org,2002:bool",
          test: /^(?:Y|y|[Yy]es|YES|[Tt]rue|TRUE|[Oo]n|ON)$/,
          resolve: /* @__PURE__ */ __name(() => new Scalar.Scalar(true), "resolve"),
          stringify: boolStringify
        };
        var falseTag = {
          identify: /* @__PURE__ */ __name((value) => value === false, "identify"),
          default: true,
          tag: "tag:yaml.org,2002:bool",
          test: /^(?:N|n|[Nn]o|NO|[Ff]alse|FALSE|[Oo]ff|OFF)$/,
          resolve: /* @__PURE__ */ __name(() => new Scalar.Scalar(false), "resolve"),
          stringify: boolStringify
        };
        exports2.falseTag = falseTag;
        exports2.trueTag = trueTag;
      }
    });
    var require_float2 = __commonJS2({
      "node_modules/yaml/dist/schema/yaml-1.1/float.js"(exports2) {
        "use strict";
        var Scalar = require_Scalar();
        var stringifyNumber = require_stringifyNumber();
        var floatNaN = {
          identify: /* @__PURE__ */ __name((value) => typeof value === "number", "identify"),
          default: true,
          tag: "tag:yaml.org,2002:float",
          test: /^[-+]?\.(?:inf|Inf|INF|nan|NaN|NAN)$/,
          resolve: /* @__PURE__ */ __name((str) => str.slice(-3).toLowerCase() === "nan" ? NaN : str[0] === "-" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, "resolve"),
          stringify: stringifyNumber.stringifyNumber
        };
        var floatExp = {
          identify: /* @__PURE__ */ __name((value) => typeof value === "number", "identify"),
          default: true,
          tag: "tag:yaml.org,2002:float",
          format: "EXP",
          test: /^[-+]?(?:[0-9][0-9_]*)?(?:\.[0-9_]*)?[eE][-+]?[0-9]+$/,
          resolve: /* @__PURE__ */ __name((str) => parseFloat(str.replace(/_/g, "")), "resolve"),
          stringify(node) {
            const num = Number(node.value);
            return isFinite(num) ? num.toExponential() : stringifyNumber.stringifyNumber(node);
          }
        };
        var float = {
          identify: /* @__PURE__ */ __name((value) => typeof value === "number", "identify"),
          default: true,
          tag: "tag:yaml.org,2002:float",
          test: /^[-+]?(?:[0-9][0-9_]*)?\.[0-9_]*$/,
          resolve(str) {
            const node = new Scalar.Scalar(parseFloat(str.replace(/_/g, "")));
            const dot = str.indexOf(".");
            if (dot !== -1) {
              const f3 = str.substring(dot + 1).replace(/_/g, "");
              if (f3[f3.length - 1] === "0")
                node.minFractionDigits = f3.length;
            }
            return node;
          },
          stringify: stringifyNumber.stringifyNumber
        };
        exports2.float = float;
        exports2.floatExp = floatExp;
        exports2.floatNaN = floatNaN;
      }
    });
    var require_int2 = __commonJS2({
      "node_modules/yaml/dist/schema/yaml-1.1/int.js"(exports2) {
        "use strict";
        var stringifyNumber = require_stringifyNumber();
        var intIdentify = /* @__PURE__ */ __name((value) => typeof value === "bigint" || Number.isInteger(value), "intIdentify");
        function intResolve(str, offset, radix, { intAsBigInt }) {
          const sign = str[0];
          if (sign === "-" || sign === "+")
            offset += 1;
          str = str.substring(offset).replace(/_/g, "");
          if (intAsBigInt) {
            switch (radix) {
              case 2:
                str = `0b${str}`;
                break;
              case 8:
                str = `0o${str}`;
                break;
              case 16:
                str = `0x${str}`;
                break;
            }
            const n4 = BigInt(str);
            return sign === "-" ? BigInt(-1) * n4 : n4;
          }
          const n3 = parseInt(str, radix);
          return sign === "-" ? -1 * n3 : n3;
        }
        __name(intResolve, "intResolve");
        function intStringify(node, radix, prefix) {
          const { value } = node;
          if (intIdentify(value)) {
            const str = value.toString(radix);
            return value < 0 ? "-" + prefix + str.substr(1) : prefix + str;
          }
          return stringifyNumber.stringifyNumber(node);
        }
        __name(intStringify, "intStringify");
        var intBin = {
          identify: intIdentify,
          default: true,
          tag: "tag:yaml.org,2002:int",
          format: "BIN",
          test: /^[-+]?0b[0-1_]+$/,
          resolve: /* @__PURE__ */ __name((str, _onError, opt) => intResolve(str, 2, 2, opt), "resolve"),
          stringify: /* @__PURE__ */ __name((node) => intStringify(node, 2, "0b"), "stringify")
        };
        var intOct = {
          identify: intIdentify,
          default: true,
          tag: "tag:yaml.org,2002:int",
          format: "OCT",
          test: /^[-+]?0[0-7_]+$/,
          resolve: /* @__PURE__ */ __name((str, _onError, opt) => intResolve(str, 1, 8, opt), "resolve"),
          stringify: /* @__PURE__ */ __name((node) => intStringify(node, 8, "0"), "stringify")
        };
        var int = {
          identify: intIdentify,
          default: true,
          tag: "tag:yaml.org,2002:int",
          test: /^[-+]?[0-9][0-9_]*$/,
          resolve: /* @__PURE__ */ __name((str, _onError, opt) => intResolve(str, 0, 10, opt), "resolve"),
          stringify: stringifyNumber.stringifyNumber
        };
        var intHex = {
          identify: intIdentify,
          default: true,
          tag: "tag:yaml.org,2002:int",
          format: "HEX",
          test: /^[-+]?0x[0-9a-fA-F_]+$/,
          resolve: /* @__PURE__ */ __name((str, _onError, opt) => intResolve(str, 2, 16, opt), "resolve"),
          stringify: /* @__PURE__ */ __name((node) => intStringify(node, 16, "0x"), "stringify")
        };
        exports2.int = int;
        exports2.intBin = intBin;
        exports2.intHex = intHex;
        exports2.intOct = intOct;
      }
    });
    var require_set = __commonJS2({
      "node_modules/yaml/dist/schema/yaml-1.1/set.js"(exports2) {
        "use strict";
        var identity2 = require_identity();
        var Pair = require_Pair();
        var YAMLMap = require_YAMLMap();
        var YAMLSet = class _YAMLSet extends YAMLMap.YAMLMap {
          static {
            __name(this, "_YAMLSet");
          }
          constructor(schema) {
            super(schema);
            this.tag = _YAMLSet.tag;
          }
          add(key) {
            let pair;
            if (identity2.isPair(key))
              pair = key;
            else if (key && typeof key === "object" && "key" in key && "value" in key && key.value === null)
              pair = new Pair.Pair(key.key, null);
            else
              pair = new Pair.Pair(key, null);
            const prev = YAMLMap.findPair(this.items, pair.key);
            if (!prev)
              this.items.push(pair);
          }
          /**
           * If `keepPair` is `true`, returns the Pair matching `key`.
           * Otherwise, returns the value of that Pair's key.
           */
          get(key, keepPair) {
            const pair = YAMLMap.findPair(this.items, key);
            return !keepPair && identity2.isPair(pair) ? identity2.isScalar(pair.key) ? pair.key.value : pair.key : pair;
          }
          set(key, value) {
            if (typeof value !== "boolean")
              throw new Error(`Expected boolean value for set(key, value) in a YAML set, not ${typeof value}`);
            const prev = YAMLMap.findPair(this.items, key);
            if (prev && !value) {
              this.items.splice(this.items.indexOf(prev), 1);
            } else if (!prev && value) {
              this.items.push(new Pair.Pair(key));
            }
          }
          toJSON(_, ctx) {
            return super.toJSON(_, ctx, Set);
          }
          toString(ctx, onComment, onChompKeep) {
            if (!ctx)
              return JSON.stringify(this);
            if (this.hasAllNullValues(true))
              return super.toString(Object.assign({}, ctx, { allNullValues: true }), onComment, onChompKeep);
            else
              throw new Error("Set items must all have null values");
          }
          static from(schema, iterable, ctx) {
            const { replacer } = ctx;
            const set2 = new this(schema);
            if (iterable && Symbol.iterator in Object(iterable))
              for (let value of iterable) {
                if (typeof replacer === "function")
                  value = replacer.call(iterable, value, value);
                set2.items.push(Pair.createPair(value, null, ctx));
              }
            return set2;
          }
        };
        YAMLSet.tag = "tag:yaml.org,2002:set";
        var set = {
          collection: "map",
          identify: /* @__PURE__ */ __name((value) => value instanceof Set, "identify"),
          nodeClass: YAMLSet,
          default: false,
          tag: "tag:yaml.org,2002:set",
          createNode: /* @__PURE__ */ __name((schema, iterable, ctx) => YAMLSet.from(schema, iterable, ctx), "createNode"),
          resolve(map, onError) {
            if (identity2.isMap(map)) {
              if (map.hasAllNullValues(true))
                return Object.assign(new YAMLSet(), map);
              else
                onError("Set items must all have null values");
            } else
              onError("Expected a mapping for this tag");
            return map;
          }
        };
        exports2.YAMLSet = YAMLSet;
        exports2.set = set;
      }
    });
    var require_timestamp = __commonJS2({
      "node_modules/yaml/dist/schema/yaml-1.1/timestamp.js"(exports2) {
        "use strict";
        var stringifyNumber = require_stringifyNumber();
        function parseSexagesimal(str, asBigInt) {
          const sign = str[0];
          const parts = sign === "-" || sign === "+" ? str.substring(1) : str;
          const num = /* @__PURE__ */ __name((n3) => asBigInt ? BigInt(n3) : Number(n3), "num");
          const res = parts.replace(/_/g, "").split(":").reduce((res2, p) => res2 * num(60) + num(p), num(0));
          return sign === "-" ? num(-1) * res : res;
        }
        __name(parseSexagesimal, "parseSexagesimal");
        function stringifySexagesimal(node) {
          let { value } = node;
          let num = /* @__PURE__ */ __name((n3) => n3, "num");
          if (typeof value === "bigint")
            num = /* @__PURE__ */ __name((n3) => BigInt(n3), "num");
          else if (isNaN(value) || !isFinite(value))
            return stringifyNumber.stringifyNumber(node);
          let sign = "";
          if (value < 0) {
            sign = "-";
            value *= num(-1);
          }
          const _60 = num(60);
          const parts = [value % _60];
          if (value < 60) {
            parts.unshift(0);
          } else {
            value = (value - parts[0]) / _60;
            parts.unshift(value % _60);
            if (value >= 60) {
              value = (value - parts[0]) / _60;
              parts.unshift(value);
            }
          }
          return sign + parts.map((n3) => String(n3).padStart(2, "0")).join(":").replace(/000000\d*$/, "");
        }
        __name(stringifySexagesimal, "stringifySexagesimal");
        var intTime = {
          identify: /* @__PURE__ */ __name((value) => typeof value === "bigint" || Number.isInteger(value), "identify"),
          default: true,
          tag: "tag:yaml.org,2002:int",
          format: "TIME",
          test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+$/,
          resolve: /* @__PURE__ */ __name((str, _onError, { intAsBigInt }) => parseSexagesimal(str, intAsBigInt), "resolve"),
          stringify: stringifySexagesimal
        };
        var floatTime = {
          identify: /* @__PURE__ */ __name((value) => typeof value === "number", "identify"),
          default: true,
          tag: "tag:yaml.org,2002:float",
          format: "TIME",
          test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\.[0-9_]*$/,
          resolve: /* @__PURE__ */ __name((str) => parseSexagesimal(str, false), "resolve"),
          stringify: stringifySexagesimal
        };
        var timestamp = {
          identify: /* @__PURE__ */ __name((value) => value instanceof Date, "identify"),
          default: true,
          tag: "tag:yaml.org,2002:timestamp",
          // If the time zone is omitted, the timestamp is assumed to be specified in UTC. The time part
          // may be omitted altogether, resulting in a date format. In such a case, the time part is
          // assumed to be 00:00:00Z (start of day, UTC).
          test: RegExp("^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})(?:(?:t|T|[ \\t]+)([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\.[0-9]+)?)(?:[ \\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?)?$"),
          resolve(str) {
            const match = str.match(timestamp.test);
            if (!match)
              throw new Error("!!timestamp expects a date, starting with yyyy-mm-dd");
            const [, year, month, day, hour, minute, second] = match.map(Number);
            const millisec = match[7] ? Number((match[7] + "00").substr(1, 3)) : 0;
            let date = Date.UTC(year, month - 1, day, hour || 0, minute || 0, second || 0, millisec);
            const tz = match[8];
            if (tz && tz !== "Z") {
              let d2 = parseSexagesimal(tz, false);
              if (Math.abs(d2) < 30)
                d2 *= 60;
              date -= 6e4 * d2;
            }
            return new Date(date);
          },
          stringify: /* @__PURE__ */ __name(({ value }) => value.toISOString().replace(/((T00:00)?:00)?\.000Z$/, ""), "stringify")
        };
        exports2.floatTime = floatTime;
        exports2.intTime = intTime;
        exports2.timestamp = timestamp;
      }
    });
    var require_schema3 = __commonJS2({
      "node_modules/yaml/dist/schema/yaml-1.1/schema.js"(exports2) {
        "use strict";
        var map = require_map();
        var _null = require_null();
        var seq = require_seq();
        var string = require_string22();
        var binary = require_binary2();
        var bool = require_bool2();
        var float = require_float2();
        var int = require_int2();
        var omap = require_omap();
        var pairs = require_pairs();
        var set = require_set();
        var timestamp = require_timestamp();
        var schema = [
          map.map,
          seq.seq,
          string.string,
          _null.nullTag,
          bool.trueTag,
          bool.falseTag,
          int.intBin,
          int.intOct,
          int.int,
          int.intHex,
          float.floatNaN,
          float.floatExp,
          float.float,
          binary.binary,
          omap.omap,
          pairs.pairs,
          set.set,
          timestamp.intTime,
          timestamp.floatTime,
          timestamp.timestamp
        ];
        exports2.schema = schema;
      }
    });
    var require_tags = __commonJS2({
      "node_modules/yaml/dist/schema/tags.js"(exports2) {
        "use strict";
        var map = require_map();
        var _null = require_null();
        var seq = require_seq();
        var string = require_string22();
        var bool = require_bool();
        var float = require_float();
        var int = require_int();
        var schema = require_schema();
        var schema$1 = require_schema2();
        var binary = require_binary2();
        var omap = require_omap();
        var pairs = require_pairs();
        var schema$2 = require_schema3();
        var set = require_set();
        var timestamp = require_timestamp();
        var schemas = /* @__PURE__ */ new Map([
          ["core", schema.schema],
          ["failsafe", [map.map, seq.seq, string.string]],
          ["json", schema$1.schema],
          ["yaml11", schema$2.schema],
          ["yaml-1.1", schema$2.schema]
        ]);
        var tagsByName = {
          binary: binary.binary,
          bool: bool.boolTag,
          float: float.float,
          floatExp: float.floatExp,
          floatNaN: float.floatNaN,
          floatTime: timestamp.floatTime,
          int: int.int,
          intHex: int.intHex,
          intOct: int.intOct,
          intTime: timestamp.intTime,
          map: map.map,
          null: _null.nullTag,
          omap: omap.omap,
          pairs: pairs.pairs,
          seq: seq.seq,
          set: set.set,
          timestamp: timestamp.timestamp
        };
        var coreKnownTags = {
          "tag:yaml.org,2002:binary": binary.binary,
          "tag:yaml.org,2002:omap": omap.omap,
          "tag:yaml.org,2002:pairs": pairs.pairs,
          "tag:yaml.org,2002:set": set.set,
          "tag:yaml.org,2002:timestamp": timestamp.timestamp
        };
        function getTags(customTags, schemaName) {
          let tags = schemas.get(schemaName);
          if (!tags) {
            if (Array.isArray(customTags))
              tags = [];
            else {
              const keys = Array.from(schemas.keys()).filter((key) => key !== "yaml11").map((key) => JSON.stringify(key)).join(", ");
              throw new Error(`Unknown schema "${schemaName}"; use one of ${keys} or define customTags array`);
            }
          }
          if (Array.isArray(customTags)) {
            for (const tag of customTags)
              tags = tags.concat(tag);
          } else if (typeof customTags === "function") {
            tags = customTags(tags.slice());
          }
          return tags.map((tag) => {
            if (typeof tag !== "string")
              return tag;
            const tagObj = tagsByName[tag];
            if (tagObj)
              return tagObj;
            const keys = Object.keys(tagsByName).map((key) => JSON.stringify(key)).join(", ");
            throw new Error(`Unknown custom tag "${tag}"; use one of ${keys}`);
          });
        }
        __name(getTags, "getTags");
        exports2.coreKnownTags = coreKnownTags;
        exports2.getTags = getTags;
      }
    });
    var require_Schema = __commonJS2({
      "node_modules/yaml/dist/schema/Schema.js"(exports2) {
        "use strict";
        var identity2 = require_identity();
        var map = require_map();
        var seq = require_seq();
        var string = require_string22();
        var tags = require_tags();
        var sortMapEntriesByKey = /* @__PURE__ */ __name((a2, b) => a2.key < b.key ? -1 : a2.key > b.key ? 1 : 0, "sortMapEntriesByKey");
        var Schema = class _Schema {
          static {
            __name(this, "_Schema");
          }
          constructor({ compat, customTags, merge, resolveKnownTags, schema, sortMapEntries, toStringDefaults }) {
            this.compat = Array.isArray(compat) ? tags.getTags(compat, "compat") : compat ? tags.getTags(null, compat) : null;
            this.merge = !!merge;
            this.name = typeof schema === "string" && schema || "core";
            this.knownTags = resolveKnownTags ? tags.coreKnownTags : {};
            this.tags = tags.getTags(customTags, this.name);
            this.toStringOptions = toStringDefaults != null ? toStringDefaults : null;
            Object.defineProperty(this, identity2.MAP, { value: map.map });
            Object.defineProperty(this, identity2.SCALAR, { value: string.string });
            Object.defineProperty(this, identity2.SEQ, { value: seq.seq });
            this.sortMapEntries = typeof sortMapEntries === "function" ? sortMapEntries : sortMapEntries === true ? sortMapEntriesByKey : null;
          }
          clone() {
            const copy = Object.create(_Schema.prototype, Object.getOwnPropertyDescriptors(this));
            copy.tags = this.tags.slice();
            return copy;
          }
        };
        exports2.Schema = Schema;
      }
    });
    var require_stringifyDocument = __commonJS2({
      "node_modules/yaml/dist/stringify/stringifyDocument.js"(exports2) {
        "use strict";
        var identity2 = require_identity();
        var stringify2 = require_stringify22();
        var stringifyComment = require_stringifyComment();
        function stringifyDocument(doc, options) {
          var _a2;
          const lines = [];
          let hasDirectives = options.directives === true;
          if (options.directives !== false && doc.directives) {
            const dir = doc.directives.toString(doc);
            if (dir) {
              lines.push(dir);
              hasDirectives = true;
            } else if (doc.directives.docStart)
              hasDirectives = true;
          }
          if (hasDirectives)
            lines.push("---");
          const ctx = stringify2.createStringifyContext(doc, options);
          const { commentString } = ctx.options;
          if (doc.commentBefore) {
            if (lines.length !== 1)
              lines.unshift("");
            const cs = commentString(doc.commentBefore);
            lines.unshift(stringifyComment.indentComment(cs, ""));
          }
          let chompKeep = false;
          let contentComment = null;
          if (doc.contents) {
            if (identity2.isNode(doc.contents)) {
              if (doc.contents.spaceBefore && hasDirectives)
                lines.push("");
              if (doc.contents.commentBefore) {
                const cs = commentString(doc.contents.commentBefore);
                lines.push(stringifyComment.indentComment(cs, ""));
              }
              ctx.forceBlockIndent = !!doc.comment;
              contentComment = doc.contents.comment;
            }
            const onChompKeep = contentComment ? void 0 : () => chompKeep = true;
            let body = stringify2.stringify(doc.contents, ctx, () => contentComment = null, onChompKeep);
            if (contentComment)
              body += stringifyComment.lineComment(body, "", commentString(contentComment));
            if ((body[0] === "|" || body[0] === ">") && lines[lines.length - 1] === "---") {
              lines[lines.length - 1] = `--- ${body}`;
            } else
              lines.push(body);
          } else {
            lines.push(stringify2.stringify(doc.contents, ctx));
          }
          if ((_a2 = doc.directives) == null ? void 0 : _a2.docEnd) {
            if (doc.comment) {
              const cs = commentString(doc.comment);
              if (cs.includes("\n")) {
                lines.push("...");
                lines.push(stringifyComment.indentComment(cs, ""));
              } else {
                lines.push(`... ${cs}`);
              }
            } else {
              lines.push("...");
            }
          } else {
            let dc = doc.comment;
            if (dc && chompKeep)
              dc = dc.replace(/^\n+/, "");
            if (dc) {
              if ((!chompKeep || contentComment) && lines[lines.length - 1] !== "")
                lines.push("");
              lines.push(stringifyComment.indentComment(commentString(dc), ""));
            }
          }
          return lines.join("\n") + "\n";
        }
        __name(stringifyDocument, "stringifyDocument");
        exports2.stringifyDocument = stringifyDocument;
      }
    });
    var require_Document = __commonJS2({
      "node_modules/yaml/dist/doc/Document.js"(exports2) {
        "use strict";
        var Alias = require_Alias();
        var Collection = require_Collection();
        var identity2 = require_identity();
        var Pair = require_Pair();
        var toJS = require_toJS();
        var Schema = require_Schema();
        var stringifyDocument = require_stringifyDocument();
        var anchors = require_anchors();
        var applyReviver = require_applyReviver();
        var createNode = require_createNode();
        var directives = require_directives();
        var Document = class _Document {
          static {
            __name(this, "_Document");
          }
          constructor(value, replacer, options) {
            this.commentBefore = null;
            this.comment = null;
            this.errors = [];
            this.warnings = [];
            Object.defineProperty(this, identity2.NODE_TYPE, { value: identity2.DOC });
            let _replacer = null;
            if (typeof replacer === "function" || Array.isArray(replacer)) {
              _replacer = replacer;
            } else if (options === void 0 && replacer) {
              options = replacer;
              replacer = void 0;
            }
            const opt = Object.assign({
              intAsBigInt: false,
              keepSourceTokens: false,
              logLevel: "warn",
              prettyErrors: true,
              strict: true,
              uniqueKeys: true,
              version: "1.2"
            }, options);
            this.options = opt;
            let { version: version2 } = opt;
            if (options == null ? void 0 : options._directives) {
              this.directives = options._directives.atDocument();
              if (this.directives.yaml.explicit)
                version2 = this.directives.yaml.version;
            } else
              this.directives = new directives.Directives({ version: version2 });
            this.setSchema(version2, options);
            this.contents = value === void 0 ? null : this.createNode(value, _replacer, options);
          }
          /**
           * Create a deep copy of this Document and its contents.
           *
           * Custom Node values that inherit from `Object` still refer to their original instances.
           */
          clone() {
            const copy = Object.create(_Document.prototype, {
              [identity2.NODE_TYPE]: { value: identity2.DOC }
            });
            copy.commentBefore = this.commentBefore;
            copy.comment = this.comment;
            copy.errors = this.errors.slice();
            copy.warnings = this.warnings.slice();
            copy.options = Object.assign({}, this.options);
            if (this.directives)
              copy.directives = this.directives.clone();
            copy.schema = this.schema.clone();
            copy.contents = identity2.isNode(this.contents) ? this.contents.clone(copy.schema) : this.contents;
            if (this.range)
              copy.range = this.range.slice();
            return copy;
          }
          /** Adds a value to the document. */
          add(value) {
            if (assertCollection(this.contents))
              this.contents.add(value);
          }
          /** Adds a value to the document. */
          addIn(path22, value) {
            if (assertCollection(this.contents))
              this.contents.addIn(path22, value);
          }
          /**
           * Create a new `Alias` node, ensuring that the target `node` has the required anchor.
           *
           * If `node` already has an anchor, `name` is ignored.
           * Otherwise, the `node.anchor` value will be set to `name`,
           * or if an anchor with that name is already present in the document,
           * `name` will be used as a prefix for a new unique anchor.
           * If `name` is undefined, the generated anchor will use 'a' as a prefix.
           */
          createAlias(node, name) {
            if (!node.anchor) {
              const prev = anchors.anchorNames(this);
              node.anchor = // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
              !name || prev.has(name) ? anchors.findNewAnchor(name || "a", prev) : name;
            }
            return new Alias.Alias(node.anchor);
          }
          createNode(value, replacer, options) {
            let _replacer = void 0;
            if (typeof replacer === "function") {
              value = replacer.call({ "": value }, "", value);
              _replacer = replacer;
            } else if (Array.isArray(replacer)) {
              const keyToStr = /* @__PURE__ */ __name((v2) => typeof v2 === "number" || v2 instanceof String || v2 instanceof Number, "keyToStr");
              const asStr = replacer.filter(keyToStr).map(String);
              if (asStr.length > 0)
                replacer = replacer.concat(asStr);
              _replacer = replacer;
            } else if (options === void 0 && replacer) {
              options = replacer;
              replacer = void 0;
            }
            const { aliasDuplicateObjects, anchorPrefix, flow, keepUndefined, onTagObj, tag } = options != null ? options : {};
            const { onAnchor, setAnchors, sourceObjects } = anchors.createNodeAnchors(
              this,
              // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing
              anchorPrefix || "a"
            );
            const ctx = {
              aliasDuplicateObjects: aliasDuplicateObjects != null ? aliasDuplicateObjects : true,
              keepUndefined: keepUndefined != null ? keepUndefined : false,
              onAnchor,
              onTagObj,
              replacer: _replacer,
              schema: this.schema,
              sourceObjects
            };
            const node = createNode.createNode(value, tag, ctx);
            if (flow && identity2.isCollection(node))
              node.flow = true;
            setAnchors();
            return node;
          }
          /**
           * Convert a key and a value into a `Pair` using the current schema,
           * recursively wrapping all values as `Scalar` or `Collection` nodes.
           */
          createPair(key, value, options = {}) {
            const k2 = this.createNode(key, null, options);
            const v2 = this.createNode(value, null, options);
            return new Pair.Pair(k2, v2);
          }
          /**
           * Removes a value from the document.
           * @returns `true` if the item was found and removed.
           */
          delete(key) {
            return assertCollection(this.contents) ? this.contents.delete(key) : false;
          }
          /**
           * Removes a value from the document.
           * @returns `true` if the item was found and removed.
           */
          deleteIn(path22) {
            if (Collection.isEmptyPath(path22)) {
              if (this.contents == null)
                return false;
              this.contents = null;
              return true;
            }
            return assertCollection(this.contents) ? this.contents.deleteIn(path22) : false;
          }
          /**
           * Returns item at `key`, or `undefined` if not found. By default unwraps
           * scalar values from their surrounding node; to disable set `keepScalar` to
           * `true` (collections are always returned intact).
           */
          get(key, keepScalar) {
            return identity2.isCollection(this.contents) ? this.contents.get(key, keepScalar) : void 0;
          }
          /**
           * Returns item at `path`, or `undefined` if not found. By default unwraps
           * scalar values from their surrounding node; to disable set `keepScalar` to
           * `true` (collections are always returned intact).
           */
          getIn(path22, keepScalar) {
            if (Collection.isEmptyPath(path22))
              return !keepScalar && identity2.isScalar(this.contents) ? this.contents.value : this.contents;
            return identity2.isCollection(this.contents) ? this.contents.getIn(path22, keepScalar) : void 0;
          }
          /**
           * Checks if the document includes a value with the key `key`.
           */
          has(key) {
            return identity2.isCollection(this.contents) ? this.contents.has(key) : false;
          }
          /**
           * Checks if the document includes a value at `path`.
           */
          hasIn(path22) {
            if (Collection.isEmptyPath(path22))
              return this.contents !== void 0;
            return identity2.isCollection(this.contents) ? this.contents.hasIn(path22) : false;
          }
          /**
           * Sets a value in this document. For `!!set`, `value` needs to be a
           * boolean to add/remove the item from the set.
           */
          set(key, value) {
            if (this.contents == null) {
              this.contents = Collection.collectionFromPath(this.schema, [key], value);
            } else if (assertCollection(this.contents)) {
              this.contents.set(key, value);
            }
          }
          /**
           * Sets a value in this document. For `!!set`, `value` needs to be a
           * boolean to add/remove the item from the set.
           */
          setIn(path22, value) {
            if (Collection.isEmptyPath(path22)) {
              this.contents = value;
            } else if (this.contents == null) {
              this.contents = Collection.collectionFromPath(this.schema, Array.from(path22), value);
            } else if (assertCollection(this.contents)) {
              this.contents.setIn(path22, value);
            }
          }
          /**
           * Change the YAML version and schema used by the document.
           * A `null` version disables support for directives, explicit tags, anchors, and aliases.
           * It also requires the `schema` option to be given as a `Schema` instance value.
           *
           * Overrides all previously set schema options.
           */
          setSchema(version2, options = {}) {
            if (typeof version2 === "number")
              version2 = String(version2);
            let opt;
            switch (version2) {
              case "1.1":
                if (this.directives)
                  this.directives.yaml.version = "1.1";
                else
                  this.directives = new directives.Directives({ version: "1.1" });
                opt = { merge: true, resolveKnownTags: false, schema: "yaml-1.1" };
                break;
              case "1.2":
              case "next":
                if (this.directives)
                  this.directives.yaml.version = version2;
                else
                  this.directives = new directives.Directives({ version: version2 });
                opt = { merge: false, resolveKnownTags: true, schema: "core" };
                break;
              case null:
                if (this.directives)
                  delete this.directives;
                opt = null;
                break;
              default: {
                const sv = JSON.stringify(version2);
                throw new Error(`Expected '1.1', '1.2' or null as first argument, but found: ${sv}`);
              }
            }
            if (options.schema instanceof Object)
              this.schema = options.schema;
            else if (opt)
              this.schema = new Schema.Schema(Object.assign(opt, options));
            else
              throw new Error(`With a null YAML version, the { schema: Schema } option is required`);
          }
          // json & jsonArg are only used from toJSON()
          toJS({ json, jsonArg, mapAsMap, maxAliasCount, onAnchor, reviver } = {}) {
            const ctx = {
              anchors: /* @__PURE__ */ new Map(),
              doc: this,
              keep: !json,
              mapAsMap: mapAsMap === true,
              mapKeyWarned: false,
              maxAliasCount: typeof maxAliasCount === "number" ? maxAliasCount : 100
            };
            const res = toJS.toJS(this.contents, jsonArg != null ? jsonArg : "", ctx);
            if (typeof onAnchor === "function")
              for (const { count, res: res2 } of ctx.anchors.values())
                onAnchor(res2, count);
            return typeof reviver === "function" ? applyReviver.applyReviver(reviver, { "": res }, "", res) : res;
          }
          /**
           * A JSON representation of the document `contents`.
           *
           * @param jsonArg Used by `JSON.stringify` to indicate the array index or
           *   property name.
           */
          toJSON(jsonArg, onAnchor) {
            return this.toJS({ json: true, jsonArg, mapAsMap: false, onAnchor });
          }
          /** A YAML representation of the document. */
          toString(options = {}) {
            if (this.errors.length > 0)
              throw new Error("Document with errors cannot be stringified");
            if ("indent" in options && (!Number.isInteger(options.indent) || Number(options.indent) <= 0)) {
              const s2 = JSON.stringify(options.indent);
              throw new Error(`"indent" option must be a positive integer, not ${s2}`);
            }
            return stringifyDocument.stringifyDocument(this, options);
          }
        };
        function assertCollection(contents) {
          if (identity2.isCollection(contents))
            return true;
          throw new Error("Expected a YAML collection as document contents");
        }
        __name(assertCollection, "assertCollection");
        exports2.Document = Document;
      }
    });
    var require_errors4 = __commonJS2({
      "node_modules/yaml/dist/errors.js"(exports2) {
        "use strict";
        var YAMLError = class extends Error {
          static {
            __name(this, "YAMLError");
          }
          constructor(name, pos, code, message) {
            super();
            this.name = name;
            this.code = code;
            this.message = message;
            this.pos = pos;
          }
        };
        var YAMLParseError = class extends YAMLError {
          static {
            __name(this, "YAMLParseError");
          }
          constructor(pos, code, message) {
            super("YAMLParseError", pos, code, message);
          }
        };
        var YAMLWarning = class extends YAMLError {
          static {
            __name(this, "YAMLWarning");
          }
          constructor(pos, code, message) {
            super("YAMLWarning", pos, code, message);
          }
        };
        var prettifyError = /* @__PURE__ */ __name((src, lc) => (error) => {
          if (error.pos[0] === -1)
            return;
          error.linePos = error.pos.map((pos) => lc.linePos(pos));
          const { line, col } = error.linePos[0];
          error.message += ` at line ${line}, column ${col}`;
          let ci2 = col - 1;
          let lineStr = src.substring(lc.lineStarts[line - 1], lc.lineStarts[line]).replace(/[\n\r]+$/, "");
          if (ci2 >= 60 && lineStr.length > 80) {
            const trimStart = Math.min(ci2 - 39, lineStr.length - 79);
            lineStr = "\u2026" + lineStr.substring(trimStart);
            ci2 -= trimStart - 1;
          }
          if (lineStr.length > 80)
            lineStr = lineStr.substring(0, 79) + "\u2026";
          if (line > 1 && /^ *$/.test(lineStr.substring(0, ci2))) {
            let prev = src.substring(lc.lineStarts[line - 2], lc.lineStarts[line - 1]);
            if (prev.length > 80)
              prev = prev.substring(0, 79) + "\u2026\n";
            lineStr = prev + lineStr;
          }
          if (/[^ ]/.test(lineStr)) {
            let count = 1;
            const end = error.linePos[1];
            if (end && end.line === line && end.col > col) {
              count = Math.max(1, Math.min(end.col - col, 80 - ci2));
            }
            const pointer = " ".repeat(ci2) + "^".repeat(count);
            error.message += `:

${lineStr}
${pointer}
`;
          }
        }, "prettifyError");
        exports2.YAMLError = YAMLError;
        exports2.YAMLParseError = YAMLParseError;
        exports2.YAMLWarning = YAMLWarning;
        exports2.prettifyError = prettifyError;
      }
    });
    var require_resolve_props = __commonJS2({
      "node_modules/yaml/dist/compose/resolve-props.js"(exports2) {
        "use strict";
        function resolveProps(tokens, { flow, indicator, next, offset, onError, startOnNewline }) {
          let spaceBefore = false;
          let atNewline = startOnNewline;
          let hasSpace = startOnNewline;
          let comment = "";
          let commentSep = "";
          let hasNewline = false;
          let hasNewlineAfterProp = false;
          let reqSpace = false;
          let anchor = null;
          let tag = null;
          let comma = null;
          let found = null;
          let start = null;
          for (const token of tokens) {
            if (reqSpace) {
              if (token.type !== "space" && token.type !== "newline" && token.type !== "comma")
                onError(token.offset, "MISSING_CHAR", "Tags and anchors must be separated from the next token by white space");
              reqSpace = false;
            }
            switch (token.type) {
              case "space":
                if (!flow && atNewline && indicator !== "doc-start" && token.source[0] === "	")
                  onError(token, "TAB_AS_INDENT", "Tabs are not allowed as indentation");
                hasSpace = true;
                break;
              case "comment": {
                if (!hasSpace)
                  onError(token, "MISSING_CHAR", "Comments must be separated from other tokens by white space characters");
                const cb = token.source.substring(1) || " ";
                if (!comment)
                  comment = cb;
                else
                  comment += commentSep + cb;
                commentSep = "";
                atNewline = false;
                break;
              }
              case "newline":
                if (atNewline) {
                  if (comment)
                    comment += token.source;
                  else
                    spaceBefore = true;
                } else
                  commentSep += token.source;
                atNewline = true;
                hasNewline = true;
                if (anchor || tag)
                  hasNewlineAfterProp = true;
                hasSpace = true;
                break;
              case "anchor":
                if (anchor)
                  onError(token, "MULTIPLE_ANCHORS", "A node can have at most one anchor");
                if (token.source.endsWith(":"))
                  onError(token.offset + token.source.length - 1, "BAD_ALIAS", "Anchor ending in : is ambiguous", true);
                anchor = token;
                if (start === null)
                  start = token.offset;
                atNewline = false;
                hasSpace = false;
                reqSpace = true;
                break;
              case "tag": {
                if (tag)
                  onError(token, "MULTIPLE_TAGS", "A node can have at most one tag");
                tag = token;
                if (start === null)
                  start = token.offset;
                atNewline = false;
                hasSpace = false;
                reqSpace = true;
                break;
              }
              case indicator:
                if (anchor || tag)
                  onError(token, "BAD_PROP_ORDER", `Anchors and tags must be after the ${token.source} indicator`);
                if (found)
                  onError(token, "UNEXPECTED_TOKEN", `Unexpected ${token.source} in ${flow != null ? flow : "collection"}`);
                found = token;
                atNewline = false;
                hasSpace = false;
                break;
              case "comma":
                if (flow) {
                  if (comma)
                    onError(token, "UNEXPECTED_TOKEN", `Unexpected , in ${flow}`);
                  comma = token;
                  atNewline = false;
                  hasSpace = false;
                  break;
                }
              default:
                onError(token, "UNEXPECTED_TOKEN", `Unexpected ${token.type} token`);
                atNewline = false;
                hasSpace = false;
            }
          }
          const last = tokens[tokens.length - 1];
          const end = last ? last.offset + last.source.length : offset;
          if (reqSpace && next && next.type !== "space" && next.type !== "newline" && next.type !== "comma" && (next.type !== "scalar" || next.source !== ""))
            onError(next.offset, "MISSING_CHAR", "Tags and anchors must be separated from the next token by white space");
          return {
            comma,
            found,
            spaceBefore,
            comment,
            hasNewline,
            hasNewlineAfterProp,
            anchor,
            tag,
            end,
            start: start != null ? start : end
          };
        }
        __name(resolveProps, "resolveProps");
        exports2.resolveProps = resolveProps;
      }
    });
    var require_util_contains_newline = __commonJS2({
      "node_modules/yaml/dist/compose/util-contains-newline.js"(exports2) {
        "use strict";
        function containsNewline(key) {
          if (!key)
            return null;
          switch (key.type) {
            case "alias":
            case "scalar":
            case "double-quoted-scalar":
            case "single-quoted-scalar":
              if (key.source.includes("\n"))
                return true;
              if (key.end) {
                for (const st2 of key.end)
                  if (st2.type === "newline")
                    return true;
              }
              return false;
            case "flow-collection":
              for (const it of key.items) {
                for (const st2 of it.start)
                  if (st2.type === "newline")
                    return true;
                if (it.sep) {
                  for (const st2 of it.sep)
                    if (st2.type === "newline")
                      return true;
                }
                if (containsNewline(it.key) || containsNewline(it.value))
                  return true;
              }
              return false;
            default:
              return true;
          }
        }
        __name(containsNewline, "containsNewline");
        exports2.containsNewline = containsNewline;
      }
    });
    var require_util_flow_indent_check = __commonJS2({
      "node_modules/yaml/dist/compose/util-flow-indent-check.js"(exports2) {
        "use strict";
        var utilContainsNewline = require_util_contains_newline();
        function flowIndentCheck(indent, fc, onError) {
          if ((fc == null ? void 0 : fc.type) === "flow-collection") {
            const end = fc.end[0];
            if (end.indent === indent && (end.source === "]" || end.source === "}") && utilContainsNewline.containsNewline(fc)) {
              const msg = "Flow end indicator should be more indented than parent";
              onError(end, "BAD_INDENT", msg, true);
            }
          }
        }
        __name(flowIndentCheck, "flowIndentCheck");
        exports2.flowIndentCheck = flowIndentCheck;
      }
    });
    var require_util_map_includes = __commonJS2({
      "node_modules/yaml/dist/compose/util-map-includes.js"(exports2) {
        "use strict";
        var identity2 = require_identity();
        function mapIncludes(ctx, items, search) {
          const { uniqueKeys } = ctx.options;
          if (uniqueKeys === false)
            return false;
          const isEqual = typeof uniqueKeys === "function" ? uniqueKeys : (a2, b) => a2 === b || identity2.isScalar(a2) && identity2.isScalar(b) && a2.value === b.value && !(a2.value === "<<" && ctx.schema.merge);
          return items.some((pair) => isEqual(pair.key, search));
        }
        __name(mapIncludes, "mapIncludes");
        exports2.mapIncludes = mapIncludes;
      }
    });
    var require_resolve_block_map = __commonJS2({
      "node_modules/yaml/dist/compose/resolve-block-map.js"(exports2) {
        "use strict";
        var Pair = require_Pair();
        var YAMLMap = require_YAMLMap();
        var resolveProps = require_resolve_props();
        var utilContainsNewline = require_util_contains_newline();
        var utilFlowIndentCheck = require_util_flow_indent_check();
        var utilMapIncludes = require_util_map_includes();
        var startColMsg = "All mapping items must start at the same column";
        function resolveBlockMap({ composeNode, composeEmptyNode }, ctx, bm, onError, tag) {
          var _a2, _b2;
          const NodeClass = (_a2 = tag == null ? void 0 : tag.nodeClass) != null ? _a2 : YAMLMap.YAMLMap;
          const map = new NodeClass(ctx.schema);
          if (ctx.atRoot)
            ctx.atRoot = false;
          let offset = bm.offset;
          let commentEnd = null;
          for (const collItem of bm.items) {
            const { start, key, sep, value } = collItem;
            const keyProps = resolveProps.resolveProps(start, {
              indicator: "explicit-key-ind",
              next: key != null ? key : sep == null ? void 0 : sep[0],
              offset,
              onError,
              startOnNewline: true
            });
            const implicitKey = !keyProps.found;
            if (implicitKey) {
              if (key) {
                if (key.type === "block-seq")
                  onError(offset, "BLOCK_AS_IMPLICIT_KEY", "A block sequence may not be used as an implicit map key");
                else if ("indent" in key && key.indent !== bm.indent)
                  onError(offset, "BAD_INDENT", startColMsg);
              }
              if (!keyProps.anchor && !keyProps.tag && !sep) {
                commentEnd = keyProps.end;
                if (keyProps.comment) {
                  if (map.comment)
                    map.comment += "\n" + keyProps.comment;
                  else
                    map.comment = keyProps.comment;
                }
                continue;
              }
              if (keyProps.hasNewlineAfterProp || utilContainsNewline.containsNewline(key)) {
                onError(key != null ? key : start[start.length - 1], "MULTILINE_IMPLICIT_KEY", "Implicit keys need to be on a single line");
              }
            } else if (((_b2 = keyProps.found) == null ? void 0 : _b2.indent) !== bm.indent) {
              onError(offset, "BAD_INDENT", startColMsg);
            }
            const keyStart = keyProps.end;
            const keyNode = key ? composeNode(ctx, key, keyProps, onError) : composeEmptyNode(ctx, keyStart, start, null, keyProps, onError);
            if (ctx.schema.compat)
              utilFlowIndentCheck.flowIndentCheck(bm.indent, key, onError);
            if (utilMapIncludes.mapIncludes(ctx, map.items, keyNode))
              onError(keyStart, "DUPLICATE_KEY", "Map keys must be unique");
            const valueProps = resolveProps.resolveProps(sep != null ? sep : [], {
              indicator: "map-value-ind",
              next: value,
              offset: keyNode.range[2],
              onError,
              startOnNewline: !key || key.type === "block-scalar"
            });
            offset = valueProps.end;
            if (valueProps.found) {
              if (implicitKey) {
                if ((value == null ? void 0 : value.type) === "block-map" && !valueProps.hasNewline)
                  onError(offset, "BLOCK_AS_IMPLICIT_KEY", "Nested mappings are not allowed in compact mappings");
                if (ctx.options.strict && keyProps.start < valueProps.found.offset - 1024)
                  onError(keyNode.range, "KEY_OVER_1024_CHARS", "The : indicator must be at most 1024 chars after the start of an implicit block mapping key");
              }
              const valueNode = value ? composeNode(ctx, value, valueProps, onError) : composeEmptyNode(ctx, offset, sep, null, valueProps, onError);
              if (ctx.schema.compat)
                utilFlowIndentCheck.flowIndentCheck(bm.indent, value, onError);
              offset = valueNode.range[2];
              const pair = new Pair.Pair(keyNode, valueNode);
              if (ctx.options.keepSourceTokens)
                pair.srcToken = collItem;
              map.items.push(pair);
            } else {
              if (implicitKey)
                onError(keyNode.range, "MISSING_CHAR", "Implicit map keys need to be followed by map values");
              if (valueProps.comment) {
                if (keyNode.comment)
                  keyNode.comment += "\n" + valueProps.comment;
                else
                  keyNode.comment = valueProps.comment;
              }
              const pair = new Pair.Pair(keyNode);
              if (ctx.options.keepSourceTokens)
                pair.srcToken = collItem;
              map.items.push(pair);
            }
          }
          if (commentEnd && commentEnd < offset)
            onError(commentEnd, "IMPOSSIBLE", "Map comment with trailing content");
          map.range = [bm.offset, offset, commentEnd != null ? commentEnd : offset];
          return map;
        }
        __name(resolveBlockMap, "resolveBlockMap");
        exports2.resolveBlockMap = resolveBlockMap;
      }
    });
    var require_resolve_block_seq = __commonJS2({
      "node_modules/yaml/dist/compose/resolve-block-seq.js"(exports2) {
        "use strict";
        var YAMLSeq = require_YAMLSeq();
        var resolveProps = require_resolve_props();
        var utilFlowIndentCheck = require_util_flow_indent_check();
        function resolveBlockSeq({ composeNode, composeEmptyNode }, ctx, bs, onError, tag) {
          var _a2;
          const NodeClass = (_a2 = tag == null ? void 0 : tag.nodeClass) != null ? _a2 : YAMLSeq.YAMLSeq;
          const seq = new NodeClass(ctx.schema);
          if (ctx.atRoot)
            ctx.atRoot = false;
          let offset = bs.offset;
          let commentEnd = null;
          for (const { start, value } of bs.items) {
            const props = resolveProps.resolveProps(start, {
              indicator: "seq-item-ind",
              next: value,
              offset,
              onError,
              startOnNewline: true
            });
            if (!props.found) {
              if (props.anchor || props.tag || value) {
                if (value && value.type === "block-seq")
                  onError(props.end, "BAD_INDENT", "All sequence items must start at the same column");
                else
                  onError(offset, "MISSING_CHAR", "Sequence item without - indicator");
              } else {
                commentEnd = props.end;
                if (props.comment)
                  seq.comment = props.comment;
                continue;
              }
            }
            const node = value ? composeNode(ctx, value, props, onError) : composeEmptyNode(ctx, props.end, start, null, props, onError);
            if (ctx.schema.compat)
              utilFlowIndentCheck.flowIndentCheck(bs.indent, value, onError);
            offset = node.range[2];
            seq.items.push(node);
          }
          seq.range = [bs.offset, offset, commentEnd != null ? commentEnd : offset];
          return seq;
        }
        __name(resolveBlockSeq, "resolveBlockSeq");
        exports2.resolveBlockSeq = resolveBlockSeq;
      }
    });
    var require_resolve_end = __commonJS2({
      "node_modules/yaml/dist/compose/resolve-end.js"(exports2) {
        "use strict";
        function resolveEnd(end, offset, reqSpace, onError) {
          let comment = "";
          if (end) {
            let hasSpace = false;
            let sep = "";
            for (const token of end) {
              const { source, type } = token;
              switch (type) {
                case "space":
                  hasSpace = true;
                  break;
                case "comment": {
                  if (reqSpace && !hasSpace)
                    onError(token, "MISSING_CHAR", "Comments must be separated from other tokens by white space characters");
                  const cb = source.substring(1) || " ";
                  if (!comment)
                    comment = cb;
                  else
                    comment += sep + cb;
                  sep = "";
                  break;
                }
                case "newline":
                  if (comment)
                    sep += source;
                  hasSpace = true;
                  break;
                default:
                  onError(token, "UNEXPECTED_TOKEN", `Unexpected ${type} at node end`);
              }
              offset += source.length;
            }
          }
          return { comment, offset };
        }
        __name(resolveEnd, "resolveEnd");
        exports2.resolveEnd = resolveEnd;
      }
    });
    var require_resolve_flow_collection = __commonJS2({
      "node_modules/yaml/dist/compose/resolve-flow-collection.js"(exports2) {
        "use strict";
        var identity2 = require_identity();
        var Pair = require_Pair();
        var YAMLMap = require_YAMLMap();
        var YAMLSeq = require_YAMLSeq();
        var resolveEnd = require_resolve_end();
        var resolveProps = require_resolve_props();
        var utilContainsNewline = require_util_contains_newline();
        var utilMapIncludes = require_util_map_includes();
        var blockMsg = "Block collections are not allowed within flow collections";
        var isBlock = /* @__PURE__ */ __name((token) => token && (token.type === "block-map" || token.type === "block-seq"), "isBlock");
        function resolveFlowCollection({ composeNode, composeEmptyNode }, ctx, fc, onError, tag) {
          var _a2, _b2;
          const isMap = fc.start.source === "{";
          const fcName = isMap ? "flow map" : "flow sequence";
          const NodeClass = (_a2 = tag == null ? void 0 : tag.nodeClass) != null ? _a2 : isMap ? YAMLMap.YAMLMap : YAMLSeq.YAMLSeq;
          const coll = new NodeClass(ctx.schema);
          coll.flow = true;
          const atRoot = ctx.atRoot;
          if (atRoot)
            ctx.atRoot = false;
          let offset = fc.offset + fc.start.source.length;
          for (let i = 0; i < fc.items.length; ++i) {
            const collItem = fc.items[i];
            const { start, key, sep, value } = collItem;
            const props = resolveProps.resolveProps(start, {
              flow: fcName,
              indicator: "explicit-key-ind",
              next: key != null ? key : sep == null ? void 0 : sep[0],
              offset,
              onError,
              startOnNewline: false
            });
            if (!props.found) {
              if (!props.anchor && !props.tag && !sep && !value) {
                if (i === 0 && props.comma)
                  onError(props.comma, "UNEXPECTED_TOKEN", `Unexpected , in ${fcName}`);
                else if (i < fc.items.length - 1)
                  onError(props.start, "UNEXPECTED_TOKEN", `Unexpected empty item in ${fcName}`);
                if (props.comment) {
                  if (coll.comment)
                    coll.comment += "\n" + props.comment;
                  else
                    coll.comment = props.comment;
                }
                offset = props.end;
                continue;
              }
              if (!isMap && ctx.options.strict && utilContainsNewline.containsNewline(key))
                onError(
                  key,
                  // checked by containsNewline()
                  "MULTILINE_IMPLICIT_KEY",
                  "Implicit keys of flow sequence pairs need to be on a single line"
                );
            }
            if (i === 0) {
              if (props.comma)
                onError(props.comma, "UNEXPECTED_TOKEN", `Unexpected , in ${fcName}`);
            } else {
              if (!props.comma)
                onError(props.start, "MISSING_CHAR", `Missing , between ${fcName} items`);
              if (props.comment) {
                let prevItemComment = "";
                loop: for (const st2 of start) {
                  switch (st2.type) {
                    case "comma":
                    case "space":
                      break;
                    case "comment":
                      prevItemComment = st2.source.substring(1);
                      break loop;
                    default:
                      break loop;
                  }
                }
                if (prevItemComment) {
                  let prev = coll.items[coll.items.length - 1];
                  if (identity2.isPair(prev))
                    prev = (_b2 = prev.value) != null ? _b2 : prev.key;
                  if (prev.comment)
                    prev.comment += "\n" + prevItemComment;
                  else
                    prev.comment = prevItemComment;
                  props.comment = props.comment.substring(prevItemComment.length + 1);
                }
              }
            }
            if (!isMap && !sep && !props.found) {
              const valueNode = value ? composeNode(ctx, value, props, onError) : composeEmptyNode(ctx, props.end, sep, null, props, onError);
              coll.items.push(valueNode);
              offset = valueNode.range[2];
              if (isBlock(value))
                onError(valueNode.range, "BLOCK_IN_FLOW", blockMsg);
            } else {
              const keyStart = props.end;
              const keyNode = key ? composeNode(ctx, key, props, onError) : composeEmptyNode(ctx, keyStart, start, null, props, onError);
              if (isBlock(key))
                onError(keyNode.range, "BLOCK_IN_FLOW", blockMsg);
              const valueProps = resolveProps.resolveProps(sep != null ? sep : [], {
                flow: fcName,
                indicator: "map-value-ind",
                next: value,
                offset: keyNode.range[2],
                onError,
                startOnNewline: false
              });
              if (valueProps.found) {
                if (!isMap && !props.found && ctx.options.strict) {
                  if (sep)
                    for (const st2 of sep) {
                      if (st2 === valueProps.found)
                        break;
                      if (st2.type === "newline") {
                        onError(st2, "MULTILINE_IMPLICIT_KEY", "Implicit keys of flow sequence pairs need to be on a single line");
                        break;
                      }
                    }
                  if (props.start < valueProps.found.offset - 1024)
                    onError(valueProps.found, "KEY_OVER_1024_CHARS", "The : indicator must be at most 1024 chars after the start of an implicit flow sequence key");
                }
              } else if (value) {
                if ("source" in value && value.source && value.source[0] === ":")
                  onError(value, "MISSING_CHAR", `Missing space after : in ${fcName}`);
                else
                  onError(valueProps.start, "MISSING_CHAR", `Missing , or : between ${fcName} items`);
              }
              const valueNode = value ? composeNode(ctx, value, valueProps, onError) : valueProps.found ? composeEmptyNode(ctx, valueProps.end, sep, null, valueProps, onError) : null;
              if (valueNode) {
                if (isBlock(value))
                  onError(valueNode.range, "BLOCK_IN_FLOW", blockMsg);
              } else if (valueProps.comment) {
                if (keyNode.comment)
                  keyNode.comment += "\n" + valueProps.comment;
                else
                  keyNode.comment = valueProps.comment;
              }
              const pair = new Pair.Pair(keyNode, valueNode);
              if (ctx.options.keepSourceTokens)
                pair.srcToken = collItem;
              if (isMap) {
                const map = coll;
                if (utilMapIncludes.mapIncludes(ctx, map.items, keyNode))
                  onError(keyStart, "DUPLICATE_KEY", "Map keys must be unique");
                map.items.push(pair);
              } else {
                const map = new YAMLMap.YAMLMap(ctx.schema);
                map.flow = true;
                map.items.push(pair);
                coll.items.push(map);
              }
              offset = valueNode ? valueNode.range[2] : valueProps.end;
            }
          }
          const expectedEnd = isMap ? "}" : "]";
          const [ce, ...ee2] = fc.end;
          let cePos = offset;
          if (ce && ce.source === expectedEnd)
            cePos = ce.offset + ce.source.length;
          else {
            const name = fcName[0].toUpperCase() + fcName.substring(1);
            const msg = atRoot ? `${name} must end with a ${expectedEnd}` : `${name} in block collection must be sufficiently indented and end with a ${expectedEnd}`;
            onError(offset, atRoot ? "MISSING_CHAR" : "BAD_INDENT", msg);
            if (ce && ce.source.length !== 1)
              ee2.unshift(ce);
          }
          if (ee2.length > 0) {
            const end = resolveEnd.resolveEnd(ee2, cePos, ctx.options.strict, onError);
            if (end.comment) {
              if (coll.comment)
                coll.comment += "\n" + end.comment;
              else
                coll.comment = end.comment;
            }
            coll.range = [fc.offset, cePos, end.offset];
          } else {
            coll.range = [fc.offset, cePos, cePos];
          }
          return coll;
        }
        __name(resolveFlowCollection, "resolveFlowCollection");
        exports2.resolveFlowCollection = resolveFlowCollection;
      }
    });
    var require_compose_collection = __commonJS2({
      "node_modules/yaml/dist/compose/compose-collection.js"(exports2) {
        "use strict";
        var identity2 = require_identity();
        var Scalar = require_Scalar();
        var YAMLMap = require_YAMLMap();
        var YAMLSeq = require_YAMLSeq();
        var resolveBlockMap = require_resolve_block_map();
        var resolveBlockSeq = require_resolve_block_seq();
        var resolveFlowCollection = require_resolve_flow_collection();
        function resolveCollection(CN, ctx, token, onError, tagName, tag) {
          const coll = token.type === "block-map" ? resolveBlockMap.resolveBlockMap(CN, ctx, token, onError, tag) : token.type === "block-seq" ? resolveBlockSeq.resolveBlockSeq(CN, ctx, token, onError, tag) : resolveFlowCollection.resolveFlowCollection(CN, ctx, token, onError, tag);
          const Coll = coll.constructor;
          if (tagName === "!" || tagName === Coll.tagName) {
            coll.tag = Coll.tagName;
            return coll;
          }
          if (tagName)
            coll.tag = tagName;
          return coll;
        }
        __name(resolveCollection, "resolveCollection");
        function composeCollection(CN, ctx, token, tagToken, onError) {
          var _a2, _b2;
          const tagName = !tagToken ? null : ctx.directives.tagName(tagToken.source, (msg) => onError(tagToken, "TAG_RESOLVE_FAILED", msg));
          const expType = token.type === "block-map" ? "map" : token.type === "block-seq" ? "seq" : token.start.source === "{" ? "map" : "seq";
          if (!tagToken || !tagName || tagName === "!" || tagName === YAMLMap.YAMLMap.tagName && expType === "map" || tagName === YAMLSeq.YAMLSeq.tagName && expType === "seq" || !expType) {
            return resolveCollection(CN, ctx, token, onError, tagName);
          }
          let tag = ctx.schema.tags.find((t4) => t4.tag === tagName && t4.collection === expType);
          if (!tag) {
            const kt2 = ctx.schema.knownTags[tagName];
            if (kt2 && kt2.collection === expType) {
              ctx.schema.tags.push(Object.assign({}, kt2, { default: false }));
              tag = kt2;
            } else {
              if (kt2 == null ? void 0 : kt2.collection) {
                onError(tagToken, "BAD_COLLECTION_TYPE", `${kt2.tag} used for ${expType} collection, but expects ${kt2.collection}`, true);
              } else {
                onError(tagToken, "TAG_RESOLVE_FAILED", `Unresolved tag: ${tagName}`, true);
              }
              return resolveCollection(CN, ctx, token, onError, tagName);
            }
          }
          const coll = resolveCollection(CN, ctx, token, onError, tagName, tag);
          const res = (_b2 = (_a2 = tag.resolve) == null ? void 0 : _a2.call(tag, coll, (msg) => onError(tagToken, "TAG_RESOLVE_FAILED", msg), ctx.options)) != null ? _b2 : coll;
          const node = identity2.isNode(res) ? res : new Scalar.Scalar(res);
          node.range = coll.range;
          node.tag = tagName;
          if (tag == null ? void 0 : tag.format)
            node.format = tag.format;
          return node;
        }
        __name(composeCollection, "composeCollection");
        exports2.composeCollection = composeCollection;
      }
    });
    var require_resolve_block_scalar = __commonJS2({
      "node_modules/yaml/dist/compose/resolve-block-scalar.js"(exports2) {
        "use strict";
        var Scalar = require_Scalar();
        function resolveBlockScalar(scalar, strict, onError) {
          const start = scalar.offset;
          const header = parseBlockScalarHeader(scalar, strict, onError);
          if (!header)
            return { value: "", type: null, comment: "", range: [start, start, start] };
          const type = header.mode === ">" ? Scalar.Scalar.BLOCK_FOLDED : Scalar.Scalar.BLOCK_LITERAL;
          const lines = scalar.source ? splitLines(scalar.source) : [];
          let chompStart = lines.length;
          for (let i = lines.length - 1; i >= 0; --i) {
            const content = lines[i][1];
            if (content === "" || content === "\r")
              chompStart = i;
            else
              break;
          }
          if (chompStart === 0) {
            const value2 = header.chomp === "+" && lines.length > 0 ? "\n".repeat(Math.max(1, lines.length - 1)) : "";
            let end2 = start + header.length;
            if (scalar.source)
              end2 += scalar.source.length;
            return { value: value2, type, comment: header.comment, range: [start, end2, end2] };
          }
          let trimIndent = scalar.indent + header.indent;
          let offset = scalar.offset + header.length;
          let contentStart = 0;
          for (let i = 0; i < chompStart; ++i) {
            const [indent, content] = lines[i];
            if (content === "" || content === "\r") {
              if (header.indent === 0 && indent.length > trimIndent)
                trimIndent = indent.length;
            } else {
              if (indent.length < trimIndent) {
                const message = "Block scalars with more-indented leading empty lines must use an explicit indentation indicator";
                onError(offset + indent.length, "MISSING_CHAR", message);
              }
              if (header.indent === 0)
                trimIndent = indent.length;
              contentStart = i;
              break;
            }
            offset += indent.length + content.length + 1;
          }
          for (let i = lines.length - 1; i >= chompStart; --i) {
            if (lines[i][0].length > trimIndent)
              chompStart = i + 1;
          }
          let value = "";
          let sep = "";
          let prevMoreIndented = false;
          for (let i = 0; i < contentStart; ++i)
            value += lines[i][0].slice(trimIndent) + "\n";
          for (let i = contentStart; i < chompStart; ++i) {
            let [indent, content] = lines[i];
            offset += indent.length + content.length + 1;
            const crlf = content[content.length - 1] === "\r";
            if (crlf)
              content = content.slice(0, -1);
            if (content && indent.length < trimIndent) {
              const src = header.indent ? "explicit indentation indicator" : "first line";
              const message = `Block scalar lines must not be less indented than their ${src}`;
              onError(offset - content.length - (crlf ? 2 : 1), "BAD_INDENT", message);
              indent = "";
            }
            if (type === Scalar.Scalar.BLOCK_LITERAL) {
              value += sep + indent.slice(trimIndent) + content;
              sep = "\n";
            } else if (indent.length > trimIndent || content[0] === "	") {
              if (sep === " ")
                sep = "\n";
              else if (!prevMoreIndented && sep === "\n")
                sep = "\n\n";
              value += sep + indent.slice(trimIndent) + content;
              sep = "\n";
              prevMoreIndented = true;
            } else if (content === "") {
              if (sep === "\n")
                value += "\n";
              else
                sep = "\n";
            } else {
              value += sep + content;
              sep = " ";
              prevMoreIndented = false;
            }
          }
          switch (header.chomp) {
            case "-":
              break;
            case "+":
              for (let i = chompStart; i < lines.length; ++i)
                value += "\n" + lines[i][0].slice(trimIndent);
              if (value[value.length - 1] !== "\n")
                value += "\n";
              break;
            default:
              value += "\n";
          }
          const end = start + header.length + scalar.source.length;
          return { value, type, comment: header.comment, range: [start, end, end] };
        }
        __name(resolveBlockScalar, "resolveBlockScalar");
        function parseBlockScalarHeader({ offset, props }, strict, onError) {
          if (props[0].type !== "block-scalar-header") {
            onError(props[0], "IMPOSSIBLE", "Block scalar header not found");
            return null;
          }
          const { source } = props[0];
          const mode = source[0];
          let indent = 0;
          let chomp = "";
          let error = -1;
          for (let i = 1; i < source.length; ++i) {
            const ch = source[i];
            if (!chomp && (ch === "-" || ch === "+"))
              chomp = ch;
            else {
              const n3 = Number(ch);
              if (!indent && n3)
                indent = n3;
              else if (error === -1)
                error = offset + i;
            }
          }
          if (error !== -1)
            onError(error, "UNEXPECTED_TOKEN", `Block scalar header includes extra characters: ${source}`);
          let hasSpace = false;
          let comment = "";
          let length = source.length;
          for (let i = 1; i < props.length; ++i) {
            const token = props[i];
            switch (token.type) {
              case "space":
                hasSpace = true;
              case "newline":
                length += token.source.length;
                break;
              case "comment":
                if (strict && !hasSpace) {
                  const message = "Comments must be separated from other tokens by white space characters";
                  onError(token, "MISSING_CHAR", message);
                }
                length += token.source.length;
                comment = token.source.substring(1);
                break;
              case "error":
                onError(token, "UNEXPECTED_TOKEN", token.message);
                length += token.source.length;
                break;
              default: {
                const message = `Unexpected token in block scalar header: ${token.type}`;
                onError(token, "UNEXPECTED_TOKEN", message);
                const ts = token.source;
                if (ts && typeof ts === "string")
                  length += ts.length;
              }
            }
          }
          return { mode, indent, chomp, comment, length };
        }
        __name(parseBlockScalarHeader, "parseBlockScalarHeader");
        function splitLines(source) {
          const split = source.split(/\n( *)/);
          const first = split[0];
          const m2 = first.match(/^( *)/);
          const line0 = (m2 == null ? void 0 : m2[1]) ? [m2[1], first.slice(m2[1].length)] : ["", first];
          const lines = [line0];
          for (let i = 1; i < split.length; i += 2)
            lines.push([split[i], split[i + 1]]);
          return lines;
        }
        __name(splitLines, "splitLines");
        exports2.resolveBlockScalar = resolveBlockScalar;
      }
    });
    var require_resolve_flow_scalar = __commonJS2({
      "node_modules/yaml/dist/compose/resolve-flow-scalar.js"(exports2) {
        "use strict";
        var Scalar = require_Scalar();
        var resolveEnd = require_resolve_end();
        function resolveFlowScalar(scalar, strict, onError) {
          const { offset, type, source, end } = scalar;
          let _type;
          let value;
          const _onError = /* @__PURE__ */ __name((rel, code, msg) => onError(offset + rel, code, msg), "_onError");
          switch (type) {
            case "scalar":
              _type = Scalar.Scalar.PLAIN;
              value = plainValue(source, _onError);
              break;
            case "single-quoted-scalar":
              _type = Scalar.Scalar.QUOTE_SINGLE;
              value = singleQuotedValue(source, _onError);
              break;
            case "double-quoted-scalar":
              _type = Scalar.Scalar.QUOTE_DOUBLE;
              value = doubleQuotedValue(source, _onError);
              break;
            default:
              onError(scalar, "UNEXPECTED_TOKEN", `Expected a flow scalar value, but found: ${type}`);
              return {
                value: "",
                type: null,
                comment: "",
                range: [offset, offset + source.length, offset + source.length]
              };
          }
          const valueEnd = offset + source.length;
          const re = resolveEnd.resolveEnd(end, valueEnd, strict, onError);
          return {
            value,
            type: _type,
            comment: re.comment,
            range: [offset, valueEnd, re.offset]
          };
        }
        __name(resolveFlowScalar, "resolveFlowScalar");
        function plainValue(source, onError) {
          let badChar = "";
          switch (source[0]) {
            case "	":
              badChar = "a tab character";
              break;
            case ",":
              badChar = "flow indicator character ,";
              break;
            case "%":
              badChar = "directive indicator character %";
              break;
            case "|":
            case ">": {
              badChar = `block scalar indicator ${source[0]}`;
              break;
            }
            case "@":
            case "`": {
              badChar = `reserved character ${source[0]}`;
              break;
            }
          }
          if (badChar)
            onError(0, "BAD_SCALAR_START", `Plain value cannot start with ${badChar}`);
          return foldLines(source);
        }
        __name(plainValue, "plainValue");
        function singleQuotedValue(source, onError) {
          if (source[source.length - 1] !== "'" || source.length === 1)
            onError(source.length, "MISSING_CHAR", "Missing closing 'quote");
          return foldLines(source.slice(1, -1)).replace(/''/g, "'");
        }
        __name(singleQuotedValue, "singleQuotedValue");
        function foldLines(source) {
          var _a2;
          let first, line;
          try {
            first = new RegExp("(.*?)(?<![ 	])[ 	]*\r?\n", "sy");
            line = new RegExp("[ 	]*(.*?)(?:(?<![ 	])[ 	]*)?\r?\n", "sy");
          } catch (_) {
            first = new RegExp("(.*?)[ \\t]*\\r?\\n", "sy");
            line = new RegExp("[ \\t]*(.*?)[ \\t]*\\r?\\n", "sy");
          }
          let match = first.exec(source);
          if (!match)
            return source;
          let res = match[1];
          let sep = " ";
          let pos = first.lastIndex;
          line.lastIndex = pos;
          while (match = line.exec(source)) {
            if (match[1] === "") {
              if (sep === "\n")
                res += sep;
              else
                sep = "\n";
            } else {
              res += sep + match[1];
              sep = " ";
            }
            pos = line.lastIndex;
          }
          const last = new RegExp("[ \\t]*(.*)", "sy");
          last.lastIndex = pos;
          match = last.exec(source);
          return res + sep + ((_a2 = match == null ? void 0 : match[1]) != null ? _a2 : "");
        }
        __name(foldLines, "foldLines");
        function doubleQuotedValue(source, onError) {
          let res = "";
          for (let i = 1; i < source.length - 1; ++i) {
            const ch = source[i];
            if (ch === "\r" && source[i + 1] === "\n")
              continue;
            if (ch === "\n") {
              const { fold, offset } = foldNewline(source, i);
              res += fold;
              i = offset;
            } else if (ch === "\\") {
              let next = source[++i];
              const cc = escapeCodes[next];
              if (cc)
                res += cc;
              else if (next === "\n") {
                next = source[i + 1];
                while (next === " " || next === "	")
                  next = source[++i + 1];
              } else if (next === "\r" && source[i + 1] === "\n") {
                next = source[++i + 1];
                while (next === " " || next === "	")
                  next = source[++i + 1];
              } else if (next === "x" || next === "u" || next === "U") {
                const length = { x: 2, u: 4, U: 8 }[next];
                res += parseCharCode(source, i + 1, length, onError);
                i += length;
              } else {
                const raw = source.substr(i - 1, 2);
                onError(i - 1, "BAD_DQ_ESCAPE", `Invalid escape sequence ${raw}`);
                res += raw;
              }
            } else if (ch === " " || ch === "	") {
              const wsStart = i;
              let next = source[i + 1];
              while (next === " " || next === "	")
                next = source[++i + 1];
              if (next !== "\n" && !(next === "\r" && source[i + 2] === "\n"))
                res += i > wsStart ? source.slice(wsStart, i + 1) : ch;
            } else {
              res += ch;
            }
          }
          if (source[source.length - 1] !== '"' || source.length === 1)
            onError(source.length, "MISSING_CHAR", 'Missing closing "quote');
          return res;
        }
        __name(doubleQuotedValue, "doubleQuotedValue");
        function foldNewline(source, offset) {
          let fold = "";
          let ch = source[offset + 1];
          while (ch === " " || ch === "	" || ch === "\n" || ch === "\r") {
            if (ch === "\r" && source[offset + 2] !== "\n")
              break;
            if (ch === "\n")
              fold += "\n";
            offset += 1;
            ch = source[offset + 1];
          }
          if (!fold)
            fold = " ";
          return { fold, offset };
        }
        __name(foldNewline, "foldNewline");
        var escapeCodes = {
          "0": "\0",
          // null character
          a: "\x07",
          // bell character
          b: "\b",
          // backspace
          e: "\x1B",
          // escape character
          f: "\f",
          // form feed
          n: "\n",
          // line feed
          r: "\r",
          // carriage return
          t: "	",
          // horizontal tab
          v: "\v",
          // vertical tab
          N: "\x85",
          // Unicode next line
          _: "\xA0",
          // Unicode non-breaking space
          L: "\u2028",
          // Unicode line separator
          P: "\u2029",
          // Unicode paragraph separator
          " ": " ",
          '"': '"',
          "/": "/",
          "\\": "\\",
          "	": "	"
        };
        function parseCharCode(source, offset, length, onError) {
          const cc = source.substr(offset, length);
          const ok = cc.length === length && /^[0-9a-fA-F]+$/.test(cc);
          const code = ok ? parseInt(cc, 16) : NaN;
          if (isNaN(code)) {
            const raw = source.substr(offset - 2, length + 2);
            onError(offset - 2, "BAD_DQ_ESCAPE", `Invalid escape sequence ${raw}`);
            return raw;
          }
          return String.fromCodePoint(code);
        }
        __name(parseCharCode, "parseCharCode");
        exports2.resolveFlowScalar = resolveFlowScalar;
      }
    });
    var require_compose_scalar = __commonJS2({
      "node_modules/yaml/dist/compose/compose-scalar.js"(exports2) {
        "use strict";
        var identity2 = require_identity();
        var Scalar = require_Scalar();
        var resolveBlockScalar = require_resolve_block_scalar();
        var resolveFlowScalar = require_resolve_flow_scalar();
        function composeScalar(ctx, token, tagToken, onError) {
          const { value, type, comment, range } = token.type === "block-scalar" ? resolveBlockScalar.resolveBlockScalar(token, ctx.options.strict, onError) : resolveFlowScalar.resolveFlowScalar(token, ctx.options.strict, onError);
          const tagName = tagToken ? ctx.directives.tagName(tagToken.source, (msg) => onError(tagToken, "TAG_RESOLVE_FAILED", msg)) : null;
          const tag = tagToken && tagName ? findScalarTagByName(ctx.schema, value, tagName, tagToken, onError) : token.type === "scalar" ? findScalarTagByTest(ctx, value, token, onError) : ctx.schema[identity2.SCALAR];
          let scalar;
          try {
            const res = tag.resolve(value, (msg) => onError(tagToken != null ? tagToken : token, "TAG_RESOLVE_FAILED", msg), ctx.options);
            scalar = identity2.isScalar(res) ? res : new Scalar.Scalar(res);
          } catch (error) {
            const msg = error instanceof Error ? error.message : String(error);
            onError(tagToken != null ? tagToken : token, "TAG_RESOLVE_FAILED", msg);
            scalar = new Scalar.Scalar(value);
          }
          scalar.range = range;
          scalar.source = value;
          if (type)
            scalar.type = type;
          if (tagName)
            scalar.tag = tagName;
          if (tag.format)
            scalar.format = tag.format;
          if (comment)
            scalar.comment = comment;
          return scalar;
        }
        __name(composeScalar, "composeScalar");
        function findScalarTagByName(schema, value, tagName, tagToken, onError) {
          var _a2;
          if (tagName === "!")
            return schema[identity2.SCALAR];
          const matchWithTest = [];
          for (const tag of schema.tags) {
            if (!tag.collection && tag.tag === tagName) {
              if (tag.default && tag.test)
                matchWithTest.push(tag);
              else
                return tag;
            }
          }
          for (const tag of matchWithTest)
            if ((_a2 = tag.test) == null ? void 0 : _a2.test(value))
              return tag;
          const kt2 = schema.knownTags[tagName];
          if (kt2 && !kt2.collection) {
            schema.tags.push(Object.assign({}, kt2, { default: false, test: void 0 }));
            return kt2;
          }
          onError(tagToken, "TAG_RESOLVE_FAILED", `Unresolved tag: ${tagName}`, tagName !== "tag:yaml.org,2002:str");
          return schema[identity2.SCALAR];
        }
        __name(findScalarTagByName, "findScalarTagByName");
        function findScalarTagByTest({ directives, schema }, value, token, onError) {
          var _a2;
          const tag = schema.tags.find((tag2) => {
            var _a3;
            return tag2.default && ((_a3 = tag2.test) == null ? void 0 : _a3.test(value));
          }) || schema[identity2.SCALAR];
          if (schema.compat) {
            const compat = (_a2 = schema.compat.find((tag2) => {
              var _a3;
              return tag2.default && ((_a3 = tag2.test) == null ? void 0 : _a3.test(value));
            })) != null ? _a2 : schema[identity2.SCALAR];
            if (tag.tag !== compat.tag) {
              const ts = directives.tagString(tag.tag);
              const cs = directives.tagString(compat.tag);
              const msg = `Value may be parsed as either ${ts} or ${cs}`;
              onError(token, "TAG_RESOLVE_FAILED", msg, true);
            }
          }
          return tag;
        }
        __name(findScalarTagByTest, "findScalarTagByTest");
        exports2.composeScalar = composeScalar;
      }
    });
    var require_util_empty_scalar_position = __commonJS2({
      "node_modules/yaml/dist/compose/util-empty-scalar-position.js"(exports2) {
        "use strict";
        function emptyScalarPosition(offset, before, pos) {
          if (before) {
            if (pos === null)
              pos = before.length;
            for (let i = pos - 1; i >= 0; --i) {
              let st2 = before[i];
              switch (st2.type) {
                case "space":
                case "comment":
                case "newline":
                  offset -= st2.source.length;
                  continue;
              }
              st2 = before[++i];
              while ((st2 == null ? void 0 : st2.type) === "space") {
                offset += st2.source.length;
                st2 = before[++i];
              }
              break;
            }
          }
          return offset;
        }
        __name(emptyScalarPosition, "emptyScalarPosition");
        exports2.emptyScalarPosition = emptyScalarPosition;
      }
    });
    var require_compose_node = __commonJS2({
      "node_modules/yaml/dist/compose/compose-node.js"(exports2) {
        "use strict";
        var Alias = require_Alias();
        var composeCollection = require_compose_collection();
        var composeScalar = require_compose_scalar();
        var resolveEnd = require_resolve_end();
        var utilEmptyScalarPosition = require_util_empty_scalar_position();
        var CN = { composeNode, composeEmptyNode };
        function composeNode(ctx, token, props, onError) {
          const { spaceBefore, comment, anchor, tag } = props;
          let node;
          let isSrcToken = true;
          switch (token.type) {
            case "alias":
              node = composeAlias(ctx, token, onError);
              if (anchor || tag)
                onError(token, "ALIAS_PROPS", "An alias node must not specify any properties");
              break;
            case "scalar":
            case "single-quoted-scalar":
            case "double-quoted-scalar":
            case "block-scalar":
              node = composeScalar.composeScalar(ctx, token, tag, onError);
              if (anchor)
                node.anchor = anchor.source.substring(1);
              break;
            case "block-map":
            case "block-seq":
            case "flow-collection":
              node = composeCollection.composeCollection(CN, ctx, token, tag, onError);
              if (anchor)
                node.anchor = anchor.source.substring(1);
              break;
            default: {
              const message = token.type === "error" ? token.message : `Unsupported token (type: ${token.type})`;
              onError(token, "UNEXPECTED_TOKEN", message);
              node = composeEmptyNode(ctx, token.offset, void 0, null, props, onError);
              isSrcToken = false;
            }
          }
          if (anchor && node.anchor === "")
            onError(anchor, "BAD_ALIAS", "Anchor cannot be an empty string");
          if (spaceBefore)
            node.spaceBefore = true;
          if (comment) {
            if (token.type === "scalar" && token.source === "")
              node.comment = comment;
            else
              node.commentBefore = comment;
          }
          if (ctx.options.keepSourceTokens && isSrcToken)
            node.srcToken = token;
          return node;
        }
        __name(composeNode, "composeNode");
        function composeEmptyNode(ctx, offset, before, pos, { spaceBefore, comment, anchor, tag, end }, onError) {
          const token = {
            type: "scalar",
            offset: utilEmptyScalarPosition.emptyScalarPosition(offset, before, pos),
            indent: -1,
            source: ""
          };
          const node = composeScalar.composeScalar(ctx, token, tag, onError);
          if (anchor) {
            node.anchor = anchor.source.substring(1);
            if (node.anchor === "")
              onError(anchor, "BAD_ALIAS", "Anchor cannot be an empty string");
          }
          if (spaceBefore)
            node.spaceBefore = true;
          if (comment) {
            node.comment = comment;
            node.range[2] = end;
          }
          return node;
        }
        __name(composeEmptyNode, "composeEmptyNode");
        function composeAlias({ options }, { offset, source, end }, onError) {
          const alias = new Alias.Alias(source.substring(1));
          if (alias.source === "")
            onError(offset, "BAD_ALIAS", "Alias cannot be an empty string");
          if (alias.source.endsWith(":"))
            onError(offset + source.length - 1, "BAD_ALIAS", "Alias ending in : is ambiguous", true);
          const valueEnd = offset + source.length;
          const re = resolveEnd.resolveEnd(end, valueEnd, options.strict, onError);
          alias.range = [offset, valueEnd, re.offset];
          if (re.comment)
            alias.comment = re.comment;
          return alias;
        }
        __name(composeAlias, "composeAlias");
        exports2.composeEmptyNode = composeEmptyNode;
        exports2.composeNode = composeNode;
      }
    });
    var require_compose_doc = __commonJS2({
      "node_modules/yaml/dist/compose/compose-doc.js"(exports2) {
        "use strict";
        var Document = require_Document();
        var composeNode = require_compose_node();
        var resolveEnd = require_resolve_end();
        var resolveProps = require_resolve_props();
        function composeDoc(options, directives, { offset, start, value, end }, onError) {
          const opts = Object.assign({ _directives: directives }, options);
          const doc = new Document.Document(void 0, opts);
          const ctx = {
            atRoot: true,
            directives: doc.directives,
            options: doc.options,
            schema: doc.schema
          };
          const props = resolveProps.resolveProps(start, {
            indicator: "doc-start",
            next: value != null ? value : end == null ? void 0 : end[0],
            offset,
            onError,
            startOnNewline: true
          });
          if (props.found) {
            doc.directives.docStart = true;
            if (value && (value.type === "block-map" || value.type === "block-seq") && !props.hasNewline)
              onError(props.end, "MISSING_CHAR", "Block collection cannot start on same line with directives-end marker");
          }
          doc.contents = value ? composeNode.composeNode(ctx, value, props, onError) : composeNode.composeEmptyNode(ctx, props.end, start, null, props, onError);
          const contentEnd = doc.contents.range[2];
          const re = resolveEnd.resolveEnd(end, contentEnd, false, onError);
          if (re.comment)
            doc.comment = re.comment;
          doc.range = [offset, contentEnd, re.offset];
          return doc;
        }
        __name(composeDoc, "composeDoc");
        exports2.composeDoc = composeDoc;
      }
    });
    var require_composer = __commonJS2({
      "node_modules/yaml/dist/compose/composer.js"(exports2) {
        "use strict";
        var directives = require_directives();
        var Document = require_Document();
        var errors = require_errors4();
        var identity2 = require_identity();
        var composeDoc = require_compose_doc();
        var resolveEnd = require_resolve_end();
        function getErrorPos(src) {
          if (typeof src === "number")
            return [src, src + 1];
          if (Array.isArray(src))
            return src.length === 2 ? src : [src[0], src[1]];
          const { offset, source } = src;
          return [offset, offset + (typeof source === "string" ? source.length : 1)];
        }
        __name(getErrorPos, "getErrorPos");
        function parsePrelude(prelude) {
          var _a2;
          let comment = "";
          let atComment = false;
          let afterEmptyLine = false;
          for (let i = 0; i < prelude.length; ++i) {
            const source = prelude[i];
            switch (source[0]) {
              case "#":
                comment += (comment === "" ? "" : afterEmptyLine ? "\n\n" : "\n") + (source.substring(1) || " ");
                atComment = true;
                afterEmptyLine = false;
                break;
              case "%":
                if (((_a2 = prelude[i + 1]) == null ? void 0 : _a2[0]) !== "#")
                  i += 1;
                atComment = false;
                break;
              default:
                if (!atComment)
                  afterEmptyLine = true;
                atComment = false;
            }
          }
          return { comment, afterEmptyLine };
        }
        __name(parsePrelude, "parsePrelude");
        var Composer = class {
          static {
            __name(this, "Composer");
          }
          constructor(options = {}) {
            this.doc = null;
            this.atDirectives = false;
            this.prelude = [];
            this.errors = [];
            this.warnings = [];
            this.onError = (source, code, message, warning) => {
              const pos = getErrorPos(source);
              if (warning)
                this.warnings.push(new errors.YAMLWarning(pos, code, message));
              else
                this.errors.push(new errors.YAMLParseError(pos, code, message));
            };
            this.directives = new directives.Directives({ version: options.version || "1.2" });
            this.options = options;
          }
          decorate(doc, afterDoc) {
            const { comment, afterEmptyLine } = parsePrelude(this.prelude);
            if (comment) {
              const dc = doc.contents;
              if (afterDoc) {
                doc.comment = doc.comment ? `${doc.comment}
${comment}` : comment;
              } else if (afterEmptyLine || doc.directives.docStart || !dc) {
                doc.commentBefore = comment;
              } else if (identity2.isCollection(dc) && !dc.flow && dc.items.length > 0) {
                let it = dc.items[0];
                if (identity2.isPair(it))
                  it = it.key;
                const cb = it.commentBefore;
                it.commentBefore = cb ? `${comment}
${cb}` : comment;
              } else {
                const cb = dc.commentBefore;
                dc.commentBefore = cb ? `${comment}
${cb}` : comment;
              }
            }
            if (afterDoc) {
              Array.prototype.push.apply(doc.errors, this.errors);
              Array.prototype.push.apply(doc.warnings, this.warnings);
            } else {
              doc.errors = this.errors;
              doc.warnings = this.warnings;
            }
            this.prelude = [];
            this.errors = [];
            this.warnings = [];
          }
          /**
           * Current stream status information.
           *
           * Mostly useful at the end of input for an empty stream.
           */
          streamInfo() {
            return {
              comment: parsePrelude(this.prelude).comment,
              directives: this.directives,
              errors: this.errors,
              warnings: this.warnings
            };
          }
          /**
           * Compose tokens into documents.
           *
           * @param forceDoc - If the stream contains no document, still emit a final document including any comments and directives that would be applied to a subsequent document.
           * @param endOffset - Should be set if `forceDoc` is also set, to set the document range end and to indicate errors correctly.
           */
          *compose(tokens, forceDoc = false, endOffset = -1) {
            for (const token of tokens)
              yield* __yieldStar(this.next(token));
            yield* __yieldStar(this.end(forceDoc, endOffset));
          }
          /** Advance the composer by one CST token. */
          *next(token) {
            if (process.env.LOG_STREAM)
              console.dir(token, { depth: null });
            switch (token.type) {
              case "directive":
                this.directives.add(token.source, (offset, message, warning) => {
                  const pos = getErrorPos(token);
                  pos[0] += offset;
                  this.onError(pos, "BAD_DIRECTIVE", message, warning);
                });
                this.prelude.push(token.source);
                this.atDirectives = true;
                break;
              case "document": {
                const doc = composeDoc.composeDoc(this.options, this.directives, token, this.onError);
                if (this.atDirectives && !doc.directives.docStart)
                  this.onError(token, "MISSING_CHAR", "Missing directives-end/doc-start indicator line");
                this.decorate(doc, false);
                if (this.doc)
                  yield this.doc;
                this.doc = doc;
                this.atDirectives = false;
                break;
              }
              case "byte-order-mark":
              case "space":
                break;
              case "comment":
              case "newline":
                this.prelude.push(token.source);
                break;
              case "error": {
                const msg = token.source ? `${token.message}: ${JSON.stringify(token.source)}` : token.message;
                const error = new errors.YAMLParseError(getErrorPos(token), "UNEXPECTED_TOKEN", msg);
                if (this.atDirectives || !this.doc)
                  this.errors.push(error);
                else
                  this.doc.errors.push(error);
                break;
              }
              case "doc-end": {
                if (!this.doc) {
                  const msg = "Unexpected doc-end without preceding document";
                  this.errors.push(new errors.YAMLParseError(getErrorPos(token), "UNEXPECTED_TOKEN", msg));
                  break;
                }
                this.doc.directives.docEnd = true;
                const end = resolveEnd.resolveEnd(token.end, token.offset + token.source.length, this.doc.options.strict, this.onError);
                this.decorate(this.doc, true);
                if (end.comment) {
                  const dc = this.doc.comment;
                  this.doc.comment = dc ? `${dc}
${end.comment}` : end.comment;
                }
                this.doc.range[2] = end.offset;
                break;
              }
              default:
                this.errors.push(new errors.YAMLParseError(getErrorPos(token), "UNEXPECTED_TOKEN", `Unsupported token ${token.type}`));
            }
          }
          /**
           * Call at end of input to yield any remaining document.
           *
           * @param forceDoc - If the stream contains no document, still emit a final document including any comments and directives that would be applied to a subsequent document.
           * @param endOffset - Should be set if `forceDoc` is also set, to set the document range end and to indicate errors correctly.
           */
          *end(forceDoc = false, endOffset = -1) {
            if (this.doc) {
              this.decorate(this.doc, true);
              yield this.doc;
              this.doc = null;
            } else if (forceDoc) {
              const opts = Object.assign({ _directives: this.directives }, this.options);
              const doc = new Document.Document(void 0, opts);
              if (this.atDirectives)
                this.onError(endOffset, "MISSING_CHAR", "Missing directives-end indicator line");
              doc.range = [0, endOffset, endOffset];
              this.decorate(doc, false);
              yield doc;
            }
          }
        };
        exports2.Composer = Composer;
      }
    });
    var require_cst_scalar = __commonJS2({
      "node_modules/yaml/dist/parse/cst-scalar.js"(exports2) {
        "use strict";
        var resolveBlockScalar = require_resolve_block_scalar();
        var resolveFlowScalar = require_resolve_flow_scalar();
        var errors = require_errors4();
        var stringifyString = require_stringifyString();
        function resolveAsScalar(token, strict = true, onError) {
          if (token) {
            const _onError = /* @__PURE__ */ __name((pos, code, message) => {
              const offset = typeof pos === "number" ? pos : Array.isArray(pos) ? pos[0] : pos.offset;
              if (onError)
                onError(offset, code, message);
              else
                throw new errors.YAMLParseError([offset, offset + 1], code, message);
            }, "_onError");
            switch (token.type) {
              case "scalar":
              case "single-quoted-scalar":
              case "double-quoted-scalar":
                return resolveFlowScalar.resolveFlowScalar(token, strict, _onError);
              case "block-scalar":
                return resolveBlockScalar.resolveBlockScalar(token, strict, _onError);
            }
          }
          return null;
        }
        __name(resolveAsScalar, "resolveAsScalar");
        function createScalarToken(value, context) {
          var _a2;
          const { implicitKey = false, indent, inFlow = false, offset = -1, type = "PLAIN" } = context;
          const source = stringifyString.stringifyString({ type, value }, {
            implicitKey,
            indent: indent > 0 ? " ".repeat(indent) : "",
            inFlow,
            options: { blockQuote: true, lineWidth: -1 }
          });
          const end = (_a2 = context.end) != null ? _a2 : [
            { type: "newline", offset: -1, indent, source: "\n" }
          ];
          switch (source[0]) {
            case "|":
            case ">": {
              const he = source.indexOf("\n");
              const head = source.substring(0, he);
              const body = source.substring(he + 1) + "\n";
              const props = [
                { type: "block-scalar-header", offset, indent, source: head }
              ];
              if (!addEndtoBlockProps(props, end))
                props.push({ type: "newline", offset: -1, indent, source: "\n" });
              return { type: "block-scalar", offset, indent, props, source: body };
            }
            case '"':
              return { type: "double-quoted-scalar", offset, indent, source, end };
            case "'":
              return { type: "single-quoted-scalar", offset, indent, source, end };
            default:
              return { type: "scalar", offset, indent, source, end };
          }
        }
        __name(createScalarToken, "createScalarToken");
        function setScalarValue(token, value, context = {}) {
          let { afterKey = false, implicitKey = false, inFlow = false, type } = context;
          let indent = "indent" in token ? token.indent : null;
          if (afterKey && typeof indent === "number")
            indent += 2;
          if (!type)
            switch (token.type) {
              case "single-quoted-scalar":
                type = "QUOTE_SINGLE";
                break;
              case "double-quoted-scalar":
                type = "QUOTE_DOUBLE";
                break;
              case "block-scalar": {
                const header = token.props[0];
                if (header.type !== "block-scalar-header")
                  throw new Error("Invalid block scalar header");
                type = header.source[0] === ">" ? "BLOCK_FOLDED" : "BLOCK_LITERAL";
                break;
              }
              default:
                type = "PLAIN";
            }
          const source = stringifyString.stringifyString({ type, value }, {
            implicitKey: implicitKey || indent === null,
            indent: indent !== null && indent > 0 ? " ".repeat(indent) : "",
            inFlow,
            options: { blockQuote: true, lineWidth: -1 }
          });
          switch (source[0]) {
            case "|":
            case ">":
              setBlockScalarValue(token, source);
              break;
            case '"':
              setFlowScalarValue(token, source, "double-quoted-scalar");
              break;
            case "'":
              setFlowScalarValue(token, source, "single-quoted-scalar");
              break;
            default:
              setFlowScalarValue(token, source, "scalar");
          }
        }
        __name(setScalarValue, "setScalarValue");
        function setBlockScalarValue(token, source) {
          const he = source.indexOf("\n");
          const head = source.substring(0, he);
          const body = source.substring(he + 1) + "\n";
          if (token.type === "block-scalar") {
            const header = token.props[0];
            if (header.type !== "block-scalar-header")
              throw new Error("Invalid block scalar header");
            header.source = head;
            token.source = body;
          } else {
            const { offset } = token;
            const indent = "indent" in token ? token.indent : -1;
            const props = [
              { type: "block-scalar-header", offset, indent, source: head }
            ];
            if (!addEndtoBlockProps(props, "end" in token ? token.end : void 0))
              props.push({ type: "newline", offset: -1, indent, source: "\n" });
            for (const key of Object.keys(token))
              if (key !== "type" && key !== "offset")
                delete token[key];
            Object.assign(token, { type: "block-scalar", indent, props, source: body });
          }
        }
        __name(setBlockScalarValue, "setBlockScalarValue");
        function addEndtoBlockProps(props, end) {
          if (end)
            for (const st2 of end)
              switch (st2.type) {
                case "space":
                case "comment":
                  props.push(st2);
                  break;
                case "newline":
                  props.push(st2);
                  return true;
              }
          return false;
        }
        __name(addEndtoBlockProps, "addEndtoBlockProps");
        function setFlowScalarValue(token, source, type) {
          switch (token.type) {
            case "scalar":
            case "double-quoted-scalar":
            case "single-quoted-scalar":
              token.type = type;
              token.source = source;
              break;
            case "block-scalar": {
              const end = token.props.slice(1);
              let oa = source.length;
              if (token.props[0].type === "block-scalar-header")
                oa -= token.props[0].source.length;
              for (const tok of end)
                tok.offset += oa;
              delete token.props;
              Object.assign(token, { type, source, end });
              break;
            }
            case "block-map":
            case "block-seq": {
              const offset = token.offset + source.length;
              const nl2 = { type: "newline", offset, indent: token.indent, source: "\n" };
              delete token.items;
              Object.assign(token, { type, source, end: [nl2] });
              break;
            }
            default: {
              const indent = "indent" in token ? token.indent : -1;
              const end = "end" in token && Array.isArray(token.end) ? token.end.filter((st2) => st2.type === "space" || st2.type === "comment" || st2.type === "newline") : [];
              for (const key of Object.keys(token))
                if (key !== "type" && key !== "offset")
                  delete token[key];
              Object.assign(token, { type, indent, source, end });
            }
          }
        }
        __name(setFlowScalarValue, "setFlowScalarValue");
        exports2.createScalarToken = createScalarToken;
        exports2.resolveAsScalar = resolveAsScalar;
        exports2.setScalarValue = setScalarValue;
      }
    });
    var require_cst_stringify = __commonJS2({
      "node_modules/yaml/dist/parse/cst-stringify.js"(exports2) {
        "use strict";
        var stringify2 = /* @__PURE__ */ __name((cst) => "type" in cst ? stringifyToken(cst) : stringifyItem(cst), "stringify");
        function stringifyToken(token) {
          switch (token.type) {
            case "block-scalar": {
              let res = "";
              for (const tok of token.props)
                res += stringifyToken(tok);
              return res + token.source;
            }
            case "block-map":
            case "block-seq": {
              let res = "";
              for (const item of token.items)
                res += stringifyItem(item);
              return res;
            }
            case "flow-collection": {
              let res = token.start.source;
              for (const item of token.items)
                res += stringifyItem(item);
              for (const st2 of token.end)
                res += st2.source;
              return res;
            }
            case "document": {
              let res = stringifyItem(token);
              if (token.end)
                for (const st2 of token.end)
                  res += st2.source;
              return res;
            }
            default: {
              let res = token.source;
              if ("end" in token && token.end)
                for (const st2 of token.end)
                  res += st2.source;
              return res;
            }
          }
        }
        __name(stringifyToken, "stringifyToken");
        function stringifyItem({ start, key, sep, value }) {
          let res = "";
          for (const st2 of start)
            res += st2.source;
          if (key)
            res += stringifyToken(key);
          if (sep)
            for (const st2 of sep)
              res += st2.source;
          if (value)
            res += stringifyToken(value);
          return res;
        }
        __name(stringifyItem, "stringifyItem");
        exports2.stringify = stringify2;
      }
    });
    var require_cst_visit = __commonJS2({
      "node_modules/yaml/dist/parse/cst-visit.js"(exports2) {
        "use strict";
        var BREAK = Symbol("break visit");
        var SKIP = Symbol("skip children");
        var REMOVE = Symbol("remove item");
        function visit(cst, visitor) {
          if ("type" in cst && cst.type === "document")
            cst = { start: cst.start, value: cst.value };
          _visit(Object.freeze([]), cst, visitor);
        }
        __name(visit, "visit");
        visit.BREAK = BREAK;
        visit.SKIP = SKIP;
        visit.REMOVE = REMOVE;
        visit.itemAtPath = (cst, path22) => {
          let item = cst;
          for (const [field, index] of path22) {
            const tok = item == null ? void 0 : item[field];
            if (tok && "items" in tok) {
              item = tok.items[index];
            } else
              return void 0;
          }
          return item;
        };
        visit.parentCollection = (cst, path22) => {
          const parent = visit.itemAtPath(cst, path22.slice(0, -1));
          const field = path22[path22.length - 1][0];
          const coll = parent == null ? void 0 : parent[field];
          if (coll && "items" in coll)
            return coll;
          throw new Error("Parent collection not found");
        };
        function _visit(path22, item, visitor) {
          let ctrl = visitor(item, path22);
          if (typeof ctrl === "symbol")
            return ctrl;
          for (const field of ["key", "value"]) {
            const token = item[field];
            if (token && "items" in token) {
              for (let i = 0; i < token.items.length; ++i) {
                const ci2 = _visit(Object.freeze(path22.concat([[field, i]])), token.items[i], visitor);
                if (typeof ci2 === "number")
                  i = ci2 - 1;
                else if (ci2 === BREAK)
                  return BREAK;
                else if (ci2 === REMOVE) {
                  token.items.splice(i, 1);
                  i -= 1;
                }
              }
              if (typeof ctrl === "function" && field === "key")
                ctrl = ctrl(item, path22);
            }
          }
          return typeof ctrl === "function" ? ctrl(item, path22) : ctrl;
        }
        __name(_visit, "_visit");
        exports2.visit = visit;
      }
    });
    var require_cst = __commonJS2({
      "node_modules/yaml/dist/parse/cst.js"(exports2) {
        "use strict";
        var cstScalar = require_cst_scalar();
        var cstStringify = require_cst_stringify();
        var cstVisit = require_cst_visit();
        var BOM = "\uFEFF";
        var DOCUMENT = "";
        var FLOW_END = "";
        var SCALAR = "";
        var isCollection = /* @__PURE__ */ __name((token) => !!token && "items" in token, "isCollection");
        var isScalar = /* @__PURE__ */ __name((token) => !!token && (token.type === "scalar" || token.type === "single-quoted-scalar" || token.type === "double-quoted-scalar" || token.type === "block-scalar"), "isScalar");
        function prettyToken(token) {
          switch (token) {
            case BOM:
              return "<BOM>";
            case DOCUMENT:
              return "<DOC>";
            case FLOW_END:
              return "<FLOW_END>";
            case SCALAR:
              return "<SCALAR>";
            default:
              return JSON.stringify(token);
          }
        }
        __name(prettyToken, "prettyToken");
        function tokenType(source) {
          switch (source) {
            case BOM:
              return "byte-order-mark";
            case DOCUMENT:
              return "doc-mode";
            case FLOW_END:
              return "flow-error-end";
            case SCALAR:
              return "scalar";
            case "---":
              return "doc-start";
            case "...":
              return "doc-end";
            case "":
            case "\n":
            case "\r\n":
              return "newline";
            case "-":
              return "seq-item-ind";
            case "?":
              return "explicit-key-ind";
            case ":":
              return "map-value-ind";
            case "{":
              return "flow-map-start";
            case "}":
              return "flow-map-end";
            case "[":
              return "flow-seq-start";
            case "]":
              return "flow-seq-end";
            case ",":
              return "comma";
          }
          switch (source[0]) {
            case " ":
            case "	":
              return "space";
            case "#":
              return "comment";
            case "%":
              return "directive-line";
            case "*":
              return "alias";
            case "&":
              return "anchor";
            case "!":
              return "tag";
            case "'":
              return "single-quoted-scalar";
            case '"':
              return "double-quoted-scalar";
            case "|":
            case ">":
              return "block-scalar-header";
          }
          return null;
        }
        __name(tokenType, "tokenType");
        exports2.createScalarToken = cstScalar.createScalarToken;
        exports2.resolveAsScalar = cstScalar.resolveAsScalar;
        exports2.setScalarValue = cstScalar.setScalarValue;
        exports2.stringify = cstStringify.stringify;
        exports2.visit = cstVisit.visit;
        exports2.BOM = BOM;
        exports2.DOCUMENT = DOCUMENT;
        exports2.FLOW_END = FLOW_END;
        exports2.SCALAR = SCALAR;
        exports2.isCollection = isCollection;
        exports2.isScalar = isScalar;
        exports2.prettyToken = prettyToken;
        exports2.tokenType = tokenType;
      }
    });
    var require_lexer = __commonJS2({
      "node_modules/yaml/dist/parse/lexer.js"(exports2) {
        "use strict";
        var cst = require_cst();
        function isEmpty(ch) {
          switch (ch) {
            case void 0:
            case " ":
            case "\n":
            case "\r":
            case "	":
              return true;
            default:
              return false;
          }
        }
        __name(isEmpty, "isEmpty");
        var hexDigits = "0123456789ABCDEFabcdef".split("");
        var tagChars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-#;/?:@&=+$_.!~*'()".split("");
        var invalidFlowScalarChars = ",[]{}".split("");
        var invalidAnchorChars = " ,[]{}\n\r	".split("");
        var isNotAnchorChar = /* @__PURE__ */ __name((ch) => !ch || invalidAnchorChars.includes(ch), "isNotAnchorChar");
        var Lexer = class {
          static {
            __name(this, "Lexer");
          }
          constructor() {
            this.atEnd = false;
            this.blockScalarIndent = -1;
            this.blockScalarKeep = false;
            this.buffer = "";
            this.flowKey = false;
            this.flowLevel = 0;
            this.indentNext = 0;
            this.indentValue = 0;
            this.lineEndPos = null;
            this.next = null;
            this.pos = 0;
          }
          /**
           * Generate YAML tokens from the `source` string. If `incomplete`,
           * a part of the last line may be left as a buffer for the next call.
           *
           * @returns A generator of lexical tokens
           */
          *lex(source, incomplete = false) {
            var _a2;
            if (source) {
              this.buffer = this.buffer ? this.buffer + source : source;
              this.lineEndPos = null;
            }
            this.atEnd = !incomplete;
            let next = (_a2 = this.next) != null ? _a2 : "stream";
            while (next && (incomplete || this.hasChars(1)))
              next = yield* __yieldStar(this.parseNext(next));
          }
          atLineEnd() {
            let i = this.pos;
            let ch = this.buffer[i];
            while (ch === " " || ch === "	")
              ch = this.buffer[++i];
            if (!ch || ch === "#" || ch === "\n")
              return true;
            if (ch === "\r")
              return this.buffer[i + 1] === "\n";
            return false;
          }
          charAt(n3) {
            return this.buffer[this.pos + n3];
          }
          continueScalar(offset) {
            let ch = this.buffer[offset];
            if (this.indentNext > 0) {
              let indent = 0;
              while (ch === " ")
                ch = this.buffer[++indent + offset];
              if (ch === "\r") {
                const next = this.buffer[indent + offset + 1];
                if (next === "\n" || !next && !this.atEnd)
                  return offset + indent + 1;
              }
              return ch === "\n" || indent >= this.indentNext || !ch && !this.atEnd ? offset + indent : -1;
            }
            if (ch === "-" || ch === ".") {
              const dt2 = this.buffer.substr(offset, 3);
              if ((dt2 === "---" || dt2 === "...") && isEmpty(this.buffer[offset + 3]))
                return -1;
            }
            return offset;
          }
          getLine() {
            let end = this.lineEndPos;
            if (typeof end !== "number" || end !== -1 && end < this.pos) {
              end = this.buffer.indexOf("\n", this.pos);
              this.lineEndPos = end;
            }
            if (end === -1)
              return this.atEnd ? this.buffer.substring(this.pos) : null;
            if (this.buffer[end - 1] === "\r")
              end -= 1;
            return this.buffer.substring(this.pos, end);
          }
          hasChars(n3) {
            return this.pos + n3 <= this.buffer.length;
          }
          setNext(state) {
            this.buffer = this.buffer.substring(this.pos);
            this.pos = 0;
            this.lineEndPos = null;
            this.next = state;
            return null;
          }
          peek(n3) {
            return this.buffer.substr(this.pos, n3);
          }
          *parseNext(next) {
            switch (next) {
              case "stream":
                return yield* __yieldStar(this.parseStream());
              case "line-start":
                return yield* __yieldStar(this.parseLineStart());
              case "block-start":
                return yield* __yieldStar(this.parseBlockStart());
              case "doc":
                return yield* __yieldStar(this.parseDocument());
              case "flow":
                return yield* __yieldStar(this.parseFlowCollection());
              case "quoted-scalar":
                return yield* __yieldStar(this.parseQuotedScalar());
              case "block-scalar":
                return yield* __yieldStar(this.parseBlockScalar());
              case "plain-scalar":
                return yield* __yieldStar(this.parsePlainScalar());
            }
          }
          *parseStream() {
            let line = this.getLine();
            if (line === null)
              return this.setNext("stream");
            if (line[0] === cst.BOM) {
              yield* __yieldStar(this.pushCount(1));
              line = line.substring(1);
            }
            if (line[0] === "%") {
              let dirEnd = line.length;
              const cs = line.indexOf("#");
              if (cs !== -1) {
                const ch = line[cs - 1];
                if (ch === " " || ch === "	")
                  dirEnd = cs - 1;
              }
              while (true) {
                const ch = line[dirEnd - 1];
                if (ch === " " || ch === "	")
                  dirEnd -= 1;
                else
                  break;
              }
              const n3 = (yield* __yieldStar(this.pushCount(dirEnd))) + (yield* __yieldStar(this.pushSpaces(true)));
              yield* __yieldStar(this.pushCount(line.length - n3));
              this.pushNewline();
              return "stream";
            }
            if (this.atLineEnd()) {
              const sp = yield* __yieldStar(this.pushSpaces(true));
              yield* __yieldStar(this.pushCount(line.length - sp));
              yield* __yieldStar(this.pushNewline());
              return "stream";
            }
            yield cst.DOCUMENT;
            return yield* __yieldStar(this.parseLineStart());
          }
          *parseLineStart() {
            const ch = this.charAt(0);
            if (!ch && !this.atEnd)
              return this.setNext("line-start");
            if (ch === "-" || ch === ".") {
              if (!this.atEnd && !this.hasChars(4))
                return this.setNext("line-start");
              const s2 = this.peek(3);
              if (s2 === "---" && isEmpty(this.charAt(3))) {
                yield* __yieldStar(this.pushCount(3));
                this.indentValue = 0;
                this.indentNext = 0;
                return "doc";
              } else if (s2 === "..." && isEmpty(this.charAt(3))) {
                yield* __yieldStar(this.pushCount(3));
                return "stream";
              }
            }
            this.indentValue = yield* __yieldStar(this.pushSpaces(false));
            if (this.indentNext > this.indentValue && !isEmpty(this.charAt(1)))
              this.indentNext = this.indentValue;
            return yield* __yieldStar(this.parseBlockStart());
          }
          *parseBlockStart() {
            const [ch0, ch1] = this.peek(2);
            if (!ch1 && !this.atEnd)
              return this.setNext("block-start");
            if ((ch0 === "-" || ch0 === "?" || ch0 === ":") && isEmpty(ch1)) {
              const n3 = (yield* __yieldStar(this.pushCount(1))) + (yield* __yieldStar(this.pushSpaces(true)));
              this.indentNext = this.indentValue + 1;
              this.indentValue += n3;
              return yield* __yieldStar(this.parseBlockStart());
            }
            return "doc";
          }
          *parseDocument() {
            yield* __yieldStar(this.pushSpaces(true));
            const line = this.getLine();
            if (line === null)
              return this.setNext("doc");
            let n3 = yield* __yieldStar(this.pushIndicators());
            switch (line[n3]) {
              case "#":
                yield* __yieldStar(this.pushCount(line.length - n3));
              case void 0:
                yield* __yieldStar(this.pushNewline());
                return yield* __yieldStar(this.parseLineStart());
              case "{":
              case "[":
                yield* __yieldStar(this.pushCount(1));
                this.flowKey = false;
                this.flowLevel = 1;
                return "flow";
              case "}":
              case "]":
                yield* __yieldStar(this.pushCount(1));
                return "doc";
              case "*":
                yield* __yieldStar(this.pushUntil(isNotAnchorChar));
                return "doc";
              case '"':
              case "'":
                return yield* __yieldStar(this.parseQuotedScalar());
              case "|":
              case ">":
                n3 += yield* __yieldStar(this.parseBlockScalarHeader());
                n3 += yield* __yieldStar(this.pushSpaces(true));
                yield* __yieldStar(this.pushCount(line.length - n3));
                yield* __yieldStar(this.pushNewline());
                return yield* __yieldStar(this.parseBlockScalar());
              default:
                return yield* __yieldStar(this.parsePlainScalar());
            }
          }
          *parseFlowCollection() {
            let nl2, sp;
            let indent = -1;
            do {
              nl2 = yield* __yieldStar(this.pushNewline());
              if (nl2 > 0) {
                sp = yield* __yieldStar(this.pushSpaces(false));
                this.indentValue = indent = sp;
              } else {
                sp = 0;
              }
              sp += yield* __yieldStar(this.pushSpaces(true));
            } while (nl2 + sp > 0);
            const line = this.getLine();
            if (line === null)
              return this.setNext("flow");
            if (indent !== -1 && indent < this.indentNext && line[0] !== "#" || indent === 0 && (line.startsWith("---") || line.startsWith("...")) && isEmpty(line[3])) {
              const atFlowEndMarker = indent === this.indentNext - 1 && this.flowLevel === 1 && (line[0] === "]" || line[0] === "}");
              if (!atFlowEndMarker) {
                this.flowLevel = 0;
                yield cst.FLOW_END;
                return yield* __yieldStar(this.parseLineStart());
              }
            }
            let n3 = 0;
            while (line[n3] === ",") {
              n3 += yield* __yieldStar(this.pushCount(1));
              n3 += yield* __yieldStar(this.pushSpaces(true));
              this.flowKey = false;
            }
            n3 += yield* __yieldStar(this.pushIndicators());
            switch (line[n3]) {
              case void 0:
                return "flow";
              case "#":
                yield* __yieldStar(this.pushCount(line.length - n3));
                return "flow";
              case "{":
              case "[":
                yield* __yieldStar(this.pushCount(1));
                this.flowKey = false;
                this.flowLevel += 1;
                return "flow";
              case "}":
              case "]":
                yield* __yieldStar(this.pushCount(1));
                this.flowKey = true;
                this.flowLevel -= 1;
                return this.flowLevel ? "flow" : "doc";
              case "*":
                yield* __yieldStar(this.pushUntil(isNotAnchorChar));
                return "flow";
              case '"':
              case "'":
                this.flowKey = true;
                return yield* __yieldStar(this.parseQuotedScalar());
              case ":": {
                const next = this.charAt(1);
                if (this.flowKey || isEmpty(next) || next === ",") {
                  this.flowKey = false;
                  yield* __yieldStar(this.pushCount(1));
                  yield* __yieldStar(this.pushSpaces(true));
                  return "flow";
                }
              }
              default:
                this.flowKey = false;
                return yield* __yieldStar(this.parsePlainScalar());
            }
          }
          *parseQuotedScalar() {
            const quote2 = this.charAt(0);
            let end = this.buffer.indexOf(quote2, this.pos + 1);
            if (quote2 === "'") {
              while (end !== -1 && this.buffer[end + 1] === "'")
                end = this.buffer.indexOf("'", end + 2);
            } else {
              while (end !== -1) {
                let n3 = 0;
                while (this.buffer[end - 1 - n3] === "\\")
                  n3 += 1;
                if (n3 % 2 === 0)
                  break;
                end = this.buffer.indexOf('"', end + 1);
              }
            }
            const qb = this.buffer.substring(0, end);
            let nl2 = qb.indexOf("\n", this.pos);
            if (nl2 !== -1) {
              while (nl2 !== -1) {
                const cs = this.continueScalar(nl2 + 1);
                if (cs === -1)
                  break;
                nl2 = qb.indexOf("\n", cs);
              }
              if (nl2 !== -1) {
                end = nl2 - (qb[nl2 - 1] === "\r" ? 2 : 1);
              }
            }
            if (end === -1) {
              if (!this.atEnd)
                return this.setNext("quoted-scalar");
              end = this.buffer.length;
            }
            yield* __yieldStar(this.pushToIndex(end + 1, false));
            return this.flowLevel ? "flow" : "doc";
          }
          *parseBlockScalarHeader() {
            this.blockScalarIndent = -1;
            this.blockScalarKeep = false;
            let i = this.pos;
            while (true) {
              const ch = this.buffer[++i];
              if (ch === "+")
                this.blockScalarKeep = true;
              else if (ch > "0" && ch <= "9")
                this.blockScalarIndent = Number(ch) - 1;
              else if (ch !== "-")
                break;
            }
            return yield* __yieldStar(this.pushUntil((ch) => isEmpty(ch) || ch === "#"));
          }
          *parseBlockScalar() {
            let nl2 = this.pos - 1;
            let indent = 0;
            let ch;
            loop: for (let i = this.pos; ch = this.buffer[i]; ++i) {
              switch (ch) {
                case " ":
                  indent += 1;
                  break;
                case "\n":
                  nl2 = i;
                  indent = 0;
                  break;
                case "\r": {
                  const next = this.buffer[i + 1];
                  if (!next && !this.atEnd)
                    return this.setNext("block-scalar");
                  if (next === "\n")
                    break;
                }
                default:
                  break loop;
              }
            }
            if (!ch && !this.atEnd)
              return this.setNext("block-scalar");
            if (indent >= this.indentNext) {
              if (this.blockScalarIndent === -1)
                this.indentNext = indent;
              else
                this.indentNext += this.blockScalarIndent;
              do {
                const cs = this.continueScalar(nl2 + 1);
                if (cs === -1)
                  break;
                nl2 = this.buffer.indexOf("\n", cs);
              } while (nl2 !== -1);
              if (nl2 === -1) {
                if (!this.atEnd)
                  return this.setNext("block-scalar");
                nl2 = this.buffer.length;
              }
            }
            if (!this.blockScalarKeep) {
              do {
                let i = nl2 - 1;
                let ch2 = this.buffer[i];
                if (ch2 === "\r")
                  ch2 = this.buffer[--i];
                const lastChar = i;
                while (ch2 === " " || ch2 === "	")
                  ch2 = this.buffer[--i];
                if (ch2 === "\n" && i >= this.pos && i + 1 + indent > lastChar)
                  nl2 = i;
                else
                  break;
              } while (true);
            }
            yield cst.SCALAR;
            yield* __yieldStar(this.pushToIndex(nl2 + 1, true));
            return yield* __yieldStar(this.parseLineStart());
          }
          *parsePlainScalar() {
            const inFlow = this.flowLevel > 0;
            let end = this.pos - 1;
            let i = this.pos - 1;
            let ch;
            while (ch = this.buffer[++i]) {
              if (ch === ":") {
                const next = this.buffer[i + 1];
                if (isEmpty(next) || inFlow && next === ",")
                  break;
                end = i;
              } else if (isEmpty(ch)) {
                let next = this.buffer[i + 1];
                if (ch === "\r") {
                  if (next === "\n") {
                    i += 1;
                    ch = "\n";
                    next = this.buffer[i + 1];
                  } else
                    end = i;
                }
                if (next === "#" || inFlow && invalidFlowScalarChars.includes(next))
                  break;
                if (ch === "\n") {
                  const cs = this.continueScalar(i + 1);
                  if (cs === -1)
                    break;
                  i = Math.max(i, cs - 2);
                }
              } else {
                if (inFlow && invalidFlowScalarChars.includes(ch))
                  break;
                end = i;
              }
            }
            if (!ch && !this.atEnd)
              return this.setNext("plain-scalar");
            yield cst.SCALAR;
            yield* __yieldStar(this.pushToIndex(end + 1, true));
            return inFlow ? "flow" : "doc";
          }
          *pushCount(n3) {
            if (n3 > 0) {
              yield this.buffer.substr(this.pos, n3);
              this.pos += n3;
              return n3;
            }
            return 0;
          }
          *pushToIndex(i, allowEmpty) {
            const s2 = this.buffer.slice(this.pos, i);
            if (s2) {
              yield s2;
              this.pos += s2.length;
              return s2.length;
            } else if (allowEmpty)
              yield "";
            return 0;
          }
          *pushIndicators() {
            switch (this.charAt(0)) {
              case "!":
                return (yield* __yieldStar(this.pushTag())) + (yield* __yieldStar(this.pushSpaces(true))) + (yield* __yieldStar(this.pushIndicators()));
              case "&":
                return (yield* __yieldStar(this.pushUntil(isNotAnchorChar))) + (yield* __yieldStar(this.pushSpaces(true))) + (yield* __yieldStar(this.pushIndicators()));
              case "-":
              case "?":
              case ":": {
                const inFlow = this.flowLevel > 0;
                const ch1 = this.charAt(1);
                if (isEmpty(ch1) || inFlow && invalidFlowScalarChars.includes(ch1)) {
                  if (!inFlow)
                    this.indentNext = this.indentValue + 1;
                  else if (this.flowKey)
                    this.flowKey = false;
                  return (yield* __yieldStar(this.pushCount(1))) + (yield* __yieldStar(this.pushSpaces(true))) + (yield* __yieldStar(this.pushIndicators()));
                }
              }
            }
            return 0;
          }
          *pushTag() {
            if (this.charAt(1) === "<") {
              let i = this.pos + 2;
              let ch = this.buffer[i];
              while (!isEmpty(ch) && ch !== ">")
                ch = this.buffer[++i];
              return yield* __yieldStar(this.pushToIndex(ch === ">" ? i + 1 : i, false));
            } else {
              let i = this.pos + 1;
              let ch = this.buffer[i];
              while (ch) {
                if (tagChars.includes(ch))
                  ch = this.buffer[++i];
                else if (ch === "%" && hexDigits.includes(this.buffer[i + 1]) && hexDigits.includes(this.buffer[i + 2])) {
                  ch = this.buffer[i += 3];
                } else
                  break;
              }
              return yield* __yieldStar(this.pushToIndex(i, false));
            }
          }
          *pushNewline() {
            const ch = this.buffer[this.pos];
            if (ch === "\n")
              return yield* __yieldStar(this.pushCount(1));
            else if (ch === "\r" && this.charAt(1) === "\n")
              return yield* __yieldStar(this.pushCount(2));
            else
              return 0;
          }
          *pushSpaces(allowTabs) {
            let i = this.pos - 1;
            let ch;
            do {
              ch = this.buffer[++i];
            } while (ch === " " || allowTabs && ch === "	");
            const n3 = i - this.pos;
            if (n3 > 0) {
              yield this.buffer.substr(this.pos, n3);
              this.pos = i;
            }
            return n3;
          }
          *pushUntil(test) {
            let i = this.pos;
            let ch = this.buffer[i];
            while (!test(ch))
              ch = this.buffer[++i];
            return yield* __yieldStar(this.pushToIndex(i, false));
          }
        };
        exports2.Lexer = Lexer;
      }
    });
    var require_line_counter = __commonJS2({
      "node_modules/yaml/dist/parse/line-counter.js"(exports2) {
        "use strict";
        var LineCounter = class {
          static {
            __name(this, "LineCounter");
          }
          constructor() {
            this.lineStarts = [];
            this.addNewLine = (offset) => this.lineStarts.push(offset);
            this.linePos = (offset) => {
              let low = 0;
              let high = this.lineStarts.length;
              while (low < high) {
                const mid = low + high >> 1;
                if (this.lineStarts[mid] < offset)
                  low = mid + 1;
                else
                  high = mid;
              }
              if (this.lineStarts[low] === offset)
                return { line: low + 1, col: 1 };
              if (low === 0)
                return { line: 0, col: offset };
              const start = this.lineStarts[low - 1];
              return { line: low, col: offset - start + 1 };
            };
          }
        };
        exports2.LineCounter = LineCounter;
      }
    });
    var require_parser = __commonJS2({
      "node_modules/yaml/dist/parse/parser.js"(exports2) {
        "use strict";
        var cst = require_cst();
        var lexer = require_lexer();
        function includesToken(list, type) {
          for (let i = 0; i < list.length; ++i)
            if (list[i].type === type)
              return true;
          return false;
        }
        __name(includesToken, "includesToken");
        function findNonEmptyIndex(list) {
          for (let i = 0; i < list.length; ++i) {
            switch (list[i].type) {
              case "space":
              case "comment":
              case "newline":
                break;
              default:
                return i;
            }
          }
          return -1;
        }
        __name(findNonEmptyIndex, "findNonEmptyIndex");
        function isFlowToken(token) {
          switch (token == null ? void 0 : token.type) {
            case "alias":
            case "scalar":
            case "single-quoted-scalar":
            case "double-quoted-scalar":
            case "flow-collection":
              return true;
            default:
              return false;
          }
        }
        __name(isFlowToken, "isFlowToken");
        function getPrevProps(parent) {
          var _a2;
          switch (parent.type) {
            case "document":
              return parent.start;
            case "block-map": {
              const it = parent.items[parent.items.length - 1];
              return (_a2 = it.sep) != null ? _a2 : it.start;
            }
            case "block-seq":
              return parent.items[parent.items.length - 1].start;
            default:
              return [];
          }
        }
        __name(getPrevProps, "getPrevProps");
        function getFirstKeyStartProps(prev) {
          var _a2;
          if (prev.length === 0)
            return [];
          let i = prev.length;
          loop: while (--i >= 0) {
            switch (prev[i].type) {
              case "doc-start":
              case "explicit-key-ind":
              case "map-value-ind":
              case "seq-item-ind":
              case "newline":
                break loop;
            }
          }
          while (((_a2 = prev[++i]) == null ? void 0 : _a2.type) === "space") {
          }
          return prev.splice(i, prev.length);
        }
        __name(getFirstKeyStartProps, "getFirstKeyStartProps");
        function fixFlowSeqItems(fc) {
          if (fc.start.type === "flow-seq-start") {
            for (const it of fc.items) {
              if (it.sep && !it.value && !includesToken(it.start, "explicit-key-ind") && !includesToken(it.sep, "map-value-ind")) {
                if (it.key)
                  it.value = it.key;
                delete it.key;
                if (isFlowToken(it.value)) {
                  if (it.value.end)
                    Array.prototype.push.apply(it.value.end, it.sep);
                  else
                    it.value.end = it.sep;
                } else
                  Array.prototype.push.apply(it.start, it.sep);
                delete it.sep;
              }
            }
          }
        }
        __name(fixFlowSeqItems, "fixFlowSeqItems");
        var Parser = class {
          static {
            __name(this, "Parser");
          }
          /**
           * @param onNewLine - If defined, called separately with the start position of
           *   each new line (in `parse()`, including the start of input).
           */
          constructor(onNewLine) {
            this.atNewLine = true;
            this.atScalar = false;
            this.indent = 0;
            this.offset = 0;
            this.onKeyLine = false;
            this.stack = [];
            this.source = "";
            this.type = "";
            this.lexer = new lexer.Lexer();
            this.onNewLine = onNewLine;
          }
          /**
           * Parse `source` as a YAML stream.
           * If `incomplete`, a part of the last line may be left as a buffer for the next call.
           *
           * Errors are not thrown, but yielded as `{ type: 'error', message }` tokens.
           *
           * @returns A generator of tokens representing each directive, document, and other structure.
           */
          *parse(source, incomplete = false) {
            if (this.onNewLine && this.offset === 0)
              this.onNewLine(0);
            for (const lexeme of this.lexer.lex(source, incomplete))
              yield* __yieldStar(this.next(lexeme));
            if (!incomplete)
              yield* __yieldStar(this.end());
          }
          /**
           * Advance the parser by the `source` of one lexical token.
           */
          *next(source) {
            this.source = source;
            if (process.env.LOG_TOKENS)
              console.log("|", cst.prettyToken(source));
            if (this.atScalar) {
              this.atScalar = false;
              yield* __yieldStar(this.step());
              this.offset += source.length;
              return;
            }
            const type = cst.tokenType(source);
            if (!type) {
              const message = `Not a YAML token: ${source}`;
              yield* __yieldStar(this.pop({ type: "error", offset: this.offset, message, source }));
              this.offset += source.length;
            } else if (type === "scalar") {
              this.atNewLine = false;
              this.atScalar = true;
              this.type = "scalar";
            } else {
              this.type = type;
              yield* __yieldStar(this.step());
              switch (type) {
                case "newline":
                  this.atNewLine = true;
                  this.indent = 0;
                  if (this.onNewLine)
                    this.onNewLine(this.offset + source.length);
                  break;
                case "space":
                  if (this.atNewLine && source[0] === " ")
                    this.indent += source.length;
                  break;
                case "explicit-key-ind":
                case "map-value-ind":
                case "seq-item-ind":
                  if (this.atNewLine)
                    this.indent += source.length;
                  break;
                case "doc-mode":
                case "flow-error-end":
                  return;
                default:
                  this.atNewLine = false;
              }
              this.offset += source.length;
            }
          }
          /** Call at end of input to push out any remaining constructions */
          *end() {
            while (this.stack.length > 0)
              yield* __yieldStar(this.pop());
          }
          get sourceToken() {
            const st2 = {
              type: this.type,
              offset: this.offset,
              indent: this.indent,
              source: this.source
            };
            return st2;
          }
          *step() {
            const top = this.peek(1);
            if (this.type === "doc-end" && (!top || top.type !== "doc-end")) {
              while (this.stack.length > 0)
                yield* __yieldStar(this.pop());
              this.stack.push({
                type: "doc-end",
                offset: this.offset,
                source: this.source
              });
              return;
            }
            if (!top)
              return yield* __yieldStar(this.stream());
            switch (top.type) {
              case "document":
                return yield* __yieldStar(this.document(top));
              case "alias":
              case "scalar":
              case "single-quoted-scalar":
              case "double-quoted-scalar":
                return yield* __yieldStar(this.scalar(top));
              case "block-scalar":
                return yield* __yieldStar(this.blockScalar(top));
              case "block-map":
                return yield* __yieldStar(this.blockMap(top));
              case "block-seq":
                return yield* __yieldStar(this.blockSequence(top));
              case "flow-collection":
                return yield* __yieldStar(this.flowCollection(top));
              case "doc-end":
                return yield* __yieldStar(this.documentEnd(top));
            }
            yield* __yieldStar(this.pop());
          }
          peek(n3) {
            return this.stack[this.stack.length - n3];
          }
          *pop(error) {
            const token = error != null ? error : this.stack.pop();
            if (!token) {
              const message = "Tried to pop an empty stack";
              yield { type: "error", offset: this.offset, source: "", message };
            } else if (this.stack.length === 0) {
              yield token;
            } else {
              const top = this.peek(1);
              if (token.type === "block-scalar") {
                token.indent = "indent" in top ? top.indent : 0;
              } else if (token.type === "flow-collection" && top.type === "document") {
                token.indent = 0;
              }
              if (token.type === "flow-collection")
                fixFlowSeqItems(token);
              switch (top.type) {
                case "document":
                  top.value = token;
                  break;
                case "block-scalar":
                  top.props.push(token);
                  break;
                case "block-map": {
                  const it = top.items[top.items.length - 1];
                  if (it.value) {
                    top.items.push({ start: [], key: token, sep: [] });
                    this.onKeyLine = true;
                    return;
                  } else if (it.sep) {
                    it.value = token;
                  } else {
                    Object.assign(it, { key: token, sep: [] });
                    this.onKeyLine = !includesToken(it.start, "explicit-key-ind");
                    return;
                  }
                  break;
                }
                case "block-seq": {
                  const it = top.items[top.items.length - 1];
                  if (it.value)
                    top.items.push({ start: [], value: token });
                  else
                    it.value = token;
                  break;
                }
                case "flow-collection": {
                  const it = top.items[top.items.length - 1];
                  if (!it || it.value)
                    top.items.push({ start: [], key: token, sep: [] });
                  else if (it.sep)
                    it.value = token;
                  else
                    Object.assign(it, { key: token, sep: [] });
                  return;
                }
                default:
                  yield* __yieldStar(this.pop());
                  yield* __yieldStar(this.pop(token));
              }
              if ((top.type === "document" || top.type === "block-map" || top.type === "block-seq") && (token.type === "block-map" || token.type === "block-seq")) {
                const last = token.items[token.items.length - 1];
                if (last && !last.sep && !last.value && last.start.length > 0 && findNonEmptyIndex(last.start) === -1 && (token.indent === 0 || last.start.every((st2) => st2.type !== "comment" || st2.indent < token.indent))) {
                  if (top.type === "document")
                    top.end = last.start;
                  else
                    top.items.push({ start: last.start });
                  token.items.splice(-1, 1);
                }
              }
            }
          }
          *stream() {
            switch (this.type) {
              case "directive-line":
                yield { type: "directive", offset: this.offset, source: this.source };
                return;
              case "byte-order-mark":
              case "space":
              case "comment":
              case "newline":
                yield this.sourceToken;
                return;
              case "doc-mode":
              case "doc-start": {
                const doc = {
                  type: "document",
                  offset: this.offset,
                  start: []
                };
                if (this.type === "doc-start")
                  doc.start.push(this.sourceToken);
                this.stack.push(doc);
                return;
              }
            }
            yield {
              type: "error",
              offset: this.offset,
              message: `Unexpected ${this.type} token in YAML stream`,
              source: this.source
            };
          }
          *document(doc) {
            if (doc.value)
              return yield* __yieldStar(this.lineEnd(doc));
            switch (this.type) {
              case "doc-start": {
                if (findNonEmptyIndex(doc.start) !== -1) {
                  yield* __yieldStar(this.pop());
                  yield* __yieldStar(this.step());
                } else
                  doc.start.push(this.sourceToken);
                return;
              }
              case "anchor":
              case "tag":
              case "space":
              case "comment":
              case "newline":
                doc.start.push(this.sourceToken);
                return;
            }
            const bv = this.startBlockValue(doc);
            if (bv)
              this.stack.push(bv);
            else {
              yield {
                type: "error",
                offset: this.offset,
                message: `Unexpected ${this.type} token in YAML document`,
                source: this.source
              };
            }
          }
          *scalar(scalar) {
            if (this.type === "map-value-ind") {
              const prev = getPrevProps(this.peek(2));
              const start = getFirstKeyStartProps(prev);
              let sep;
              if (scalar.end) {
                sep = scalar.end;
                sep.push(this.sourceToken);
                delete scalar.end;
              } else
                sep = [this.sourceToken];
              const map = {
                type: "block-map",
                offset: scalar.offset,
                indent: scalar.indent,
                items: [{ start, key: scalar, sep }]
              };
              this.onKeyLine = true;
              this.stack[this.stack.length - 1] = map;
            } else
              yield* __yieldStar(this.lineEnd(scalar));
          }
          *blockScalar(scalar) {
            switch (this.type) {
              case "space":
              case "comment":
              case "newline":
                scalar.props.push(this.sourceToken);
                return;
              case "scalar":
                scalar.source = this.source;
                this.atNewLine = true;
                this.indent = 0;
                if (this.onNewLine) {
                  let nl2 = this.source.indexOf("\n") + 1;
                  while (nl2 !== 0) {
                    this.onNewLine(this.offset + nl2);
                    nl2 = this.source.indexOf("\n", nl2) + 1;
                  }
                }
                yield* __yieldStar(this.pop());
                break;
              default:
                yield* __yieldStar(this.pop());
                yield* __yieldStar(this.step());
            }
          }
          *blockMap(map) {
            var _a2;
            const it = map.items[map.items.length - 1];
            switch (this.type) {
              case "newline":
                this.onKeyLine = false;
                if (it.value) {
                  const end = "end" in it.value ? it.value.end : void 0;
                  const last = Array.isArray(end) ? end[end.length - 1] : void 0;
                  if ((last == null ? void 0 : last.type) === "comment")
                    end == null ? void 0 : end.push(this.sourceToken);
                  else
                    map.items.push({ start: [this.sourceToken] });
                } else if (it.sep) {
                  it.sep.push(this.sourceToken);
                } else {
                  it.start.push(this.sourceToken);
                }
                return;
              case "space":
              case "comment":
                if (it.value) {
                  map.items.push({ start: [this.sourceToken] });
                } else if (it.sep) {
                  it.sep.push(this.sourceToken);
                } else {
                  if (this.atIndentedComment(it.start, map.indent)) {
                    const prev = map.items[map.items.length - 2];
                    const end = (_a2 = prev == null ? void 0 : prev.value) == null ? void 0 : _a2.end;
                    if (Array.isArray(end)) {
                      Array.prototype.push.apply(end, it.start);
                      end.push(this.sourceToken);
                      map.items.pop();
                      return;
                    }
                  }
                  it.start.push(this.sourceToken);
                }
                return;
            }
            if (this.indent >= map.indent) {
              const atNextItem = !this.onKeyLine && this.indent === map.indent && it.sep && this.type !== "seq-item-ind";
              let start = [];
              if (atNextItem && it.sep && !it.value) {
                const nl2 = [];
                for (let i = 0; i < it.sep.length; ++i) {
                  const st2 = it.sep[i];
                  switch (st2.type) {
                    case "newline":
                      nl2.push(i);
                      break;
                    case "space":
                      break;
                    case "comment":
                      if (st2.indent > map.indent)
                        nl2.length = 0;
                      break;
                    default:
                      nl2.length = 0;
                  }
                }
                if (nl2.length >= 2)
                  start = it.sep.splice(nl2[1]);
              }
              switch (this.type) {
                case "anchor":
                case "tag":
                  if (atNextItem || it.value) {
                    start.push(this.sourceToken);
                    map.items.push({ start });
                    this.onKeyLine = true;
                  } else if (it.sep) {
                    it.sep.push(this.sourceToken);
                  } else {
                    it.start.push(this.sourceToken);
                  }
                  return;
                case "explicit-key-ind":
                  if (!it.sep && !includesToken(it.start, "explicit-key-ind")) {
                    it.start.push(this.sourceToken);
                  } else if (atNextItem || it.value) {
                    start.push(this.sourceToken);
                    map.items.push({ start });
                  } else {
                    this.stack.push({
                      type: "block-map",
                      offset: this.offset,
                      indent: this.indent,
                      items: [{ start: [this.sourceToken] }]
                    });
                  }
                  this.onKeyLine = true;
                  return;
                case "map-value-ind":
                  if (includesToken(it.start, "explicit-key-ind")) {
                    if (!it.sep) {
                      if (includesToken(it.start, "newline")) {
                        Object.assign(it, { key: null, sep: [this.sourceToken] });
                      } else {
                        const start2 = getFirstKeyStartProps(it.start);
                        this.stack.push({
                          type: "block-map",
                          offset: this.offset,
                          indent: this.indent,
                          items: [{ start: start2, key: null, sep: [this.sourceToken] }]
                        });
                      }
                    } else if (it.value) {
                      map.items.push({ start: [], key: null, sep: [this.sourceToken] });
                    } else if (includesToken(it.sep, "map-value-ind")) {
                      this.stack.push({
                        type: "block-map",
                        offset: this.offset,
                        indent: this.indent,
                        items: [{ start, key: null, sep: [this.sourceToken] }]
                      });
                    } else if (isFlowToken(it.key) && !includesToken(it.sep, "newline")) {
                      const start2 = getFirstKeyStartProps(it.start);
                      const key = it.key;
                      const sep = it.sep;
                      sep.push(this.sourceToken);
                      delete it.key, delete it.sep;
                      this.stack.push({
                        type: "block-map",
                        offset: this.offset,
                        indent: this.indent,
                        items: [{ start: start2, key, sep }]
                      });
                    } else if (start.length > 0) {
                      it.sep = it.sep.concat(start, this.sourceToken);
                    } else {
                      it.sep.push(this.sourceToken);
                    }
                  } else {
                    if (!it.sep) {
                      Object.assign(it, { key: null, sep: [this.sourceToken] });
                    } else if (it.value || atNextItem) {
                      map.items.push({ start, key: null, sep: [this.sourceToken] });
                    } else if (includesToken(it.sep, "map-value-ind")) {
                      this.stack.push({
                        type: "block-map",
                        offset: this.offset,
                        indent: this.indent,
                        items: [{ start: [], key: null, sep: [this.sourceToken] }]
                      });
                    } else {
                      it.sep.push(this.sourceToken);
                    }
                  }
                  this.onKeyLine = true;
                  return;
                case "alias":
                case "scalar":
                case "single-quoted-scalar":
                case "double-quoted-scalar": {
                  const fs6 = this.flowScalar(this.type);
                  if (atNextItem || it.value) {
                    map.items.push({ start, key: fs6, sep: [] });
                    this.onKeyLine = true;
                  } else if (it.sep) {
                    this.stack.push(fs6);
                  } else {
                    Object.assign(it, { key: fs6, sep: [] });
                    this.onKeyLine = true;
                  }
                  return;
                }
                default: {
                  const bv = this.startBlockValue(map);
                  if (bv) {
                    if (atNextItem && bv.type !== "block-seq" && includesToken(it.start, "explicit-key-ind")) {
                      map.items.push({ start });
                    }
                    this.stack.push(bv);
                    return;
                  }
                }
              }
            }
            yield* __yieldStar(this.pop());
            yield* __yieldStar(this.step());
          }
          *blockSequence(seq) {
            var _a2;
            const it = seq.items[seq.items.length - 1];
            switch (this.type) {
              case "newline":
                if (it.value) {
                  const end = "end" in it.value ? it.value.end : void 0;
                  const last = Array.isArray(end) ? end[end.length - 1] : void 0;
                  if ((last == null ? void 0 : last.type) === "comment")
                    end == null ? void 0 : end.push(this.sourceToken);
                  else
                    seq.items.push({ start: [this.sourceToken] });
                } else
                  it.start.push(this.sourceToken);
                return;
              case "space":
              case "comment":
                if (it.value)
                  seq.items.push({ start: [this.sourceToken] });
                else {
                  if (this.atIndentedComment(it.start, seq.indent)) {
                    const prev = seq.items[seq.items.length - 2];
                    const end = (_a2 = prev == null ? void 0 : prev.value) == null ? void 0 : _a2.end;
                    if (Array.isArray(end)) {
                      Array.prototype.push.apply(end, it.start);
                      end.push(this.sourceToken);
                      seq.items.pop();
                      return;
                    }
                  }
                  it.start.push(this.sourceToken);
                }
                return;
              case "anchor":
              case "tag":
                if (it.value || this.indent <= seq.indent)
                  break;
                it.start.push(this.sourceToken);
                return;
              case "seq-item-ind":
                if (this.indent !== seq.indent)
                  break;
                if (it.value || includesToken(it.start, "seq-item-ind"))
                  seq.items.push({ start: [this.sourceToken] });
                else
                  it.start.push(this.sourceToken);
                return;
            }
            if (this.indent > seq.indent) {
              const bv = this.startBlockValue(seq);
              if (bv) {
                this.stack.push(bv);
                return;
              }
            }
            yield* __yieldStar(this.pop());
            yield* __yieldStar(this.step());
          }
          *flowCollection(fc) {
            const it = fc.items[fc.items.length - 1];
            if (this.type === "flow-error-end") {
              let top;
              do {
                yield* __yieldStar(this.pop());
                top = this.peek(1);
              } while (top && top.type === "flow-collection");
            } else if (fc.end.length === 0) {
              switch (this.type) {
                case "comma":
                case "explicit-key-ind":
                  if (!it || it.sep)
                    fc.items.push({ start: [this.sourceToken] });
                  else
                    it.start.push(this.sourceToken);
                  return;
                case "map-value-ind":
                  if (!it || it.value)
                    fc.items.push({ start: [], key: null, sep: [this.sourceToken] });
                  else if (it.sep)
                    it.sep.push(this.sourceToken);
                  else
                    Object.assign(it, { key: null, sep: [this.sourceToken] });
                  return;
                case "space":
                case "comment":
                case "newline":
                case "anchor":
                case "tag":
                  if (!it || it.value)
                    fc.items.push({ start: [this.sourceToken] });
                  else if (it.sep)
                    it.sep.push(this.sourceToken);
                  else
                    it.start.push(this.sourceToken);
                  return;
                case "alias":
                case "scalar":
                case "single-quoted-scalar":
                case "double-quoted-scalar": {
                  const fs6 = this.flowScalar(this.type);
                  if (!it || it.value)
                    fc.items.push({ start: [], key: fs6, sep: [] });
                  else if (it.sep)
                    this.stack.push(fs6);
                  else
                    Object.assign(it, { key: fs6, sep: [] });
                  return;
                }
                case "flow-map-end":
                case "flow-seq-end":
                  fc.end.push(this.sourceToken);
                  return;
              }
              const bv = this.startBlockValue(fc);
              if (bv)
                this.stack.push(bv);
              else {
                yield* __yieldStar(this.pop());
                yield* __yieldStar(this.step());
              }
            } else {
              const parent = this.peek(2);
              if (parent.type === "block-map" && (this.type === "map-value-ind" && parent.indent === fc.indent || this.type === "newline" && !parent.items[parent.items.length - 1].sep)) {
                yield* __yieldStar(this.pop());
                yield* __yieldStar(this.step());
              } else if (this.type === "map-value-ind" && parent.type !== "flow-collection") {
                const prev = getPrevProps(parent);
                const start = getFirstKeyStartProps(prev);
                fixFlowSeqItems(fc);
                const sep = fc.end.splice(1, fc.end.length);
                sep.push(this.sourceToken);
                const map = {
                  type: "block-map",
                  offset: fc.offset,
                  indent: fc.indent,
                  items: [{ start, key: fc, sep }]
                };
                this.onKeyLine = true;
                this.stack[this.stack.length - 1] = map;
              } else {
                yield* __yieldStar(this.lineEnd(fc));
              }
            }
          }
          flowScalar(type) {
            if (this.onNewLine) {
              let nl2 = this.source.indexOf("\n") + 1;
              while (nl2 !== 0) {
                this.onNewLine(this.offset + nl2);
                nl2 = this.source.indexOf("\n", nl2) + 1;
              }
            }
            return {
              type,
              offset: this.offset,
              indent: this.indent,
              source: this.source
            };
          }
          startBlockValue(parent) {
            switch (this.type) {
              case "alias":
              case "scalar":
              case "single-quoted-scalar":
              case "double-quoted-scalar":
                return this.flowScalar(this.type);
              case "block-scalar-header":
                return {
                  type: "block-scalar",
                  offset: this.offset,
                  indent: this.indent,
                  props: [this.sourceToken],
                  source: ""
                };
              case "flow-map-start":
              case "flow-seq-start":
                return {
                  type: "flow-collection",
                  offset: this.offset,
                  indent: this.indent,
                  start: this.sourceToken,
                  items: [],
                  end: []
                };
              case "seq-item-ind":
                return {
                  type: "block-seq",
                  offset: this.offset,
                  indent: this.indent,
                  items: [{ start: [this.sourceToken] }]
                };
              case "explicit-key-ind": {
                this.onKeyLine = true;
                const prev = getPrevProps(parent);
                const start = getFirstKeyStartProps(prev);
                start.push(this.sourceToken);
                return {
                  type: "block-map",
                  offset: this.offset,
                  indent: this.indent,
                  items: [{ start }]
                };
              }
              case "map-value-ind": {
                this.onKeyLine = true;
                const prev = getPrevProps(parent);
                const start = getFirstKeyStartProps(prev);
                return {
                  type: "block-map",
                  offset: this.offset,
                  indent: this.indent,
                  items: [{ start, key: null, sep: [this.sourceToken] }]
                };
              }
            }
            return null;
          }
          atIndentedComment(start, indent) {
            if (this.type !== "comment")
              return false;
            if (this.indent <= indent)
              return false;
            return start.every((st2) => st2.type === "newline" || st2.type === "space");
          }
          *documentEnd(docEnd) {
            if (this.type !== "doc-mode") {
              if (docEnd.end)
                docEnd.end.push(this.sourceToken);
              else
                docEnd.end = [this.sourceToken];
              if (this.type === "newline")
                yield* __yieldStar(this.pop());
            }
          }
          *lineEnd(token) {
            switch (this.type) {
              case "comma":
              case "doc-start":
              case "doc-end":
              case "flow-seq-end":
              case "flow-map-end":
              case "map-value-ind":
                yield* __yieldStar(this.pop());
                yield* __yieldStar(this.step());
                break;
              case "newline":
                this.onKeyLine = false;
              case "space":
              case "comment":
              default:
                if (token.end)
                  token.end.push(this.sourceToken);
                else
                  token.end = [this.sourceToken];
                if (this.type === "newline")
                  yield* __yieldStar(this.pop());
            }
          }
        };
        exports2.Parser = Parser;
      }
    });
    var require_public_api = __commonJS2({
      "node_modules/yaml/dist/public-api.js"(exports2) {
        "use strict";
        var composer = require_composer();
        var Document = require_Document();
        var errors = require_errors4();
        var log = require_log();
        var lineCounter = require_line_counter();
        var parser = require_parser();
        function parseOptions(options) {
          const prettyErrors = options.prettyErrors !== false;
          const lineCounter$1 = options.lineCounter || prettyErrors && new lineCounter.LineCounter() || null;
          return { lineCounter: lineCounter$1, prettyErrors };
        }
        __name(parseOptions, "parseOptions");
        function parseAllDocuments(source, options = {}) {
          const { lineCounter: lineCounter2, prettyErrors } = parseOptions(options);
          const parser$1 = new parser.Parser(lineCounter2 == null ? void 0 : lineCounter2.addNewLine);
          const composer$1 = new composer.Composer(options);
          const docs = Array.from(composer$1.compose(parser$1.parse(source)));
          if (prettyErrors && lineCounter2)
            for (const doc of docs) {
              doc.errors.forEach(errors.prettifyError(source, lineCounter2));
              doc.warnings.forEach(errors.prettifyError(source, lineCounter2));
            }
          if (docs.length > 0)
            return docs;
          return Object.assign([], { empty: true }, composer$1.streamInfo());
        }
        __name(parseAllDocuments, "parseAllDocuments");
        function parseDocument(source, options = {}) {
          const { lineCounter: lineCounter2, prettyErrors } = parseOptions(options);
          const parser$1 = new parser.Parser(lineCounter2 == null ? void 0 : lineCounter2.addNewLine);
          const composer$1 = new composer.Composer(options);
          let doc = null;
          for (const _doc of composer$1.compose(parser$1.parse(source), true, source.length)) {
            if (!doc)
              doc = _doc;
            else if (doc.options.logLevel !== "silent") {
              doc.errors.push(new errors.YAMLParseError(_doc.range.slice(0, 2), "MULTIPLE_DOCS", "Source contains multiple documents; please use YAML.parseAllDocuments()"));
              break;
            }
          }
          if (prettyErrors && lineCounter2) {
            doc.errors.forEach(errors.prettifyError(source, lineCounter2));
            doc.warnings.forEach(errors.prettifyError(source, lineCounter2));
          }
          return doc;
        }
        __name(parseDocument, "parseDocument");
        function parse22(src, reviver, options) {
          let _reviver = void 0;
          if (typeof reviver === "function") {
            _reviver = reviver;
          } else if (options === void 0 && reviver && typeof reviver === "object") {
            options = reviver;
          }
          const doc = parseDocument(src, options);
          if (!doc)
            return null;
          doc.warnings.forEach((warning) => log.warn(doc.options.logLevel, warning));
          if (doc.errors.length > 0) {
            if (doc.options.logLevel !== "silent")
              throw doc.errors[0];
            else
              doc.errors = [];
          }
          return doc.toJS(Object.assign({ reviver: _reviver }, options));
        }
        __name(parse22, "parse2");
        function stringify2(value, replacer, options) {
          var _a2;
          let _replacer = null;
          if (typeof replacer === "function" || Array.isArray(replacer)) {
            _replacer = replacer;
          } else if (options === void 0 && replacer) {
            options = replacer;
          }
          if (typeof options === "string")
            options = options.length;
          if (typeof options === "number") {
            const indent = Math.round(options);
            options = indent < 1 ? void 0 : indent > 8 ? { indent: 8 } : { indent };
          }
          if (value === void 0) {
            const { keepUndefined } = (_a2 = options != null ? options : replacer) != null ? _a2 : {};
            if (!keepUndefined)
              return void 0;
          }
          return new Document.Document(value, _replacer, options).toString(options);
        }
        __name(stringify2, "stringify");
        exports2.parse = parse22;
        exports2.parseAllDocuments = parseAllDocuments;
        exports2.parseDocument = parseDocument;
        exports2.stringify = stringify2;
      }
    });
    var require_dist = __commonJS2({
      "node_modules/yaml/dist/index.js"(exports2) {
        "use strict";
        var composer = require_composer();
        var Document = require_Document();
        var Schema = require_Schema();
        var errors = require_errors4();
        var Alias = require_Alias();
        var identity2 = require_identity();
        var Pair = require_Pair();
        var Scalar = require_Scalar();
        var YAMLMap = require_YAMLMap();
        var YAMLSeq = require_YAMLSeq();
        var cst = require_cst();
        var lexer = require_lexer();
        var lineCounter = require_line_counter();
        var parser = require_parser();
        var publicApi = require_public_api();
        var visit = require_visit();
        exports2.Composer = composer.Composer;
        exports2.Document = Document.Document;
        exports2.Schema = Schema.Schema;
        exports2.YAMLError = errors.YAMLError;
        exports2.YAMLParseError = errors.YAMLParseError;
        exports2.YAMLWarning = errors.YAMLWarning;
        exports2.Alias = Alias.Alias;
        exports2.isAlias = identity2.isAlias;
        exports2.isCollection = identity2.isCollection;
        exports2.isDocument = identity2.isDocument;
        exports2.isMap = identity2.isMap;
        exports2.isNode = identity2.isNode;
        exports2.isPair = identity2.isPair;
        exports2.isScalar = identity2.isScalar;
        exports2.isSeq = identity2.isSeq;
        exports2.Pair = Pair.Pair;
        exports2.Scalar = Scalar.Scalar;
        exports2.YAMLMap = YAMLMap.YAMLMap;
        exports2.YAMLSeq = YAMLSeq.YAMLSeq;
        exports2.CST = cst;
        exports2.Lexer = lexer.Lexer;
        exports2.LineCounter = lineCounter.LineCounter;
        exports2.Parser = parser.Parser;
        exports2.parse = publicApi.parse;
        exports2.parseAllDocuments = publicApi.parseAllDocuments;
        exports2.parseDocument = publicApi.parseDocument;
        exports2.stringify = publicApi.stringify;
        exports2.visit = visit.visit;
        exports2.visitAsync = visit.visitAsync;
      }
    });
    var require_universalify = __commonJS2({
      "node_modules/universalify/index.js"(exports2) {
        "use strict";
        exports2.fromCallback = function(fn) {
          return Object.defineProperty(function(...args) {
            if (typeof args[args.length - 1] === "function") fn.apply(this, args);
            else {
              return new Promise((resolve, reject) => {
                fn.call(
                  this,
                  ...args,
                  (err, res) => err != null ? reject(err) : resolve(res)
                );
              });
            }
          }, "name", { value: fn.name });
        };
        exports2.fromPromise = function(fn) {
          return Object.defineProperty(function(...args) {
            const cb = args[args.length - 1];
            if (typeof cb !== "function") return fn.apply(this, args);
            else fn.apply(this, args.slice(0, -1)).then((r) => cb(null, r), cb);
          }, "name", { value: fn.name });
        };
      }
    });
    var require_polyfills = __commonJS2({
      "node_modules/graceful-fs/polyfills.js"(exports2, module2) {
        "use strict";
        var constants = __require("constants");
        var origCwd = process.cwd;
        var cwd = null;
        var platform = process.env.GRACEFUL_FS_PLATFORM || process.platform;
        process.cwd = function() {
          if (!cwd)
            cwd = origCwd.call(process);
          return cwd;
        };
        try {
          process.cwd();
        } catch (er) {
        }
        if (typeof process.chdir === "function") {
          chdir = process.chdir;
          process.chdir = function(d2) {
            cwd = null;
            chdir.call(process, d2);
          };
          if (Object.setPrototypeOf) Object.setPrototypeOf(process.chdir, chdir);
        }
        var chdir;
        module2.exports = patch;
        function patch(fs6) {
          if (constants.hasOwnProperty("O_SYMLINK") && process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)) {
            patchLchmod(fs6);
          }
          if (!fs6.lutimes) {
            patchLutimes(fs6);
          }
          fs6.chown = chownFix(fs6.chown);
          fs6.fchown = chownFix(fs6.fchown);
          fs6.lchown = chownFix(fs6.lchown);
          fs6.chmod = chmodFix(fs6.chmod);
          fs6.fchmod = chmodFix(fs6.fchmod);
          fs6.lchmod = chmodFix(fs6.lchmod);
          fs6.chownSync = chownFixSync(fs6.chownSync);
          fs6.fchownSync = chownFixSync(fs6.fchownSync);
          fs6.lchownSync = chownFixSync(fs6.lchownSync);
          fs6.chmodSync = chmodFixSync(fs6.chmodSync);
          fs6.fchmodSync = chmodFixSync(fs6.fchmodSync);
          fs6.lchmodSync = chmodFixSync(fs6.lchmodSync);
          fs6.stat = statFix(fs6.stat);
          fs6.fstat = statFix(fs6.fstat);
          fs6.lstat = statFix(fs6.lstat);
          fs6.statSync = statFixSync(fs6.statSync);
          fs6.fstatSync = statFixSync(fs6.fstatSync);
          fs6.lstatSync = statFixSync(fs6.lstatSync);
          if (fs6.chmod && !fs6.lchmod) {
            fs6.lchmod = function(path22, mode, cb) {
              if (cb) process.nextTick(cb);
            };
            fs6.lchmodSync = function() {
            };
          }
          if (fs6.chown && !fs6.lchown) {
            fs6.lchown = function(path22, uid, gid, cb) {
              if (cb) process.nextTick(cb);
            };
            fs6.lchownSync = function() {
            };
          }
          if (platform === "win32") {
            fs6.rename = typeof fs6.rename !== "function" ? fs6.rename : function(fs$rename) {
              function rename(from, to, cb) {
                var start = Date.now();
                var backoff = 0;
                fs$rename(from, to, /* @__PURE__ */ __name(function CB(er) {
                  if (er && (er.code === "EACCES" || er.code === "EPERM") && Date.now() - start < 6e4) {
                    setTimeout(function() {
                      fs6.stat(to, function(stater, st2) {
                        if (stater && stater.code === "ENOENT")
                          fs$rename(from, to, CB);
                        else
                          cb(er);
                      });
                    }, backoff);
                    if (backoff < 100)
                      backoff += 10;
                    return;
                  }
                  if (cb) cb(er);
                }, "CB"));
              }
              __name(rename, "rename");
              if (Object.setPrototypeOf) Object.setPrototypeOf(rename, fs$rename);
              return rename;
            }(fs6.rename);
          }
          fs6.read = typeof fs6.read !== "function" ? fs6.read : function(fs$read) {
            function read(fd, buffer, offset, length, position, callback_) {
              var callback;
              if (callback_ && typeof callback_ === "function") {
                var eagCounter = 0;
                callback = /* @__PURE__ */ __name(function(er, _, __) {
                  if (er && er.code === "EAGAIN" && eagCounter < 10) {
                    eagCounter++;
                    return fs$read.call(fs6, fd, buffer, offset, length, position, callback);
                  }
                  callback_.apply(this, arguments);
                }, "callback");
              }
              return fs$read.call(fs6, fd, buffer, offset, length, position, callback);
            }
            __name(read, "read");
            if (Object.setPrototypeOf) Object.setPrototypeOf(read, fs$read);
            return read;
          }(fs6.read);
          fs6.readSync = typeof fs6.readSync !== "function" ? fs6.readSync : /* @__PURE__ */ function(fs$readSync) {
            return function(fd, buffer, offset, length, position) {
              var eagCounter = 0;
              while (true) {
                try {
                  return fs$readSync.call(fs6, fd, buffer, offset, length, position);
                } catch (er) {
                  if (er.code === "EAGAIN" && eagCounter < 10) {
                    eagCounter++;
                    continue;
                  }
                  throw er;
                }
              }
            };
          }(fs6.readSync);
          function patchLchmod(fs7) {
            fs7.lchmod = function(path22, mode, callback) {
              fs7.open(
                path22,
                constants.O_WRONLY | constants.O_SYMLINK,
                mode,
                function(err, fd) {
                  if (err) {
                    if (callback) callback(err);
                    return;
                  }
                  fs7.fchmod(fd, mode, function(err2) {
                    fs7.close(fd, function(err22) {
                      if (callback) callback(err2 || err22);
                    });
                  });
                }
              );
            };
            fs7.lchmodSync = function(path22, mode) {
              var fd = fs7.openSync(path22, constants.O_WRONLY | constants.O_SYMLINK, mode);
              var threw = true;
              var ret;
              try {
                ret = fs7.fchmodSync(fd, mode);
                threw = false;
              } finally {
                if (threw) {
                  try {
                    fs7.closeSync(fd);
                  } catch (er) {
                  }
                } else {
                  fs7.closeSync(fd);
                }
              }
              return ret;
            };
          }
          __name(patchLchmod, "patchLchmod");
          function patchLutimes(fs7) {
            if (constants.hasOwnProperty("O_SYMLINK") && fs7.futimes) {
              fs7.lutimes = function(path22, at, mt, cb) {
                fs7.open(path22, constants.O_SYMLINK, function(er, fd) {
                  if (er) {
                    if (cb) cb(er);
                    return;
                  }
                  fs7.futimes(fd, at, mt, function(er2) {
                    fs7.close(fd, function(er22) {
                      if (cb) cb(er2 || er22);
                    });
                  });
                });
              };
              fs7.lutimesSync = function(path22, at, mt) {
                var fd = fs7.openSync(path22, constants.O_SYMLINK);
                var ret;
                var threw = true;
                try {
                  ret = fs7.futimesSync(fd, at, mt);
                  threw = false;
                } finally {
                  if (threw) {
                    try {
                      fs7.closeSync(fd);
                    } catch (er) {
                    }
                  } else {
                    fs7.closeSync(fd);
                  }
                }
                return ret;
              };
            } else if (fs7.futimes) {
              fs7.lutimes = function(_a2, _b2, _c, cb) {
                if (cb) process.nextTick(cb);
              };
              fs7.lutimesSync = function() {
              };
            }
          }
          __name(patchLutimes, "patchLutimes");
          function chmodFix(orig) {
            if (!orig) return orig;
            return function(target, mode, cb) {
              return orig.call(fs6, target, mode, function(er) {
                if (chownErOk(er)) er = null;
                if (cb) cb.apply(this, arguments);
              });
            };
          }
          __name(chmodFix, "chmodFix");
          function chmodFixSync(orig) {
            if (!orig) return orig;
            return function(target, mode) {
              try {
                return orig.call(fs6, target, mode);
              } catch (er) {
                if (!chownErOk(er)) throw er;
              }
            };
          }
          __name(chmodFixSync, "chmodFixSync");
          function chownFix(orig) {
            if (!orig) return orig;
            return function(target, uid, gid, cb) {
              return orig.call(fs6, target, uid, gid, function(er) {
                if (chownErOk(er)) er = null;
                if (cb) cb.apply(this, arguments);
              });
            };
          }
          __name(chownFix, "chownFix");
          function chownFixSync(orig) {
            if (!orig) return orig;
            return function(target, uid, gid) {
              try {
                return orig.call(fs6, target, uid, gid);
              } catch (er) {
                if (!chownErOk(er)) throw er;
              }
            };
          }
          __name(chownFixSync, "chownFixSync");
          function statFix(orig) {
            if (!orig) return orig;
            return function(target, options, cb) {
              if (typeof options === "function") {
                cb = options;
                options = null;
              }
              function callback(er, stats) {
                if (stats) {
                  if (stats.uid < 0) stats.uid += 4294967296;
                  if (stats.gid < 0) stats.gid += 4294967296;
                }
                if (cb) cb.apply(this, arguments);
              }
              __name(callback, "callback");
              return options ? orig.call(fs6, target, options, callback) : orig.call(fs6, target, callback);
            };
          }
          __name(statFix, "statFix");
          function statFixSync(orig) {
            if (!orig) return orig;
            return function(target, options) {
              var stats = options ? orig.call(fs6, target, options) : orig.call(fs6, target);
              if (stats) {
                if (stats.uid < 0) stats.uid += 4294967296;
                if (stats.gid < 0) stats.gid += 4294967296;
              }
              return stats;
            };
          }
          __name(statFixSync, "statFixSync");
          function chownErOk(er) {
            if (!er)
              return true;
            if (er.code === "ENOSYS")
              return true;
            var nonroot = !process.getuid || process.getuid() !== 0;
            if (nonroot) {
              if (er.code === "EINVAL" || er.code === "EPERM")
                return true;
            }
            return false;
          }
          __name(chownErOk, "chownErOk");
        }
        __name(patch, "patch");
      }
    });
    var require_legacy_streams = __commonJS2({
      "node_modules/graceful-fs/legacy-streams.js"(exports2, module2) {
        "use strict";
        var Stream5 = __require("stream").Stream;
        module2.exports = legacy;
        function legacy(fs6) {
          return {
            ReadStream,
            WriteStream
          };
          function ReadStream(path22, options) {
            if (!(this instanceof ReadStream)) return new ReadStream(path22, options);
            Stream5.call(this);
            var self2 = this;
            this.path = path22;
            this.fd = null;
            this.readable = true;
            this.paused = false;
            this.flags = "r";
            this.mode = 438;
            this.bufferSize = 64 * 1024;
            options = options || {};
            var keys = Object.keys(options);
            for (var index = 0, length = keys.length; index < length; index++) {
              var key = keys[index];
              this[key] = options[key];
            }
            if (this.encoding) this.setEncoding(this.encoding);
            if (this.start !== void 0) {
              if ("number" !== typeof this.start) {
                throw TypeError("start must be a Number");
              }
              if (this.end === void 0) {
                this.end = Infinity;
              } else if ("number" !== typeof this.end) {
                throw TypeError("end must be a Number");
              }
              if (this.start > this.end) {
                throw new Error("start must be <= end");
              }
              this.pos = this.start;
            }
            if (this.fd !== null) {
              process.nextTick(function() {
                self2._read();
              });
              return;
            }
            fs6.open(this.path, this.flags, this.mode, function(err, fd) {
              if (err) {
                self2.emit("error", err);
                self2.readable = false;
                return;
              }
              self2.fd = fd;
              self2.emit("open", fd);
              self2._read();
            });
          }
          __name(ReadStream, "ReadStream");
          function WriteStream(path22, options) {
            if (!(this instanceof WriteStream)) return new WriteStream(path22, options);
            Stream5.call(this);
            this.path = path22;
            this.fd = null;
            this.writable = true;
            this.flags = "w";
            this.encoding = "binary";
            this.mode = 438;
            this.bytesWritten = 0;
            options = options || {};
            var keys = Object.keys(options);
            for (var index = 0, length = keys.length; index < length; index++) {
              var key = keys[index];
              this[key] = options[key];
            }
            if (this.start !== void 0) {
              if ("number" !== typeof this.start) {
                throw TypeError("start must be a Number");
              }
              if (this.start < 0) {
                throw new Error("start must be >= zero");
              }
              this.pos = this.start;
            }
            this.busy = false;
            this._queue = [];
            if (this.fd === null) {
              this._open = fs6.open;
              this._queue.push([this._open, this.path, this.flags, this.mode, void 0]);
              this.flush();
            }
          }
          __name(WriteStream, "WriteStream");
        }
        __name(legacy, "legacy");
      }
    });
    var require_clone2 = __commonJS2({
      "node_modules/graceful-fs/clone.js"(exports2, module2) {
        "use strict";
        module2.exports = clone;
        var getPrototypeOf = Object.getPrototypeOf || function(obj) {
          return obj.__proto__;
        };
        function clone(obj) {
          if (obj === null || typeof obj !== "object")
            return obj;
          if (obj instanceof Object)
            var copy = { __proto__: getPrototypeOf(obj) };
          else
            var copy = /* @__PURE__ */ Object.create(null);
          Object.getOwnPropertyNames(obj).forEach(function(key) {
            Object.defineProperty(copy, key, Object.getOwnPropertyDescriptor(obj, key));
          });
          return copy;
        }
        __name(clone, "clone");
      }
    });
    var require_graceful_fs = __commonJS2({
      "node_modules/graceful-fs/graceful-fs.js"(exports2, module2) {
        "use strict";
        var fs6 = __require("fs");
        var polyfills = require_polyfills();
        var legacy = require_legacy_streams();
        var clone = require_clone2();
        var util = __require("util");
        var gracefulQueue;
        var previousSymbol;
        if (typeof Symbol === "function" && typeof Symbol.for === "function") {
          gracefulQueue = Symbol.for("graceful-fs.queue");
          previousSymbol = Symbol.for("graceful-fs.previous");
        } else {
          gracefulQueue = "___graceful-fs.queue";
          previousSymbol = "___graceful-fs.previous";
        }
        function noop5() {
        }
        __name(noop5, "noop5");
        function publishQueue(context, queue2) {
          Object.defineProperty(context, gracefulQueue, {
            get: /* @__PURE__ */ __name(function() {
              return queue2;
            }, "get")
          });
        }
        __name(publishQueue, "publishQueue");
        var debug = noop5;
        if (util.debuglog)
          debug = util.debuglog("gfs4");
        else if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || ""))
          debug = /* @__PURE__ */ __name(function() {
            var m2 = util.format.apply(util, arguments);
            m2 = "GFS4: " + m2.split(/\n/).join("\nGFS4: ");
            console.error(m2);
          }, "debug");
        if (!fs6[gracefulQueue]) {
          queue = global[gracefulQueue] || [];
          publishQueue(fs6, queue);
          fs6.close = function(fs$close) {
            function close(fd, cb) {
              return fs$close.call(fs6, fd, function(err) {
                if (!err) {
                  resetQueue();
                }
                if (typeof cb === "function")
                  cb.apply(this, arguments);
              });
            }
            __name(close, "close");
            Object.defineProperty(close, previousSymbol, {
              value: fs$close
            });
            return close;
          }(fs6.close);
          fs6.closeSync = function(fs$closeSync) {
            function closeSync(fd) {
              fs$closeSync.apply(fs6, arguments);
              resetQueue();
            }
            __name(closeSync, "closeSync");
            Object.defineProperty(closeSync, previousSymbol, {
              value: fs$closeSync
            });
            return closeSync;
          }(fs6.closeSync);
          if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || "")) {
            process.on("exit", function() {
              debug(fs6[gracefulQueue]);
              __require("assert").equal(fs6[gracefulQueue].length, 0);
            });
          }
        }
        var queue;
        if (!global[gracefulQueue]) {
          publishQueue(global, fs6[gracefulQueue]);
        }
        module2.exports = patch(clone(fs6));
        if (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs6.__patched) {
          module2.exports = patch(fs6);
          fs6.__patched = true;
        }
        function patch(fs7) {
          polyfills(fs7);
          fs7.gracefulify = patch;
          fs7.createReadStream = createReadStream;
          fs7.createWriteStream = createWriteStream;
          var fs$readFile = fs7.readFile;
          fs7.readFile = readFile;
          function readFile(path22, options, cb) {
            if (typeof options === "function")
              cb = options, options = null;
            return go$readFile(path22, options, cb);
            function go$readFile(path32, options2, cb2, startTime) {
              return fs$readFile(path32, options2, function(err) {
                if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
                  enqueue([go$readFile, [path32, options2, cb2], err, startTime || Date.now(), Date.now()]);
                else {
                  if (typeof cb2 === "function")
                    cb2.apply(this, arguments);
                }
              });
            }
            __name(go$readFile, "go$readFile");
          }
          __name(readFile, "readFile");
          var fs$writeFile = fs7.writeFile;
          fs7.writeFile = writeFile;
          function writeFile(path22, data, options, cb) {
            if (typeof options === "function")
              cb = options, options = null;
            return go$writeFile(path22, data, options, cb);
            function go$writeFile(path32, data2, options2, cb2, startTime) {
              return fs$writeFile(path32, data2, options2, function(err) {
                if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
                  enqueue([go$writeFile, [path32, data2, options2, cb2], err, startTime || Date.now(), Date.now()]);
                else {
                  if (typeof cb2 === "function")
                    cb2.apply(this, arguments);
                }
              });
            }
            __name(go$writeFile, "go$writeFile");
          }
          __name(writeFile, "writeFile");
          var fs$appendFile = fs7.appendFile;
          if (fs$appendFile)
            fs7.appendFile = appendFile;
          function appendFile(path22, data, options, cb) {
            if (typeof options === "function")
              cb = options, options = null;
            return go$appendFile(path22, data, options, cb);
            function go$appendFile(path32, data2, options2, cb2, startTime) {
              return fs$appendFile(path32, data2, options2, function(err) {
                if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
                  enqueue([go$appendFile, [path32, data2, options2, cb2], err, startTime || Date.now(), Date.now()]);
                else {
                  if (typeof cb2 === "function")
                    cb2.apply(this, arguments);
                }
              });
            }
            __name(go$appendFile, "go$appendFile");
          }
          __name(appendFile, "appendFile");
          var fs$copyFile = fs7.copyFile;
          if (fs$copyFile)
            fs7.copyFile = copyFile;
          function copyFile(src, dest, flags, cb) {
            if (typeof flags === "function") {
              cb = flags;
              flags = 0;
            }
            return go$copyFile(src, dest, flags, cb);
            function go$copyFile(src2, dest2, flags2, cb2, startTime) {
              return fs$copyFile(src2, dest2, flags2, function(err) {
                if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
                  enqueue([go$copyFile, [src2, dest2, flags2, cb2], err, startTime || Date.now(), Date.now()]);
                else {
                  if (typeof cb2 === "function")
                    cb2.apply(this, arguments);
                }
              });
            }
            __name(go$copyFile, "go$copyFile");
          }
          __name(copyFile, "copyFile");
          var fs$readdir = fs7.readdir;
          fs7.readdir = readdir;
          var noReaddirOptionVersions = /^v[0-5]\./;
          function readdir(path22, options, cb) {
            if (typeof options === "function")
              cb = options, options = null;
            var go$readdir = noReaddirOptionVersions.test(process.version) ? /* @__PURE__ */ __name(function go$readdir2(path32, options2, cb2, startTime) {
              return fs$readdir(path32, fs$readdirCallback(
                path32,
                options2,
                cb2,
                startTime
              ));
            }, "go$readdir2") : /* @__PURE__ */ __name(function go$readdir2(path32, options2, cb2, startTime) {
              return fs$readdir(path32, options2, fs$readdirCallback(
                path32,
                options2,
                cb2,
                startTime
              ));
            }, "go$readdir2");
            return go$readdir(path22, options, cb);
            function fs$readdirCallback(path32, options2, cb2, startTime) {
              return function(err, files) {
                if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
                  enqueue([
                    go$readdir,
                    [path32, options2, cb2],
                    err,
                    startTime || Date.now(),
                    Date.now()
                  ]);
                else {
                  if (files && files.sort)
                    files.sort();
                  if (typeof cb2 === "function")
                    cb2.call(this, err, files);
                }
              };
            }
            __name(fs$readdirCallback, "fs$readdirCallback");
          }
          __name(readdir, "readdir");
          if (process.version.substr(0, 4) === "v0.8") {
            var legStreams = legacy(fs7);
            ReadStream = legStreams.ReadStream;
            WriteStream = legStreams.WriteStream;
          }
          var fs$ReadStream = fs7.ReadStream;
          if (fs$ReadStream) {
            ReadStream.prototype = Object.create(fs$ReadStream.prototype);
            ReadStream.prototype.open = ReadStream$open;
          }
          var fs$WriteStream = fs7.WriteStream;
          if (fs$WriteStream) {
            WriteStream.prototype = Object.create(fs$WriteStream.prototype);
            WriteStream.prototype.open = WriteStream$open;
          }
          Object.defineProperty(fs7, "ReadStream", {
            get: /* @__PURE__ */ __name(function() {
              return ReadStream;
            }, "get"),
            set: /* @__PURE__ */ __name(function(val) {
              ReadStream = val;
            }, "set"),
            enumerable: true,
            configurable: true
          });
          Object.defineProperty(fs7, "WriteStream", {
            get: /* @__PURE__ */ __name(function() {
              return WriteStream;
            }, "get"),
            set: /* @__PURE__ */ __name(function(val) {
              WriteStream = val;
            }, "set"),
            enumerable: true,
            configurable: true
          });
          var FileReadStream = ReadStream;
          Object.defineProperty(fs7, "FileReadStream", {
            get: /* @__PURE__ */ __name(function() {
              return FileReadStream;
            }, "get"),
            set: /* @__PURE__ */ __name(function(val) {
              FileReadStream = val;
            }, "set"),
            enumerable: true,
            configurable: true
          });
          var FileWriteStream = WriteStream;
          Object.defineProperty(fs7, "FileWriteStream", {
            get: /* @__PURE__ */ __name(function() {
              return FileWriteStream;
            }, "get"),
            set: /* @__PURE__ */ __name(function(val) {
              FileWriteStream = val;
            }, "set"),
            enumerable: true,
            configurable: true
          });
          function ReadStream(path22, options) {
            if (this instanceof ReadStream)
              return fs$ReadStream.apply(this, arguments), this;
            else
              return ReadStream.apply(Object.create(ReadStream.prototype), arguments);
          }
          __name(ReadStream, "ReadStream");
          function ReadStream$open() {
            var that = this;
            open(that.path, that.flags, that.mode, function(err, fd) {
              if (err) {
                if (that.autoClose)
                  that.destroy();
                that.emit("error", err);
              } else {
                that.fd = fd;
                that.emit("open", fd);
                that.read();
              }
            });
          }
          __name(ReadStream$open, "ReadStream$open");
          function WriteStream(path22, options) {
            if (this instanceof WriteStream)
              return fs$WriteStream.apply(this, arguments), this;
            else
              return WriteStream.apply(Object.create(WriteStream.prototype), arguments);
          }
          __name(WriteStream, "WriteStream");
          function WriteStream$open() {
            var that = this;
            open(that.path, that.flags, that.mode, function(err, fd) {
              if (err) {
                that.destroy();
                that.emit("error", err);
              } else {
                that.fd = fd;
                that.emit("open", fd);
              }
            });
          }
          __name(WriteStream$open, "WriteStream$open");
          function createReadStream(path22, options) {
            return new fs7.ReadStream(path22, options);
          }
          __name(createReadStream, "createReadStream");
          function createWriteStream(path22, options) {
            return new fs7.WriteStream(path22, options);
          }
          __name(createWriteStream, "createWriteStream");
          var fs$open = fs7.open;
          fs7.open = open;
          function open(path22, flags, mode, cb) {
            if (typeof mode === "function")
              cb = mode, mode = null;
            return go$open(path22, flags, mode, cb);
            function go$open(path32, flags2, mode2, cb2, startTime) {
              return fs$open(path32, flags2, mode2, function(err, fd) {
                if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
                  enqueue([go$open, [path32, flags2, mode2, cb2], err, startTime || Date.now(), Date.now()]);
                else {
                  if (typeof cb2 === "function")
                    cb2.apply(this, arguments);
                }
              });
            }
            __name(go$open, "go$open");
          }
          __name(open, "open");
          return fs7;
        }
        __name(patch, "patch");
        function enqueue(elem) {
          debug("ENQUEUE", elem[0].name, elem[1]);
          fs6[gracefulQueue].push(elem);
          retry();
        }
        __name(enqueue, "enqueue");
        var retryTimer;
        function resetQueue() {
          var now = Date.now();
          for (var i = 0; i < fs6[gracefulQueue].length; ++i) {
            if (fs6[gracefulQueue][i].length > 2) {
              fs6[gracefulQueue][i][3] = now;
              fs6[gracefulQueue][i][4] = now;
            }
          }
          retry();
        }
        __name(resetQueue, "resetQueue");
        function retry() {
          clearTimeout(retryTimer);
          retryTimer = void 0;
          if (fs6[gracefulQueue].length === 0)
            return;
          var elem = fs6[gracefulQueue].shift();
          var fn = elem[0];
          var args = elem[1];
          var err = elem[2];
          var startTime = elem[3];
          var lastTime = elem[4];
          if (startTime === void 0) {
            debug("RETRY", fn.name, args);
            fn.apply(null, args);
          } else if (Date.now() - startTime >= 6e4) {
            debug("TIMEOUT", fn.name, args);
            var cb = args.pop();
            if (typeof cb === "function")
              cb.call(null, err);
          } else {
            var sinceAttempt = Date.now() - lastTime;
            var sinceStart = Math.max(lastTime - startTime, 1);
            var desiredDelay = Math.min(sinceStart * 1.2, 100);
            if (sinceAttempt >= desiredDelay) {
              debug("RETRY", fn.name, args);
              fn.apply(null, args.concat([startTime]));
            } else {
              fs6[gracefulQueue].push(elem);
            }
          }
          if (retryTimer === void 0) {
            retryTimer = setTimeout(retry, 0);
          }
        }
        __name(retry, "retry");
      }
    });
    var require_fs5 = __commonJS2({
      "node_modules/fs-extra/lib/fs/index.js"(exports2) {
        "use strict";
        var u2 = require_universalify().fromCallback;
        var fs6 = require_graceful_fs();
        var api = [
          "access",
          "appendFile",
          "chmod",
          "chown",
          "close",
          "copyFile",
          "fchmod",
          "fchown",
          "fdatasync",
          "fstat",
          "fsync",
          "ftruncate",
          "futimes",
          "lchmod",
          "lchown",
          "link",
          "lstat",
          "mkdir",
          "mkdtemp",
          "open",
          "opendir",
          "readdir",
          "readFile",
          "readlink",
          "realpath",
          "rename",
          "rm",
          "rmdir",
          "stat",
          "symlink",
          "truncate",
          "unlink",
          "utimes",
          "writeFile"
        ].filter((key) => {
          return typeof fs6[key] === "function";
        });
        Object.assign(exports2, fs6);
        api.forEach((method) => {
          exports2[method] = u2(fs6[method]);
        });
        exports2.exists = function(filename, callback) {
          if (typeof callback === "function") {
            return fs6.exists(filename, callback);
          }
          return new Promise((resolve) => {
            return fs6.exists(filename, resolve);
          });
        };
        exports2.read = function(fd, buffer, offset, length, position, callback) {
          if (typeof callback === "function") {
            return fs6.read(fd, buffer, offset, length, position, callback);
          }
          return new Promise((resolve, reject) => {
            fs6.read(fd, buffer, offset, length, position, (err, bytesRead, buffer2) => {
              if (err) return reject(err);
              resolve({ bytesRead, buffer: buffer2 });
            });
          });
        };
        exports2.write = function(fd, buffer, ...args) {
          if (typeof args[args.length - 1] === "function") {
            return fs6.write(fd, buffer, ...args);
          }
          return new Promise((resolve, reject) => {
            fs6.write(fd, buffer, ...args, (err, bytesWritten, buffer2) => {
              if (err) return reject(err);
              resolve({ bytesWritten, buffer: buffer2 });
            });
          });
        };
        exports2.readv = function(fd, buffers, ...args) {
          if (typeof args[args.length - 1] === "function") {
            return fs6.readv(fd, buffers, ...args);
          }
          return new Promise((resolve, reject) => {
            fs6.readv(fd, buffers, ...args, (err, bytesRead, buffers2) => {
              if (err) return reject(err);
              resolve({ bytesRead, buffers: buffers2 });
            });
          });
        };
        exports2.writev = function(fd, buffers, ...args) {
          if (typeof args[args.length - 1] === "function") {
            return fs6.writev(fd, buffers, ...args);
          }
          return new Promise((resolve, reject) => {
            fs6.writev(fd, buffers, ...args, (err, bytesWritten, buffers2) => {
              if (err) return reject(err);
              resolve({ bytesWritten, buffers: buffers2 });
            });
          });
        };
        if (typeof fs6.realpath.native === "function") {
          exports2.realpath.native = u2(fs6.realpath.native);
        } else {
          process.emitWarning(
            "fs.realpath.native is not a function. Is fs being monkey-patched?",
            "Warning",
            "fs-extra-WARN0003"
          );
        }
      }
    });
    var require_utils5 = __commonJS2({
      "node_modules/fs-extra/lib/mkdirs/utils.js"(exports2, module2) {
        "use strict";
        var path22 = __require("path");
        module2.exports.checkPath = /* @__PURE__ */ __name(function checkPath(pth) {
          if (process.platform === "win32") {
            const pathHasInvalidWinCharacters = /[<>:"|?*]/.test(pth.replace(path22.parse(pth).root, ""));
            if (pathHasInvalidWinCharacters) {
              const error = new Error(`Path contains invalid characters: ${pth}`);
              error.code = "EINVAL";
              throw error;
            }
          }
        }, "checkPath");
      }
    });
    var require_make_dir = __commonJS2({
      "node_modules/fs-extra/lib/mkdirs/make-dir.js"(exports2, module2) {
        "use strict";
        var fs6 = require_fs5();
        var { checkPath } = require_utils5();
        var getMode = /* @__PURE__ */ __name((options) => {
          const defaults = { mode: 511 };
          if (typeof options === "number") return options;
          return __spreadValues(__spreadValues({}, defaults), options).mode;
        }, "getMode");
        module2.exports.makeDir = (dir, options) => __async(exports2, null, function* () {
          checkPath(dir);
          return fs6.mkdir(dir, {
            mode: getMode(options),
            recursive: true
          });
        });
        module2.exports.makeDirSync = (dir, options) => {
          checkPath(dir);
          return fs6.mkdirSync(dir, {
            mode: getMode(options),
            recursive: true
          });
        };
      }
    });
    var require_mkdirs = __commonJS2({
      "node_modules/fs-extra/lib/mkdirs/index.js"(exports2, module2) {
        "use strict";
        var u2 = require_universalify().fromPromise;
        var { makeDir: _makeDir, makeDirSync } = require_make_dir();
        var makeDir = u2(_makeDir);
        module2.exports = {
          mkdirs: makeDir,
          mkdirsSync: makeDirSync,
          // alias
          mkdirp: makeDir,
          mkdirpSync: makeDirSync,
          ensureDir: makeDir,
          ensureDirSync: makeDirSync
        };
      }
    });
    var require_path_exists = __commonJS2({
      "node_modules/fs-extra/lib/path-exists/index.js"(exports2, module2) {
        "use strict";
        var u2 = require_universalify().fromPromise;
        var fs6 = require_fs5();
        function pathExists(path22) {
          return fs6.access(path22).then(() => true).catch(() => false);
        }
        __name(pathExists, "pathExists");
        module2.exports = {
          pathExists: u2(pathExists),
          pathExistsSync: fs6.existsSync
        };
      }
    });
    var require_utimes = __commonJS2({
      "node_modules/fs-extra/lib/util/utimes.js"(exports2, module2) {
        "use strict";
        var fs6 = require_fs5();
        var u2 = require_universalify().fromPromise;
        function utimesMillis(path22, atime, mtime) {
          return __async(this, null, function* () {
            const fd = yield fs6.open(path22, "r+");
            let closeErr = null;
            try {
              yield fs6.futimes(fd, atime, mtime);
            } finally {
              try {
                yield fs6.close(fd);
              } catch (e) {
                closeErr = e;
              }
            }
            if (closeErr) {
              throw closeErr;
            }
          });
        }
        __name(utimesMillis, "utimesMillis");
        function utimesMillisSync(path22, atime, mtime) {
          const fd = fs6.openSync(path22, "r+");
          fs6.futimesSync(fd, atime, mtime);
          return fs6.closeSync(fd);
        }
        __name(utimesMillisSync, "utimesMillisSync");
        module2.exports = {
          utimesMillis: u2(utimesMillis),
          utimesMillisSync
        };
      }
    });
    var require_stat = __commonJS2({
      "node_modules/fs-extra/lib/util/stat.js"(exports2, module2) {
        "use strict";
        var fs6 = require_fs5();
        var path22 = __require("path");
        var u2 = require_universalify().fromPromise;
        function getStats(src, dest, opts) {
          const statFunc = opts.dereference ? (file) => fs6.stat(file, { bigint: true }) : (file) => fs6.lstat(file, { bigint: true });
          return Promise.all([
            statFunc(src),
            statFunc(dest).catch((err) => {
              if (err.code === "ENOENT") return null;
              throw err;
            })
          ]).then(([srcStat, destStat]) => ({ srcStat, destStat }));
        }
        __name(getStats, "getStats");
        function getStatsSync(src, dest, opts) {
          let destStat;
          const statFunc = opts.dereference ? (file) => fs6.statSync(file, { bigint: true }) : (file) => fs6.lstatSync(file, { bigint: true });
          const srcStat = statFunc(src);
          try {
            destStat = statFunc(dest);
          } catch (err) {
            if (err.code === "ENOENT") return { srcStat, destStat: null };
            throw err;
          }
          return { srcStat, destStat };
        }
        __name(getStatsSync, "getStatsSync");
        function checkPaths(src, dest, funcName, opts) {
          return __async(this, null, function* () {
            const { srcStat, destStat } = yield getStats(src, dest, opts);
            if (destStat) {
              if (areIdentical(srcStat, destStat)) {
                const srcBaseName = path22.basename(src);
                const destBaseName = path22.basename(dest);
                if (funcName === "move" && srcBaseName !== destBaseName && srcBaseName.toLowerCase() === destBaseName.toLowerCase()) {
                  return { srcStat, destStat, isChangingCase: true };
                }
                throw new Error("Source and destination must not be the same.");
              }
              if (srcStat.isDirectory() && !destStat.isDirectory()) {
                throw new Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`);
              }
              if (!srcStat.isDirectory() && destStat.isDirectory()) {
                throw new Error(`Cannot overwrite directory '${dest}' with non-directory '${src}'.`);
              }
            }
            if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {
              throw new Error(errMsg(src, dest, funcName));
            }
            return { srcStat, destStat };
          });
        }
        __name(checkPaths, "checkPaths");
        function checkPathsSync(src, dest, funcName, opts) {
          const { srcStat, destStat } = getStatsSync(src, dest, opts);
          if (destStat) {
            if (areIdentical(srcStat, destStat)) {
              const srcBaseName = path22.basename(src);
              const destBaseName = path22.basename(dest);
              if (funcName === "move" && srcBaseName !== destBaseName && srcBaseName.toLowerCase() === destBaseName.toLowerCase()) {
                return { srcStat, destStat, isChangingCase: true };
              }
              throw new Error("Source and destination must not be the same.");
            }
            if (srcStat.isDirectory() && !destStat.isDirectory()) {
              throw new Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`);
            }
            if (!srcStat.isDirectory() && destStat.isDirectory()) {
              throw new Error(`Cannot overwrite directory '${dest}' with non-directory '${src}'.`);
            }
          }
          if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {
            throw new Error(errMsg(src, dest, funcName));
          }
          return { srcStat, destStat };
        }
        __name(checkPathsSync, "checkPathsSync");
        function checkParentPaths(src, srcStat, dest, funcName) {
          return __async(this, null, function* () {
            const srcParent = path22.resolve(path22.dirname(src));
            const destParent = path22.resolve(path22.dirname(dest));
            if (destParent === srcParent || destParent === path22.parse(destParent).root) return;
            let destStat;
            try {
              destStat = yield fs6.stat(destParent, { bigint: true });
            } catch (err) {
              if (err.code === "ENOENT") return;
              throw err;
            }
            if (areIdentical(srcStat, destStat)) {
              throw new Error(errMsg(src, dest, funcName));
            }
            return checkParentPaths(src, srcStat, destParent, funcName);
          });
        }
        __name(checkParentPaths, "checkParentPaths");
        function checkParentPathsSync(src, srcStat, dest, funcName) {
          const srcParent = path22.resolve(path22.dirname(src));
          const destParent = path22.resolve(path22.dirname(dest));
          if (destParent === srcParent || destParent === path22.parse(destParent).root) return;
          let destStat;
          try {
            destStat = fs6.statSync(destParent, { bigint: true });
          } catch (err) {
            if (err.code === "ENOENT") return;
            throw err;
          }
          if (areIdentical(srcStat, destStat)) {
            throw new Error(errMsg(src, dest, funcName));
          }
          return checkParentPathsSync(src, srcStat, destParent, funcName);
        }
        __name(checkParentPathsSync, "checkParentPathsSync");
        function areIdentical(srcStat, destStat) {
          return destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev;
        }
        __name(areIdentical, "areIdentical");
        function isSrcSubdir(src, dest) {
          const srcArr = path22.resolve(src).split(path22.sep).filter((i) => i);
          const destArr = path22.resolve(dest).split(path22.sep).filter((i) => i);
          return srcArr.every((cur, i) => destArr[i] === cur);
        }
        __name(isSrcSubdir, "isSrcSubdir");
        function errMsg(src, dest, funcName) {
          return `Cannot ${funcName} '${src}' to a subdirectory of itself, '${dest}'.`;
        }
        __name(errMsg, "errMsg");
        module2.exports = {
          // checkPaths
          checkPaths: u2(checkPaths),
          checkPathsSync,
          // checkParent
          checkParentPaths: u2(checkParentPaths),
          checkParentPathsSync,
          // Misc
          isSrcSubdir,
          areIdentical
        };
      }
    });
    var require_copy = __commonJS2({
      "node_modules/fs-extra/lib/copy/copy.js"(exports2, module2) {
        "use strict";
        var fs6 = require_fs5();
        var path22 = __require("path");
        var { mkdirs } = require_mkdirs();
        var { pathExists } = require_path_exists();
        var { utimesMillis } = require_utimes();
        var stat = require_stat();
        function copy(_0, _1) {
          return __async(this, arguments, function* (src, dest, opts = {}) {
            if (typeof opts === "function") {
              opts = { filter: opts };
            }
            opts.clobber = "clobber" in opts ? !!opts.clobber : true;
            opts.overwrite = "overwrite" in opts ? !!opts.overwrite : opts.clobber;
            if (opts.preserveTimestamps && process.arch === "ia32") {
              process.emitWarning(
                "Using the preserveTimestamps option in 32-bit node is not recommended;\n\n	see https://github.com/jprichardson/node-fs-extra/issues/269",
                "Warning",
                "fs-extra-WARN0001"
              );
            }
            const { srcStat, destStat } = yield stat.checkPaths(src, dest, "copy", opts);
            yield stat.checkParentPaths(src, srcStat, dest, "copy");
            const include = yield runFilter(src, dest, opts);
            if (!include) return;
            const destParent = path22.dirname(dest);
            const dirExists = yield pathExists(destParent);
            if (!dirExists) {
              yield mkdirs(destParent);
            }
            yield getStatsAndPerformCopy(destStat, src, dest, opts);
          });
        }
        __name(copy, "copy");
        function runFilter(src, dest, opts) {
          return __async(this, null, function* () {
            if (!opts.filter) return true;
            return opts.filter(src, dest);
          });
        }
        __name(runFilter, "runFilter");
        function getStatsAndPerformCopy(destStat, src, dest, opts) {
          return __async(this, null, function* () {
            const statFn = opts.dereference ? fs6.stat : fs6.lstat;
            const srcStat = yield statFn(src);
            if (srcStat.isDirectory()) return onDir(srcStat, destStat, src, dest, opts);
            if (srcStat.isFile() || srcStat.isCharacterDevice() || srcStat.isBlockDevice()) return onFile(srcStat, destStat, src, dest, opts);
            if (srcStat.isSymbolicLink()) return onLink(destStat, src, dest, opts);
            if (srcStat.isSocket()) throw new Error(`Cannot copy a socket file: ${src}`);
            if (srcStat.isFIFO()) throw new Error(`Cannot copy a FIFO pipe: ${src}`);
            throw new Error(`Unknown file: ${src}`);
          });
        }
        __name(getStatsAndPerformCopy, "getStatsAndPerformCopy");
        function onFile(srcStat, destStat, src, dest, opts) {
          return __async(this, null, function* () {
            if (!destStat) return copyFile(srcStat, src, dest, opts);
            if (opts.overwrite) {
              yield fs6.unlink(dest);
              return copyFile(srcStat, src, dest, opts);
            }
            if (opts.errorOnExist) {
              throw new Error(`'${dest}' already exists`);
            }
          });
        }
        __name(onFile, "onFile");
        function copyFile(srcStat, src, dest, opts) {
          return __async(this, null, function* () {
            yield fs6.copyFile(src, dest);
            if (opts.preserveTimestamps) {
              if (fileIsNotWritable(srcStat.mode)) {
                yield makeFileWritable(dest, srcStat.mode);
              }
              const updatedSrcStat = yield fs6.stat(src);
              yield utimesMillis(dest, updatedSrcStat.atime, updatedSrcStat.mtime);
            }
            return fs6.chmod(dest, srcStat.mode);
          });
        }
        __name(copyFile, "copyFile");
        function fileIsNotWritable(srcMode) {
          return (srcMode & 128) === 0;
        }
        __name(fileIsNotWritable, "fileIsNotWritable");
        function makeFileWritable(dest, srcMode) {
          return fs6.chmod(dest, srcMode | 128);
        }
        __name(makeFileWritable, "makeFileWritable");
        function onDir(srcStat, destStat, src, dest, opts) {
          return __async(this, null, function* () {
            if (!destStat) {
              yield fs6.mkdir(dest);
            }
            const items = yield fs6.readdir(src);
            yield Promise.all(items.map((item) => __async(this, null, function* () {
              const srcItem = path22.join(src, item);
              const destItem = path22.join(dest, item);
              const include = yield runFilter(srcItem, destItem, opts);
              if (!include) return;
              const { destStat: destStat2 } = yield stat.checkPaths(srcItem, destItem, "copy", opts);
              return getStatsAndPerformCopy(destStat2, srcItem, destItem, opts);
            })));
            if (!destStat) {
              yield fs6.chmod(dest, srcStat.mode);
            }
          });
        }
        __name(onDir, "onDir");
        function onLink(destStat, src, dest, opts) {
          return __async(this, null, function* () {
            let resolvedSrc = yield fs6.readlink(src);
            if (opts.dereference) {
              resolvedSrc = path22.resolve(process.cwd(), resolvedSrc);
            }
            if (!destStat) {
              return fs6.symlink(resolvedSrc, dest);
            }
            let resolvedDest = null;
            try {
              resolvedDest = yield fs6.readlink(dest);
            } catch (e) {
              if (e.code === "EINVAL" || e.code === "UNKNOWN") return fs6.symlink(resolvedSrc, dest);
              throw e;
            }
            if (opts.dereference) {
              resolvedDest = path22.resolve(process.cwd(), resolvedDest);
            }
            if (stat.isSrcSubdir(resolvedSrc, resolvedDest)) {
              throw new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`);
            }
            if (stat.isSrcSubdir(resolvedDest, resolvedSrc)) {
              throw new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`);
            }
            yield fs6.unlink(dest);
            return fs6.symlink(resolvedSrc, dest);
          });
        }
        __name(onLink, "onLink");
        module2.exports = copy;
      }
    });
    var require_copy_sync = __commonJS2({
      "node_modules/fs-extra/lib/copy/copy-sync.js"(exports2, module2) {
        "use strict";
        var fs6 = require_graceful_fs();
        var path22 = __require("path");
        var mkdirsSync = require_mkdirs().mkdirsSync;
        var utimesMillisSync = require_utimes().utimesMillisSync;
        var stat = require_stat();
        function copySync(src, dest, opts) {
          if (typeof opts === "function") {
            opts = { filter: opts };
          }
          opts = opts || {};
          opts.clobber = "clobber" in opts ? !!opts.clobber : true;
          opts.overwrite = "overwrite" in opts ? !!opts.overwrite : opts.clobber;
          if (opts.preserveTimestamps && process.arch === "ia32") {
            process.emitWarning(
              "Using the preserveTimestamps option in 32-bit node is not recommended;\n\n	see https://github.com/jprichardson/node-fs-extra/issues/269",
              "Warning",
              "fs-extra-WARN0002"
            );
          }
          const { srcStat, destStat } = stat.checkPathsSync(src, dest, "copy", opts);
          stat.checkParentPathsSync(src, srcStat, dest, "copy");
          if (opts.filter && !opts.filter(src, dest)) return;
          const destParent = path22.dirname(dest);
          if (!fs6.existsSync(destParent)) mkdirsSync(destParent);
          return getStats(destStat, src, dest, opts);
        }
        __name(copySync, "copySync");
        function getStats(destStat, src, dest, opts) {
          const statSync = opts.dereference ? fs6.statSync : fs6.lstatSync;
          const srcStat = statSync(src);
          if (srcStat.isDirectory()) return onDir(srcStat, destStat, src, dest, opts);
          else if (srcStat.isFile() || srcStat.isCharacterDevice() || srcStat.isBlockDevice()) return onFile(srcStat, destStat, src, dest, opts);
          else if (srcStat.isSymbolicLink()) return onLink(destStat, src, dest, opts);
          else if (srcStat.isSocket()) throw new Error(`Cannot copy a socket file: ${src}`);
          else if (srcStat.isFIFO()) throw new Error(`Cannot copy a FIFO pipe: ${src}`);
          throw new Error(`Unknown file: ${src}`);
        }
        __name(getStats, "getStats");
        function onFile(srcStat, destStat, src, dest, opts) {
          if (!destStat) return copyFile(srcStat, src, dest, opts);
          return mayCopyFile(srcStat, src, dest, opts);
        }
        __name(onFile, "onFile");
        function mayCopyFile(srcStat, src, dest, opts) {
          if (opts.overwrite) {
            fs6.unlinkSync(dest);
            return copyFile(srcStat, src, dest, opts);
          } else if (opts.errorOnExist) {
            throw new Error(`'${dest}' already exists`);
          }
        }
        __name(mayCopyFile, "mayCopyFile");
        function copyFile(srcStat, src, dest, opts) {
          fs6.copyFileSync(src, dest);
          if (opts.preserveTimestamps) handleTimestamps(srcStat.mode, src, dest);
          return setDestMode(dest, srcStat.mode);
        }
        __name(copyFile, "copyFile");
        function handleTimestamps(srcMode, src, dest) {
          if (fileIsNotWritable(srcMode)) makeFileWritable(dest, srcMode);
          return setDestTimestamps(src, dest);
        }
        __name(handleTimestamps, "handleTimestamps");
        function fileIsNotWritable(srcMode) {
          return (srcMode & 128) === 0;
        }
        __name(fileIsNotWritable, "fileIsNotWritable");
        function makeFileWritable(dest, srcMode) {
          return setDestMode(dest, srcMode | 128);
        }
        __name(makeFileWritable, "makeFileWritable");
        function setDestMode(dest, srcMode) {
          return fs6.chmodSync(dest, srcMode);
        }
        __name(setDestMode, "setDestMode");
        function setDestTimestamps(src, dest) {
          const updatedSrcStat = fs6.statSync(src);
          return utimesMillisSync(dest, updatedSrcStat.atime, updatedSrcStat.mtime);
        }
        __name(setDestTimestamps, "setDestTimestamps");
        function onDir(srcStat, destStat, src, dest, opts) {
          if (!destStat) return mkDirAndCopy(srcStat.mode, src, dest, opts);
          return copyDir(src, dest, opts);
        }
        __name(onDir, "onDir");
        function mkDirAndCopy(srcMode, src, dest, opts) {
          fs6.mkdirSync(dest);
          copyDir(src, dest, opts);
          return setDestMode(dest, srcMode);
        }
        __name(mkDirAndCopy, "mkDirAndCopy");
        function copyDir(src, dest, opts) {
          fs6.readdirSync(src).forEach((item) => copyDirItem(item, src, dest, opts));
        }
        __name(copyDir, "copyDir");
        function copyDirItem(item, src, dest, opts) {
          const srcItem = path22.join(src, item);
          const destItem = path22.join(dest, item);
          if (opts.filter && !opts.filter(srcItem, destItem)) return;
          const { destStat } = stat.checkPathsSync(srcItem, destItem, "copy", opts);
          return getStats(destStat, srcItem, destItem, opts);
        }
        __name(copyDirItem, "copyDirItem");
        function onLink(destStat, src, dest, opts) {
          let resolvedSrc = fs6.readlinkSync(src);
          if (opts.dereference) {
            resolvedSrc = path22.resolve(process.cwd(), resolvedSrc);
          }
          if (!destStat) {
            return fs6.symlinkSync(resolvedSrc, dest);
          } else {
            let resolvedDest;
            try {
              resolvedDest = fs6.readlinkSync(dest);
            } catch (err) {
              if (err.code === "EINVAL" || err.code === "UNKNOWN") return fs6.symlinkSync(resolvedSrc, dest);
              throw err;
            }
            if (opts.dereference) {
              resolvedDest = path22.resolve(process.cwd(), resolvedDest);
            }
            if (stat.isSrcSubdir(resolvedSrc, resolvedDest)) {
              throw new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`);
            }
            if (stat.isSrcSubdir(resolvedDest, resolvedSrc)) {
              throw new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`);
            }
            return copyLink(resolvedSrc, dest);
          }
        }
        __name(onLink, "onLink");
        function copyLink(resolvedSrc, dest) {
          fs6.unlinkSync(dest);
          return fs6.symlinkSync(resolvedSrc, dest);
        }
        __name(copyLink, "copyLink");
        module2.exports = copySync;
      }
    });
    var require_copy2 = __commonJS2({
      "node_modules/fs-extra/lib/copy/index.js"(exports2, module2) {
        "use strict";
        var u2 = require_universalify().fromPromise;
        module2.exports = {
          copy: u2(require_copy()),
          copySync: require_copy_sync()
        };
      }
    });
    var require_remove = __commonJS2({
      "node_modules/fs-extra/lib/remove/index.js"(exports2, module2) {
        "use strict";
        var fs6 = require_graceful_fs();
        var u2 = require_universalify().fromCallback;
        function remove(path22, callback) {
          fs6.rm(path22, { recursive: true, force: true }, callback);
        }
        __name(remove, "remove");
        function removeSync(path22) {
          fs6.rmSync(path22, { recursive: true, force: true });
        }
        __name(removeSync, "removeSync");
        module2.exports = {
          remove: u2(remove),
          removeSync
        };
      }
    });
    var require_empty = __commonJS2({
      "node_modules/fs-extra/lib/empty/index.js"(exports2, module2) {
        "use strict";
        var u2 = require_universalify().fromPromise;
        var fs6 = require_fs5();
        var path22 = __require("path");
        var mkdir = require_mkdirs();
        var remove = require_remove();
        var emptyDir = u2(/* @__PURE__ */ __name(function emptyDir2(dir) {
          return __async(this, null, function* () {
            let items;
            try {
              items = yield fs6.readdir(dir);
            } catch (e) {
              return mkdir.mkdirs(dir);
            }
            return Promise.all(items.map((item) => remove.remove(path22.join(dir, item))));
          });
        }, "emptyDir2"));
        function emptyDirSync(dir) {
          let items;
          try {
            items = fs6.readdirSync(dir);
          } catch (e) {
            return mkdir.mkdirsSync(dir);
          }
          items.forEach((item) => {
            item = path22.join(dir, item);
            remove.removeSync(item);
          });
        }
        __name(emptyDirSync, "emptyDirSync");
        module2.exports = {
          emptyDirSync,
          emptydirSync: emptyDirSync,
          emptyDir,
          emptydir: emptyDir
        };
      }
    });
    var require_file2 = __commonJS2({
      "node_modules/fs-extra/lib/ensure/file.js"(exports2, module2) {
        "use strict";
        var u2 = require_universalify().fromPromise;
        var path22 = __require("path");
        var fs6 = require_fs5();
        var mkdir = require_mkdirs();
        function createFile(file) {
          return __async(this, null, function* () {
            let stats;
            try {
              stats = yield fs6.stat(file);
            } catch (e) {
            }
            if (stats && stats.isFile()) return;
            const dir = path22.dirname(file);
            let dirStats = null;
            try {
              dirStats = yield fs6.stat(dir);
            } catch (err) {
              if (err.code === "ENOENT") {
                yield mkdir.mkdirs(dir);
                yield fs6.writeFile(file, "");
                return;
              } else {
                throw err;
              }
            }
            if (dirStats.isDirectory()) {
              yield fs6.writeFile(file, "");
            } else {
              yield fs6.readdir(dir);
            }
          });
        }
        __name(createFile, "createFile");
        function createFileSync(file) {
          let stats;
          try {
            stats = fs6.statSync(file);
          } catch (e) {
          }
          if (stats && stats.isFile()) return;
          const dir = path22.dirname(file);
          try {
            if (!fs6.statSync(dir).isDirectory()) {
              fs6.readdirSync(dir);
            }
          } catch (err) {
            if (err && err.code === "ENOENT") mkdir.mkdirsSync(dir);
            else throw err;
          }
          fs6.writeFileSync(file, "");
        }
        __name(createFileSync, "createFileSync");
        module2.exports = {
          createFile: u2(createFile),
          createFileSync
        };
      }
    });
    var require_link2 = __commonJS2({
      "node_modules/fs-extra/lib/ensure/link.js"(exports2, module2) {
        "use strict";
        var u2 = require_universalify().fromPromise;
        var path22 = __require("path");
        var fs6 = require_fs5();
        var mkdir = require_mkdirs();
        var { pathExists } = require_path_exists();
        var { areIdentical } = require_stat();
        function createLink(srcpath, dstpath) {
          return __async(this, null, function* () {
            let dstStat;
            try {
              dstStat = yield fs6.lstat(dstpath);
            } catch (e) {
            }
            let srcStat;
            try {
              srcStat = yield fs6.lstat(srcpath);
            } catch (err) {
              err.message = err.message.replace("lstat", "ensureLink");
              throw err;
            }
            if (dstStat && areIdentical(srcStat, dstStat)) return;
            const dir = path22.dirname(dstpath);
            const dirExists = yield pathExists(dir);
            if (!dirExists) {
              yield mkdir.mkdirs(dir);
            }
            yield fs6.link(srcpath, dstpath);
          });
        }
        __name(createLink, "createLink");
        function createLinkSync(srcpath, dstpath) {
          let dstStat;
          try {
            dstStat = fs6.lstatSync(dstpath);
          } catch (e) {
          }
          try {
            const srcStat = fs6.lstatSync(srcpath);
            if (dstStat && areIdentical(srcStat, dstStat)) return;
          } catch (err) {
            err.message = err.message.replace("lstat", "ensureLink");
            throw err;
          }
          const dir = path22.dirname(dstpath);
          const dirExists = fs6.existsSync(dir);
          if (dirExists) return fs6.linkSync(srcpath, dstpath);
          mkdir.mkdirsSync(dir);
          return fs6.linkSync(srcpath, dstpath);
        }
        __name(createLinkSync, "createLinkSync");
        module2.exports = {
          createLink: u2(createLink),
          createLinkSync
        };
      }
    });
    var require_symlink_paths = __commonJS2({
      "node_modules/fs-extra/lib/ensure/symlink-paths.js"(exports2, module2) {
        "use strict";
        var path22 = __require("path");
        var fs6 = require_fs5();
        var { pathExists } = require_path_exists();
        var u2 = require_universalify().fromPromise;
        function symlinkPaths(srcpath, dstpath) {
          return __async(this, null, function* () {
            if (path22.isAbsolute(srcpath)) {
              try {
                yield fs6.lstat(srcpath);
              } catch (err) {
                err.message = err.message.replace("lstat", "ensureSymlink");
                throw err;
              }
              return {
                toCwd: srcpath,
                toDst: srcpath
              };
            }
            const dstdir = path22.dirname(dstpath);
            const relativeToDst = path22.join(dstdir, srcpath);
            const exists = yield pathExists(relativeToDst);
            if (exists) {
              return {
                toCwd: relativeToDst,
                toDst: srcpath
              };
            }
            try {
              yield fs6.lstat(srcpath);
            } catch (err) {
              err.message = err.message.replace("lstat", "ensureSymlink");
              throw err;
            }
            return {
              toCwd: srcpath,
              toDst: path22.relative(dstdir, srcpath)
            };
          });
        }
        __name(symlinkPaths, "symlinkPaths");
        function symlinkPathsSync(srcpath, dstpath) {
          if (path22.isAbsolute(srcpath)) {
            const exists2 = fs6.existsSync(srcpath);
            if (!exists2) throw new Error("absolute srcpath does not exist");
            return {
              toCwd: srcpath,
              toDst: srcpath
            };
          }
          const dstdir = path22.dirname(dstpath);
          const relativeToDst = path22.join(dstdir, srcpath);
          const exists = fs6.existsSync(relativeToDst);
          if (exists) {
            return {
              toCwd: relativeToDst,
              toDst: srcpath
            };
          }
          const srcExists = fs6.existsSync(srcpath);
          if (!srcExists) throw new Error("relative srcpath does not exist");
          return {
            toCwd: srcpath,
            toDst: path22.relative(dstdir, srcpath)
          };
        }
        __name(symlinkPathsSync, "symlinkPathsSync");
        module2.exports = {
          symlinkPaths: u2(symlinkPaths),
          symlinkPathsSync
        };
      }
    });
    var require_symlink_type = __commonJS2({
      "node_modules/fs-extra/lib/ensure/symlink-type.js"(exports2, module2) {
        "use strict";
        var fs6 = require_fs5();
        var u2 = require_universalify().fromPromise;
        function symlinkType(srcpath, type) {
          return __async(this, null, function* () {
            if (type) return type;
            let stats;
            try {
              stats = yield fs6.lstat(srcpath);
            } catch (e) {
              return "file";
            }
            return stats && stats.isDirectory() ? "dir" : "file";
          });
        }
        __name(symlinkType, "symlinkType");
        function symlinkTypeSync(srcpath, type) {
          if (type) return type;
          let stats;
          try {
            stats = fs6.lstatSync(srcpath);
          } catch (e) {
            return "file";
          }
          return stats && stats.isDirectory() ? "dir" : "file";
        }
        __name(symlinkTypeSync, "symlinkTypeSync");
        module2.exports = {
          symlinkType: u2(symlinkType),
          symlinkTypeSync
        };
      }
    });
    var require_symlink = __commonJS2({
      "node_modules/fs-extra/lib/ensure/symlink.js"(exports2, module2) {
        "use strict";
        var u2 = require_universalify().fromPromise;
        var path22 = __require("path");
        var fs6 = require_fs5();
        var { mkdirs, mkdirsSync } = require_mkdirs();
        var { symlinkPaths, symlinkPathsSync } = require_symlink_paths();
        var { symlinkType, symlinkTypeSync } = require_symlink_type();
        var { pathExists } = require_path_exists();
        var { areIdentical } = require_stat();
        function createSymlink(srcpath, dstpath, type) {
          return __async(this, null, function* () {
            let stats;
            try {
              stats = yield fs6.lstat(dstpath);
            } catch (e) {
            }
            if (stats && stats.isSymbolicLink()) {
              const [srcStat, dstStat] = yield Promise.all([
                fs6.stat(srcpath),
                fs6.stat(dstpath)
              ]);
              if (areIdentical(srcStat, dstStat)) return;
            }
            const relative = yield symlinkPaths(srcpath, dstpath);
            srcpath = relative.toDst;
            const toType = yield symlinkType(relative.toCwd, type);
            const dir = path22.dirname(dstpath);
            if (!(yield pathExists(dir))) {
              yield mkdirs(dir);
            }
            return fs6.symlink(srcpath, dstpath, toType);
          });
        }
        __name(createSymlink, "createSymlink");
        function createSymlinkSync(srcpath, dstpath, type) {
          let stats;
          try {
            stats = fs6.lstatSync(dstpath);
          } catch (e) {
          }
          if (stats && stats.isSymbolicLink()) {
            const srcStat = fs6.statSync(srcpath);
            const dstStat = fs6.statSync(dstpath);
            if (areIdentical(srcStat, dstStat)) return;
          }
          const relative = symlinkPathsSync(srcpath, dstpath);
          srcpath = relative.toDst;
          type = symlinkTypeSync(relative.toCwd, type);
          const dir = path22.dirname(dstpath);
          const exists = fs6.existsSync(dir);
          if (exists) return fs6.symlinkSync(srcpath, dstpath, type);
          mkdirsSync(dir);
          return fs6.symlinkSync(srcpath, dstpath, type);
        }
        __name(createSymlinkSync, "createSymlinkSync");
        module2.exports = {
          createSymlink: u2(createSymlink),
          createSymlinkSync
        };
      }
    });
    var require_ensure = __commonJS2({
      "node_modules/fs-extra/lib/ensure/index.js"(exports2, module2) {
        "use strict";
        var { createFile, createFileSync } = require_file2();
        var { createLink, createLinkSync } = require_link2();
        var { createSymlink, createSymlinkSync } = require_symlink();
        module2.exports = {
          // file
          createFile,
          createFileSync,
          ensureFile: createFile,
          ensureFileSync: createFileSync,
          // link
          createLink,
          createLinkSync,
          ensureLink: createLink,
          ensureLinkSync: createLinkSync,
          // symlink
          createSymlink,
          createSymlinkSync,
          ensureSymlink: createSymlink,
          ensureSymlinkSync: createSymlinkSync
        };
      }
    });
    var require_utils6 = __commonJS2({
      "node_modules/jsonfile/utils.js"(exports2, module2) {
        "use strict";
        function stringify2(obj, { EOL: EOL3 = "\n", finalEOL = true, replacer = null, spaces } = {}) {
          const EOF = finalEOL ? EOL3 : "";
          const str = JSON.stringify(obj, replacer, spaces);
          return str.replace(/\n/g, EOL3) + EOF;
        }
        __name(stringify2, "stringify");
        function stripBom(content) {
          if (Buffer.isBuffer(content)) content = content.toString("utf8");
          return content.replace(/^\uFEFF/, "");
        }
        __name(stripBom, "stripBom");
        module2.exports = { stringify: stringify2, stripBom };
      }
    });
    var require_jsonfile = __commonJS2({
      "node_modules/jsonfile/index.js"(exports2, module2) {
        "use strict";
        var _fs2;
        try {
          _fs2 = require_graceful_fs();
        } catch (_) {
          _fs2 = __require("fs");
        }
        var universalify = require_universalify();
        var { stringify: stringify2, stripBom } = require_utils6();
        function _readFile(_0) {
          return __async(this, arguments, function* (file, options = {}) {
            if (typeof options === "string") {
              options = { encoding: options };
            }
            const fs6 = options.fs || _fs2;
            const shouldThrow = "throws" in options ? options.throws : true;
            let data = yield universalify.fromCallback(fs6.readFile)(file, options);
            data = stripBom(data);
            let obj;
            try {
              obj = JSON.parse(data, options ? options.reviver : null);
            } catch (err) {
              if (shouldThrow) {
                err.message = `${file}: ${err.message}`;
                throw err;
              } else {
                return null;
              }
            }
            return obj;
          });
        }
        __name(_readFile, "_readFile");
        var readFile = universalify.fromPromise(_readFile);
        function readFileSync(file, options = {}) {
          if (typeof options === "string") {
            options = { encoding: options };
          }
          const fs6 = options.fs || _fs2;
          const shouldThrow = "throws" in options ? options.throws : true;
          try {
            let content = fs6.readFileSync(file, options);
            content = stripBom(content);
            return JSON.parse(content, options.reviver);
          } catch (err) {
            if (shouldThrow) {
              err.message = `${file}: ${err.message}`;
              throw err;
            } else {
              return null;
            }
          }
        }
        __name(readFileSync, "readFileSync");
        function _writeFile(_0, _1) {
          return __async(this, arguments, function* (file, obj, options = {}) {
            const fs6 = options.fs || _fs2;
            const str = stringify2(obj, options);
            yield universalify.fromCallback(fs6.writeFile)(file, str, options);
          });
        }
        __name(_writeFile, "_writeFile");
        var writeFile = universalify.fromPromise(_writeFile);
        function writeFileSync(file, obj, options = {}) {
          const fs6 = options.fs || _fs2;
          const str = stringify2(obj, options);
          return fs6.writeFileSync(file, str, options);
        }
        __name(writeFileSync, "writeFileSync");
        var jsonfile = {
          readFile,
          readFileSync,
          writeFile,
          writeFileSync
        };
        module2.exports = jsonfile;
      }
    });
    var require_jsonfile2 = __commonJS2({
      "node_modules/fs-extra/lib/json/jsonfile.js"(exports2, module2) {
        "use strict";
        var jsonFile = require_jsonfile();
        module2.exports = {
          // jsonfile exports
          readJson: jsonFile.readFile,
          readJsonSync: jsonFile.readFileSync,
          writeJson: jsonFile.writeFile,
          writeJsonSync: jsonFile.writeFileSync
        };
      }
    });
    var require_output_file = __commonJS2({
      "node_modules/fs-extra/lib/output-file/index.js"(exports2, module2) {
        "use strict";
        var u2 = require_universalify().fromPromise;
        var fs6 = require_fs5();
        var path22 = __require("path");
        var mkdir = require_mkdirs();
        var pathExists = require_path_exists().pathExists;
        function outputFile(file, data, encoding = "utf-8") {
          return __async(this, null, function* () {
            const dir = path22.dirname(file);
            if (!(yield pathExists(dir))) {
              yield mkdir.mkdirs(dir);
            }
            return fs6.writeFile(file, data, encoding);
          });
        }
        __name(outputFile, "outputFile");
        function outputFileSync(file, ...args) {
          const dir = path22.dirname(file);
          if (!fs6.existsSync(dir)) {
            mkdir.mkdirsSync(dir);
          }
          fs6.writeFileSync(file, ...args);
        }
        __name(outputFileSync, "outputFileSync");
        module2.exports = {
          outputFile: u2(outputFile),
          outputFileSync
        };
      }
    });
    var require_output_json = __commonJS2({
      "node_modules/fs-extra/lib/json/output-json.js"(exports2, module2) {
        "use strict";
        var { stringify: stringify2 } = require_utils6();
        var { outputFile } = require_output_file();
        function outputJson(_0, _1) {
          return __async(this, arguments, function* (file, data, options = {}) {
            const str = stringify2(data, options);
            yield outputFile(file, str, options);
          });
        }
        __name(outputJson, "outputJson");
        module2.exports = outputJson;
      }
    });
    var require_output_json_sync = __commonJS2({
      "node_modules/fs-extra/lib/json/output-json-sync.js"(exports2, module2) {
        "use strict";
        var { stringify: stringify2 } = require_utils6();
        var { outputFileSync } = require_output_file();
        function outputJsonSync(file, data, options) {
          const str = stringify2(data, options);
          outputFileSync(file, str, options);
        }
        __name(outputJsonSync, "outputJsonSync");
        module2.exports = outputJsonSync;
      }
    });
    var require_json = __commonJS2({
      "node_modules/fs-extra/lib/json/index.js"(exports2, module2) {
        "use strict";
        var u2 = require_universalify().fromPromise;
        var jsonFile = require_jsonfile2();
        jsonFile.outputJson = u2(require_output_json());
        jsonFile.outputJsonSync = require_output_json_sync();
        jsonFile.outputJSON = jsonFile.outputJson;
        jsonFile.outputJSONSync = jsonFile.outputJsonSync;
        jsonFile.writeJSON = jsonFile.writeJson;
        jsonFile.writeJSONSync = jsonFile.writeJsonSync;
        jsonFile.readJSON = jsonFile.readJson;
        jsonFile.readJSONSync = jsonFile.readJsonSync;
        module2.exports = jsonFile;
      }
    });
    var require_move = __commonJS2({
      "node_modules/fs-extra/lib/move/move.js"(exports2, module2) {
        "use strict";
        var fs6 = require_fs5();
        var path22 = __require("path");
        var { copy } = require_copy2();
        var { remove } = require_remove();
        var { mkdirp } = require_mkdirs();
        var { pathExists } = require_path_exists();
        var stat = require_stat();
        function move(_0, _1) {
          return __async(this, arguments, function* (src, dest, opts = {}) {
            const overwrite = opts.overwrite || opts.clobber || false;
            const { srcStat, isChangingCase = false } = yield stat.checkPaths(src, dest, "move", opts);
            yield stat.checkParentPaths(src, srcStat, dest, "move");
            const destParent = path22.dirname(dest);
            const parsedParentPath = path22.parse(destParent);
            if (parsedParentPath.root !== destParent) {
              yield mkdirp(destParent);
            }
            return doRename(src, dest, overwrite, isChangingCase);
          });
        }
        __name(move, "move");
        function doRename(src, dest, overwrite, isChangingCase) {
          return __async(this, null, function* () {
            if (!isChangingCase) {
              if (overwrite) {
                yield remove(dest);
              } else if (yield pathExists(dest)) {
                throw new Error("dest already exists.");
              }
            }
            try {
              yield fs6.rename(src, dest);
            } catch (err) {
              if (err.code !== "EXDEV") {
                throw err;
              }
              yield moveAcrossDevice(src, dest, overwrite);
            }
          });
        }
        __name(doRename, "doRename");
        function moveAcrossDevice(src, dest, overwrite) {
          return __async(this, null, function* () {
            const opts = {
              overwrite,
              errorOnExist: true,
              preserveTimestamps: true
            };
            yield copy(src, dest, opts);
            return remove(src);
          });
        }
        __name(moveAcrossDevice, "moveAcrossDevice");
        module2.exports = move;
      }
    });
    var require_move_sync = __commonJS2({
      "node_modules/fs-extra/lib/move/move-sync.js"(exports2, module2) {
        "use strict";
        var fs6 = require_graceful_fs();
        var path22 = __require("path");
        var copySync = require_copy2().copySync;
        var removeSync = require_remove().removeSync;
        var mkdirpSync = require_mkdirs().mkdirpSync;
        var stat = require_stat();
        function moveSync(src, dest, opts) {
          opts = opts || {};
          const overwrite = opts.overwrite || opts.clobber || false;
          const { srcStat, isChangingCase = false } = stat.checkPathsSync(src, dest, "move", opts);
          stat.checkParentPathsSync(src, srcStat, dest, "move");
          if (!isParentRoot(dest)) mkdirpSync(path22.dirname(dest));
          return doRename(src, dest, overwrite, isChangingCase);
        }
        __name(moveSync, "moveSync");
        function isParentRoot(dest) {
          const parent = path22.dirname(dest);
          const parsedPath = path22.parse(parent);
          return parsedPath.root === parent;
        }
        __name(isParentRoot, "isParentRoot");
        function doRename(src, dest, overwrite, isChangingCase) {
          if (isChangingCase) return rename(src, dest, overwrite);
          if (overwrite) {
            removeSync(dest);
            return rename(src, dest, overwrite);
          }
          if (fs6.existsSync(dest)) throw new Error("dest already exists.");
          return rename(src, dest, overwrite);
        }
        __name(doRename, "doRename");
        function rename(src, dest, overwrite) {
          try {
            fs6.renameSync(src, dest);
          } catch (err) {
            if (err.code !== "EXDEV") throw err;
            return moveAcrossDevice(src, dest, overwrite);
          }
        }
        __name(rename, "rename");
        function moveAcrossDevice(src, dest, overwrite) {
          const opts = {
            overwrite,
            errorOnExist: true,
            preserveTimestamps: true
          };
          copySync(src, dest, opts);
          return removeSync(src);
        }
        __name(moveAcrossDevice, "moveAcrossDevice");
        module2.exports = moveSync;
      }
    });
    var require_move2 = __commonJS2({
      "node_modules/fs-extra/lib/move/index.js"(exports2, module2) {
        "use strict";
        var u2 = require_universalify().fromPromise;
        module2.exports = {
          move: u2(require_move()),
          moveSync: require_move_sync()
        };
      }
    });
    var require_lib6 = __commonJS2({
      "node_modules/fs-extra/lib/index.js"(exports2, module2) {
        "use strict";
        module2.exports = __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, require_fs5()), require_copy2()), require_empty()), require_ensure()), require_json()), require_mkdirs()), require_move2()), require_output_file()), require_path_exists()), require_remove());
      }
    });
    var require_node_abort_controller = __commonJS2({
      "node_modules/node-abort-controller/index.js"(exports2, module2) {
        "use strict";
        var { EventEmitter: EventEmitter3 } = __require("events");
        var AbortSignal2 = class {
          static {
            __name(this, "AbortSignal");
          }
          constructor() {
            this.eventEmitter = new EventEmitter3();
            this.onabort = null;
            this.aborted = false;
            this.reason = void 0;
          }
          toString() {
            return "[object AbortSignal]";
          }
          get [Symbol.toStringTag]() {
            return "AbortSignal";
          }
          removeEventListener(name, handler) {
            this.eventEmitter.removeListener(name, handler);
          }
          addEventListener(name, handler) {
            this.eventEmitter.on(name, handler);
          }
          dispatchEvent(type) {
            const event = { type, target: this };
            const handlerName = `on${type}`;
            if (typeof this[handlerName] === "function") this[handlerName](event);
            this.eventEmitter.emit(type, event);
          }
          throwIfAborted() {
            if (this.aborted) {
              throw this.reason;
            }
          }
          static abort(reason) {
            const controller = new AbortController3();
            controller.abort();
            return controller.signal;
          }
          static timeout(time) {
            const controller = new AbortController3();
            setTimeout(() => controller.abort(new Error("TimeoutError")), time);
            return controller.signal;
          }
        };
        var AbortController3 = class {
          static {
            __name(this, "AbortController3");
          }
          constructor() {
            this.signal = new AbortSignal2();
          }
          abort(reason) {
            if (this.signal.aborted) return;
            this.signal.aborted = true;
            if (reason) this.signal.reason = reason;
            else this.signal.reason = new Error("AbortError");
            this.signal.dispatchEvent("abort");
          }
          toString() {
            return "[object AbortController]";
          }
          get [Symbol.toStringTag]() {
            return "AbortController";
          }
        };
        module2.exports = { AbortController: AbortController3, AbortSignal: AbortSignal2 };
      }
    });
    var require_create_require = __commonJS2({
      "node_modules/create-require/create-require.js"(exports2, module2) {
        "use strict";
        var nativeModule = __require("module");
        var path22 = __require("path");
        var fs6 = __require("fs");
        function createRequire22(filename) {
          if (!filename) {
            filename = process.cwd();
          }
          if (isDir(filename)) {
            filename = path22.join(filename, "index.js");
          }
          if (nativeModule.createRequire) {
            return nativeModule.createRequire(filename);
          }
          if (nativeModule.createRequireFromPath) {
            return nativeModule.createRequireFromPath(filename);
          }
          return _createRequire2(filename);
        }
        __name(createRequire22, "createRequire2");
        function _createRequire2(filename) {
          const mod = new nativeModule.Module(filename, null);
          mod.filename = filename;
          mod.paths = nativeModule.Module._nodeModulePaths(path22.dirname(filename));
          mod._compile("module.exports = require;", filename);
          return mod.exports;
        }
        __name(_createRequire2, "_createRequire2");
        function isDir(path32) {
          try {
            const stat = fs6.lstatSync(path32);
            return stat.isDirectory();
          } catch (e) {
            return false;
          }
        }
        __name(isDir, "isDir");
        module2.exports = createRequire22;
      }
    });
    function f(e) {
      return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, "default") ? e.default : e;
    }
    __name(f, "f");
    var t;
    var o;
    var n;
    var init_node_fetch_native_1a4a356d = __esm2({
      "node_modules/node-fetch-native/dist/shared/node-fetch-native.1a4a356d.mjs"() {
        "use strict";
        t = Object.defineProperty;
        o = /* @__PURE__ */ __name((e, l2) => t(e, "name", { value: l2, configurable: true }), "o");
        n = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
        o(f, "getDefaultExportFromCjs");
      }
    });
    var multipart_parser_exports = {};
    __export2(multipart_parser_exports, {
      toFormData: /* @__PURE__ */ __name(() => Z, "toFormData")
    });
    function v(u2) {
      const a2 = u2.match(/\bfilename=("(.*?)"|([^()<>@,;:\\"/[\]?={}\s\t]+))($|;\s)/i);
      if (!a2) return;
      const n3 = a2[2] || a2[3] || "";
      let r = n3.slice(n3.lastIndexOf("\\") + 1);
      return r = r.replace(/%22/g, '"'), r = r.replace(/&#(\d{4});/g, (d2, l2) => String.fromCharCode(l2)), r;
    }
    __name(v, "v");
    function Z(u2, a2) {
      return __async(this, null, function* () {
        if (!/multipart/i.test(a2)) throw new TypeError("Failed to fetch");
        const n3 = a2.match(/boundary=(?:"([^"]+)"|([^;]+))/i);
        if (!n3) throw new TypeError("no or bad content-type header, no multipart boundary");
        const r = new k(n3[1] || n3[2]);
        let d2, l2, c, p, e, i;
        const A2 = [], H2 = new br(), O2 = E((s2) => {
          c += f3.decode(s2, { stream: true });
        }, "onPartData"), y = E((s2) => {
          A2.push(s2);
        }, "appendToFile"), o3 = E(() => {
          const s2 = new On(A2, i, { type: e });
          H2.append(p, s2);
        }, "appendFileToFormData"), L = E(() => {
          H2.append(p, c);
        }, "appendEntryToFormData"), f3 = new TextDecoder("utf-8");
        f3.decode(), r.onPartBegin = function() {
          r.onPartData = O2, r.onPartEnd = L, d2 = "", l2 = "", c = "", p = "", e = "", i = null, A2.length = 0;
        }, r.onHeaderField = function(s2) {
          d2 += f3.decode(s2, { stream: true });
        }, r.onHeaderValue = function(s2) {
          l2 += f3.decode(s2, { stream: true });
        }, r.onHeaderEnd = function() {
          if (l2 += f3.decode(), d2 = d2.toLowerCase(), d2 === "content-disposition") {
            const s2 = l2.match(/\bname=("([^"]*)"|([^()<>@,;:\\"/[\]?={}\s\t]+))/i);
            s2 && (p = s2[2] || s2[3] || ""), i = v(l2), i && (r.onPartData = y, r.onPartEnd = o3);
          } else d2 === "content-type" && (e = l2);
          l2 = "", d2 = "";
        };
        try {
          for (var iter = __forAwait(u2), more, temp, error; more = !(temp = yield iter.next()).done; more = false) {
            const s2 = temp.value;
            r.write(s2);
          }
        } catch (temp2) {
          error = [temp2];
        } finally {
          try {
            more && (temp = iter.return) && (yield temp.call(iter));
          } finally {
            if (error)
              throw error[0];
          }
        }
        return r.end(), H2;
      });
    }
    __name(Z, "Z");
    var import_node_fs3;
    var import_node_path3;
    var import_node_http;
    var import_node_https;
    var import_node_zlib;
    var import_node_stream4;
    var import_node_buffer;
    var import_node_util2;
    var import_node_url2;
    var import_node_net;
    var B;
    var E;
    var D;
    var t2;
    var w;
    var R;
    var g;
    var N;
    var x;
    var P;
    var C;
    var I;
    var M;
    var $2;
    var m;
    var F;
    var k;
    var init_multipart_parser = __esm2({
      "node_modules/node-fetch-native/dist/chunks/multipart-parser.mjs"() {
        "use strict";
        import_node_fs3 = __require("fs");
        import_node_path3 = __require("path");
        init_node();
        import_node_http = __require("http");
        import_node_https = __require("https");
        import_node_zlib = __require("zlib");
        import_node_stream4 = __require("stream");
        import_node_buffer = __require("buffer");
        import_node_util2 = __require("util");
        init_node_fetch_native_1a4a356d();
        import_node_url2 = __require("url");
        import_node_net = __require("net");
        B = Object.defineProperty;
        E = /* @__PURE__ */ __name((u2, a2) => B(u2, "name", { value: a2, configurable: true }), "E");
        D = 0;
        t2 = { START_BOUNDARY: D++, HEADER_FIELD_START: D++, HEADER_FIELD: D++, HEADER_VALUE_START: D++, HEADER_VALUE: D++, HEADER_VALUE_ALMOST_DONE: D++, HEADERS_ALMOST_DONE: D++, PART_DATA_START: D++, PART_DATA: D++, END: D++ };
        w = 1;
        R = { PART_BOUNDARY: w, LAST_BOUNDARY: w *= 2 };
        g = 10;
        N = 13;
        x = 32;
        P = 45;
        C = 58;
        I = 97;
        M = 122;
        $2 = E((u2) => u2 | 32, "lower");
        m = E(() => {
        }, "noop");
        F = class F2 {
          static {
            __name(this, "F2");
          }
          constructor(a2) {
            this.index = 0, this.flags = 0, this.onHeaderEnd = m, this.onHeaderField = m, this.onHeadersEnd = m, this.onHeaderValue = m, this.onPartBegin = m, this.onPartData = m, this.onPartEnd = m, this.boundaryChars = {}, a2 = `\r
--` + a2;
            const n3 = new Uint8Array(a2.length);
            for (let r = 0; r < a2.length; r++) n3[r] = a2.charCodeAt(r), this.boundaryChars[n3[r]] = true;
            this.boundary = n3, this.lookbehind = new Uint8Array(this.boundary.length + 8), this.state = t2.START_BOUNDARY;
          }
          write(a2) {
            let n3 = 0;
            const r = a2.length;
            let d2 = this.index, { lookbehind: l2, boundary: c, boundaryChars: p, index: e, state: i, flags: A2 } = this;
            const H2 = this.boundary.length, O2 = H2 - 1, y = a2.length;
            let o3, L;
            const f3 = E((h) => {
              this[h + "Mark"] = n3;
            }, "mark"), s2 = E((h) => {
              delete this[h + "Mark"];
            }, "clear"), T2 = E((h, S, _, U) => {
              (S === void 0 || S !== _) && this[h](U && U.subarray(S, _));
            }, "callback"), b = E((h, S) => {
              const _ = h + "Mark";
              _ in this && (S ? (T2(h, this[_], n3, a2), delete this[_]) : (T2(h, this[_], a2.length, a2), this[_] = 0));
            }, "dataCallback");
            for (n3 = 0; n3 < r; n3++) switch (o3 = a2[n3], i) {
              case t2.START_BOUNDARY:
                if (e === c.length - 2) {
                  if (o3 === P) A2 |= R.LAST_BOUNDARY;
                  else if (o3 !== N) return;
                  e++;
                  break;
                } else if (e - 1 === c.length - 2) {
                  if (A2 & R.LAST_BOUNDARY && o3 === P) i = t2.END, A2 = 0;
                  else if (!(A2 & R.LAST_BOUNDARY) && o3 === g) e = 0, T2("onPartBegin"), i = t2.HEADER_FIELD_START;
                  else return;
                  break;
                }
                o3 !== c[e + 2] && (e = -2), o3 === c[e + 2] && e++;
                break;
              case t2.HEADER_FIELD_START:
                i = t2.HEADER_FIELD, f3("onHeaderField"), e = 0;
              case t2.HEADER_FIELD:
                if (o3 === N) {
                  s2("onHeaderField"), i = t2.HEADERS_ALMOST_DONE;
                  break;
                }
                if (e++, o3 === P) break;
                if (o3 === C) {
                  if (e === 1) return;
                  b("onHeaderField", true), i = t2.HEADER_VALUE_START;
                  break;
                }
                if (L = $2(o3), L < I || L > M) return;
                break;
              case t2.HEADER_VALUE_START:
                if (o3 === x) break;
                f3("onHeaderValue"), i = t2.HEADER_VALUE;
              case t2.HEADER_VALUE:
                o3 === N && (b("onHeaderValue", true), T2("onHeaderEnd"), i = t2.HEADER_VALUE_ALMOST_DONE);
                break;
              case t2.HEADER_VALUE_ALMOST_DONE:
                if (o3 !== g) return;
                i = t2.HEADER_FIELD_START;
                break;
              case t2.HEADERS_ALMOST_DONE:
                if (o3 !== g) return;
                T2("onHeadersEnd"), i = t2.PART_DATA_START;
                break;
              case t2.PART_DATA_START:
                i = t2.PART_DATA, f3("onPartData");
              case t2.PART_DATA:
                if (d2 = e, e === 0) {
                  for (n3 += O2; n3 < y && !(a2[n3] in p); ) n3 += H2;
                  n3 -= O2, o3 = a2[n3];
                }
                if (e < c.length) c[e] === o3 ? (e === 0 && b("onPartData", true), e++) : e = 0;
                else if (e === c.length) e++, o3 === N ? A2 |= R.PART_BOUNDARY : o3 === P ? A2 |= R.LAST_BOUNDARY : e = 0;
                else if (e - 1 === c.length) if (A2 & R.PART_BOUNDARY) {
                  if (e = 0, o3 === g) {
                    A2 &= ~R.PART_BOUNDARY, T2("onPartEnd"), T2("onPartBegin"), i = t2.HEADER_FIELD_START;
                    break;
                  }
                } else A2 & R.LAST_BOUNDARY && o3 === P ? (T2("onPartEnd"), i = t2.END, A2 = 0) : e = 0;
                if (e > 0) l2[e - 1] = o3;
                else if (d2 > 0) {
                  const h = new Uint8Array(l2.buffer, l2.byteOffset, l2.byteLength);
                  T2("onPartData", 0, d2, h), d2 = 0, f3("onPartData"), n3--;
                }
                break;
              case t2.END:
                break;
              default:
                throw new Error(`Unexpected state entered: ${i}`);
            }
            b("onHeaderField"), b("onHeaderValue"), b("onPartData"), this.index = e, this.state = i, this.flags = A2;
          }
          end() {
            if (this.state === t2.HEADER_FIELD_START && this.index === 0 || this.state === t2.PART_DATA && this.index === this.boundary.length) this.onPartEnd();
            else if (this.state !== t2.END) throw new Error("MultipartParser.end(): stream ended unexpectedly");
          }
        };
        E(F, "MultipartParser");
        k = F;
        E(v, "_fileName");
        E(Z, "toFormData");
      }
    });
    function js(i) {
      if (!/^data:/i.test(i)) throw new TypeError('`uri` does not appear to be a Data URI (must begin with "data:")');
      i = i.replace(/\r?\n/g, "");
      const o3 = i.indexOf(",");
      if (o3 === -1 || o3 <= 4) throw new TypeError("malformed data: URI");
      const a2 = i.substring(5, o3).split(";");
      let u2 = "", l2 = false;
      const p = a2[0] || "text/plain";
      let h = p;
      for (let E2 = 1; E2 < a2.length; E2++) a2[E2] === "base64" ? l2 = true : a2[E2] && (h += `;${a2[E2]}`, a2[E2].indexOf("charset=") === 0 && (u2 = a2[E2].substring(8)));
      !a2[0] && !u2.length && (h += ";charset=US-ASCII", u2 = "US-ASCII");
      const g3 = l2 ? "base64" : "ascii", A2 = unescape(i.substring(o3 + 1)), w2 = Buffer.from(A2, g3);
      return w2.type = p, w2.typeFull = h, w2.charset = u2, w2;
    }
    __name(js, "js");
    function Ls() {
      return di || (di = 1, function(i, o3) {
        (function(a2, u2) {
          u2(o3);
        })(n, function(a2) {
          function u2() {
          }
          __name(u2, "u2");
          n2(u2, "noop");
          function l2(e) {
            return typeof e == "object" && e !== null || typeof e == "function";
          }
          __name(l2, "l2");
          n2(l2, "typeIsObject");
          const p = u2;
          function h(e, t4) {
            try {
              Object.defineProperty(e, "name", { value: t4, configurable: true });
            } catch (e2) {
            }
          }
          __name(h, "h");
          n2(h, "setFunctionName");
          const g3 = Promise, A2 = Promise.prototype.then, w2 = Promise.reject.bind(g3);
          function E2(e) {
            return new g3(e);
          }
          __name(E2, "E2");
          n2(E2, "newPromise");
          function T2(e) {
            return E2((t4) => t4(e));
          }
          __name(T2, "T2");
          n2(T2, "promiseResolvedWith");
          function b(e) {
            return w2(e);
          }
          __name(b, "b");
          n2(b, "promiseRejectedWith");
          function q(e, t4, r) {
            return A2.call(e, t4, r);
          }
          __name(q, "q");
          n2(q, "PerformPromiseThen");
          function _(e, t4, r) {
            q(q(e, t4, r), void 0, p);
          }
          __name(_, "_");
          n2(_, "uponPromise");
          function V(e, t4) {
            _(e, t4);
          }
          __name(V, "V");
          n2(V, "uponFulfillment");
          function I2(e, t4) {
            _(e, void 0, t4);
          }
          __name(I2, "I2");
          n2(I2, "uponRejection");
          function F3(e, t4, r) {
            return q(e, t4, r);
          }
          __name(F3, "F3");
          n2(F3, "transformPromiseWith");
          function Q(e) {
            q(e, void 0, p);
          }
          __name(Q, "Q");
          n2(Q, "setPromiseIsHandledToTrue");
          let ge = n2((e) => {
            if (typeof queueMicrotask == "function") ge = queueMicrotask;
            else {
              const t4 = T2(void 0);
              ge = n2((r) => q(t4, r), "_queueMicrotask");
            }
            return ge(e);
          }, "_queueMicrotask");
          function z(e, t4, r) {
            if (typeof e != "function") throw new TypeError("Argument is not a function");
            return Function.prototype.apply.call(e, t4, r);
          }
          __name(z, "z");
          n2(z, "reflectCall");
          function j(e, t4, r) {
            try {
              return T2(z(e, t4, r));
            } catch (s2) {
              return b(s2);
            }
          }
          __name(j, "j");
          n2(j, "promiseCall");
          const U = 16384, bn = class bn {
            static {
              __name(this, "bn");
            }
            constructor() {
              this._cursor = 0, this._size = 0, this._front = { _elements: [], _next: void 0 }, this._back = this._front, this._cursor = 0, this._size = 0;
            }
            get length() {
              return this._size;
            }
            push(t4) {
              const r = this._back;
              let s2 = r;
              r._elements.length === U - 1 && (s2 = { _elements: [], _next: void 0 }), r._elements.push(t4), s2 !== r && (this._back = s2, r._next = s2), ++this._size;
            }
            shift() {
              const t4 = this._front;
              let r = t4;
              const s2 = this._cursor;
              let f3 = s2 + 1;
              const c = t4._elements, d2 = c[s2];
              return f3 === U && (r = t4._next, f3 = 0), --this._size, this._cursor = f3, t4 !== r && (this._front = r), c[s2] = void 0, d2;
            }
            forEach(t4) {
              let r = this._cursor, s2 = this._front, f3 = s2._elements;
              for (; (r !== f3.length || s2._next !== void 0) && !(r === f3.length && (s2 = s2._next, f3 = s2._elements, r = 0, f3.length === 0)); ) t4(f3[r]), ++r;
            }
            peek() {
              const t4 = this._front, r = this._cursor;
              return t4._elements[r];
            }
          };
          n2(bn, "SimpleQueue");
          let D2 = bn;
          const Ft = Symbol("[[AbortSteps]]"), Qn = Symbol("[[ErrorSteps]]"), Ar = Symbol("[[CancelSteps]]"), Br = Symbol("[[PullSteps]]"), kr = Symbol("[[ReleaseSteps]]");
          function Yn(e, t4) {
            e._ownerReadableStream = t4, t4._reader = e, t4._state === "readable" ? qr(e) : t4._state === "closed" ? Li(e) : Gn(e, t4._storedError);
          }
          __name(Yn, "Yn");
          n2(Yn, "ReadableStreamReaderGenericInitialize");
          function Wr(e, t4) {
            const r = e._ownerReadableStream;
            return ie(r, t4);
          }
          __name(Wr, "Wr");
          n2(Wr, "ReadableStreamReaderGenericCancel");
          function _e(e) {
            const t4 = e._ownerReadableStream;
            t4._state === "readable" ? Or(e, new TypeError("Reader was released and can no longer be used to monitor the stream's closedness")) : $i(e, new TypeError("Reader was released and can no longer be used to monitor the stream's closedness")), t4._readableStreamController[kr](), t4._reader = void 0, e._ownerReadableStream = void 0;
          }
          __name(_e, "_e");
          n2(_e, "ReadableStreamReaderGenericRelease");
          function jt(e) {
            return new TypeError("Cannot " + e + " a stream using a released reader");
          }
          __name(jt, "jt");
          n2(jt, "readerLockException");
          function qr(e) {
            e._closedPromise = E2((t4, r) => {
              e._closedPromise_resolve = t4, e._closedPromise_reject = r;
            });
          }
          __name(qr, "qr");
          n2(qr, "defaultReaderClosedPromiseInitialize");
          function Gn(e, t4) {
            qr(e), Or(e, t4);
          }
          __name(Gn, "Gn");
          n2(Gn, "defaultReaderClosedPromiseInitializeAsRejected");
          function Li(e) {
            qr(e), Zn(e);
          }
          __name(Li, "Li");
          n2(Li, "defaultReaderClosedPromiseInitializeAsResolved");
          function Or(e, t4) {
            e._closedPromise_reject !== void 0 && (Q(e._closedPromise), e._closedPromise_reject(t4), e._closedPromise_resolve = void 0, e._closedPromise_reject = void 0);
          }
          __name(Or, "Or");
          n2(Or, "defaultReaderClosedPromiseReject");
          function $i(e, t4) {
            Gn(e, t4);
          }
          __name($i, "$i");
          n2($i, "defaultReaderClosedPromiseResetToRejected");
          function Zn(e) {
            e._closedPromise_resolve !== void 0 && (e._closedPromise_resolve(void 0), e._closedPromise_resolve = void 0, e._closedPromise_reject = void 0);
          }
          __name(Zn, "Zn");
          n2(Zn, "defaultReaderClosedPromiseResolve");
          const Kn = Number.isFinite || function(e) {
            return typeof e == "number" && isFinite(e);
          }, Di = Math.trunc || function(e) {
            return e < 0 ? Math.ceil(e) : Math.floor(e);
          };
          function Mi(e) {
            return typeof e == "object" || typeof e == "function";
          }
          __name(Mi, "Mi");
          n2(Mi, "isDictionary");
          function ue(e, t4) {
            if (e !== void 0 && !Mi(e)) throw new TypeError(`${t4} is not an object.`);
          }
          __name(ue, "ue");
          n2(ue, "assertDictionary");
          function Z2(e, t4) {
            if (typeof e != "function") throw new TypeError(`${t4} is not a function.`);
          }
          __name(Z2, "Z2");
          n2(Z2, "assertFunction");
          function Ui(e) {
            return typeof e == "object" && e !== null || typeof e == "function";
          }
          __name(Ui, "Ui");
          n2(Ui, "isObject");
          function Jn(e, t4) {
            if (!Ui(e)) throw new TypeError(`${t4} is not an object.`);
          }
          __name(Jn, "Jn");
          n2(Jn, "assertObject");
          function Se(e, t4, r) {
            if (e === void 0) throw new TypeError(`Parameter ${t4} is required in '${r}'.`);
          }
          __name(Se, "Se");
          n2(Se, "assertRequiredArgument");
          function zr(e, t4, r) {
            if (e === void 0) throw new TypeError(`${t4} is required in '${r}'.`);
          }
          __name(zr, "zr");
          n2(zr, "assertRequiredField");
          function Ir(e) {
            return Number(e);
          }
          __name(Ir, "Ir");
          n2(Ir, "convertUnrestrictedDouble");
          function Xn(e) {
            return e === 0 ? 0 : e;
          }
          __name(Xn, "Xn");
          n2(Xn, "censorNegativeZero");
          function xi(e) {
            return Xn(Di(e));
          }
          __name(xi, "xi");
          n2(xi, "integerPart");
          function Fr(e, t4) {
            const s2 = Number.MAX_SAFE_INTEGER;
            let f3 = Number(e);
            if (f3 = Xn(f3), !Kn(f3)) throw new TypeError(`${t4} is not a finite number`);
            if (f3 = xi(f3), f3 < 0 || f3 > s2) throw new TypeError(`${t4} is outside the accepted range of 0 to ${s2}, inclusive`);
            return !Kn(f3) || f3 === 0 ? 0 : f3;
          }
          __name(Fr, "Fr");
          n2(Fr, "convertUnsignedLongLongWithEnforceRange");
          function jr(e, t4) {
            if (!We(e)) throw new TypeError(`${t4} is not a ReadableStream.`);
          }
          __name(jr, "jr");
          n2(jr, "assertReadableStream");
          function Qe(e) {
            return new fe(e);
          }
          __name(Qe, "Qe");
          n2(Qe, "AcquireReadableStreamDefaultReader");
          function eo(e, t4) {
            e._reader._readRequests.push(t4);
          }
          __name(eo, "eo");
          n2(eo, "ReadableStreamAddReadRequest");
          function Lr(e, t4, r) {
            const f3 = e._reader._readRequests.shift();
            r ? f3._closeSteps() : f3._chunkSteps(t4);
          }
          __name(Lr, "Lr");
          n2(Lr, "ReadableStreamFulfillReadRequest");
          function Lt(e) {
            return e._reader._readRequests.length;
          }
          __name(Lt, "Lt");
          n2(Lt, "ReadableStreamGetNumReadRequests");
          function to(e) {
            const t4 = e._reader;
            return !(t4 === void 0 || !Ee(t4));
          }
          __name(to, "to");
          n2(to, "ReadableStreamHasDefaultReader");
          const mn = class mn {
            static {
              __name(this, "mn");
            }
            constructor(t4) {
              if (Se(t4, 1, "ReadableStreamDefaultReader"), jr(t4, "First parameter"), qe(t4)) throw new TypeError("This stream has already been locked for exclusive reading by another reader");
              Yn(this, t4), this._readRequests = new D2();
            }
            get closed() {
              return Ee(this) ? this._closedPromise : b($t("closed"));
            }
            cancel(t4 = void 0) {
              return Ee(this) ? this._ownerReadableStream === void 0 ? b(jt("cancel")) : Wr(this, t4) : b($t("cancel"));
            }
            read() {
              if (!Ee(this)) return b($t("read"));
              if (this._ownerReadableStream === void 0) return b(jt("read from"));
              let t4, r;
              const s2 = E2((c, d2) => {
                t4 = c, r = d2;
              });
              return mt(this, { _chunkSteps: /* @__PURE__ */ __name((c) => t4({ value: c, done: false }), "_chunkSteps"), _closeSteps: /* @__PURE__ */ __name(() => t4({ value: void 0, done: true }), "_closeSteps"), _errorSteps: /* @__PURE__ */ __name((c) => r(c), "_errorSteps") }), s2;
            }
            releaseLock() {
              if (!Ee(this)) throw $t("releaseLock");
              this._ownerReadableStream !== void 0 && Ni(this);
            }
          };
          n2(mn, "ReadableStreamDefaultReader");
          let fe = mn;
          Object.defineProperties(fe.prototype, { cancel: { enumerable: true }, read: { enumerable: true }, releaseLock: { enumerable: true }, closed: { enumerable: true } }), h(fe.prototype.cancel, "cancel"), h(fe.prototype.read, "read"), h(fe.prototype.releaseLock, "releaseLock"), typeof Symbol.toStringTag == "symbol" && Object.defineProperty(fe.prototype, Symbol.toStringTag, { value: "ReadableStreamDefaultReader", configurable: true });
          function Ee(e) {
            return !l2(e) || !Object.prototype.hasOwnProperty.call(e, "_readRequests") ? false : e instanceof fe;
          }
          __name(Ee, "Ee");
          n2(Ee, "IsReadableStreamDefaultReader");
          function mt(e, t4) {
            const r = e._ownerReadableStream;
            r._disturbed = true, r._state === "closed" ? t4._closeSteps() : r._state === "errored" ? t4._errorSteps(r._storedError) : r._readableStreamController[Br](t4);
          }
          __name(mt, "mt");
          n2(mt, "ReadableStreamDefaultReaderRead");
          function Ni(e) {
            _e(e);
            const t4 = new TypeError("Reader was released");
            ro(e, t4);
          }
          __name(Ni, "Ni");
          n2(Ni, "ReadableStreamDefaultReaderRelease");
          function ro(e, t4) {
            const r = e._readRequests;
            e._readRequests = new D2(), r.forEach((s2) => {
              s2._errorSteps(t4);
            });
          }
          __name(ro, "ro");
          n2(ro, "ReadableStreamDefaultReaderErrorReadRequests");
          function $t(e) {
            return new TypeError(`ReadableStreamDefaultReader.prototype.${e} can only be used on a ReadableStreamDefaultReader`);
          }
          __name($t, "$t");
          n2($t, "defaultReaderBrandCheckException");
          const Hi = Object.getPrototypeOf(Object.getPrototypeOf(function() {
            return __asyncGenerator(this, null, function* () {
            });
          }).prototype || {}), yn = class yn {
            static {
              __name(this, "yn");
            }
            constructor(t4, r) {
              this._ongoingPromise = void 0, this._isFinished = false, this._reader = t4, this._preventCancel = r;
            }
            next() {
              const t4 = n2(() => this._nextSteps(), "nextSteps");
              return this._ongoingPromise = this._ongoingPromise ? F3(this._ongoingPromise, t4, t4) : t4(), this._ongoingPromise;
            }
            return(t4) {
              const r = n2(() => this._returnSteps(t4), "returnSteps");
              return this._ongoingPromise ? F3(this._ongoingPromise, r, r) : r();
            }
            _nextSteps() {
              if (this._isFinished) return Promise.resolve({ value: void 0, done: true });
              const t4 = this._reader;
              let r, s2;
              const f3 = E2((d2, m2) => {
                r = d2, s2 = m2;
              });
              return mt(t4, { _chunkSteps: /* @__PURE__ */ __name((d2) => {
                this._ongoingPromise = void 0, ge(() => r({ value: d2, done: false }));
              }, "_chunkSteps"), _closeSteps: /* @__PURE__ */ __name(() => {
                this._ongoingPromise = void 0, this._isFinished = true, _e(t4), r({ value: void 0, done: true });
              }, "_closeSteps"), _errorSteps: /* @__PURE__ */ __name((d2) => {
                this._ongoingPromise = void 0, this._isFinished = true, _e(t4), s2(d2);
              }, "_errorSteps") }), f3;
            }
            _returnSteps(t4) {
              if (this._isFinished) return Promise.resolve({ value: t4, done: true });
              this._isFinished = true;
              const r = this._reader;
              if (!this._preventCancel) {
                const s2 = Wr(r, t4);
                return _e(r), F3(s2, () => ({ value: t4, done: true }));
              }
              return _e(r), T2({ value: t4, done: true });
            }
          };
          n2(yn, "ReadableStreamAsyncIteratorImpl");
          let Dt = yn;
          const no = { next() {
            return oo(this) ? this._asyncIteratorImpl.next() : b(io("next"));
          }, return(e) {
            return oo(this) ? this._asyncIteratorImpl.return(e) : b(io("return"));
          } };
          Object.setPrototypeOf(no, Hi);
          function Vi(e, t4) {
            const r = Qe(e), s2 = new Dt(r, t4), f3 = Object.create(no);
            return f3._asyncIteratorImpl = s2, f3;
          }
          __name(Vi, "Vi");
          n2(Vi, "AcquireReadableStreamAsyncIterator");
          function oo(e) {
            if (!l2(e) || !Object.prototype.hasOwnProperty.call(e, "_asyncIteratorImpl")) return false;
            try {
              return e._asyncIteratorImpl instanceof Dt;
            } catch (e2) {
              return false;
            }
          }
          __name(oo, "oo");
          n2(oo, "IsReadableStreamAsyncIterator");
          function io(e) {
            return new TypeError(`ReadableStreamAsyncIterator.${e} can only be used on a ReadableSteamAsyncIterator`);
          }
          __name(io, "io");
          n2(io, "streamAsyncIteratorBrandCheckException");
          const ao = Number.isNaN || function(e) {
            return e !== e;
          };
          var $r, Dr, Mr;
          function yt(e) {
            return e.slice();
          }
          __name(yt, "yt");
          n2(yt, "CreateArrayFromList");
          function so(e, t4, r, s2, f3) {
            new Uint8Array(e).set(new Uint8Array(r, s2, f3), t4);
          }
          __name(so, "so");
          n2(so, "CopyDataBlockBytes");
          let we = n2((e) => (typeof e.transfer == "function" ? we = n2((t4) => t4.transfer(), "TransferArrayBuffer") : typeof structuredClone == "function" ? we = n2((t4) => structuredClone(t4, { transfer: [t4] }), "TransferArrayBuffer") : we = n2((t4) => t4, "TransferArrayBuffer"), we(e)), "TransferArrayBuffer"), Ae = n2((e) => (typeof e.detached == "boolean" ? Ae = n2((t4) => t4.detached, "IsDetachedBuffer") : Ae = n2((t4) => t4.byteLength === 0, "IsDetachedBuffer"), Ae(e)), "IsDetachedBuffer");
          function lo(e, t4, r) {
            if (e.slice) return e.slice(t4, r);
            const s2 = r - t4, f3 = new ArrayBuffer(s2);
            return so(f3, 0, e, t4, s2), f3;
          }
          __name(lo, "lo");
          n2(lo, "ArrayBufferSlice");
          function Mt(e, t4) {
            const r = e[t4];
            if (r != null) {
              if (typeof r != "function") throw new TypeError(`${String(t4)} is not a function`);
              return r;
            }
          }
          __name(Mt, "Mt");
          n2(Mt, "GetMethod");
          function Qi(e) {
            const t4 = { [Symbol.iterator]: () => e.iterator }, r = function() {
              return __asyncGenerator(this, null, function* () {
                return yield* __yieldStar(t4);
              });
            }(), s2 = r.next;
            return { iterator: r, nextMethod: s2, done: false };
          }
          __name(Qi, "Qi");
          n2(Qi, "CreateAsyncFromSyncIterator");
          const Ur = (Mr = ($r = Symbol.asyncIterator) !== null && $r !== void 0 ? $r : (Dr = Symbol.for) === null || Dr === void 0 ? void 0 : Dr.call(Symbol, "Symbol.asyncIterator")) !== null && Mr !== void 0 ? Mr : "@@asyncIterator";
          function uo(e, t4 = "sync", r) {
            if (r === void 0) if (t4 === "async") {
              if (r = Mt(e, Ur), r === void 0) {
                const c = Mt(e, Symbol.iterator), d2 = uo(e, "sync", c);
                return Qi(d2);
              }
            } else r = Mt(e, Symbol.iterator);
            if (r === void 0) throw new TypeError("The object is not iterable");
            const s2 = z(r, e, []);
            if (!l2(s2)) throw new TypeError("The iterator method must return an object");
            const f3 = s2.next;
            return { iterator: s2, nextMethod: f3, done: false };
          }
          __name(uo, "uo");
          n2(uo, "GetIterator");
          function Yi(e) {
            const t4 = z(e.nextMethod, e.iterator, []);
            if (!l2(t4)) throw new TypeError("The iterator.next() method must return an object");
            return t4;
          }
          __name(Yi, "Yi");
          n2(Yi, "IteratorNext");
          function Gi(e) {
            return !!e.done;
          }
          __name(Gi, "Gi");
          n2(Gi, "IteratorComplete");
          function Zi(e) {
            return e.value;
          }
          __name(Zi, "Zi");
          n2(Zi, "IteratorValue");
          function Ki(e) {
            return !(typeof e != "number" || ao(e) || e < 0);
          }
          __name(Ki, "Ki");
          n2(Ki, "IsNonNegativeNumber");
          function fo(e) {
            const t4 = lo(e.buffer, e.byteOffset, e.byteOffset + e.byteLength);
            return new Uint8Array(t4);
          }
          __name(fo, "fo");
          n2(fo, "CloneAsUint8Array");
          function xr(e) {
            const t4 = e._queue.shift();
            return e._queueTotalSize -= t4.size, e._queueTotalSize < 0 && (e._queueTotalSize = 0), t4.value;
          }
          __name(xr, "xr");
          n2(xr, "DequeueValue");
          function Nr(e, t4, r) {
            if (!Ki(r) || r === 1 / 0) throw new RangeError("Size must be a finite, non-NaN, non-negative number.");
            e._queue.push({ value: t4, size: r }), e._queueTotalSize += r;
          }
          __name(Nr, "Nr");
          n2(Nr, "EnqueueValueWithSize");
          function Ji(e) {
            return e._queue.peek().value;
          }
          __name(Ji, "Ji");
          n2(Ji, "PeekQueueValue");
          function Be(e) {
            e._queue = new D2(), e._queueTotalSize = 0;
          }
          __name(Be, "Be");
          n2(Be, "ResetQueue");
          function co(e) {
            return e === DataView;
          }
          __name(co, "co");
          n2(co, "isDataViewConstructor");
          function Xi(e) {
            return co(e.constructor);
          }
          __name(Xi, "Xi");
          n2(Xi, "isDataView");
          function ea(e) {
            return co(e) ? 1 : e.BYTES_PER_ELEMENT;
          }
          __name(ea, "ea");
          n2(ea, "arrayBufferViewElementSize");
          const gn = class gn {
            static {
              __name(this, "gn");
            }
            constructor() {
              throw new TypeError("Illegal constructor");
            }
            get view() {
              if (!Hr(this)) throw Zr("view");
              return this._view;
            }
            respond(t4) {
              if (!Hr(this)) throw Zr("respond");
              if (Se(t4, 1, "respond"), t4 = Fr(t4, "First parameter"), this._associatedReadableByteStreamController === void 0) throw new TypeError("This BYOB request has been invalidated");
              if (Ae(this._view.buffer)) throw new TypeError("The BYOB request's buffer has been detached and so cannot be used as a response");
              Ht(this._associatedReadableByteStreamController, t4);
            }
            respondWithNewView(t4) {
              if (!Hr(this)) throw Zr("respondWithNewView");
              if (Se(t4, 1, "respondWithNewView"), !ArrayBuffer.isView(t4)) throw new TypeError("You can only respond with array buffer views");
              if (this._associatedReadableByteStreamController === void 0) throw new TypeError("This BYOB request has been invalidated");
              if (Ae(t4.buffer)) throw new TypeError("The given view's buffer has been detached and so cannot be used as a response");
              Vt(this._associatedReadableByteStreamController, t4);
            }
          };
          n2(gn, "ReadableStreamBYOBRequest");
          let Re = gn;
          Object.defineProperties(Re.prototype, { respond: { enumerable: true }, respondWithNewView: { enumerable: true }, view: { enumerable: true } }), h(Re.prototype.respond, "respond"), h(Re.prototype.respondWithNewView, "respondWithNewView"), typeof Symbol.toStringTag == "symbol" && Object.defineProperty(Re.prototype, Symbol.toStringTag, { value: "ReadableStreamBYOBRequest", configurable: true });
          const _n = class _n {
            static {
              __name(this, "_n");
            }
            constructor() {
              throw new TypeError("Illegal constructor");
            }
            get byobRequest() {
              if (!ze(this)) throw _t("byobRequest");
              return Gr(this);
            }
            get desiredSize() {
              if (!ze(this)) throw _t("desiredSize");
              return Ro(this);
            }
            close() {
              if (!ze(this)) throw _t("close");
              if (this._closeRequested) throw new TypeError("The stream has already been closed; do not close it again!");
              const t4 = this._controlledReadableByteStream._state;
              if (t4 !== "readable") throw new TypeError(`The stream (in ${t4} state) is not in the readable state and cannot be closed`);
              gt(this);
            }
            enqueue(t4) {
              if (!ze(this)) throw _t("enqueue");
              if (Se(t4, 1, "enqueue"), !ArrayBuffer.isView(t4)) throw new TypeError("chunk must be an array buffer view");
              if (t4.byteLength === 0) throw new TypeError("chunk must have non-zero byteLength");
              if (t4.buffer.byteLength === 0) throw new TypeError("chunk's buffer must have non-zero byteLength");
              if (this._closeRequested) throw new TypeError("stream is closed or draining");
              const r = this._controlledReadableByteStream._state;
              if (r !== "readable") throw new TypeError(`The stream (in ${r} state) is not in the readable state and cannot be enqueued to`);
              Nt(this, t4);
            }
            error(t4 = void 0) {
              if (!ze(this)) throw _t("error");
              K(this, t4);
            }
            [Ar](t4) {
              ho(this), Be(this);
              const r = this._cancelAlgorithm(t4);
              return xt(this), r;
            }
            [Br](t4) {
              const r = this._controlledReadableByteStream;
              if (this._queueTotalSize > 0) {
                wo(this, t4);
                return;
              }
              const s2 = this._autoAllocateChunkSize;
              if (s2 !== void 0) {
                let f3;
                try {
                  f3 = new ArrayBuffer(s2);
                } catch (d2) {
                  t4._errorSteps(d2);
                  return;
                }
                const c = { buffer: f3, bufferByteLength: s2, byteOffset: 0, byteLength: s2, bytesFilled: 0, minimumFill: 1, elementSize: 1, viewConstructor: Uint8Array, readerType: "default" };
                this._pendingPullIntos.push(c);
              }
              eo(r, t4), Ie(this);
            }
            [kr]() {
              if (this._pendingPullIntos.length > 0) {
                const t4 = this._pendingPullIntos.peek();
                t4.readerType = "none", this._pendingPullIntos = new D2(), this._pendingPullIntos.push(t4);
              }
            }
          };
          n2(_n, "ReadableByteStreamController");
          let te = _n;
          Object.defineProperties(te.prototype, { close: { enumerable: true }, enqueue: { enumerable: true }, error: { enumerable: true }, byobRequest: { enumerable: true }, desiredSize: { enumerable: true } }), h(te.prototype.close, "close"), h(te.prototype.enqueue, "enqueue"), h(te.prototype.error, "error"), typeof Symbol.toStringTag == "symbol" && Object.defineProperty(te.prototype, Symbol.toStringTag, { value: "ReadableByteStreamController", configurable: true });
          function ze(e) {
            return !l2(e) || !Object.prototype.hasOwnProperty.call(e, "_controlledReadableByteStream") ? false : e instanceof te;
          }
          __name(ze, "ze");
          n2(ze, "IsReadableByteStreamController");
          function Hr(e) {
            return !l2(e) || !Object.prototype.hasOwnProperty.call(e, "_associatedReadableByteStreamController") ? false : e instanceof Re;
          }
          __name(Hr, "Hr");
          n2(Hr, "IsReadableStreamBYOBRequest");
          function Ie(e) {
            if (!ia(e)) return;
            if (e._pulling) {
              e._pullAgain = true;
              return;
            }
            e._pulling = true;
            const r = e._pullAlgorithm();
            _(r, () => (e._pulling = false, e._pullAgain && (e._pullAgain = false, Ie(e)), null), (s2) => (K(e, s2), null));
          }
          __name(Ie, "Ie");
          n2(Ie, "ReadableByteStreamControllerCallPullIfNeeded");
          function ho(e) {
            Qr(e), e._pendingPullIntos = new D2();
          }
          __name(ho, "ho");
          n2(ho, "ReadableByteStreamControllerClearPendingPullIntos");
          function Vr(e, t4) {
            let r = false;
            e._state === "closed" && (r = true);
            const s2 = po(t4);
            t4.readerType === "default" ? Lr(e, s2, r) : ca(e, s2, r);
          }
          __name(Vr, "Vr");
          n2(Vr, "ReadableByteStreamControllerCommitPullIntoDescriptor");
          function po(e) {
            const t4 = e.bytesFilled, r = e.elementSize;
            return new e.viewConstructor(e.buffer, e.byteOffset, t4 / r);
          }
          __name(po, "po");
          n2(po, "ReadableByteStreamControllerConvertPullIntoDescriptor");
          function Ut(e, t4, r, s2) {
            e._queue.push({ buffer: t4, byteOffset: r, byteLength: s2 }), e._queueTotalSize += s2;
          }
          __name(Ut, "Ut");
          n2(Ut, "ReadableByteStreamControllerEnqueueChunkToQueue");
          function bo(e, t4, r, s2) {
            let f3;
            try {
              f3 = lo(t4, r, r + s2);
            } catch (c) {
              throw K(e, c), c;
            }
            Ut(e, f3, 0, s2);
          }
          __name(bo, "bo");
          n2(bo, "ReadableByteStreamControllerEnqueueClonedChunkToQueue");
          function mo(e, t4) {
            t4.bytesFilled > 0 && bo(e, t4.buffer, t4.byteOffset, t4.bytesFilled), Ye(e);
          }
          __name(mo, "mo");
          n2(mo, "ReadableByteStreamControllerEnqueueDetachedPullIntoToQueue");
          function yo(e, t4) {
            const r = Math.min(e._queueTotalSize, t4.byteLength - t4.bytesFilled), s2 = t4.bytesFilled + r;
            let f3 = r, c = false;
            const d2 = s2 % t4.elementSize, m2 = s2 - d2;
            m2 >= t4.minimumFill && (f3 = m2 - t4.bytesFilled, c = true);
            const R3 = e._queue;
            for (; f3 > 0; ) {
              const y = R3.peek(), C3 = Math.min(f3, y.byteLength), P2 = t4.byteOffset + t4.bytesFilled;
              so(t4.buffer, P2, y.buffer, y.byteOffset, C3), y.byteLength === C3 ? R3.shift() : (y.byteOffset += C3, y.byteLength -= C3), e._queueTotalSize -= C3, go(e, C3, t4), f3 -= C3;
            }
            return c;
          }
          __name(yo, "yo");
          n2(yo, "ReadableByteStreamControllerFillPullIntoDescriptorFromQueue");
          function go(e, t4, r) {
            r.bytesFilled += t4;
          }
          __name(go, "go");
          n2(go, "ReadableByteStreamControllerFillHeadPullIntoDescriptor");
          function _o(e) {
            e._queueTotalSize === 0 && e._closeRequested ? (xt(e), Pt(e._controlledReadableByteStream)) : Ie(e);
          }
          __name(_o, "_o");
          n2(_o, "ReadableByteStreamControllerHandleQueueDrain");
          function Qr(e) {
            e._byobRequest !== null && (e._byobRequest._associatedReadableByteStreamController = void 0, e._byobRequest._view = null, e._byobRequest = null);
          }
          __name(Qr, "Qr");
          n2(Qr, "ReadableByteStreamControllerInvalidateBYOBRequest");
          function Yr(e) {
            for (; e._pendingPullIntos.length > 0; ) {
              if (e._queueTotalSize === 0) return;
              const t4 = e._pendingPullIntos.peek();
              yo(e, t4) && (Ye(e), Vr(e._controlledReadableByteStream, t4));
            }
          }
          __name(Yr, "Yr");
          n2(Yr, "ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue");
          function ta(e) {
            const t4 = e._controlledReadableByteStream._reader;
            for (; t4._readRequests.length > 0; ) {
              if (e._queueTotalSize === 0) return;
              const r = t4._readRequests.shift();
              wo(e, r);
            }
          }
          __name(ta, "ta");
          n2(ta, "ReadableByteStreamControllerProcessReadRequestsUsingQueue");
          function ra(e, t4, r, s2) {
            const f3 = e._controlledReadableByteStream, c = t4.constructor, d2 = ea(c), { byteOffset: m2, byteLength: R3 } = t4, y = r * d2;
            let C3;
            try {
              C3 = we(t4.buffer);
            } catch (B2) {
              s2._errorSteps(B2);
              return;
            }
            const P2 = { buffer: C3, bufferByteLength: C3.byteLength, byteOffset: m2, byteLength: R3, bytesFilled: 0, minimumFill: y, elementSize: d2, viewConstructor: c, readerType: "byob" };
            if (e._pendingPullIntos.length > 0) {
              e._pendingPullIntos.push(P2), Po(f3, s2);
              return;
            }
            if (f3._state === "closed") {
              const B2 = new c(P2.buffer, P2.byteOffset, 0);
              s2._closeSteps(B2);
              return;
            }
            if (e._queueTotalSize > 0) {
              if (yo(e, P2)) {
                const B2 = po(P2);
                _o(e), s2._chunkSteps(B2);
                return;
              }
              if (e._closeRequested) {
                const B2 = new TypeError("Insufficient bytes to fill elements in the given buffer");
                K(e, B2), s2._errorSteps(B2);
                return;
              }
            }
            e._pendingPullIntos.push(P2), Po(f3, s2), Ie(e);
          }
          __name(ra, "ra");
          n2(ra, "ReadableByteStreamControllerPullInto");
          function na(e, t4) {
            t4.readerType === "none" && Ye(e);
            const r = e._controlledReadableByteStream;
            if (Kr(r)) for (; vo(r) > 0; ) {
              const s2 = Ye(e);
              Vr(r, s2);
            }
          }
          __name(na, "na");
          n2(na, "ReadableByteStreamControllerRespondInClosedState");
          function oa(e, t4, r) {
            if (go(e, t4, r), r.readerType === "none") {
              mo(e, r), Yr(e);
              return;
            }
            if (r.bytesFilled < r.minimumFill) return;
            Ye(e);
            const s2 = r.bytesFilled % r.elementSize;
            if (s2 > 0) {
              const f3 = r.byteOffset + r.bytesFilled;
              bo(e, r.buffer, f3 - s2, s2);
            }
            r.bytesFilled -= s2, Vr(e._controlledReadableByteStream, r), Yr(e);
          }
          __name(oa, "oa");
          n2(oa, "ReadableByteStreamControllerRespondInReadableState");
          function So(e, t4) {
            const r = e._pendingPullIntos.peek();
            Qr(e), e._controlledReadableByteStream._state === "closed" ? na(e, r) : oa(e, t4, r), Ie(e);
          }
          __name(So, "So");
          n2(So, "ReadableByteStreamControllerRespondInternal");
          function Ye(e) {
            return e._pendingPullIntos.shift();
          }
          __name(Ye, "Ye");
          n2(Ye, "ReadableByteStreamControllerShiftPendingPullInto");
          function ia(e) {
            const t4 = e._controlledReadableByteStream;
            return t4._state !== "readable" || e._closeRequested || !e._started ? false : !!(to(t4) && Lt(t4) > 0 || Kr(t4) && vo(t4) > 0 || Ro(e) > 0);
          }
          __name(ia, "ia");
          n2(ia, "ReadableByteStreamControllerShouldCallPull");
          function xt(e) {
            e._pullAlgorithm = void 0, e._cancelAlgorithm = void 0;
          }
          __name(xt, "xt");
          n2(xt, "ReadableByteStreamControllerClearAlgorithms");
          function gt(e) {
            const t4 = e._controlledReadableByteStream;
            if (!(e._closeRequested || t4._state !== "readable")) {
              if (e._queueTotalSize > 0) {
                e._closeRequested = true;
                return;
              }
              if (e._pendingPullIntos.length > 0) {
                const r = e._pendingPullIntos.peek();
                if (r.bytesFilled % r.elementSize !== 0) {
                  const s2 = new TypeError("Insufficient bytes to fill elements in the given buffer");
                  throw K(e, s2), s2;
                }
              }
              xt(e), Pt(t4);
            }
          }
          __name(gt, "gt");
          n2(gt, "ReadableByteStreamControllerClose");
          function Nt(e, t4) {
            const r = e._controlledReadableByteStream;
            if (e._closeRequested || r._state !== "readable") return;
            const { buffer: s2, byteOffset: f3, byteLength: c } = t4;
            if (Ae(s2)) throw new TypeError("chunk's buffer is detached and so cannot be enqueued");
            const d2 = we(s2);
            if (e._pendingPullIntos.length > 0) {
              const m2 = e._pendingPullIntos.peek();
              if (Ae(m2.buffer)) throw new TypeError("The BYOB request's buffer has been detached and so cannot be filled with an enqueued chunk");
              Qr(e), m2.buffer = we(m2.buffer), m2.readerType === "none" && mo(e, m2);
            }
            if (to(r)) if (ta(e), Lt(r) === 0) Ut(e, d2, f3, c);
            else {
              e._pendingPullIntos.length > 0 && Ye(e);
              const m2 = new Uint8Array(d2, f3, c);
              Lr(r, m2, false);
            }
            else Kr(r) ? (Ut(e, d2, f3, c), Yr(e)) : Ut(e, d2, f3, c);
            Ie(e);
          }
          __name(Nt, "Nt");
          n2(Nt, "ReadableByteStreamControllerEnqueue");
          function K(e, t4) {
            const r = e._controlledReadableByteStream;
            r._state === "readable" && (ho(e), Be(e), xt(e), Zo(r, t4));
          }
          __name(K, "K");
          n2(K, "ReadableByteStreamControllerError");
          function wo(e, t4) {
            const r = e._queue.shift();
            e._queueTotalSize -= r.byteLength, _o(e);
            const s2 = new Uint8Array(r.buffer, r.byteOffset, r.byteLength);
            t4._chunkSteps(s2);
          }
          __name(wo, "wo");
          n2(wo, "ReadableByteStreamControllerFillReadRequestFromQueue");
          function Gr(e) {
            if (e._byobRequest === null && e._pendingPullIntos.length > 0) {
              const t4 = e._pendingPullIntos.peek(), r = new Uint8Array(t4.buffer, t4.byteOffset + t4.bytesFilled, t4.byteLength - t4.bytesFilled), s2 = Object.create(Re.prototype);
              sa(s2, e, r), e._byobRequest = s2;
            }
            return e._byobRequest;
          }
          __name(Gr, "Gr");
          n2(Gr, "ReadableByteStreamControllerGetBYOBRequest");
          function Ro(e) {
            const t4 = e._controlledReadableByteStream._state;
            return t4 === "errored" ? null : t4 === "closed" ? 0 : e._strategyHWM - e._queueTotalSize;
          }
          __name(Ro, "Ro");
          n2(Ro, "ReadableByteStreamControllerGetDesiredSize");
          function Ht(e, t4) {
            const r = e._pendingPullIntos.peek();
            if (e._controlledReadableByteStream._state === "closed") {
              if (t4 !== 0) throw new TypeError("bytesWritten must be 0 when calling respond() on a closed stream");
            } else {
              if (t4 === 0) throw new TypeError("bytesWritten must be greater than 0 when calling respond() on a readable stream");
              if (r.bytesFilled + t4 > r.byteLength) throw new RangeError("bytesWritten out of range");
            }
            r.buffer = we(r.buffer), So(e, t4);
          }
          __name(Ht, "Ht");
          n2(Ht, "ReadableByteStreamControllerRespond");
          function Vt(e, t4) {
            const r = e._pendingPullIntos.peek();
            if (e._controlledReadableByteStream._state === "closed") {
              if (t4.byteLength !== 0) throw new TypeError("The view's length must be 0 when calling respondWithNewView() on a closed stream");
            } else if (t4.byteLength === 0) throw new TypeError("The view's length must be greater than 0 when calling respondWithNewView() on a readable stream");
            if (r.byteOffset + r.bytesFilled !== t4.byteOffset) throw new RangeError("The region specified by view does not match byobRequest");
            if (r.bufferByteLength !== t4.buffer.byteLength) throw new RangeError("The buffer of view has different capacity than byobRequest");
            if (r.bytesFilled + t4.byteLength > r.byteLength) throw new RangeError("The region specified by view is larger than byobRequest");
            const f3 = t4.byteLength;
            r.buffer = we(t4.buffer), So(e, f3);
          }
          __name(Vt, "Vt");
          n2(Vt, "ReadableByteStreamControllerRespondWithNewView");
          function To(e, t4, r, s2, f3, c, d2) {
            t4._controlledReadableByteStream = e, t4._pullAgain = false, t4._pulling = false, t4._byobRequest = null, t4._queue = t4._queueTotalSize = void 0, Be(t4), t4._closeRequested = false, t4._started = false, t4._strategyHWM = c, t4._pullAlgorithm = s2, t4._cancelAlgorithm = f3, t4._autoAllocateChunkSize = d2, t4._pendingPullIntos = new D2(), e._readableStreamController = t4;
            const m2 = r();
            _(T2(m2), () => (t4._started = true, Ie(t4), null), (R3) => (K(t4, R3), null));
          }
          __name(To, "To");
          n2(To, "SetUpReadableByteStreamController");
          function aa(e, t4, r) {
            const s2 = Object.create(te.prototype);
            let f3, c, d2;
            t4.start !== void 0 ? f3 = n2(() => t4.start(s2), "startAlgorithm") : f3 = n2(() => {
            }, "startAlgorithm"), t4.pull !== void 0 ? c = n2(() => t4.pull(s2), "pullAlgorithm") : c = n2(() => T2(void 0), "pullAlgorithm"), t4.cancel !== void 0 ? d2 = n2((R3) => t4.cancel(R3), "cancelAlgorithm") : d2 = n2(() => T2(void 0), "cancelAlgorithm");
            const m2 = t4.autoAllocateChunkSize;
            if (m2 === 0) throw new TypeError("autoAllocateChunkSize must be greater than 0");
            To(e, s2, f3, c, d2, r, m2);
          }
          __name(aa, "aa");
          n2(aa, "SetUpReadableByteStreamControllerFromUnderlyingSource");
          function sa(e, t4, r) {
            e._associatedReadableByteStreamController = t4, e._view = r;
          }
          __name(sa, "sa");
          n2(sa, "SetUpReadableStreamBYOBRequest");
          function Zr(e) {
            return new TypeError(`ReadableStreamBYOBRequest.prototype.${e} can only be used on a ReadableStreamBYOBRequest`);
          }
          __name(Zr, "Zr");
          n2(Zr, "byobRequestBrandCheckException");
          function _t(e) {
            return new TypeError(`ReadableByteStreamController.prototype.${e} can only be used on a ReadableByteStreamController`);
          }
          __name(_t, "_t");
          n2(_t, "byteStreamControllerBrandCheckException");
          function la(e, t4) {
            ue(e, t4);
            const r = e == null ? void 0 : e.mode;
            return { mode: r === void 0 ? void 0 : ua(r, `${t4} has member 'mode' that`) };
          }
          __name(la, "la");
          n2(la, "convertReaderOptions");
          function ua(e, t4) {
            if (e = `${e}`, e !== "byob") throw new TypeError(`${t4} '${e}' is not a valid enumeration value for ReadableStreamReaderMode`);
            return e;
          }
          __name(ua, "ua");
          n2(ua, "convertReadableStreamReaderMode");
          function fa(e, t4) {
            var r;
            ue(e, t4);
            const s2 = (r = e == null ? void 0 : e.min) !== null && r !== void 0 ? r : 1;
            return { min: Fr(s2, `${t4} has member 'min' that`) };
          }
          __name(fa, "fa");
          n2(fa, "convertByobReadOptions");
          function Co(e) {
            return new ce(e);
          }
          __name(Co, "Co");
          n2(Co, "AcquireReadableStreamBYOBReader");
          function Po(e, t4) {
            e._reader._readIntoRequests.push(t4);
          }
          __name(Po, "Po");
          n2(Po, "ReadableStreamAddReadIntoRequest");
          function ca(e, t4, r) {
            const f3 = e._reader._readIntoRequests.shift();
            r ? f3._closeSteps(t4) : f3._chunkSteps(t4);
          }
          __name(ca, "ca");
          n2(ca, "ReadableStreamFulfillReadIntoRequest");
          function vo(e) {
            return e._reader._readIntoRequests.length;
          }
          __name(vo, "vo");
          n2(vo, "ReadableStreamGetNumReadIntoRequests");
          function Kr(e) {
            const t4 = e._reader;
            return !(t4 === void 0 || !Fe(t4));
          }
          __name(Kr, "Kr");
          n2(Kr, "ReadableStreamHasBYOBReader");
          const Sn = class Sn {
            static {
              __name(this, "Sn");
            }
            constructor(t4) {
              if (Se(t4, 1, "ReadableStreamBYOBReader"), jr(t4, "First parameter"), qe(t4)) throw new TypeError("This stream has already been locked for exclusive reading by another reader");
              if (!ze(t4._readableStreamController)) throw new TypeError("Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte source");
              Yn(this, t4), this._readIntoRequests = new D2();
            }
            get closed() {
              return Fe(this) ? this._closedPromise : b(Qt("closed"));
            }
            cancel(t4 = void 0) {
              return Fe(this) ? this._ownerReadableStream === void 0 ? b(jt("cancel")) : Wr(this, t4) : b(Qt("cancel"));
            }
            read(t4, r = {}) {
              if (!Fe(this)) return b(Qt("read"));
              if (!ArrayBuffer.isView(t4)) return b(new TypeError("view must be an array buffer view"));
              if (t4.byteLength === 0) return b(new TypeError("view must have non-zero byteLength"));
              if (t4.buffer.byteLength === 0) return b(new TypeError("view's buffer must have non-zero byteLength"));
              if (Ae(t4.buffer)) return b(new TypeError("view's buffer has been detached"));
              let s2;
              try {
                s2 = fa(r, "options");
              } catch (y) {
                return b(y);
              }
              const f3 = s2.min;
              if (f3 === 0) return b(new TypeError("options.min must be greater than 0"));
              if (Xi(t4)) {
                if (f3 > t4.byteLength) return b(new RangeError("options.min must be less than or equal to view's byteLength"));
              } else if (f3 > t4.length) return b(new RangeError("options.min must be less than or equal to view's length"));
              if (this._ownerReadableStream === void 0) return b(jt("read from"));
              let c, d2;
              const m2 = E2((y, C3) => {
                c = y, d2 = C3;
              });
              return Eo(this, t4, f3, { _chunkSteps: /* @__PURE__ */ __name((y) => c({ value: y, done: false }), "_chunkSteps"), _closeSteps: /* @__PURE__ */ __name((y) => c({ value: y, done: true }), "_closeSteps"), _errorSteps: /* @__PURE__ */ __name((y) => d2(y), "_errorSteps") }), m2;
            }
            releaseLock() {
              if (!Fe(this)) throw Qt("releaseLock");
              this._ownerReadableStream !== void 0 && da(this);
            }
          };
          n2(Sn, "ReadableStreamBYOBReader");
          let ce = Sn;
          Object.defineProperties(ce.prototype, { cancel: { enumerable: true }, read: { enumerable: true }, releaseLock: { enumerable: true }, closed: { enumerable: true } }), h(ce.prototype.cancel, "cancel"), h(ce.prototype.read, "read"), h(ce.prototype.releaseLock, "releaseLock"), typeof Symbol.toStringTag == "symbol" && Object.defineProperty(ce.prototype, Symbol.toStringTag, { value: "ReadableStreamBYOBReader", configurable: true });
          function Fe(e) {
            return !l2(e) || !Object.prototype.hasOwnProperty.call(e, "_readIntoRequests") ? false : e instanceof ce;
          }
          __name(Fe, "Fe");
          n2(Fe, "IsReadableStreamBYOBReader");
          function Eo(e, t4, r, s2) {
            const f3 = e._ownerReadableStream;
            f3._disturbed = true, f3._state === "errored" ? s2._errorSteps(f3._storedError) : ra(f3._readableStreamController, t4, r, s2);
          }
          __name(Eo, "Eo");
          n2(Eo, "ReadableStreamBYOBReaderRead");
          function da(e) {
            _e(e);
            const t4 = new TypeError("Reader was released");
            Ao(e, t4);
          }
          __name(da, "da");
          n2(da, "ReadableStreamBYOBReaderRelease");
          function Ao(e, t4) {
            const r = e._readIntoRequests;
            e._readIntoRequests = new D2(), r.forEach((s2) => {
              s2._errorSteps(t4);
            });
          }
          __name(Ao, "Ao");
          n2(Ao, "ReadableStreamBYOBReaderErrorReadIntoRequests");
          function Qt(e) {
            return new TypeError(`ReadableStreamBYOBReader.prototype.${e} can only be used on a ReadableStreamBYOBReader`);
          }
          __name(Qt, "Qt");
          n2(Qt, "byobReaderBrandCheckException");
          function St(e, t4) {
            const { highWaterMark: r } = e;
            if (r === void 0) return t4;
            if (ao(r) || r < 0) throw new RangeError("Invalid highWaterMark");
            return r;
          }
          __name(St, "St");
          n2(St, "ExtractHighWaterMark");
          function Yt(e) {
            const { size: t4 } = e;
            return t4 || (() => 1);
          }
          __name(Yt, "Yt");
          n2(Yt, "ExtractSizeAlgorithm");
          function Gt(e, t4) {
            ue(e, t4);
            const r = e == null ? void 0 : e.highWaterMark, s2 = e == null ? void 0 : e.size;
            return { highWaterMark: r === void 0 ? void 0 : Ir(r), size: s2 === void 0 ? void 0 : ha(s2, `${t4} has member 'size' that`) };
          }
          __name(Gt, "Gt");
          n2(Gt, "convertQueuingStrategy");
          function ha(e, t4) {
            return Z2(e, t4), (r) => Ir(e(r));
          }
          __name(ha, "ha");
          n2(ha, "convertQueuingStrategySize");
          function pa(e, t4) {
            ue(e, t4);
            const r = e == null ? void 0 : e.abort, s2 = e == null ? void 0 : e.close, f3 = e == null ? void 0 : e.start, c = e == null ? void 0 : e.type, d2 = e == null ? void 0 : e.write;
            return { abort: r === void 0 ? void 0 : ba(r, e, `${t4} has member 'abort' that`), close: s2 === void 0 ? void 0 : ma(s2, e, `${t4} has member 'close' that`), start: f3 === void 0 ? void 0 : ya(f3, e, `${t4} has member 'start' that`), write: d2 === void 0 ? void 0 : ga(d2, e, `${t4} has member 'write' that`), type: c };
          }
          __name(pa, "pa");
          n2(pa, "convertUnderlyingSink");
          function ba(e, t4, r) {
            return Z2(e, r), (s2) => j(e, t4, [s2]);
          }
          __name(ba, "ba");
          n2(ba, "convertUnderlyingSinkAbortCallback");
          function ma(e, t4, r) {
            return Z2(e, r), () => j(e, t4, []);
          }
          __name(ma, "ma");
          n2(ma, "convertUnderlyingSinkCloseCallback");
          function ya(e, t4, r) {
            return Z2(e, r), (s2) => z(e, t4, [s2]);
          }
          __name(ya, "ya");
          n2(ya, "convertUnderlyingSinkStartCallback");
          function ga(e, t4, r) {
            return Z2(e, r), (s2, f3) => j(e, t4, [s2, f3]);
          }
          __name(ga, "ga");
          n2(ga, "convertUnderlyingSinkWriteCallback");
          function Bo(e, t4) {
            if (!Ge(e)) throw new TypeError(`${t4} is not a WritableStream.`);
          }
          __name(Bo, "Bo");
          n2(Bo, "assertWritableStream");
          function _a2(e) {
            if (typeof e != "object" || e === null) return false;
            try {
              return typeof e.aborted == "boolean";
            } catch (e2) {
              return false;
            }
          }
          __name(_a2, "_a2");
          n2(_a2, "isAbortSignal");
          const Sa = typeof AbortController == "function";
          function wa() {
            if (Sa) return new AbortController();
          }
          __name(wa, "wa");
          n2(wa, "createAbortController");
          const wn = class wn {
            static {
              __name(this, "wn");
            }
            constructor(t4 = {}, r = {}) {
              t4 === void 0 ? t4 = null : Jn(t4, "First parameter");
              const s2 = Gt(r, "Second parameter"), f3 = pa(t4, "First parameter");
              if (Wo(this), f3.type !== void 0) throw new RangeError("Invalid type is specified");
              const d2 = Yt(s2), m2 = St(s2, 1);
              Ia(this, f3, m2, d2);
            }
            get locked() {
              if (!Ge(this)) throw er("locked");
              return Ze(this);
            }
            abort(t4 = void 0) {
              return Ge(this) ? Ze(this) ? b(new TypeError("Cannot abort a stream that already has a writer")) : Zt(this, t4) : b(er("abort"));
            }
            close() {
              return Ge(this) ? Ze(this) ? b(new TypeError("Cannot close a stream that already has a writer")) : he(this) ? b(new TypeError("Cannot close an already-closing stream")) : qo(this) : b(er("close"));
            }
            getWriter() {
              if (!Ge(this)) throw er("getWriter");
              return ko(this);
            }
          };
          n2(wn, "WritableStream");
          let de = wn;
          Object.defineProperties(de.prototype, { abort: { enumerable: true }, close: { enumerable: true }, getWriter: { enumerable: true }, locked: { enumerable: true } }), h(de.prototype.abort, "abort"), h(de.prototype.close, "close"), h(de.prototype.getWriter, "getWriter"), typeof Symbol.toStringTag == "symbol" && Object.defineProperty(de.prototype, Symbol.toStringTag, { value: "WritableStream", configurable: true });
          function ko(e) {
            return new re(e);
          }
          __name(ko, "ko");
          n2(ko, "AcquireWritableStreamDefaultWriter");
          function Ra(e, t4, r, s2, f3 = 1, c = () => 1) {
            const d2 = Object.create(de.prototype);
            Wo(d2);
            const m2 = Object.create(ke.prototype);
            return Lo(d2, m2, e, t4, r, s2, f3, c), d2;
          }
          __name(Ra, "Ra");
          n2(Ra, "CreateWritableStream");
          function Wo(e) {
            e._state = "writable", e._storedError = void 0, e._writer = void 0, e._writableStreamController = void 0, e._writeRequests = new D2(), e._inFlightWriteRequest = void 0, e._closeRequest = void 0, e._inFlightCloseRequest = void 0, e._pendingAbortRequest = void 0, e._backpressure = false;
          }
          __name(Wo, "Wo");
          n2(Wo, "InitializeWritableStream");
          function Ge(e) {
            return !l2(e) || !Object.prototype.hasOwnProperty.call(e, "_writableStreamController") ? false : e instanceof de;
          }
          __name(Ge, "Ge");
          n2(Ge, "IsWritableStream");
          function Ze(e) {
            return e._writer !== void 0;
          }
          __name(Ze, "Ze");
          n2(Ze, "IsWritableStreamLocked");
          function Zt(e, t4) {
            var r;
            if (e._state === "closed" || e._state === "errored") return T2(void 0);
            e._writableStreamController._abortReason = t4, (r = e._writableStreamController._abortController) === null || r === void 0 || r.abort(t4);
            const s2 = e._state;
            if (s2 === "closed" || s2 === "errored") return T2(void 0);
            if (e._pendingAbortRequest !== void 0) return e._pendingAbortRequest._promise;
            let f3 = false;
            s2 === "erroring" && (f3 = true, t4 = void 0);
            const c = E2((d2, m2) => {
              e._pendingAbortRequest = { _promise: void 0, _resolve: d2, _reject: m2, _reason: t4, _wasAlreadyErroring: f3 };
            });
            return e._pendingAbortRequest._promise = c, f3 || Xr(e, t4), c;
          }
          __name(Zt, "Zt");
          n2(Zt, "WritableStreamAbort");
          function qo(e) {
            const t4 = e._state;
            if (t4 === "closed" || t4 === "errored") return b(new TypeError(`The stream (in ${t4} state) is not in the writable state and cannot be closed`));
            const r = E2((f3, c) => {
              const d2 = { _resolve: f3, _reject: c };
              e._closeRequest = d2;
            }), s2 = e._writer;
            return s2 !== void 0 && e._backpressure && t4 === "writable" && ln(s2), Fa(e._writableStreamController), r;
          }
          __name(qo, "qo");
          n2(qo, "WritableStreamClose");
          function Ta(e) {
            return E2((r, s2) => {
              const f3 = { _resolve: r, _reject: s2 };
              e._writeRequests.push(f3);
            });
          }
          __name(Ta, "Ta");
          n2(Ta, "WritableStreamAddWriteRequest");
          function Jr(e, t4) {
            if (e._state === "writable") {
              Xr(e, t4);
              return;
            }
            en(e);
          }
          __name(Jr, "Jr");
          n2(Jr, "WritableStreamDealWithRejection");
          function Xr(e, t4) {
            const r = e._writableStreamController;
            e._state = "erroring", e._storedError = t4;
            const s2 = e._writer;
            s2 !== void 0 && zo(s2, t4), !Aa(e) && r._started && en(e);
          }
          __name(Xr, "Xr");
          n2(Xr, "WritableStreamStartErroring");
          function en(e) {
            e._state = "errored", e._writableStreamController[Qn]();
            const t4 = e._storedError;
            if (e._writeRequests.forEach((f3) => {
              f3._reject(t4);
            }), e._writeRequests = new D2(), e._pendingAbortRequest === void 0) {
              Kt(e);
              return;
            }
            const r = e._pendingAbortRequest;
            if (e._pendingAbortRequest = void 0, r._wasAlreadyErroring) {
              r._reject(t4), Kt(e);
              return;
            }
            const s2 = e._writableStreamController[Ft](r._reason);
            _(s2, () => (r._resolve(), Kt(e), null), (f3) => (r._reject(f3), Kt(e), null));
          }
          __name(en, "en");
          n2(en, "WritableStreamFinishErroring");
          function Ca(e) {
            e._inFlightWriteRequest._resolve(void 0), e._inFlightWriteRequest = void 0;
          }
          __name(Ca, "Ca");
          n2(Ca, "WritableStreamFinishInFlightWrite");
          function Pa(e, t4) {
            e._inFlightWriteRequest._reject(t4), e._inFlightWriteRequest = void 0, Jr(e, t4);
          }
          __name(Pa, "Pa");
          n2(Pa, "WritableStreamFinishInFlightWriteWithError");
          function va(e) {
            e._inFlightCloseRequest._resolve(void 0), e._inFlightCloseRequest = void 0, e._state === "erroring" && (e._storedError = void 0, e._pendingAbortRequest !== void 0 && (e._pendingAbortRequest._resolve(), e._pendingAbortRequest = void 0)), e._state = "closed";
            const r = e._writer;
            r !== void 0 && Uo(r);
          }
          __name(va, "va");
          n2(va, "WritableStreamFinishInFlightClose");
          function Ea(e, t4) {
            e._inFlightCloseRequest._reject(t4), e._inFlightCloseRequest = void 0, e._pendingAbortRequest !== void 0 && (e._pendingAbortRequest._reject(t4), e._pendingAbortRequest = void 0), Jr(e, t4);
          }
          __name(Ea, "Ea");
          n2(Ea, "WritableStreamFinishInFlightCloseWithError");
          function he(e) {
            return !(e._closeRequest === void 0 && e._inFlightCloseRequest === void 0);
          }
          __name(he, "he");
          n2(he, "WritableStreamCloseQueuedOrInFlight");
          function Aa(e) {
            return !(e._inFlightWriteRequest === void 0 && e._inFlightCloseRequest === void 0);
          }
          __name(Aa, "Aa");
          n2(Aa, "WritableStreamHasOperationMarkedInFlight");
          function Ba(e) {
            e._inFlightCloseRequest = e._closeRequest, e._closeRequest = void 0;
          }
          __name(Ba, "Ba");
          n2(Ba, "WritableStreamMarkCloseRequestInFlight");
          function ka(e) {
            e._inFlightWriteRequest = e._writeRequests.shift();
          }
          __name(ka, "ka");
          n2(ka, "WritableStreamMarkFirstWriteRequestInFlight");
          function Kt(e) {
            e._closeRequest !== void 0 && (e._closeRequest._reject(e._storedError), e._closeRequest = void 0);
            const t4 = e._writer;
            t4 !== void 0 && an(t4, e._storedError);
          }
          __name(Kt, "Kt");
          n2(Kt, "WritableStreamRejectCloseAndClosedPromiseIfNeeded");
          function tn(e, t4) {
            const r = e._writer;
            r !== void 0 && t4 !== e._backpressure && (t4 ? xa(r) : ln(r)), e._backpressure = t4;
          }
          __name(tn, "tn");
          n2(tn, "WritableStreamUpdateBackpressure");
          const Rn = class Rn {
            static {
              __name(this, "Rn");
            }
            constructor(t4) {
              if (Se(t4, 1, "WritableStreamDefaultWriter"), Bo(t4, "First parameter"), Ze(t4)) throw new TypeError("This stream has already been locked for exclusive writing by another writer");
              this._ownerWritableStream = t4, t4._writer = this;
              const r = t4._state;
              if (r === "writable") !he(t4) && t4._backpressure ? rr(this) : xo(this), tr(this);
              else if (r === "erroring") sn(this, t4._storedError), tr(this);
              else if (r === "closed") xo(this), Ma(this);
              else {
                const s2 = t4._storedError;
                sn(this, s2), Mo(this, s2);
              }
            }
            get closed() {
              return je(this) ? this._closedPromise : b(Le("closed"));
            }
            get desiredSize() {
              if (!je(this)) throw Le("desiredSize");
              if (this._ownerWritableStream === void 0) throw Rt("desiredSize");
              return za(this);
            }
            get ready() {
              return je(this) ? this._readyPromise : b(Le("ready"));
            }
            abort(t4 = void 0) {
              return je(this) ? this._ownerWritableStream === void 0 ? b(Rt("abort")) : Wa(this, t4) : b(Le("abort"));
            }
            close() {
              if (!je(this)) return b(Le("close"));
              const t4 = this._ownerWritableStream;
              return t4 === void 0 ? b(Rt("close")) : he(t4) ? b(new TypeError("Cannot close an already-closing stream")) : Oo(this);
            }
            releaseLock() {
              if (!je(this)) throw Le("releaseLock");
              this._ownerWritableStream !== void 0 && Io(this);
            }
            write(t4 = void 0) {
              return je(this) ? this._ownerWritableStream === void 0 ? b(Rt("write to")) : Fo(this, t4) : b(Le("write"));
            }
          };
          n2(Rn, "WritableStreamDefaultWriter");
          let re = Rn;
          Object.defineProperties(re.prototype, { abort: { enumerable: true }, close: { enumerable: true }, releaseLock: { enumerable: true }, write: { enumerable: true }, closed: { enumerable: true }, desiredSize: { enumerable: true }, ready: { enumerable: true } }), h(re.prototype.abort, "abort"), h(re.prototype.close, "close"), h(re.prototype.releaseLock, "releaseLock"), h(re.prototype.write, "write"), typeof Symbol.toStringTag == "symbol" && Object.defineProperty(re.prototype, Symbol.toStringTag, { value: "WritableStreamDefaultWriter", configurable: true });
          function je(e) {
            return !l2(e) || !Object.prototype.hasOwnProperty.call(e, "_ownerWritableStream") ? false : e instanceof re;
          }
          __name(je, "je");
          n2(je, "IsWritableStreamDefaultWriter");
          function Wa(e, t4) {
            const r = e._ownerWritableStream;
            return Zt(r, t4);
          }
          __name(Wa, "Wa");
          n2(Wa, "WritableStreamDefaultWriterAbort");
          function Oo(e) {
            const t4 = e._ownerWritableStream;
            return qo(t4);
          }
          __name(Oo, "Oo");
          n2(Oo, "WritableStreamDefaultWriterClose");
          function qa(e) {
            const t4 = e._ownerWritableStream, r = t4._state;
            return he(t4) || r === "closed" ? T2(void 0) : r === "errored" ? b(t4._storedError) : Oo(e);
          }
          __name(qa, "qa");
          n2(qa, "WritableStreamDefaultWriterCloseWithErrorPropagation");
          function Oa(e, t4) {
            e._closedPromiseState === "pending" ? an(e, t4) : Ua(e, t4);
          }
          __name(Oa, "Oa");
          n2(Oa, "WritableStreamDefaultWriterEnsureClosedPromiseRejected");
          function zo(e, t4) {
            e._readyPromiseState === "pending" ? No(e, t4) : Na(e, t4);
          }
          __name(zo, "zo");
          n2(zo, "WritableStreamDefaultWriterEnsureReadyPromiseRejected");
          function za(e) {
            const t4 = e._ownerWritableStream, r = t4._state;
            return r === "errored" || r === "erroring" ? null : r === "closed" ? 0 : $o(t4._writableStreamController);
          }
          __name(za, "za");
          n2(za, "WritableStreamDefaultWriterGetDesiredSize");
          function Io(e) {
            const t4 = e._ownerWritableStream, r = new TypeError("Writer was released and can no longer be used to monitor the stream's closedness");
            zo(e, r), Oa(e, r), t4._writer = void 0, e._ownerWritableStream = void 0;
          }
          __name(Io, "Io");
          n2(Io, "WritableStreamDefaultWriterRelease");
          function Fo(e, t4) {
            const r = e._ownerWritableStream, s2 = r._writableStreamController, f3 = ja(s2, t4);
            if (r !== e._ownerWritableStream) return b(Rt("write to"));
            const c = r._state;
            if (c === "errored") return b(r._storedError);
            if (he(r) || c === "closed") return b(new TypeError("The stream is closing or closed and cannot be written to"));
            if (c === "erroring") return b(r._storedError);
            const d2 = Ta(r);
            return La(s2, t4, f3), d2;
          }
          __name(Fo, "Fo");
          n2(Fo, "WritableStreamDefaultWriterWrite");
          const jo = {}, Tn = class Tn {
            static {
              __name(this, "Tn");
            }
            constructor() {
              throw new TypeError("Illegal constructor");
            }
            get abortReason() {
              if (!rn(this)) throw on2("abortReason");
              return this._abortReason;
            }
            get signal() {
              if (!rn(this)) throw on2("signal");
              if (this._abortController === void 0) throw new TypeError("WritableStreamDefaultController.prototype.signal is not supported");
              return this._abortController.signal;
            }
            error(t4 = void 0) {
              if (!rn(this)) throw on2("error");
              this._controlledWritableStream._state === "writable" && Do(this, t4);
            }
            [Ft](t4) {
              const r = this._abortAlgorithm(t4);
              return Jt(this), r;
            }
            [Qn]() {
              Be(this);
            }
          };
          n2(Tn, "WritableStreamDefaultController");
          let ke = Tn;
          Object.defineProperties(ke.prototype, { abortReason: { enumerable: true }, signal: { enumerable: true }, error: { enumerable: true } }), typeof Symbol.toStringTag == "symbol" && Object.defineProperty(ke.prototype, Symbol.toStringTag, { value: "WritableStreamDefaultController", configurable: true });
          function rn(e) {
            return !l2(e) || !Object.prototype.hasOwnProperty.call(e, "_controlledWritableStream") ? false : e instanceof ke;
          }
          __name(rn, "rn");
          n2(rn, "IsWritableStreamDefaultController");
          function Lo(e, t4, r, s2, f3, c, d2, m2) {
            t4._controlledWritableStream = e, e._writableStreamController = t4, t4._queue = void 0, t4._queueTotalSize = void 0, Be(t4), t4._abortReason = void 0, t4._abortController = wa(), t4._started = false, t4._strategySizeAlgorithm = m2, t4._strategyHWM = d2, t4._writeAlgorithm = s2, t4._closeAlgorithm = f3, t4._abortAlgorithm = c;
            const R3 = nn(t4);
            tn(e, R3);
            const y = r(), C3 = T2(y);
            _(C3, () => (t4._started = true, Xt(t4), null), (P2) => (t4._started = true, Jr(e, P2), null));
          }
          __name(Lo, "Lo");
          n2(Lo, "SetUpWritableStreamDefaultController");
          function Ia(e, t4, r, s2) {
            const f3 = Object.create(ke.prototype);
            let c, d2, m2, R3;
            t4.start !== void 0 ? c = n2(() => t4.start(f3), "startAlgorithm") : c = n2(() => {
            }, "startAlgorithm"), t4.write !== void 0 ? d2 = n2((y) => t4.write(y, f3), "writeAlgorithm") : d2 = n2(() => T2(void 0), "writeAlgorithm"), t4.close !== void 0 ? m2 = n2(() => t4.close(), "closeAlgorithm") : m2 = n2(() => T2(void 0), "closeAlgorithm"), t4.abort !== void 0 ? R3 = n2((y) => t4.abort(y), "abortAlgorithm") : R3 = n2(() => T2(void 0), "abortAlgorithm"), Lo(e, f3, c, d2, m2, R3, r, s2);
          }
          __name(Ia, "Ia");
          n2(Ia, "SetUpWritableStreamDefaultControllerFromUnderlyingSink");
          function Jt(e) {
            e._writeAlgorithm = void 0, e._closeAlgorithm = void 0, e._abortAlgorithm = void 0, e._strategySizeAlgorithm = void 0;
          }
          __name(Jt, "Jt");
          n2(Jt, "WritableStreamDefaultControllerClearAlgorithms");
          function Fa(e) {
            Nr(e, jo, 0), Xt(e);
          }
          __name(Fa, "Fa");
          n2(Fa, "WritableStreamDefaultControllerClose");
          function ja(e, t4) {
            try {
              return e._strategySizeAlgorithm(t4);
            } catch (r) {
              return wt(e, r), 1;
            }
          }
          __name(ja, "ja");
          n2(ja, "WritableStreamDefaultControllerGetChunkSize");
          function $o(e) {
            return e._strategyHWM - e._queueTotalSize;
          }
          __name($o, "$o");
          n2($o, "WritableStreamDefaultControllerGetDesiredSize");
          function La(e, t4, r) {
            try {
              Nr(e, t4, r);
            } catch (f3) {
              wt(e, f3);
              return;
            }
            const s2 = e._controlledWritableStream;
            if (!he(s2) && s2._state === "writable") {
              const f3 = nn(e);
              tn(s2, f3);
            }
            Xt(e);
          }
          __name(La, "La");
          n2(La, "WritableStreamDefaultControllerWrite");
          function Xt(e) {
            const t4 = e._controlledWritableStream;
            if (!e._started || t4._inFlightWriteRequest !== void 0) return;
            if (t4._state === "erroring") {
              en(t4);
              return;
            }
            if (e._queue.length === 0) return;
            const s2 = Ji(e);
            s2 === jo ? $a(e) : Da(e, s2);
          }
          __name(Xt, "Xt");
          n2(Xt, "WritableStreamDefaultControllerAdvanceQueueIfNeeded");
          function wt(e, t4) {
            e._controlledWritableStream._state === "writable" && Do(e, t4);
          }
          __name(wt, "wt");
          n2(wt, "WritableStreamDefaultControllerErrorIfNeeded");
          function $a(e) {
            const t4 = e._controlledWritableStream;
            Ba(t4), xr(e);
            const r = e._closeAlgorithm();
            Jt(e), _(r, () => (va(t4), null), (s2) => (Ea(t4, s2), null));
          }
          __name($a, "$a");
          n2($a, "WritableStreamDefaultControllerProcessClose");
          function Da(e, t4) {
            const r = e._controlledWritableStream;
            ka(r);
            const s2 = e._writeAlgorithm(t4);
            _(s2, () => {
              Ca(r);
              const f3 = r._state;
              if (xr(e), !he(r) && f3 === "writable") {
                const c = nn(e);
                tn(r, c);
              }
              return Xt(e), null;
            }, (f3) => (r._state === "writable" && Jt(e), Pa(r, f3), null));
          }
          __name(Da, "Da");
          n2(Da, "WritableStreamDefaultControllerProcessWrite");
          function nn(e) {
            return $o(e) <= 0;
          }
          __name(nn, "nn");
          n2(nn, "WritableStreamDefaultControllerGetBackpressure");
          function Do(e, t4) {
            const r = e._controlledWritableStream;
            Jt(e), Xr(r, t4);
          }
          __name(Do, "Do");
          n2(Do, "WritableStreamDefaultControllerError");
          function er(e) {
            return new TypeError(`WritableStream.prototype.${e} can only be used on a WritableStream`);
          }
          __name(er, "er");
          n2(er, "streamBrandCheckException$2");
          function on2(e) {
            return new TypeError(`WritableStreamDefaultController.prototype.${e} can only be used on a WritableStreamDefaultController`);
          }
          __name(on2, "on2");
          n2(on2, "defaultControllerBrandCheckException$2");
          function Le(e) {
            return new TypeError(`WritableStreamDefaultWriter.prototype.${e} can only be used on a WritableStreamDefaultWriter`);
          }
          __name(Le, "Le");
          n2(Le, "defaultWriterBrandCheckException");
          function Rt(e) {
            return new TypeError("Cannot " + e + " a stream using a released writer");
          }
          __name(Rt, "Rt");
          n2(Rt, "defaultWriterLockException");
          function tr(e) {
            e._closedPromise = E2((t4, r) => {
              e._closedPromise_resolve = t4, e._closedPromise_reject = r, e._closedPromiseState = "pending";
            });
          }
          __name(tr, "tr");
          n2(tr, "defaultWriterClosedPromiseInitialize");
          function Mo(e, t4) {
            tr(e), an(e, t4);
          }
          __name(Mo, "Mo");
          n2(Mo, "defaultWriterClosedPromiseInitializeAsRejected");
          function Ma(e) {
            tr(e), Uo(e);
          }
          __name(Ma, "Ma");
          n2(Ma, "defaultWriterClosedPromiseInitializeAsResolved");
          function an(e, t4) {
            e._closedPromise_reject !== void 0 && (Q(e._closedPromise), e._closedPromise_reject(t4), e._closedPromise_resolve = void 0, e._closedPromise_reject = void 0, e._closedPromiseState = "rejected");
          }
          __name(an, "an");
          n2(an, "defaultWriterClosedPromiseReject");
          function Ua(e, t4) {
            Mo(e, t4);
          }
          __name(Ua, "Ua");
          n2(Ua, "defaultWriterClosedPromiseResetToRejected");
          function Uo(e) {
            e._closedPromise_resolve !== void 0 && (e._closedPromise_resolve(void 0), e._closedPromise_resolve = void 0, e._closedPromise_reject = void 0, e._closedPromiseState = "resolved");
          }
          __name(Uo, "Uo");
          n2(Uo, "defaultWriterClosedPromiseResolve");
          function rr(e) {
            e._readyPromise = E2((t4, r) => {
              e._readyPromise_resolve = t4, e._readyPromise_reject = r;
            }), e._readyPromiseState = "pending";
          }
          __name(rr, "rr");
          n2(rr, "defaultWriterReadyPromiseInitialize");
          function sn(e, t4) {
            rr(e), No(e, t4);
          }
          __name(sn, "sn");
          n2(sn, "defaultWriterReadyPromiseInitializeAsRejected");
          function xo(e) {
            rr(e), ln(e);
          }
          __name(xo, "xo");
          n2(xo, "defaultWriterReadyPromiseInitializeAsResolved");
          function No(e, t4) {
            e._readyPromise_reject !== void 0 && (Q(e._readyPromise), e._readyPromise_reject(t4), e._readyPromise_resolve = void 0, e._readyPromise_reject = void 0, e._readyPromiseState = "rejected");
          }
          __name(No, "No");
          n2(No, "defaultWriterReadyPromiseReject");
          function xa(e) {
            rr(e);
          }
          __name(xa, "xa");
          n2(xa, "defaultWriterReadyPromiseReset");
          function Na(e, t4) {
            sn(e, t4);
          }
          __name(Na, "Na");
          n2(Na, "defaultWriterReadyPromiseResetToRejected");
          function ln(e) {
            e._readyPromise_resolve !== void 0 && (e._readyPromise_resolve(void 0), e._readyPromise_resolve = void 0, e._readyPromise_reject = void 0, e._readyPromiseState = "fulfilled");
          }
          __name(ln, "ln");
          n2(ln, "defaultWriterReadyPromiseResolve");
          function Ha() {
            if (typeof globalThis < "u") return globalThis;
            if (typeof self < "u") return self;
            if (typeof n < "u") return n;
          }
          __name(Ha, "Ha");
          n2(Ha, "getGlobals");
          const un = Ha();
          function Va(e) {
            if (!(typeof e == "function" || typeof e == "object") || e.name !== "DOMException") return false;
            try {
              return new e(), true;
            } catch (e2) {
              return false;
            }
          }
          __name(Va, "Va");
          n2(Va, "isDOMExceptionConstructor");
          function Qa() {
            const e = un == null ? void 0 : un.DOMException;
            return Va(e) ? e : void 0;
          }
          __name(Qa, "Qa");
          n2(Qa, "getFromGlobal");
          function Ya() {
            const e = n2(function(r, s2) {
              this.message = r || "", this.name = s2 || "Error", Error.captureStackTrace && Error.captureStackTrace(this, this.constructor);
            }, "DOMException");
            return h(e, "DOMException"), e.prototype = Object.create(Error.prototype), Object.defineProperty(e.prototype, "constructor", { value: e, writable: true, configurable: true }), e;
          }
          __name(Ya, "Ya");
          n2(Ya, "createPolyfill");
          const Ga = Qa() || Ya();
          function Ho(e, t4, r, s2, f3, c) {
            const d2 = Qe(e), m2 = ko(t4);
            e._disturbed = true;
            let R3 = false, y = T2(void 0);
            return E2((C3, P2) => {
              let B2;
              if (c !== void 0) {
                if (B2 = n2(() => {
                  const S = c.reason !== void 0 ? c.reason : new Ga("Aborted", "AbortError"), v2 = [];
                  s2 || v2.push(() => t4._state === "writable" ? Zt(t4, S) : T2(void 0)), f3 || v2.push(() => e._state === "readable" ? ie(e, S) : T2(void 0)), N2(() => Promise.all(v2.map((k2) => k2())), true, S);
                }, "abortAlgorithm"), c.aborted) {
                  B2();
                  return;
                }
                c.addEventListener("abort", B2);
              }
              function ae() {
                return E2((S, v2) => {
                  function k2(Y) {
                    Y ? S() : q(nt(), k2, v2);
                  }
                  __name(k2, "k2");
                  n2(k2, "next"), k2(false);
                });
              }
              __name(ae, "ae");
              n2(ae, "pipeLoop");
              function nt() {
                return R3 ? T2(true) : q(m2._readyPromise, () => E2((S, v2) => {
                  mt(d2, { _chunkSteps: /* @__PURE__ */ __name((k2) => {
                    y = q(Fo(m2, k2), void 0, u2), S(false);
                  }, "_chunkSteps"), _closeSteps: /* @__PURE__ */ __name(() => S(true), "_closeSteps"), _errorSteps: v2 });
                }));
              }
              __name(nt, "nt");
              if (n2(nt, "pipeStep"), Te(e, d2._closedPromise, (S) => (s2 ? J(true, S) : N2(() => Zt(t4, S), true, S), null)), Te(t4, m2._closedPromise, (S) => (f3 ? J(true, S) : N2(() => ie(e, S), true, S), null)), x2(e, d2._closedPromise, () => (r ? J() : N2(() => qa(m2)), null)), he(t4) || t4._state === "closed") {
                const S = new TypeError("the destination writable stream closed before all data could be piped to it");
                f3 ? J(true, S) : N2(() => ie(e, S), true, S);
              }
              Q(ae());
              function Oe() {
                const S = y;
                return q(y, () => S !== y ? Oe() : void 0);
              }
              __name(Oe, "Oe");
              n2(Oe, "waitForWritesToFinish");
              function Te(S, v2, k2) {
                S._state === "errored" ? k2(S._storedError) : I2(v2, k2);
              }
              __name(Te, "Te");
              n2(Te, "isOrBecomesErrored");
              function x2(S, v2, k2) {
                S._state === "closed" ? k2() : V(v2, k2);
              }
              __name(x2, "x2");
              n2(x2, "isOrBecomesClosed");
              function N2(S, v2, k2) {
                if (R3) return;
                R3 = true, t4._state === "writable" && !he(t4) ? V(Oe(), Y) : Y();
                function Y() {
                  return _(S(), () => Ce(v2, k2), (ot) => Ce(true, ot)), null;
                }
                __name(Y, "Y");
                n2(Y, "doTheRest");
              }
              __name(N2, "N2");
              n2(N2, "shutdownWithAction");
              function J(S, v2) {
                R3 || (R3 = true, t4._state === "writable" && !he(t4) ? V(Oe(), () => Ce(S, v2)) : Ce(S, v2));
              }
              __name(J, "J");
              n2(J, "shutdown");
              function Ce(S, v2) {
                return Io(m2), _e(d2), c !== void 0 && c.removeEventListener("abort", B2), S ? P2(v2) : C3(void 0), null;
              }
              __name(Ce, "Ce");
              n2(Ce, "finalize");
            });
          }
          __name(Ho, "Ho");
          n2(Ho, "ReadableStreamPipeTo");
          const Cn = class Cn {
            static {
              __name(this, "Cn");
            }
            constructor() {
              throw new TypeError("Illegal constructor");
            }
            get desiredSize() {
              if (!nr(this)) throw ir("desiredSize");
              return fn(this);
            }
            close() {
              if (!nr(this)) throw ir("close");
              if (!Je(this)) throw new TypeError("The stream is not in a state that permits close");
              $e(this);
            }
            enqueue(t4 = void 0) {
              if (!nr(this)) throw ir("enqueue");
              if (!Je(this)) throw new TypeError("The stream is not in a state that permits enqueue");
              return Ke(this, t4);
            }
            error(t4 = void 0) {
              if (!nr(this)) throw ir("error");
              oe(this, t4);
            }
            [Ar](t4) {
              Be(this);
              const r = this._cancelAlgorithm(t4);
              return or(this), r;
            }
            [Br](t4) {
              const r = this._controlledReadableStream;
              if (this._queue.length > 0) {
                const s2 = xr(this);
                this._closeRequested && this._queue.length === 0 ? (or(this), Pt(r)) : Tt(this), t4._chunkSteps(s2);
              } else eo(r, t4), Tt(this);
            }
            [kr]() {
            }
          };
          n2(Cn, "ReadableStreamDefaultController");
          let ne = Cn;
          Object.defineProperties(ne.prototype, { close: { enumerable: true }, enqueue: { enumerable: true }, error: { enumerable: true }, desiredSize: { enumerable: true } }), h(ne.prototype.close, "close"), h(ne.prototype.enqueue, "enqueue"), h(ne.prototype.error, "error"), typeof Symbol.toStringTag == "symbol" && Object.defineProperty(ne.prototype, Symbol.toStringTag, { value: "ReadableStreamDefaultController", configurable: true });
          function nr(e) {
            return !l2(e) || !Object.prototype.hasOwnProperty.call(e, "_controlledReadableStream") ? false : e instanceof ne;
          }
          __name(nr, "nr");
          n2(nr, "IsReadableStreamDefaultController");
          function Tt(e) {
            if (!Vo(e)) return;
            if (e._pulling) {
              e._pullAgain = true;
              return;
            }
            e._pulling = true;
            const r = e._pullAlgorithm();
            _(r, () => (e._pulling = false, e._pullAgain && (e._pullAgain = false, Tt(e)), null), (s2) => (oe(e, s2), null));
          }
          __name(Tt, "Tt");
          n2(Tt, "ReadableStreamDefaultControllerCallPullIfNeeded");
          function Vo(e) {
            const t4 = e._controlledReadableStream;
            return !Je(e) || !e._started ? false : !!(qe(t4) && Lt(t4) > 0 || fn(e) > 0);
          }
          __name(Vo, "Vo");
          n2(Vo, "ReadableStreamDefaultControllerShouldCallPull");
          function or(e) {
            e._pullAlgorithm = void 0, e._cancelAlgorithm = void 0, e._strategySizeAlgorithm = void 0;
          }
          __name(or, "or");
          n2(or, "ReadableStreamDefaultControllerClearAlgorithms");
          function $e(e) {
            if (!Je(e)) return;
            const t4 = e._controlledReadableStream;
            e._closeRequested = true, e._queue.length === 0 && (or(e), Pt(t4));
          }
          __name($e, "$e");
          n2($e, "ReadableStreamDefaultControllerClose");
          function Ke(e, t4) {
            if (!Je(e)) return;
            const r = e._controlledReadableStream;
            if (qe(r) && Lt(r) > 0) Lr(r, t4, false);
            else {
              let s2;
              try {
                s2 = e._strategySizeAlgorithm(t4);
              } catch (f3) {
                throw oe(e, f3), f3;
              }
              try {
                Nr(e, t4, s2);
              } catch (f3) {
                throw oe(e, f3), f3;
              }
            }
            Tt(e);
          }
          __name(Ke, "Ke");
          n2(Ke, "ReadableStreamDefaultControllerEnqueue");
          function oe(e, t4) {
            const r = e._controlledReadableStream;
            r._state === "readable" && (Be(e), or(e), Zo(r, t4));
          }
          __name(oe, "oe");
          n2(oe, "ReadableStreamDefaultControllerError");
          function fn(e) {
            const t4 = e._controlledReadableStream._state;
            return t4 === "errored" ? null : t4 === "closed" ? 0 : e._strategyHWM - e._queueTotalSize;
          }
          __name(fn, "fn");
          n2(fn, "ReadableStreamDefaultControllerGetDesiredSize");
          function Za(e) {
            return !Vo(e);
          }
          __name(Za, "Za");
          n2(Za, "ReadableStreamDefaultControllerHasBackpressure");
          function Je(e) {
            const t4 = e._controlledReadableStream._state;
            return !e._closeRequested && t4 === "readable";
          }
          __name(Je, "Je");
          n2(Je, "ReadableStreamDefaultControllerCanCloseOrEnqueue");
          function Qo(e, t4, r, s2, f3, c, d2) {
            t4._controlledReadableStream = e, t4._queue = void 0, t4._queueTotalSize = void 0, Be(t4), t4._started = false, t4._closeRequested = false, t4._pullAgain = false, t4._pulling = false, t4._strategySizeAlgorithm = d2, t4._strategyHWM = c, t4._pullAlgorithm = s2, t4._cancelAlgorithm = f3, e._readableStreamController = t4;
            const m2 = r();
            _(T2(m2), () => (t4._started = true, Tt(t4), null), (R3) => (oe(t4, R3), null));
          }
          __name(Qo, "Qo");
          n2(Qo, "SetUpReadableStreamDefaultController");
          function Ka(e, t4, r, s2) {
            const f3 = Object.create(ne.prototype);
            let c, d2, m2;
            t4.start !== void 0 ? c = n2(() => t4.start(f3), "startAlgorithm") : c = n2(() => {
            }, "startAlgorithm"), t4.pull !== void 0 ? d2 = n2(() => t4.pull(f3), "pullAlgorithm") : d2 = n2(() => T2(void 0), "pullAlgorithm"), t4.cancel !== void 0 ? m2 = n2((R3) => t4.cancel(R3), "cancelAlgorithm") : m2 = n2(() => T2(void 0), "cancelAlgorithm"), Qo(e, f3, c, d2, m2, r, s2);
          }
          __name(Ka, "Ka");
          n2(Ka, "SetUpReadableStreamDefaultControllerFromUnderlyingSource");
          function ir(e) {
            return new TypeError(`ReadableStreamDefaultController.prototype.${e} can only be used on a ReadableStreamDefaultController`);
          }
          __name(ir, "ir");
          n2(ir, "defaultControllerBrandCheckException$1");
          function Ja(e, t4) {
            return ze(e._readableStreamController) ? es(e) : Xa(e);
          }
          __name(Ja, "Ja");
          n2(Ja, "ReadableStreamTee");
          function Xa(e, t4) {
            const r = Qe(e);
            let s2 = false, f3 = false, c = false, d2 = false, m2, R3, y, C3, P2;
            const B2 = E2((x2) => {
              P2 = x2;
            });
            function ae() {
              return s2 ? (f3 = true, T2(void 0)) : (s2 = true, mt(r, { _chunkSteps: /* @__PURE__ */ __name((N2) => {
                ge(() => {
                  f3 = false;
                  const J = N2, Ce = N2;
                  c || Ke(y._readableStreamController, J), d2 || Ke(C3._readableStreamController, Ce), s2 = false, f3 && ae();
                });
              }, "_chunkSteps"), _closeSteps: /* @__PURE__ */ __name(() => {
                s2 = false, c || $e(y._readableStreamController), d2 || $e(C3._readableStreamController), (!c || !d2) && P2(void 0);
              }, "_closeSteps"), _errorSteps: /* @__PURE__ */ __name(() => {
                s2 = false;
              }, "_errorSteps") }), T2(void 0));
            }
            __name(ae, "ae");
            n2(ae, "pullAlgorithm");
            function nt(x2) {
              if (c = true, m2 = x2, d2) {
                const N2 = yt([m2, R3]), J = ie(e, N2);
                P2(J);
              }
              return B2;
            }
            __name(nt, "nt");
            n2(nt, "cancel1Algorithm");
            function Oe(x2) {
              if (d2 = true, R3 = x2, c) {
                const N2 = yt([m2, R3]), J = ie(e, N2);
                P2(J);
              }
              return B2;
            }
            __name(Oe, "Oe");
            n2(Oe, "cancel2Algorithm");
            function Te() {
            }
            __name(Te, "Te");
            return n2(Te, "startAlgorithm"), y = Ct(Te, ae, nt), C3 = Ct(Te, ae, Oe), I2(r._closedPromise, (x2) => (oe(y._readableStreamController, x2), oe(C3._readableStreamController, x2), (!c || !d2) && P2(void 0), null)), [y, C3];
          }
          __name(Xa, "Xa");
          n2(Xa, "ReadableStreamDefaultTee");
          function es(e) {
            let t4 = Qe(e), r = false, s2 = false, f3 = false, c = false, d2 = false, m2, R3, y, C3, P2;
            const B2 = E2((S) => {
              P2 = S;
            });
            function ae(S) {
              I2(S._closedPromise, (v2) => (S !== t4 || (K(y._readableStreamController, v2), K(C3._readableStreamController, v2), (!c || !d2) && P2(void 0)), null));
            }
            __name(ae, "ae");
            n2(ae, "forwardReaderError");
            function nt() {
              Fe(t4) && (_e(t4), t4 = Qe(e), ae(t4)), mt(t4, { _chunkSteps: /* @__PURE__ */ __name((v2) => {
                ge(() => {
                  s2 = false, f3 = false;
                  const k2 = v2;
                  let Y = v2;
                  if (!c && !d2) try {
                    Y = fo(v2);
                  } catch (ot) {
                    K(y._readableStreamController, ot), K(C3._readableStreamController, ot), P2(ie(e, ot));
                    return;
                  }
                  c || Nt(y._readableStreamController, k2), d2 || Nt(C3._readableStreamController, Y), r = false, s2 ? Te() : f3 && x2();
                });
              }, "_chunkSteps"), _closeSteps: /* @__PURE__ */ __name(() => {
                r = false, c || gt(y._readableStreamController), d2 || gt(C3._readableStreamController), y._readableStreamController._pendingPullIntos.length > 0 && Ht(y._readableStreamController, 0), C3._readableStreamController._pendingPullIntos.length > 0 && Ht(C3._readableStreamController, 0), (!c || !d2) && P2(void 0);
              }, "_closeSteps"), _errorSteps: /* @__PURE__ */ __name(() => {
                r = false;
              }, "_errorSteps") });
            }
            __name(nt, "nt");
            n2(nt, "pullWithDefaultReader");
            function Oe(S, v2) {
              Ee(t4) && (_e(t4), t4 = Co(e), ae(t4));
              const k2 = v2 ? C3 : y, Y = v2 ? y : C3;
              Eo(t4, S, 1, { _chunkSteps: /* @__PURE__ */ __name((it) => {
                ge(() => {
                  s2 = false, f3 = false;
                  const at = v2 ? d2 : c;
                  if (v2 ? c : d2) at || Vt(k2._readableStreamController, it);
                  else {
                    let ui;
                    try {
                      ui = fo(it);
                    } catch (kn) {
                      K(k2._readableStreamController, kn), K(Y._readableStreamController, kn), P2(ie(e, kn));
                      return;
                    }
                    at || Vt(k2._readableStreamController, it), Nt(Y._readableStreamController, ui);
                  }
                  r = false, s2 ? Te() : f3 && x2();
                });
              }, "_chunkSteps"), _closeSteps: /* @__PURE__ */ __name((it) => {
                r = false;
                const at = v2 ? d2 : c, fr = v2 ? c : d2;
                at || gt(k2._readableStreamController), fr || gt(Y._readableStreamController), it !== void 0 && (at || Vt(k2._readableStreamController, it), !fr && Y._readableStreamController._pendingPullIntos.length > 0 && Ht(Y._readableStreamController, 0)), (!at || !fr) && P2(void 0);
              }, "_closeSteps"), _errorSteps: /* @__PURE__ */ __name(() => {
                r = false;
              }, "_errorSteps") });
            }
            __name(Oe, "Oe");
            n2(Oe, "pullWithBYOBReader");
            function Te() {
              if (r) return s2 = true, T2(void 0);
              r = true;
              const S = Gr(y._readableStreamController);
              return S === null ? nt() : Oe(S._view, false), T2(void 0);
            }
            __name(Te, "Te");
            n2(Te, "pull1Algorithm");
            function x2() {
              if (r) return f3 = true, T2(void 0);
              r = true;
              const S = Gr(C3._readableStreamController);
              return S === null ? nt() : Oe(S._view, true), T2(void 0);
            }
            __name(x2, "x2");
            n2(x2, "pull2Algorithm");
            function N2(S) {
              if (c = true, m2 = S, d2) {
                const v2 = yt([m2, R3]), k2 = ie(e, v2);
                P2(k2);
              }
              return B2;
            }
            __name(N2, "N2");
            n2(N2, "cancel1Algorithm");
            function J(S) {
              if (d2 = true, R3 = S, c) {
                const v2 = yt([m2, R3]), k2 = ie(e, v2);
                P2(k2);
              }
              return B2;
            }
            __name(J, "J");
            n2(J, "cancel2Algorithm");
            function Ce() {
            }
            __name(Ce, "Ce");
            return n2(Ce, "startAlgorithm"), y = Go(Ce, Te, N2), C3 = Go(Ce, x2, J), ae(t4), [y, C3];
          }
          __name(es, "es");
          n2(es, "ReadableByteStreamTee");
          function ts(e) {
            return l2(e) && typeof e.getReader < "u";
          }
          __name(ts, "ts");
          n2(ts, "isReadableStreamLike");
          function rs(e) {
            return ts(e) ? os2(e.getReader()) : ns(e);
          }
          __name(rs, "rs");
          n2(rs, "ReadableStreamFrom");
          function ns(e) {
            let t4;
            const r = uo(e, "async"), s2 = u2;
            function f3() {
              let d2;
              try {
                d2 = Yi(r);
              } catch (R3) {
                return b(R3);
              }
              const m2 = T2(d2);
              return F3(m2, (R3) => {
                if (!l2(R3)) throw new TypeError("The promise returned by the iterator.next() method must fulfill with an object");
                if (Gi(R3)) $e(t4._readableStreamController);
                else {
                  const C3 = Zi(R3);
                  Ke(t4._readableStreamController, C3);
                }
              });
            }
            __name(f3, "f3");
            n2(f3, "pullAlgorithm");
            function c(d2) {
              const m2 = r.iterator;
              let R3;
              try {
                R3 = Mt(m2, "return");
              } catch (P2) {
                return b(P2);
              }
              if (R3 === void 0) return T2(void 0);
              let y;
              try {
                y = z(R3, m2, [d2]);
              } catch (P2) {
                return b(P2);
              }
              const C3 = T2(y);
              return F3(C3, (P2) => {
                if (!l2(P2)) throw new TypeError("The promise returned by the iterator.return() method must fulfill with an object");
              });
            }
            __name(c, "c");
            return n2(c, "cancelAlgorithm"), t4 = Ct(s2, f3, c, 0), t4;
          }
          __name(ns, "ns");
          n2(ns, "ReadableStreamFromIterable");
          function os2(e) {
            let t4;
            const r = u2;
            function s2() {
              let c;
              try {
                c = e.read();
              } catch (d2) {
                return b(d2);
              }
              return F3(c, (d2) => {
                if (!l2(d2)) throw new TypeError("The promise returned by the reader.read() method must fulfill with an object");
                if (d2.done) $e(t4._readableStreamController);
                else {
                  const m2 = d2.value;
                  Ke(t4._readableStreamController, m2);
                }
              });
            }
            __name(s2, "s2");
            n2(s2, "pullAlgorithm");
            function f3(c) {
              try {
                return T2(e.cancel(c));
              } catch (d2) {
                return b(d2);
              }
            }
            __name(f3, "f3");
            return n2(f3, "cancelAlgorithm"), t4 = Ct(r, s2, f3, 0), t4;
          }
          __name(os2, "os2");
          n2(os2, "ReadableStreamFromDefaultReader");
          function is(e, t4) {
            ue(e, t4);
            const r = e, s2 = r == null ? void 0 : r.autoAllocateChunkSize, f3 = r == null ? void 0 : r.cancel, c = r == null ? void 0 : r.pull, d2 = r == null ? void 0 : r.start, m2 = r == null ? void 0 : r.type;
            return { autoAllocateChunkSize: s2 === void 0 ? void 0 : Fr(s2, `${t4} has member 'autoAllocateChunkSize' that`), cancel: f3 === void 0 ? void 0 : as(f3, r, `${t4} has member 'cancel' that`), pull: c === void 0 ? void 0 : ss(c, r, `${t4} has member 'pull' that`), start: d2 === void 0 ? void 0 : ls(d2, r, `${t4} has member 'start' that`), type: m2 === void 0 ? void 0 : us(m2, `${t4} has member 'type' that`) };
          }
          __name(is, "is");
          n2(is, "convertUnderlyingDefaultOrByteSource");
          function as(e, t4, r) {
            return Z2(e, r), (s2) => j(e, t4, [s2]);
          }
          __name(as, "as");
          n2(as, "convertUnderlyingSourceCancelCallback");
          function ss(e, t4, r) {
            return Z2(e, r), (s2) => j(e, t4, [s2]);
          }
          __name(ss, "ss");
          n2(ss, "convertUnderlyingSourcePullCallback");
          function ls(e, t4, r) {
            return Z2(e, r), (s2) => z(e, t4, [s2]);
          }
          __name(ls, "ls");
          n2(ls, "convertUnderlyingSourceStartCallback");
          function us(e, t4) {
            if (e = `${e}`, e !== "bytes") throw new TypeError(`${t4} '${e}' is not a valid enumeration value for ReadableStreamType`);
            return e;
          }
          __name(us, "us");
          n2(us, "convertReadableStreamType");
          function fs6(e, t4) {
            return ue(e, t4), { preventCancel: !!(e == null ? void 0 : e.preventCancel) };
          }
          __name(fs6, "fs6");
          n2(fs6, "convertIteratorOptions");
          function Yo(e, t4) {
            ue(e, t4);
            const r = e == null ? void 0 : e.preventAbort, s2 = e == null ? void 0 : e.preventCancel, f3 = e == null ? void 0 : e.preventClose, c = e == null ? void 0 : e.signal;
            return c !== void 0 && cs(c, `${t4} has member 'signal' that`), { preventAbort: !!r, preventCancel: !!s2, preventClose: !!f3, signal: c };
          }
          __name(Yo, "Yo");
          n2(Yo, "convertPipeOptions");
          function cs(e, t4) {
            if (!_a2(e)) throw new TypeError(`${t4} is not an AbortSignal.`);
          }
          __name(cs, "cs");
          n2(cs, "assertAbortSignal");
          function ds(e, t4) {
            ue(e, t4);
            const r = e == null ? void 0 : e.readable;
            zr(r, "readable", "ReadableWritablePair"), jr(r, `${t4} has member 'readable' that`);
            const s2 = e == null ? void 0 : e.writable;
            return zr(s2, "writable", "ReadableWritablePair"), Bo(s2, `${t4} has member 'writable' that`), { readable: r, writable: s2 };
          }
          __name(ds, "ds");
          n2(ds, "convertReadableWritablePair");
          const Pn = class Pn {
            static {
              __name(this, "Pn");
            }
            constructor(t4 = {}, r = {}) {
              t4 === void 0 ? t4 = null : Jn(t4, "First parameter");
              const s2 = Gt(r, "Second parameter"), f3 = is(t4, "First parameter");
              if (cn(this), f3.type === "bytes") {
                if (s2.size !== void 0) throw new RangeError("The strategy for a byte stream cannot have a size function");
                const c = St(s2, 0);
                aa(this, f3, c);
              } else {
                const c = Yt(s2), d2 = St(s2, 1);
                Ka(this, f3, d2, c);
              }
            }
            get locked() {
              if (!We(this)) throw De("locked");
              return qe(this);
            }
            cancel(t4 = void 0) {
              return We(this) ? qe(this) ? b(new TypeError("Cannot cancel a stream that already has a reader")) : ie(this, t4) : b(De("cancel"));
            }
            getReader(t4 = void 0) {
              if (!We(this)) throw De("getReader");
              return la(t4, "First parameter").mode === void 0 ? Qe(this) : Co(this);
            }
            pipeThrough(t4, r = {}) {
              if (!We(this)) throw De("pipeThrough");
              Se(t4, 1, "pipeThrough");
              const s2 = ds(t4, "First parameter"), f3 = Yo(r, "Second parameter");
              if (qe(this)) throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream");
              if (Ze(s2.writable)) throw new TypeError("ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream");
              const c = Ho(this, s2.writable, f3.preventClose, f3.preventAbort, f3.preventCancel, f3.signal);
              return Q(c), s2.readable;
            }
            pipeTo(t4, r = {}) {
              if (!We(this)) return b(De("pipeTo"));
              if (t4 === void 0) return b("Parameter 1 is required in 'pipeTo'.");
              if (!Ge(t4)) return b(new TypeError("ReadableStream.prototype.pipeTo's first argument must be a WritableStream"));
              let s2;
              try {
                s2 = Yo(r, "Second parameter");
              } catch (f3) {
                return b(f3);
              }
              return qe(this) ? b(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream")) : Ze(t4) ? b(new TypeError("ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream")) : Ho(this, t4, s2.preventClose, s2.preventAbort, s2.preventCancel, s2.signal);
            }
            tee() {
              if (!We(this)) throw De("tee");
              const t4 = Ja(this);
              return yt(t4);
            }
            values(t4 = void 0) {
              if (!We(this)) throw De("values");
              const r = fs6(t4, "First parameter");
              return Vi(this, r.preventCancel);
            }
            [Ur](t4) {
              return this.values(t4);
            }
            static from(t4) {
              return rs(t4);
            }
          };
          n2(Pn, "ReadableStream");
          let L = Pn;
          Object.defineProperties(L, { from: { enumerable: true } }), Object.defineProperties(L.prototype, { cancel: { enumerable: true }, getReader: { enumerable: true }, pipeThrough: { enumerable: true }, pipeTo: { enumerable: true }, tee: { enumerable: true }, values: { enumerable: true }, locked: { enumerable: true } }), h(L.from, "from"), h(L.prototype.cancel, "cancel"), h(L.prototype.getReader, "getReader"), h(L.prototype.pipeThrough, "pipeThrough"), h(L.prototype.pipeTo, "pipeTo"), h(L.prototype.tee, "tee"), h(L.prototype.values, "values"), typeof Symbol.toStringTag == "symbol" && Object.defineProperty(L.prototype, Symbol.toStringTag, { value: "ReadableStream", configurable: true }), Object.defineProperty(L.prototype, Ur, { value: L.prototype.values, writable: true, configurable: true });
          function Ct(e, t4, r, s2 = 1, f3 = () => 1) {
            const c = Object.create(L.prototype);
            cn(c);
            const d2 = Object.create(ne.prototype);
            return Qo(c, d2, e, t4, r, s2, f3), c;
          }
          __name(Ct, "Ct");
          n2(Ct, "CreateReadableStream");
          function Go(e, t4, r) {
            const s2 = Object.create(L.prototype);
            cn(s2);
            const f3 = Object.create(te.prototype);
            return To(s2, f3, e, t4, r, 0, void 0), s2;
          }
          __name(Go, "Go");
          n2(Go, "CreateReadableByteStream");
          function cn(e) {
            e._state = "readable", e._reader = void 0, e._storedError = void 0, e._disturbed = false;
          }
          __name(cn, "cn");
          n2(cn, "InitializeReadableStream");
          function We(e) {
            return !l2(e) || !Object.prototype.hasOwnProperty.call(e, "_readableStreamController") ? false : e instanceof L;
          }
          __name(We, "We");
          n2(We, "IsReadableStream");
          function qe(e) {
            return e._reader !== void 0;
          }
          __name(qe, "qe");
          n2(qe, "IsReadableStreamLocked");
          function ie(e, t4) {
            if (e._disturbed = true, e._state === "closed") return T2(void 0);
            if (e._state === "errored") return b(e._storedError);
            Pt(e);
            const r = e._reader;
            if (r !== void 0 && Fe(r)) {
              const f3 = r._readIntoRequests;
              r._readIntoRequests = new D2(), f3.forEach((c) => {
                c._closeSteps(void 0);
              });
            }
            const s2 = e._readableStreamController[Ar](t4);
            return F3(s2, u2);
          }
          __name(ie, "ie");
          n2(ie, "ReadableStreamCancel");
          function Pt(e) {
            e._state = "closed";
            const t4 = e._reader;
            if (t4 !== void 0 && (Zn(t4), Ee(t4))) {
              const r = t4._readRequests;
              t4._readRequests = new D2(), r.forEach((s2) => {
                s2._closeSteps();
              });
            }
          }
          __name(Pt, "Pt");
          n2(Pt, "ReadableStreamClose");
          function Zo(e, t4) {
            e._state = "errored", e._storedError = t4;
            const r = e._reader;
            r !== void 0 && (Or(r, t4), Ee(r) ? ro(r, t4) : Ao(r, t4));
          }
          __name(Zo, "Zo");
          n2(Zo, "ReadableStreamError");
          function De(e) {
            return new TypeError(`ReadableStream.prototype.${e} can only be used on a ReadableStream`);
          }
          __name(De, "De");
          n2(De, "streamBrandCheckException$1");
          function Ko(e, t4) {
            ue(e, t4);
            const r = e == null ? void 0 : e.highWaterMark;
            return zr(r, "highWaterMark", "QueuingStrategyInit"), { highWaterMark: Ir(r) };
          }
          __name(Ko, "Ko");
          n2(Ko, "convertQueuingStrategyInit");
          const Jo = n2((e) => e.byteLength, "byteLengthSizeFunction");
          h(Jo, "size");
          const vn = class vn {
            static {
              __name(this, "vn");
            }
            constructor(t4) {
              Se(t4, 1, "ByteLengthQueuingStrategy"), t4 = Ko(t4, "First parameter"), this._byteLengthQueuingStrategyHighWaterMark = t4.highWaterMark;
            }
            get highWaterMark() {
              if (!ei(this)) throw Xo("highWaterMark");
              return this._byteLengthQueuingStrategyHighWaterMark;
            }
            get size() {
              if (!ei(this)) throw Xo("size");
              return Jo;
            }
          };
          n2(vn, "ByteLengthQueuingStrategy");
          let Xe = vn;
          Object.defineProperties(Xe.prototype, { highWaterMark: { enumerable: true }, size: { enumerable: true } }), typeof Symbol.toStringTag == "symbol" && Object.defineProperty(Xe.prototype, Symbol.toStringTag, { value: "ByteLengthQueuingStrategy", configurable: true });
          function Xo(e) {
            return new TypeError(`ByteLengthQueuingStrategy.prototype.${e} can only be used on a ByteLengthQueuingStrategy`);
          }
          __name(Xo, "Xo");
          n2(Xo, "byteLengthBrandCheckException");
          function ei(e) {
            return !l2(e) || !Object.prototype.hasOwnProperty.call(e, "_byteLengthQueuingStrategyHighWaterMark") ? false : e instanceof Xe;
          }
          __name(ei, "ei");
          n2(ei, "IsByteLengthQueuingStrategy");
          const ti = n2(() => 1, "countSizeFunction");
          h(ti, "size");
          const En = class En {
            static {
              __name(this, "En");
            }
            constructor(t4) {
              Se(t4, 1, "CountQueuingStrategy"), t4 = Ko(t4, "First parameter"), this._countQueuingStrategyHighWaterMark = t4.highWaterMark;
            }
            get highWaterMark() {
              if (!ni(this)) throw ri("highWaterMark");
              return this._countQueuingStrategyHighWaterMark;
            }
            get size() {
              if (!ni(this)) throw ri("size");
              return ti;
            }
          };
          n2(En, "CountQueuingStrategy");
          let et = En;
          Object.defineProperties(et.prototype, { highWaterMark: { enumerable: true }, size: { enumerable: true } }), typeof Symbol.toStringTag == "symbol" && Object.defineProperty(et.prototype, Symbol.toStringTag, { value: "CountQueuingStrategy", configurable: true });
          function ri(e) {
            return new TypeError(`CountQueuingStrategy.prototype.${e} can only be used on a CountQueuingStrategy`);
          }
          __name(ri, "ri");
          n2(ri, "countBrandCheckException");
          function ni(e) {
            return !l2(e) || !Object.prototype.hasOwnProperty.call(e, "_countQueuingStrategyHighWaterMark") ? false : e instanceof et;
          }
          __name(ni, "ni");
          n2(ni, "IsCountQueuingStrategy");
          function hs(e, t4) {
            ue(e, t4);
            const r = e == null ? void 0 : e.cancel, s2 = e == null ? void 0 : e.flush, f3 = e == null ? void 0 : e.readableType, c = e == null ? void 0 : e.start, d2 = e == null ? void 0 : e.transform, m2 = e == null ? void 0 : e.writableType;
            return { cancel: r === void 0 ? void 0 : ys(r, e, `${t4} has member 'cancel' that`), flush: s2 === void 0 ? void 0 : ps2(s2, e, `${t4} has member 'flush' that`), readableType: f3, start: c === void 0 ? void 0 : bs(c, e, `${t4} has member 'start' that`), transform: d2 === void 0 ? void 0 : ms(d2, e, `${t4} has member 'transform' that`), writableType: m2 };
          }
          __name(hs, "hs");
          n2(hs, "convertTransformer");
          function ps2(e, t4, r) {
            return Z2(e, r), (s2) => j(e, t4, [s2]);
          }
          __name(ps2, "ps");
          n2(ps2, "convertTransformerFlushCallback");
          function bs(e, t4, r) {
            return Z2(e, r), (s2) => z(e, t4, [s2]);
          }
          __name(bs, "bs");
          n2(bs, "convertTransformerStartCallback");
          function ms(e, t4, r) {
            return Z2(e, r), (s2, f3) => j(e, t4, [s2, f3]);
          }
          __name(ms, "ms");
          n2(ms, "convertTransformerTransformCallback");
          function ys(e, t4, r) {
            return Z2(e, r), (s2) => j(e, t4, [s2]);
          }
          __name(ys, "ys");
          n2(ys, "convertTransformerCancelCallback");
          const An = class An {
            static {
              __name(this, "An");
            }
            constructor(t4 = {}, r = {}, s2 = {}) {
              t4 === void 0 && (t4 = null);
              const f3 = Gt(r, "Second parameter"), c = Gt(s2, "Third parameter"), d2 = hs(t4, "First parameter");
              if (d2.readableType !== void 0) throw new RangeError("Invalid readableType specified");
              if (d2.writableType !== void 0) throw new RangeError("Invalid writableType specified");
              const m2 = St(c, 0), R3 = Yt(c), y = St(f3, 1), C3 = Yt(f3);
              let P2;
              const B2 = E2((ae) => {
                P2 = ae;
              });
              gs(this, B2, y, C3, m2, R3), Ss(this, d2), d2.start !== void 0 ? P2(d2.start(this._transformStreamController)) : P2(void 0);
            }
            get readable() {
              if (!oi(this)) throw li("readable");
              return this._readable;
            }
            get writable() {
              if (!oi(this)) throw li("writable");
              return this._writable;
            }
          };
          n2(An, "TransformStream");
          let tt = An;
          Object.defineProperties(tt.prototype, { readable: { enumerable: true }, writable: { enumerable: true } }), typeof Symbol.toStringTag == "symbol" && Object.defineProperty(tt.prototype, Symbol.toStringTag, { value: "TransformStream", configurable: true });
          function gs(e, t4, r, s2, f3, c) {
            function d2() {
              return t4;
            }
            __name(d2, "d2");
            n2(d2, "startAlgorithm");
            function m2(B2) {
              return Ts(e, B2);
            }
            __name(m2, "m2");
            n2(m2, "writeAlgorithm");
            function R3(B2) {
              return Cs(e, B2);
            }
            __name(R3, "R3");
            n2(R3, "abortAlgorithm");
            function y() {
              return Ps(e);
            }
            __name(y, "y");
            n2(y, "closeAlgorithm"), e._writable = Ra(d2, m2, y, R3, r, s2);
            function C3() {
              return vs(e);
            }
            __name(C3, "C3");
            n2(C3, "pullAlgorithm");
            function P2(B2) {
              return Es(e, B2);
            }
            __name(P2, "P2");
            n2(P2, "cancelAlgorithm"), e._readable = Ct(d2, C3, P2, f3, c), e._backpressure = void 0, e._backpressureChangePromise = void 0, e._backpressureChangePromise_resolve = void 0, ar(e, true), e._transformStreamController = void 0;
          }
          __name(gs, "gs");
          n2(gs, "InitializeTransformStream");
          function oi(e) {
            return !l2(e) || !Object.prototype.hasOwnProperty.call(e, "_transformStreamController") ? false : e instanceof tt;
          }
          __name(oi, "oi");
          n2(oi, "IsTransformStream");
          function ii(e, t4) {
            oe(e._readable._readableStreamController, t4), dn(e, t4);
          }
          __name(ii, "ii");
          n2(ii, "TransformStreamError");
          function dn(e, t4) {
            lr(e._transformStreamController), wt(e._writable._writableStreamController, t4), hn(e);
          }
          __name(dn, "dn");
          n2(dn, "TransformStreamErrorWritableAndUnblockWrite");
          function hn(e) {
            e._backpressure && ar(e, false);
          }
          __name(hn, "hn");
          n2(hn, "TransformStreamUnblockWrite");
          function ar(e, t4) {
            e._backpressureChangePromise !== void 0 && e._backpressureChangePromise_resolve(), e._backpressureChangePromise = E2((r) => {
              e._backpressureChangePromise_resolve = r;
            }), e._backpressure = t4;
          }
          __name(ar, "ar");
          n2(ar, "TransformStreamSetBackpressure");
          const Bn = class Bn {
            static {
              __name(this, "Bn");
            }
            constructor() {
              throw new TypeError("Illegal constructor");
            }
            get desiredSize() {
              if (!sr(this)) throw ur("desiredSize");
              const t4 = this._controlledTransformStream._readable._readableStreamController;
              return fn(t4);
            }
            enqueue(t4 = void 0) {
              if (!sr(this)) throw ur("enqueue");
              ai(this, t4);
            }
            error(t4 = void 0) {
              if (!sr(this)) throw ur("error");
              ws(this, t4);
            }
            terminate() {
              if (!sr(this)) throw ur("terminate");
              Rs(this);
            }
          };
          n2(Bn, "TransformStreamDefaultController");
          let pe = Bn;
          Object.defineProperties(pe.prototype, { enqueue: { enumerable: true }, error: { enumerable: true }, terminate: { enumerable: true }, desiredSize: { enumerable: true } }), h(pe.prototype.enqueue, "enqueue"), h(pe.prototype.error, "error"), h(pe.prototype.terminate, "terminate"), typeof Symbol.toStringTag == "symbol" && Object.defineProperty(pe.prototype, Symbol.toStringTag, { value: "TransformStreamDefaultController", configurable: true });
          function sr(e) {
            return !l2(e) || !Object.prototype.hasOwnProperty.call(e, "_controlledTransformStream") ? false : e instanceof pe;
          }
          __name(sr, "sr");
          n2(sr, "IsTransformStreamDefaultController");
          function _s(e, t4, r, s2, f3) {
            t4._controlledTransformStream = e, e._transformStreamController = t4, t4._transformAlgorithm = r, t4._flushAlgorithm = s2, t4._cancelAlgorithm = f3, t4._finishPromise = void 0, t4._finishPromise_resolve = void 0, t4._finishPromise_reject = void 0;
          }
          __name(_s, "_s");
          n2(_s, "SetUpTransformStreamDefaultController");
          function Ss(e, t4) {
            const r = Object.create(pe.prototype);
            let s2, f3, c;
            t4.transform !== void 0 ? s2 = n2((d2) => t4.transform(d2, r), "transformAlgorithm") : s2 = n2((d2) => {
              try {
                return ai(r, d2), T2(void 0);
              } catch (m2) {
                return b(m2);
              }
            }, "transformAlgorithm"), t4.flush !== void 0 ? f3 = n2(() => t4.flush(r), "flushAlgorithm") : f3 = n2(() => T2(void 0), "flushAlgorithm"), t4.cancel !== void 0 ? c = n2((d2) => t4.cancel(d2), "cancelAlgorithm") : c = n2(() => T2(void 0), "cancelAlgorithm"), _s(e, r, s2, f3, c);
          }
          __name(Ss, "Ss");
          n2(Ss, "SetUpTransformStreamDefaultControllerFromTransformer");
          function lr(e) {
            e._transformAlgorithm = void 0, e._flushAlgorithm = void 0, e._cancelAlgorithm = void 0;
          }
          __name(lr, "lr");
          n2(lr, "TransformStreamDefaultControllerClearAlgorithms");
          function ai(e, t4) {
            const r = e._controlledTransformStream, s2 = r._readable._readableStreamController;
            if (!Je(s2)) throw new TypeError("Readable side is not in a state that permits enqueue");
            try {
              Ke(s2, t4);
            } catch (c) {
              throw dn(r, c), r._readable._storedError;
            }
            Za(s2) !== r._backpressure && ar(r, true);
          }
          __name(ai, "ai");
          n2(ai, "TransformStreamDefaultControllerEnqueue");
          function ws(e, t4) {
            ii(e._controlledTransformStream, t4);
          }
          __name(ws, "ws");
          n2(ws, "TransformStreamDefaultControllerError");
          function si(e, t4) {
            const r = e._transformAlgorithm(t4);
            return F3(r, void 0, (s2) => {
              throw ii(e._controlledTransformStream, s2), s2;
            });
          }
          __name(si, "si");
          n2(si, "TransformStreamDefaultControllerPerformTransform");
          function Rs(e) {
            const t4 = e._controlledTransformStream, r = t4._readable._readableStreamController;
            $e(r);
            const s2 = new TypeError("TransformStream terminated");
            dn(t4, s2);
          }
          __name(Rs, "Rs");
          n2(Rs, "TransformStreamDefaultControllerTerminate");
          function Ts(e, t4) {
            const r = e._transformStreamController;
            if (e._backpressure) {
              const s2 = e._backpressureChangePromise;
              return F3(s2, () => {
                const f3 = e._writable;
                if (f3._state === "erroring") throw f3._storedError;
                return si(r, t4);
              });
            }
            return si(r, t4);
          }
          __name(Ts, "Ts");
          n2(Ts, "TransformStreamDefaultSinkWriteAlgorithm");
          function Cs(e, t4) {
            const r = e._transformStreamController;
            if (r._finishPromise !== void 0) return r._finishPromise;
            const s2 = e._readable;
            r._finishPromise = E2((c, d2) => {
              r._finishPromise_resolve = c, r._finishPromise_reject = d2;
            });
            const f3 = r._cancelAlgorithm(t4);
            return lr(r), _(f3, () => (s2._state === "errored" ? rt(r, s2._storedError) : (oe(s2._readableStreamController, t4), pn(r)), null), (c) => (oe(s2._readableStreamController, c), rt(r, c), null)), r._finishPromise;
          }
          __name(Cs, "Cs");
          n2(Cs, "TransformStreamDefaultSinkAbortAlgorithm");
          function Ps(e) {
            const t4 = e._transformStreamController;
            if (t4._finishPromise !== void 0) return t4._finishPromise;
            const r = e._readable;
            t4._finishPromise = E2((f3, c) => {
              t4._finishPromise_resolve = f3, t4._finishPromise_reject = c;
            });
            const s2 = t4._flushAlgorithm();
            return lr(t4), _(s2, () => (r._state === "errored" ? rt(t4, r._storedError) : ($e(r._readableStreamController), pn(t4)), null), (f3) => (oe(r._readableStreamController, f3), rt(t4, f3), null)), t4._finishPromise;
          }
          __name(Ps, "Ps");
          n2(Ps, "TransformStreamDefaultSinkCloseAlgorithm");
          function vs(e) {
            return ar(e, false), e._backpressureChangePromise;
          }
          __name(vs, "vs");
          n2(vs, "TransformStreamDefaultSourcePullAlgorithm");
          function Es(e, t4) {
            const r = e._transformStreamController;
            if (r._finishPromise !== void 0) return r._finishPromise;
            const s2 = e._writable;
            r._finishPromise = E2((c, d2) => {
              r._finishPromise_resolve = c, r._finishPromise_reject = d2;
            });
            const f3 = r._cancelAlgorithm(t4);
            return lr(r), _(f3, () => (s2._state === "errored" ? rt(r, s2._storedError) : (wt(s2._writableStreamController, t4), hn(e), pn(r)), null), (c) => (wt(s2._writableStreamController, c), hn(e), rt(r, c), null)), r._finishPromise;
          }
          __name(Es, "Es");
          n2(Es, "TransformStreamDefaultSourceCancelAlgorithm");
          function ur(e) {
            return new TypeError(`TransformStreamDefaultController.prototype.${e} can only be used on a TransformStreamDefaultController`);
          }
          __name(ur, "ur");
          n2(ur, "defaultControllerBrandCheckException");
          function pn(e) {
            e._finishPromise_resolve !== void 0 && (e._finishPromise_resolve(), e._finishPromise_resolve = void 0, e._finishPromise_reject = void 0);
          }
          __name(pn, "pn");
          n2(pn, "defaultControllerFinishPromiseResolve");
          function rt(e, t4) {
            e._finishPromise_reject !== void 0 && (Q(e._finishPromise), e._finishPromise_reject(t4), e._finishPromise_resolve = void 0, e._finishPromise_reject = void 0);
          }
          __name(rt, "rt");
          n2(rt, "defaultControllerFinishPromiseReject");
          function li(e) {
            return new TypeError(`TransformStream.prototype.${e} can only be used on a TransformStream`);
          }
          __name(li, "li");
          n2(li, "streamBrandCheckException"), a2.ByteLengthQueuingStrategy = Xe, a2.CountQueuingStrategy = et, a2.ReadableByteStreamController = te, a2.ReadableStream = L, a2.ReadableStreamBYOBReader = ce, a2.ReadableStreamBYOBRequest = Re, a2.ReadableStreamDefaultController = ne, a2.ReadableStreamDefaultReader = fe, a2.TransformStream = tt, a2.TransformStreamDefaultController = pe, a2.WritableStream = de, a2.WritableStreamDefaultController = ke, a2.WritableStreamDefaultWriter = re;
        });
      }(pr, pr.exports)), pr.exports;
    }
    __name(Ls, "Ls");
    function qn(i, o3 = true) {
      return __asyncGenerator(this, null, function* () {
        for (const a2 of i) if ("stream" in a2) yield* __yieldStar(a2.stream());
        else if (ArrayBuffer.isView(a2)) if (o3) {
          let u2 = a2.byteOffset;
          const l2 = a2.byteOffset + a2.byteLength;
          for (; u2 !== l2; ) {
            const p = Math.min(l2 - u2, hi), h = a2.buffer.slice(u2, u2 + p);
            u2 += h.byteLength, yield new Uint8Array(h);
          }
        } else yield a2;
        else {
          let u2 = 0, l2 = a2;
          for (; u2 !== l2.size; ) {
            const h = yield new __await(l2.slice(u2, Math.min(l2.size, u2 + hi)).arrayBuffer());
            u2 += h.byteLength, yield new Uint8Array(h);
          }
        }
      });
    }
    __name(qn, "qn");
    function Vs(i, o3 = ut) {
      var a2 = `${bi()}${bi()}`.replace(/\./g, "").slice(-28).padStart(32, "-"), u2 = [], l2 = `--${a2}\r
Content-Disposition: form-data; name="`;
      return i.forEach((p, h) => typeof p == "string" ? u2.push(l2 + zn(h) + `"\r
\r
${p.replace(new RegExp("\\r(?!\\n)|(?<!\\r)\\n", "g"), `\r
`)}\r
`) : u2.push(l2 + zn(h) + `"; filename="${zn(p.name, 1)}"\r
Content-Type: ${p.type || "application/octet-stream"}\r
\r
`, p, `\r
`)), u2.push(`--${a2}--`), new o3(u2, { type: "multipart/form-data; boundary=" + a2 });
    }
    __name(Vs, "Vs");
    function In(i) {
      return __async(this, null, function* () {
        if (i[H].disturbed) throw new TypeError(`body used already for: ${i.url}`);
        if (i[H].disturbed = true, i[H].error) throw i[H].error;
        const { body: o3 } = i;
        if (o3 === null) return import_node_buffer2.Buffer.alloc(0);
        if (!(o3 instanceof import_node_stream5.default)) return import_node_buffer2.Buffer.alloc(0);
        const a2 = [];
        let u2 = 0;
        try {
          try {
            for (var iter = __forAwait(o3), more, temp, error; more = !(temp = yield iter.next()).done; more = false) {
              const l2 = temp.value;
              if (i.size > 0 && u2 + l2.length > i.size) {
                const p = new G(`content size at ${i.url} over limit: ${i.size}`, "max-size");
                throw o3.destroy(p), p;
              }
              u2 += l2.length, a2.push(l2);
            }
          } catch (temp2) {
            error = [temp2];
          } finally {
            try {
              more && (temp = iter.return) && (yield temp.call(iter));
            } finally {
              if (error)
                throw error[0];
            }
          }
        } catch (l2) {
          throw l2 instanceof ft ? l2 : new G(`Invalid response body while trying to fetch ${i.url}: ${l2.message}`, "system", l2);
        }
        if (o3.readableEnded === true || o3._readableState.ended === true) try {
          return a2.every((l2) => typeof l2 == "string") ? import_node_buffer2.Buffer.from(a2.join("")) : import_node_buffer2.Buffer.concat(a2, u2);
        } catch (l2) {
          throw new G(`Could not create Buffer from response body for ${i.url}: ${l2.message}`, "system", l2);
        }
        else throw new G(`Premature close of server response while trying to fetch ${i.url}`);
      });
    }
    __name(In, "In");
    function el(i = []) {
      return new ye(i.reduce((o3, a2, u2, l2) => (u2 % 2 === 0 && o3.push(l2.slice(u2, u2 + 2)), o3), []).filter(([o3, a2]) => {
        try {
          return gr(o3), jn(o3, String(a2)), true;
        } catch (e) {
          return false;
        }
      }));
    }
    __name(el, "el");
    function _i(i, o3 = false) {
      return i == null || (i = new URL(i), /^(about|blob|data):$/.test(i.protocol)) ? "no-referrer" : (i.username = "", i.password = "", i.hash = "", o3 && (i.pathname = "", i.search = ""), i);
    }
    __name(_i, "_i");
    function ol(i) {
      if (!Si.has(i)) throw new TypeError(`Invalid referrerPolicy: ${i}`);
      return i;
    }
    __name(ol, "ol");
    function il(i) {
      if (/^(http|ws)s:$/.test(i.protocol)) return true;
      const o3 = i.host.replace(/(^\[)|(]$)/g, ""), a2 = (0, import_node_net2.isIP)(o3);
      return a2 === 4 && /^127\./.test(o3) || a2 === 6 && /^(((0+:){7})|(::(0+:){0,6}))0*1$/.test(o3) ? true : i.host === "localhost" || i.host.endsWith(".localhost") ? false : i.protocol === "file:";
    }
    __name(il, "il");
    function ct(i) {
      return /^about:(blank|srcdoc)$/.test(i) || i.protocol === "data:" || /^(blob|filesystem):$/.test(i.protocol) ? true : il(i);
    }
    __name(ct, "ct");
    function al(i, { referrerURLCallback: o3, referrerOriginCallback: a2 } = {}) {
      if (i.referrer === "no-referrer" || i.referrerPolicy === "") return null;
      const u2 = i.referrerPolicy;
      if (i.referrer === "about:client") return "no-referrer";
      const l2 = i.referrer;
      let p = _i(l2), h = _i(l2, true);
      p.toString().length > 4096 && (p = h), o3 && (p = o3(p)), a2 && (h = a2(h));
      const g3 = new URL(i.url);
      switch (u2) {
        case "no-referrer":
          return "no-referrer";
        case "origin":
          return h;
        case "unsafe-url":
          return p;
        case "strict-origin":
          return ct(p) && !ct(g3) ? "no-referrer" : h.toString();
        case "strict-origin-when-cross-origin":
          return p.origin === g3.origin ? p : ct(p) && !ct(g3) ? "no-referrer" : h;
        case "same-origin":
          return p.origin === g3.origin ? p : "no-referrer";
        case "origin-when-cross-origin":
          return p.origin === g3.origin ? p : h;
        case "no-referrer-when-downgrade":
          return ct(p) && !ct(g3) ? "no-referrer" : p;
        default:
          throw new TypeError(`Invalid referrerPolicy: ${u2}`);
      }
    }
    __name(al, "al");
    function sl(i) {
      const o3 = (i.get("referrer-policy") || "").split(/[,\s]+/);
      let a2 = "";
      for (const u2 of o3) u2 && Si.has(u2) && (a2 = u2);
      return a2;
    }
    __name(sl, "sl");
    function Ti(i, o3) {
      return __async(this, null, function* () {
        return new Promise((a2, u2) => {
          const l2 = new dt(i, o3), { parsedURL: p, options: h } = ul(l2);
          if (!ml.has(p.protocol)) throw new TypeError(`node-fetch cannot load ${i}. URL scheme "${p.protocol.replace(/:$/, "")}" is not supported.`);
          if (p.protocol === "data:") {
            const _ = js(l2.url), V = new le(_, { headers: { "Content-Type": _.typeFull } });
            a2(V);
            return;
          }
          const g3 = (p.protocol === "https:" ? import_node_https2.default : import_node_http2.default).request, { signal: A2 } = l2;
          let w2 = null;
          const E2 = n2(() => {
            const _ = new _r("The operation was aborted.");
            u2(_), l2.body && l2.body instanceof import_node_stream5.default.Readable && l2.body.destroy(_), !(!w2 || !w2.body) && w2.body.emit("error", _);
          }, "abort");
          if (A2 && A2.aborted) {
            E2();
            return;
          }
          const T2 = n2(() => {
            E2(), q();
          }, "abortAndFinalize"), b = g3(p.toString(), h);
          A2 && A2.addEventListener("abort", T2);
          const q = n2(() => {
            b.abort(), A2 && A2.removeEventListener("abort", T2);
          }, "finalize");
          b.on("error", (_) => {
            u2(new G(`request to ${l2.url} failed, reason: ${_.message}`, "system", _)), q();
          }), yl(b, (_) => {
            w2 && w2.body && w2.body.destroy(_);
          }), process.version < "v14" && b.on("socket", (_) => {
            let V;
            _.prependListener("end", () => {
              V = _._eventsCount;
            }), _.prependListener("close", (I2) => {
              if (w2 && V < _._eventsCount && !I2) {
                const F3 = new Error("Premature close");
                F3.code = "ERR_STREAM_PREMATURE_CLOSE", w2.body.emit("error", F3);
              }
            });
          }), b.on("response", (_) => {
            b.setTimeout(0);
            const V = el(_.rawHeaders);
            if (Ln(_.statusCode)) {
              const z = V.get("Location");
              let j = null;
              try {
                j = z === null ? null : new URL(z, l2.url);
              } catch (e) {
                if (l2.redirect !== "manual") {
                  u2(new G(`uri requested responds with an invalid redirect URL: ${z}`, "invalid-redirect")), q();
                  return;
                }
              }
              switch (l2.redirect) {
                case "error":
                  u2(new G(`uri requested responds with a redirect, redirect mode is set to error: ${l2.url}`, "no-redirect")), q();
                  return;
                case "manual":
                  break;
                case "follow": {
                  if (j === null) break;
                  if (l2.counter >= l2.follow) {
                    u2(new G(`maximum redirect reached at: ${l2.url}`, "max-redirect")), q();
                    return;
                  }
                  const U = { headers: new ye(l2.headers), follow: l2.follow, counter: l2.counter + 1, agent: l2.agent, compress: l2.compress, method: l2.method, body: Fn(l2), signal: l2.signal, size: l2.size, referrer: l2.referrer, referrerPolicy: l2.referrerPolicy };
                  if (!Ys(l2.url, j) || !Gs(l2.url, j)) for (const Ft of ["authorization", "www-authenticate", "cookie", "cookie2"]) U.headers.delete(Ft);
                  if (_.statusCode !== 303 && l2.body && o3.body instanceof import_node_stream5.default.Readable) {
                    u2(new G("Cannot follow redirect with body being a readable stream", "unsupported-redirect")), q();
                    return;
                  }
                  (_.statusCode === 303 || (_.statusCode === 301 || _.statusCode === 302) && l2.method === "POST") && (U.method = "GET", U.body = void 0, U.headers.delete("content-length"));
                  const D2 = sl(V);
                  D2 && (U.referrerPolicy = D2), a2(Ti(new dt(j, U))), q();
                  return;
                }
                default:
                  return u2(new TypeError(`Redirect option '${l2.redirect}' is not a valid value of RequestRedirect`));
              }
            }
            A2 && _.once("end", () => {
              A2.removeEventListener("abort", T2);
            });
            let I2 = (0, import_node_stream5.pipeline)(_, new import_node_stream5.PassThrough(), (z) => {
              z && u2(z);
            });
            process.version < "v12.10" && _.on("aborted", T2);
            const F3 = { url: l2.url, status: _.statusCode, statusText: _.statusMessage, headers: V, size: l2.size, counter: l2.counter, highWaterMark: l2.highWaterMark }, Q = V.get("Content-Encoding");
            if (!l2.compress || l2.method === "HEAD" || Q === null || _.statusCode === 204 || _.statusCode === 304) {
              w2 = new le(I2, F3), a2(w2);
              return;
            }
            const ge = { flush: import_node_zlib2.default.Z_SYNC_FLUSH, finishFlush: import_node_zlib2.default.Z_SYNC_FLUSH };
            if (Q === "gzip" || Q === "x-gzip") {
              I2 = (0, import_node_stream5.pipeline)(I2, import_node_zlib2.default.createGunzip(ge), (z) => {
                z && u2(z);
              }), w2 = new le(I2, F3), a2(w2);
              return;
            }
            if (Q === "deflate" || Q === "x-deflate") {
              const z = (0, import_node_stream5.pipeline)(_, new import_node_stream5.PassThrough(), (j) => {
                j && u2(j);
              });
              z.once("data", (j) => {
                (j[0] & 15) === 8 ? I2 = (0, import_node_stream5.pipeline)(I2, import_node_zlib2.default.createInflate(), (U) => {
                  U && u2(U);
                }) : I2 = (0, import_node_stream5.pipeline)(I2, import_node_zlib2.default.createInflateRaw(), (U) => {
                  U && u2(U);
                }), w2 = new le(I2, F3), a2(w2);
              }), z.once("end", () => {
                w2 || (w2 = new le(I2, F3), a2(w2));
              });
              return;
            }
            if (Q === "br") {
              I2 = (0, import_node_stream5.pipeline)(I2, import_node_zlib2.default.createBrotliDecompress(), (z) => {
                z && u2(z);
              }), w2 = new le(I2, F3), a2(w2);
              return;
            }
            w2 = new le(I2, F3), a2(w2);
          }), Xs(b, l2).catch(u2);
        });
      });
    }
    __name(Ti, "Ti");
    function yl(i, o3) {
      const a2 = import_node_buffer2.Buffer.from(`0\r
\r
`);
      let u2 = false, l2 = false, p;
      i.on("response", (h) => {
        const { headers: g3 } = h;
        u2 = g3["transfer-encoding"] === "chunked" && !g3["content-length"];
      }), i.on("socket", (h) => {
        const g3 = n2(() => {
          if (u2 && !l2) {
            const w2 = new Error("Premature close");
            w2.code = "ERR_STREAM_PREMATURE_CLOSE", o3(w2);
          }
        }, "onSocketClose"), A2 = n2((w2) => {
          l2 = import_node_buffer2.Buffer.compare(w2.slice(-5), a2) === 0, !l2 && p && (l2 = import_node_buffer2.Buffer.compare(p.slice(-3), a2.slice(0, 3)) === 0 && import_node_buffer2.Buffer.compare(w2.slice(-2), a2.slice(3)) === 0), p = w2;
        }, "onData");
        h.prependListener("close", g3), h.on("data", A2), i.on("close", () => {
          h.removeListener("close", g3), h.removeListener("data", A2);
        });
      });
    }
    __name(yl, "yl");
    function W(i) {
      const o3 = Ci.get(i);
      return console.assert(o3 != null, "'this' is expected an Event object, but got", i), o3;
    }
    __name(W, "W");
    function Pi(i) {
      if (i.passiveListener != null) {
        typeof console < "u" && typeof console.error == "function" && console.error("Unable to preventDefault inside passive event listener invocation.", i.passiveListener);
        return;
      }
      i.event.cancelable && (i.canceled = true, typeof i.event.preventDefault == "function" && i.event.preventDefault());
    }
    __name(Pi, "Pi");
    function ht(i, o3) {
      Ci.set(this, { eventTarget: i, event: o3, eventPhase: 2, currentTarget: i, canceled: false, stopped: false, immediateStopped: false, passiveListener: null, timeStamp: o3.timeStamp || Date.now() }), Object.defineProperty(this, "isTrusted", { value: false, enumerable: true });
      const a2 = Object.keys(o3);
      for (let u2 = 0; u2 < a2.length; ++u2) {
        const l2 = a2[u2];
        l2 in this || Object.defineProperty(this, l2, vi(l2));
      }
    }
    __name(ht, "ht");
    function vi(i) {
      return { get() {
        return W(this).event[i];
      }, set(o3) {
        W(this).event[i] = o3;
      }, configurable: true, enumerable: true };
    }
    __name(vi, "vi");
    function gl(i) {
      return { value() {
        const o3 = W(this).event;
        return o3[i].apply(o3, arguments);
      }, configurable: true, enumerable: true };
    }
    __name(gl, "gl");
    function _l(i, o3) {
      const a2 = Object.keys(o3);
      if (a2.length === 0) return i;
      function u2(l2, p) {
        i.call(this, l2, p);
      }
      __name(u2, "u2");
      n2(u2, "CustomEvent"), u2.prototype = Object.create(i.prototype, { constructor: { value: u2, configurable: true, writable: true } });
      for (let l2 = 0; l2 < a2.length; ++l2) {
        const p = a2[l2];
        if (!(p in i.prototype)) {
          const g3 = typeof Object.getOwnPropertyDescriptor(o3, p).value == "function";
          Object.defineProperty(u2.prototype, p, g3 ? gl(p) : vi(p));
        }
      }
      return u2;
    }
    __name(_l, "_l");
    function Ei(i) {
      if (i == null || i === Object.prototype) return ht;
      let o3 = Dn.get(i);
      return o3 == null && (o3 = _l(Ei(Object.getPrototypeOf(i)), i), Dn.set(i, o3)), o3;
    }
    __name(Ei, "Ei");
    function Sl(i, o3) {
      const a2 = Ei(Object.getPrototypeOf(o3));
      return new a2(i, o3);
    }
    __name(Sl, "Sl");
    function wl(i) {
      return W(i).immediateStopped;
    }
    __name(wl, "wl");
    function Rl(i, o3) {
      W(i).eventPhase = o3;
    }
    __name(Rl, "Rl");
    function Tl(i, o3) {
      W(i).currentTarget = o3;
    }
    __name(Tl, "Tl");
    function Ai(i, o3) {
      W(i).passiveListener = o3;
    }
    __name(Ai, "Ai");
    function Rr(i) {
      return i !== null && typeof i == "object";
    }
    __name(Rr, "Rr");
    function Bt(i) {
      const o3 = Bi.get(i);
      if (o3 == null) throw new TypeError("'this' is expected an EventTarget object, but got another value.");
      return o3;
    }
    __name(Bt, "Bt");
    function Cl(i) {
      return { get() {
        let a2 = Bt(this).get(i);
        for (; a2 != null; ) {
          if (a2.listenerType === wr) return a2.listener;
          a2 = a2.next;
        }
        return null;
      }, set(o3) {
        typeof o3 != "function" && !Rr(o3) && (o3 = null);
        const a2 = Bt(this);
        let u2 = null, l2 = a2.get(i);
        for (; l2 != null; ) l2.listenerType === wr ? u2 !== null ? u2.next = l2.next : l2.next !== null ? a2.set(i, l2.next) : a2.delete(i) : u2 = l2, l2 = l2.next;
        if (o3 !== null) {
          const p = { listener: o3, listenerType: wr, passive: false, once: false, next: null };
          u2 === null ? a2.set(i, p) : u2.next = p;
        }
      }, configurable: true, enumerable: true };
    }
    __name(Cl, "Cl");
    function qi(i, o3) {
      Object.defineProperty(i, `on${o3}`, Cl(o3));
    }
    __name(qi, "qi");
    function Oi(i) {
      function o3() {
        Pe.call(this);
      }
      __name(o3, "o3");
      n2(o3, "CustomEventTarget"), o3.prototype = Object.create(Pe.prototype, { constructor: { value: o3, configurable: true, writable: true } });
      for (let a2 = 0; a2 < i.length; ++a2) qi(o3.prototype, i[a2]);
      return o3;
    }
    __name(Oi, "Oi");
    function Pe() {
      if (this instanceof Pe) {
        Bi.set(this, /* @__PURE__ */ new Map());
        return;
      }
      if (arguments.length === 1 && Array.isArray(arguments[0])) return Oi(arguments[0]);
      if (arguments.length > 0) {
        const i = new Array(arguments.length);
        for (let o3 = 0; o3 < arguments.length; ++o3) i[o3] = arguments[o3];
        return Oi(i);
      }
      throw new TypeError("Cannot call a class as a function");
    }
    __name(Pe, "Pe");
    function Pl() {
      const i = Object.create(pt.prototype);
      return Pe.call(i), Tr.set(i, false), i;
    }
    __name(Pl, "Pl");
    function vl(i) {
      Tr.get(i) === false && (Tr.set(i, true), i.dispatchEvent({ type: "abort" }));
    }
    __name(vl, "vl");
    function Ii(i) {
      const o3 = zi.get(i);
      if (o3 == null) throw new TypeError(`Expected 'this' to be an 'AbortController' object, but got ${i === null ? "null" : typeof i}`);
      return o3;
    }
    __name(Ii, "Ii");
    function ji() {
      var _a2, _b2, _c;
      !((_b2 = (_a2 = globalThis.process) == null ? void 0 : _a2.versions) == null ? void 0 : _b2.node) && !((_c = globalThis.process) == null ? void 0 : _c.env.DISABLE_NODE_FETCH_NATIVE_WARN) && console.warn("[node-fetch-native] Node.js compatible build of `node-fetch-native` is being used in a non-Node.js environment. Please make sure you are using proper export conditions or report this issue to https://github.com/unjs/node-fetch-native. You can set `process.env.DISABLE_NODE_FETCH_NATIVE_WARN` to disable this warning.");
    }
    __name(ji, "ji");
    var import_node_http2;
    var import_node_https2;
    var import_node_zlib2;
    var import_node_stream5;
    var import_node_buffer2;
    var import_node_util22;
    var import_node_url3;
    var import_node_net2;
    var import_node_fs4;
    var import_node_path4;
    var As;
    var n2;
    var fi;
    var O;
    var be;
    var X;
    var ve;
    var kt;
    var bt;
    var Cr;
    var Ve;
    var Wt;
    var qt;
    var Ot;
    var ee;
    var zt;
    var Ne;
    var He;
    var It;
    var pr;
    var di;
    var $s;
    var hi;
    var pi;
    var Ds;
    var ut;
    var Ms;
    var Us;
    var On;
    var Et;
    var xs;
    var Ns;
    var bi;
    var Hs;
    var mi;
    var zn;
    var Me;
    var br;
    var Un;
    var ft;
    var xn;
    var G;
    var mr;
    var yi;
    var yr;
    var Qs;
    var Ys;
    var Gs;
    var Zs;
    var H;
    var Nn;
    var Ue;
    var Fn;
    var Ks;
    var gi;
    var Js;
    var Xs;
    var gr;
    var jn;
    var Pr;
    var ye;
    var tl;
    var Ln;
    var se;
    var xe;
    var le;
    var rl;
    var Si;
    var nl;
    var $22;
    var At;
    var ll;
    var vr;
    var dt;
    var ul;
    var Hn;
    var _r;
    var fl;
    var cl;
    var $n;
    var dl;
    var hl;
    var pl;
    var bl;
    var wi;
    var Ri;
    var Er;
    var Sr;
    var ml;
    var Ci;
    var Dn;
    var Bi;
    var ki;
    var Wi;
    var wr;
    var Vn;
    var pt;
    var Tr;
    var Mn;
    var zi;
    var El;
    var Al;
    var Fi;
    var init_node = __esm2({
      "node_modules/node-fetch-native/dist/node.mjs"() {
        "use strict";
        import_node_http2 = __toESM2(__require("http"), 1);
        import_node_https2 = __toESM2(__require("https"), 1);
        import_node_zlib2 = __toESM2(__require("zlib"), 1);
        import_node_stream5 = __toESM2(__require("stream"), 1);
        import_node_buffer2 = __require("buffer");
        import_node_util22 = __require("util");
        init_node_fetch_native_1a4a356d();
        import_node_url3 = __require("url");
        import_node_net2 = __require("net");
        import_node_fs4 = __require("fs");
        import_node_path4 = __require("path");
        As = Object.defineProperty;
        n2 = /* @__PURE__ */ __name((i, o3) => As(i, "name", { value: o3, configurable: true }), "n2");
        fi = /* @__PURE__ */ __name((i, o3, a2) => {
          if (!o3.has(i)) throw TypeError("Cannot " + a2);
        }, "fi");
        O = /* @__PURE__ */ __name((i, o3, a2) => (fi(i, o3, "read from private field"), a2 ? a2.call(i) : o3.get(i)), "O");
        be = /* @__PURE__ */ __name((i, o3, a2) => {
          if (o3.has(i)) throw TypeError("Cannot add the same private member more than once");
          o3 instanceof WeakSet ? o3.add(i) : o3.set(i, a2);
        }, "be");
        X = /* @__PURE__ */ __name((i, o3, a2, u2) => (fi(i, o3, "write to private field"), u2 ? u2.call(i, a2) : o3.set(i, a2), a2), "X");
        n2(js, "dataUriToBuffer");
        pr = { exports: {} };
        n2(Ls, "requirePonyfill_es2018");
        $s = 65536;
        if (!globalThis.ReadableStream) try {
          const i = __require("process"), { emitWarning: o3 } = i;
          try {
            i.emitWarning = () => {
            }, Object.assign(globalThis, __require("stream/web")), i.emitWarning = o3;
          } catch (a2) {
            throw i.emitWarning = o3, a2;
          }
        } catch (e) {
          Object.assign(globalThis, Ls());
        }
        try {
          const { Blob: i } = __require("buffer");
          i && !i.prototype.stream && (i.prototype.stream = n2(function(a2) {
            let u2 = 0;
            const l2 = this;
            return new ReadableStream({ type: "bytes", pull(p) {
              return __async(this, null, function* () {
                const g3 = yield l2.slice(u2, Math.min(l2.size, u2 + $s)).arrayBuffer();
                u2 += g3.byteLength, p.enqueue(new Uint8Array(g3)), u2 === l2.size && p.close();
              });
            } });
          }, "name"));
        } catch (e) {
        }
        hi = 65536;
        n2(qn, "toIterator");
        pi = (Ve = class {
          static {
            __name(this, "Ve");
          }
          constructor(o3 = [], a2 = {}) {
            be(this, ve, []);
            be(this, kt, "");
            be(this, bt, 0);
            be(this, Cr, "transparent");
            if (typeof o3 != "object" || o3 === null) throw new TypeError("Failed to construct 'Blob': The provided value cannot be converted to a sequence.");
            if (typeof o3[Symbol.iterator] != "function") throw new TypeError("Failed to construct 'Blob': The object must have a callable @@iterator property.");
            if (typeof a2 != "object" && typeof a2 != "function") throw new TypeError("Failed to construct 'Blob': parameter 2 cannot convert to dictionary.");
            a2 === null && (a2 = {});
            const u2 = new TextEncoder();
            for (const p of o3) {
              let h;
              ArrayBuffer.isView(p) ? h = new Uint8Array(p.buffer.slice(p.byteOffset, p.byteOffset + p.byteLength)) : p instanceof ArrayBuffer ? h = new Uint8Array(p.slice(0)) : p instanceof Ve ? h = p : h = u2.encode(`${p}`), X(this, bt, O(this, bt) + (ArrayBuffer.isView(h) ? h.byteLength : h.size)), O(this, ve).push(h);
            }
            X(this, Cr, `${a2.endings === void 0 ? "transparent" : a2.endings}`);
            const l2 = a2.type === void 0 ? "" : String(a2.type);
            X(this, kt, /^[\x20-\x7E]*$/.test(l2) ? l2 : "");
          }
          get size() {
            return O(this, bt);
          }
          get type() {
            return O(this, kt);
          }
          text() {
            return __async(this, null, function* () {
              const o3 = new TextDecoder();
              let a2 = "";
              try {
                for (var iter = __forAwait(qn(O(this, ve), false)), more, temp, error; more = !(temp = yield iter.next()).done; more = false) {
                  const u2 = temp.value;
                  a2 += o3.decode(u2, { stream: true });
                }
              } catch (temp2) {
                error = [temp2];
              } finally {
                try {
                  more && (temp = iter.return) && (yield temp.call(iter));
                } finally {
                  if (error)
                    throw error[0];
                }
              }
              return a2 += o3.decode(), a2;
            });
          }
          arrayBuffer() {
            return __async(this, null, function* () {
              const o3 = new Uint8Array(this.size);
              let a2 = 0;
              try {
                for (var iter = __forAwait(qn(O(this, ve), false)), more, temp, error; more = !(temp = yield iter.next()).done; more = false) {
                  const u2 = temp.value;
                  o3.set(u2, a2), a2 += u2.length;
                }
              } catch (temp2) {
                error = [temp2];
              } finally {
                try {
                  more && (temp = iter.return) && (yield temp.call(iter));
                } finally {
                  if (error)
                    throw error[0];
                }
              }
              return o3.buffer;
            });
          }
          stream() {
            const o3 = qn(O(this, ve), true);
            return new globalThis.ReadableStream({ type: "bytes", pull(a2) {
              return __async(this, null, function* () {
                const u2 = yield o3.next();
                u2.done ? a2.close() : a2.enqueue(u2.value);
              });
            }, cancel() {
              return __async(this, null, function* () {
                yield o3.return();
              });
            } });
          }
          slice(o3 = 0, a2 = this.size, u2 = "") {
            const { size: l2 } = this;
            let p = o3 < 0 ? Math.max(l2 + o3, 0) : Math.min(o3, l2), h = a2 < 0 ? Math.max(l2 + a2, 0) : Math.min(a2, l2);
            const g3 = Math.max(h - p, 0), A2 = O(this, ve), w2 = [];
            let E2 = 0;
            for (const b of A2) {
              if (E2 >= g3) break;
              const q = ArrayBuffer.isView(b) ? b.byteLength : b.size;
              if (p && q <= p) p -= q, h -= q;
              else {
                let _;
                ArrayBuffer.isView(b) ? (_ = b.subarray(p, Math.min(q, h)), E2 += _.byteLength) : (_ = b.slice(p, Math.min(q, h)), E2 += _.size), h -= q, w2.push(_), p = 0;
              }
            }
            const T2 = new Ve([], { type: String(u2).toLowerCase() });
            return X(T2, bt, g3), X(T2, ve, w2), T2;
          }
          get [Symbol.toStringTag]() {
            return "Blob";
          }
          static [Symbol.hasInstance](o3) {
            return o3 && typeof o3 == "object" && typeof o3.constructor == "function" && (typeof o3.stream == "function" || typeof o3.arrayBuffer == "function") && /^(Blob|File)$/.test(o3[Symbol.toStringTag]);
          }
        }, ve = /* @__PURE__ */ new WeakMap(), kt = /* @__PURE__ */ new WeakMap(), bt = /* @__PURE__ */ new WeakMap(), Cr = /* @__PURE__ */ new WeakMap(), n2(Ve, "Blob"), Ve);
        Object.defineProperties(pi.prototype, { size: { enumerable: true }, type: { enumerable: true }, slice: { enumerable: true } });
        Ds = pi;
        ut = Ds;
        Ms = (Ot = class extends ut {
          static {
            __name(this, "Ot");
          }
          constructor(a2, u2, l2 = {}) {
            if (arguments.length < 2) throw new TypeError(`Failed to construct 'File': 2 arguments required, but only ${arguments.length} present.`);
            super(a2, l2);
            be(this, Wt, 0);
            be(this, qt, "");
            l2 === null && (l2 = {});
            const p = l2.lastModified === void 0 ? Date.now() : Number(l2.lastModified);
            Number.isNaN(p) || X(this, Wt, p), X(this, qt, String(u2));
          }
          get name() {
            return O(this, qt);
          }
          get lastModified() {
            return O(this, Wt);
          }
          get [Symbol.toStringTag]() {
            return "File";
          }
          static [Symbol.hasInstance](a2) {
            return !!a2 && a2 instanceof ut && /^(File)$/.test(a2[Symbol.toStringTag]);
          }
        }, Wt = /* @__PURE__ */ new WeakMap(), qt = /* @__PURE__ */ new WeakMap(), n2(Ot, "File"), Ot);
        Us = Ms;
        On = Us;
        ({ toStringTag: Et, iterator: xs, hasInstance: Ns } = Symbol);
        bi = Math.random;
        Hs = "append,set,get,getAll,delete,keys,values,entries,forEach,constructor".split(",");
        mi = n2((i, o3, a2) => (i += "", /^(Blob|File)$/.test(o3 && o3[Et]) ? [(a2 = a2 !== void 0 ? a2 + "" : o3[Et] == "File" ? o3.name : "blob", i), o3.name !== a2 || o3[Et] == "blob" ? new On([o3], a2, o3) : o3] : [i, o3 + ""]), "f");
        zn = n2((i, o3) => (o3 ? i : i.replace(/\r?\n|\r/g, `\r
`)).replace(/\n/g, "%0A").replace(/\r/g, "%0D").replace(/"/g, "%22"), "e$1");
        Me = n2((i, o3, a2) => {
          if (o3.length < a2) throw new TypeError(`Failed to execute '${i}' on 'FormData': ${a2} arguments required, but only ${o3.length} present.`);
        }, "x");
        br = (zt = class {
          static {
            __name(this, "zt");
          }
          constructor(...o3) {
            be(this, ee, []);
            if (o3.length) throw new TypeError("Failed to construct 'FormData': parameter 1 is not of type 'HTMLFormElement'.");
          }
          get [Et]() {
            return "FormData";
          }
          [xs]() {
            return this.entries();
          }
          static [Ns](o3) {
            return o3 && typeof o3 == "object" && o3[Et] === "FormData" && !Hs.some((a2) => typeof o3[a2] != "function");
          }
          append(...o3) {
            Me("append", arguments, 2), O(this, ee).push(mi(...o3));
          }
          delete(o3) {
            Me("delete", arguments, 1), o3 += "", X(this, ee, O(this, ee).filter(([a2]) => a2 !== o3));
          }
          get(o3) {
            Me("get", arguments, 1), o3 += "";
            for (var a2 = O(this, ee), u2 = a2.length, l2 = 0; l2 < u2; l2++) if (a2[l2][0] === o3) return a2[l2][1];
            return null;
          }
          getAll(o3, a2) {
            return Me("getAll", arguments, 1), a2 = [], o3 += "", O(this, ee).forEach((u2) => u2[0] === o3 && a2.push(u2[1])), a2;
          }
          has(o3) {
            return Me("has", arguments, 1), o3 += "", O(this, ee).some((a2) => a2[0] === o3);
          }
          forEach(o3, a2) {
            Me("forEach", arguments, 1);
            for (var [u2, l2] of this) o3.call(a2, l2, u2, this);
          }
          set(...o3) {
            Me("set", arguments, 2);
            var a2 = [], u2 = true;
            o3 = mi(...o3), O(this, ee).forEach((l2) => {
              l2[0] === o3[0] ? u2 && (u2 = !a2.push(o3)) : a2.push(l2);
            }), u2 && a2.push(o3), X(this, ee, a2);
          }
          *entries() {
            yield* __yieldStar(O(this, ee));
          }
          *keys() {
            for (var [o3] of this) yield o3;
          }
          *values() {
            for (var [, o3] of this) yield o3;
          }
        }, ee = /* @__PURE__ */ new WeakMap(), n2(zt, "FormData"), zt);
        n2(Vs, "formDataToBlob");
        Un = class Un2 extends Error {
          static {
            __name(this, "Un2");
          }
          constructor(o3, a2) {
            super(o3), Error.captureStackTrace(this, this.constructor), this.type = a2;
          }
          get name() {
            return this.constructor.name;
          }
          get [Symbol.toStringTag]() {
            return this.constructor.name;
          }
        };
        n2(Un, "FetchBaseError");
        ft = Un;
        xn = class xn2 extends ft {
          static {
            __name(this, "xn2");
          }
          constructor(o3, a2, u2) {
            super(o3, a2), u2 && (this.code = this.errno = u2.code, this.erroredSysCall = u2.syscall);
          }
        };
        n2(xn, "FetchError");
        G = xn;
        mr = Symbol.toStringTag;
        yi = n2((i) => typeof i == "object" && typeof i.append == "function" && typeof i.delete == "function" && typeof i.get == "function" && typeof i.getAll == "function" && typeof i.has == "function" && typeof i.set == "function" && typeof i.sort == "function" && i[mr] === "URLSearchParams", "isURLSearchParameters");
        yr = n2((i) => i && typeof i == "object" && typeof i.arrayBuffer == "function" && typeof i.type == "string" && typeof i.stream == "function" && typeof i.constructor == "function" && /^(Blob|File)$/.test(i[mr]), "isBlob");
        Qs = n2((i) => typeof i == "object" && (i[mr] === "AbortSignal" || i[mr] === "EventTarget"), "isAbortSignal");
        Ys = n2((i, o3) => {
          const a2 = new URL(o3).hostname, u2 = new URL(i).hostname;
          return a2 === u2 || a2.endsWith(`.${u2}`);
        }, "isDomainOrSubdomain");
        Gs = n2((i, o3) => {
          const a2 = new URL(o3).protocol, u2 = new URL(i).protocol;
          return a2 === u2;
        }, "isSameProtocol");
        Zs = (0, import_node_util22.promisify)(import_node_stream5.default.pipeline);
        H = Symbol("Body internals");
        Nn = class Nn2 {
          static {
            __name(this, "Nn2");
          }
          constructor(o3, { size: a2 = 0 } = {}) {
            let u2 = null;
            o3 === null ? o3 = null : yi(o3) ? o3 = import_node_buffer2.Buffer.from(o3.toString()) : yr(o3) || import_node_buffer2.Buffer.isBuffer(o3) || (import_node_util22.types.isAnyArrayBuffer(o3) ? o3 = import_node_buffer2.Buffer.from(o3) : ArrayBuffer.isView(o3) ? o3 = import_node_buffer2.Buffer.from(o3.buffer, o3.byteOffset, o3.byteLength) : o3 instanceof import_node_stream5.default || (o3 instanceof br ? (o3 = Vs(o3), u2 = o3.type.split("=")[1]) : o3 = import_node_buffer2.Buffer.from(String(o3))));
            let l2 = o3;
            import_node_buffer2.Buffer.isBuffer(o3) ? l2 = import_node_stream5.default.Readable.from(o3) : yr(o3) && (l2 = import_node_stream5.default.Readable.from(o3.stream())), this[H] = { body: o3, stream: l2, boundary: u2, disturbed: false, error: null }, this.size = a2, o3 instanceof import_node_stream5.default && o3.on("error", (p) => {
              const h = p instanceof ft ? p : new G(`Invalid response body while trying to fetch ${this.url}: ${p.message}`, "system", p);
              this[H].error = h;
            });
          }
          get body() {
            return this[H].stream;
          }
          get bodyUsed() {
            return this[H].disturbed;
          }
          arrayBuffer() {
            return __async(this, null, function* () {
              const { buffer: o3, byteOffset: a2, byteLength: u2 } = yield In(this);
              return o3.slice(a2, a2 + u2);
            });
          }
          formData() {
            return __async(this, null, function* () {
              const o3 = this.headers.get("content-type");
              if (o3.startsWith("application/x-www-form-urlencoded")) {
                const u2 = new br(), l2 = new URLSearchParams(yield this.text());
                for (const [p, h] of l2) u2.append(p, h);
                return u2;
              }
              const { toFormData: a2 } = yield Promise.resolve().then(() => (init_multipart_parser(), multipart_parser_exports));
              return a2(this.body, o3);
            });
          }
          blob() {
            return __async(this, null, function* () {
              const o3 = this.headers && this.headers.get("content-type") || this[H].body && this[H].body.type || "", a2 = yield this.arrayBuffer();
              return new ut([a2], { type: o3 });
            });
          }
          json() {
            return __async(this, null, function* () {
              const o3 = yield this.text();
              return JSON.parse(o3);
            });
          }
          text() {
            return __async(this, null, function* () {
              const o3 = yield In(this);
              return new TextDecoder().decode(o3);
            });
          }
          buffer() {
            return In(this);
          }
        };
        n2(Nn, "Body");
        Ue = Nn;
        Ue.prototype.buffer = (0, import_node_util22.deprecate)(Ue.prototype.buffer, "Please use 'response.arrayBuffer()' instead of 'response.buffer()'", "node-fetch#buffer"), Object.defineProperties(Ue.prototype, { body: { enumerable: true }, bodyUsed: { enumerable: true }, arrayBuffer: { enumerable: true }, blob: { enumerable: true }, json: { enumerable: true }, text: { enumerable: true }, data: { get: (0, import_node_util22.deprecate)(() => {
        }, "data doesn't exist, use json(), text(), arrayBuffer(), or body instead", "https://github.com/node-fetch/node-fetch/issues/1000 (response)") } });
        n2(In, "consumeBody");
        Fn = n2((i, o3) => {
          let a2, u2, { body: l2 } = i[H];
          if (i.bodyUsed) throw new Error("cannot clone body after it is used");
          return l2 instanceof import_node_stream5.default && typeof l2.getBoundary != "function" && (a2 = new import_node_stream5.PassThrough({ highWaterMark: o3 }), u2 = new import_node_stream5.PassThrough({ highWaterMark: o3 }), l2.pipe(a2), l2.pipe(u2), i[H].stream = a2, l2 = u2), l2;
        }, "clone");
        Ks = (0, import_node_util22.deprecate)((i) => i.getBoundary(), "form-data doesn't follow the spec and requires special treatment. Use alternative package", "https://github.com/node-fetch/node-fetch/issues/1167");
        gi = n2((i, o3) => i === null ? null : typeof i == "string" ? "text/plain;charset=UTF-8" : yi(i) ? "application/x-www-form-urlencoded;charset=UTF-8" : yr(i) ? i.type || null : import_node_buffer2.Buffer.isBuffer(i) || import_node_util22.types.isAnyArrayBuffer(i) || ArrayBuffer.isView(i) ? null : i instanceof br ? `multipart/form-data; boundary=${o3[H].boundary}` : i && typeof i.getBoundary == "function" ? `multipart/form-data;boundary=${Ks(i)}` : i instanceof import_node_stream5.default ? null : "text/plain;charset=UTF-8", "extractContentType");
        Js = n2((i) => {
          const { body: o3 } = i[H];
          return o3 === null ? 0 : yr(o3) ? o3.size : import_node_buffer2.Buffer.isBuffer(o3) ? o3.length : o3 && typeof o3.getLengthSync == "function" && o3.hasKnownLength && o3.hasKnownLength() ? o3.getLengthSync() : null;
        }, "getTotalBytes");
        Xs = n2((_0, _1) => __async(void 0, [_0, _1], function* (i, { body: o3 }) {
          o3 === null ? i.end() : yield Zs(o3, i);
        }), "writeToStream");
        gr = typeof import_node_http2.default.validateHeaderName == "function" ? import_node_http2.default.validateHeaderName : (i) => {
          if (!/^[\^`\-\w!#$%&'*+.|~]+$/.test(i)) {
            const o3 = new TypeError(`Header name must be a valid HTTP token [${i}]`);
            throw Object.defineProperty(o3, "code", { value: "ERR_INVALID_HTTP_TOKEN" }), o3;
          }
        };
        jn = typeof import_node_http2.default.validateHeaderValue == "function" ? import_node_http2.default.validateHeaderValue : (i, o3) => {
          if (/[^\t\u0020-\u007E\u0080-\u00FF]/.test(o3)) {
            const a2 = new TypeError(`Invalid character in header content ["${i}"]`);
            throw Object.defineProperty(a2, "code", { value: "ERR_INVALID_CHAR" }), a2;
          }
        };
        Pr = class Pr2 extends URLSearchParams {
          static {
            __name(this, "Pr2");
          }
          constructor(o3) {
            let a2 = [];
            if (o3 instanceof Pr2) {
              const u2 = o3.raw();
              for (const [l2, p] of Object.entries(u2)) a2.push(...p.map((h) => [l2, h]));
            } else if (o3 != null) if (typeof o3 == "object" && !import_node_util22.types.isBoxedPrimitive(o3)) {
              const u2 = o3[Symbol.iterator];
              if (u2 == null) a2.push(...Object.entries(o3));
              else {
                if (typeof u2 != "function") throw new TypeError("Header pairs must be iterable");
                a2 = [...o3].map((l2) => {
                  if (typeof l2 != "object" || import_node_util22.types.isBoxedPrimitive(l2)) throw new TypeError("Each header pair must be an iterable object");
                  return [...l2];
                }).map((l2) => {
                  if (l2.length !== 2) throw new TypeError("Each header pair must be a name/value tuple");
                  return [...l2];
                });
              }
            } else throw new TypeError("Failed to construct 'Headers': The provided value is not of type '(sequence<sequence<ByteString>> or record<ByteString, ByteString>)");
            return a2 = a2.length > 0 ? a2.map(([u2, l2]) => (gr(u2), jn(u2, String(l2)), [String(u2).toLowerCase(), String(l2)])) : void 0, super(a2), new Proxy(this, { get(u2, l2, p) {
              switch (l2) {
                case "append":
                case "set":
                  return (h, g3) => (gr(h), jn(h, String(g3)), URLSearchParams.prototype[l2].call(u2, String(h).toLowerCase(), String(g3)));
                case "delete":
                case "has":
                case "getAll":
                  return (h) => (gr(h), URLSearchParams.prototype[l2].call(u2, String(h).toLowerCase()));
                case "keys":
                  return () => (u2.sort(), new Set(URLSearchParams.prototype.keys.call(u2)).keys());
                default:
                  return Reflect.get(u2, l2, p);
              }
            } });
          }
          get [Symbol.toStringTag]() {
            return this.constructor.name;
          }
          toString() {
            return Object.prototype.toString.call(this);
          }
          get(o3) {
            const a2 = this.getAll(o3);
            if (a2.length === 0) return null;
            let u2 = a2.join(", ");
            return /^content-encoding$/i.test(o3) && (u2 = u2.toLowerCase()), u2;
          }
          forEach(o3, a2 = void 0) {
            for (const u2 of this.keys()) Reflect.apply(o3, a2, [this.get(u2), u2, this]);
          }
          *values() {
            for (const o3 of this.keys()) yield this.get(o3);
          }
          *entries() {
            for (const o3 of this.keys()) yield [o3, this.get(o3)];
          }
          [Symbol.iterator]() {
            return this.entries();
          }
          raw() {
            return [...this.keys()].reduce((o3, a2) => (o3[a2] = this.getAll(a2), o3), {});
          }
          [Symbol.for("nodejs.util.inspect.custom")]() {
            return [...this.keys()].reduce((o3, a2) => {
              const u2 = this.getAll(a2);
              return a2 === "host" ? o3[a2] = u2[0] : o3[a2] = u2.length > 1 ? u2 : u2[0], o3;
            }, {});
          }
        };
        n2(Pr, "Headers");
        ye = Pr;
        Object.defineProperties(ye.prototype, ["get", "entries", "forEach", "values"].reduce((i, o3) => (i[o3] = { enumerable: true }, i), {}));
        n2(el, "fromRawHeaders");
        tl = /* @__PURE__ */ new Set([301, 302, 303, 307, 308]);
        Ln = n2((i) => tl.has(i), "isRedirect");
        se = Symbol("Response internals");
        xe = class xe2 extends Ue {
          static {
            __name(this, "xe2");
          }
          constructor(o3 = null, a2 = {}) {
            super(o3, a2);
            const u2 = a2.status != null ? a2.status : 200, l2 = new ye(a2.headers);
            if (o3 !== null && !l2.has("Content-Type")) {
              const p = gi(o3, this);
              p && l2.append("Content-Type", p);
            }
            this[se] = { type: "default", url: a2.url, status: u2, statusText: a2.statusText || "", headers: l2, counter: a2.counter, highWaterMark: a2.highWaterMark };
          }
          get type() {
            return this[se].type;
          }
          get url() {
            return this[se].url || "";
          }
          get status() {
            return this[se].status;
          }
          get ok() {
            return this[se].status >= 200 && this[se].status < 300;
          }
          get redirected() {
            return this[se].counter > 0;
          }
          get statusText() {
            return this[se].statusText;
          }
          get headers() {
            return this[se].headers;
          }
          get highWaterMark() {
            return this[se].highWaterMark;
          }
          clone() {
            return new xe2(Fn(this, this.highWaterMark), { type: this.type, url: this.url, status: this.status, statusText: this.statusText, headers: this.headers, ok: this.ok, redirected: this.redirected, size: this.size, highWaterMark: this.highWaterMark });
          }
          static redirect(o3, a2 = 302) {
            if (!Ln(a2)) throw new RangeError('Failed to execute "redirect" on "response": Invalid status code');
            return new xe2(null, { headers: { location: new URL(o3).toString() }, status: a2 });
          }
          static error() {
            const o3 = new xe2(null, { status: 0, statusText: "" });
            return o3[se].type = "error", o3;
          }
          static json(o3 = void 0, a2 = {}) {
            const u2 = JSON.stringify(o3);
            if (u2 === void 0) throw new TypeError("data is not JSON serializable");
            const l2 = new ye(a2 && a2.headers);
            return l2.has("content-type") || l2.set("content-type", "application/json"), new xe2(u2, __spreadProps(__spreadValues({}, a2), { headers: l2 }));
          }
          get [Symbol.toStringTag]() {
            return "Response";
          }
        };
        n2(xe, "Response");
        le = xe;
        Object.defineProperties(le.prototype, { type: { enumerable: true }, url: { enumerable: true }, status: { enumerable: true }, ok: { enumerable: true }, redirected: { enumerable: true }, statusText: { enumerable: true }, headers: { enumerable: true }, clone: { enumerable: true } });
        rl = n2((i) => {
          if (i.search) return i.search;
          const o3 = i.href.length - 1, a2 = i.hash || (i.href[o3] === "#" ? "#" : "");
          return i.href[o3 - a2.length] === "?" ? "?" : "";
        }, "getSearch");
        n2(_i, "stripURLForUseAsAReferrer");
        Si = /* @__PURE__ */ new Set(["", "no-referrer", "no-referrer-when-downgrade", "same-origin", "origin", "strict-origin", "origin-when-cross-origin", "strict-origin-when-cross-origin", "unsafe-url"]);
        nl = "strict-origin-when-cross-origin";
        n2(ol, "validateReferrerPolicy");
        n2(il, "isOriginPotentiallyTrustworthy");
        n2(ct, "isUrlPotentiallyTrustworthy");
        n2(al, "determineRequestsReferrer");
        n2(sl, "parseReferrerPolicyFromHeader");
        $22 = Symbol("Request internals");
        At = n2((i) => typeof i == "object" && typeof i[$22] == "object", "isRequest");
        ll = (0, import_node_util22.deprecate)(() => {
        }, ".data is not a valid RequestInit property, use .body instead", "https://github.com/node-fetch/node-fetch/issues/1000 (request)");
        vr = class vr2 extends Ue {
          static {
            __name(this, "vr2");
          }
          constructor(o3, a2 = {}) {
            let u2;
            if (At(o3) ? u2 = new URL(o3.url) : (u2 = new URL(o3), o3 = {}), u2.username !== "" || u2.password !== "") throw new TypeError(`${u2} is an url with embedded credentials.`);
            let l2 = a2.method || o3.method || "GET";
            if (/^(delete|get|head|options|post|put)$/i.test(l2) && (l2 = l2.toUpperCase()), !At(a2) && "data" in a2 && ll(), (a2.body != null || At(o3) && o3.body !== null) && (l2 === "GET" || l2 === "HEAD")) throw new TypeError("Request with GET/HEAD method cannot have body");
            const p = a2.body ? a2.body : At(o3) && o3.body !== null ? Fn(o3) : null;
            super(p, { size: a2.size || o3.size || 0 });
            const h = new ye(a2.headers || o3.headers || {});
            if (p !== null && !h.has("Content-Type")) {
              const w2 = gi(p, this);
              w2 && h.set("Content-Type", w2);
            }
            let g3 = At(o3) ? o3.signal : null;
            if ("signal" in a2 && (g3 = a2.signal), g3 != null && !Qs(g3)) throw new TypeError("Expected signal to be an instanceof AbortSignal or EventTarget");
            let A2 = a2.referrer == null ? o3.referrer : a2.referrer;
            if (A2 === "") A2 = "no-referrer";
            else if (A2) {
              const w2 = new URL(A2);
              A2 = /^about:(\/\/)?client$/.test(w2) ? "client" : w2;
            } else A2 = void 0;
            this[$22] = { method: l2, redirect: a2.redirect || o3.redirect || "follow", headers: h, parsedURL: u2, signal: g3, referrer: A2 }, this.follow = a2.follow === void 0 ? o3.follow === void 0 ? 20 : o3.follow : a2.follow, this.compress = a2.compress === void 0 ? o3.compress === void 0 ? true : o3.compress : a2.compress, this.counter = a2.counter || o3.counter || 0, this.agent = a2.agent || o3.agent, this.highWaterMark = a2.highWaterMark || o3.highWaterMark || 16384, this.insecureHTTPParser = a2.insecureHTTPParser || o3.insecureHTTPParser || false, this.referrerPolicy = a2.referrerPolicy || o3.referrerPolicy || "";
          }
          get method() {
            return this[$22].method;
          }
          get url() {
            return (0, import_node_url3.format)(this[$22].parsedURL);
          }
          get headers() {
            return this[$22].headers;
          }
          get redirect() {
            return this[$22].redirect;
          }
          get signal() {
            return this[$22].signal;
          }
          get referrer() {
            if (this[$22].referrer === "no-referrer") return "";
            if (this[$22].referrer === "client") return "about:client";
            if (this[$22].referrer) return this[$22].referrer.toString();
          }
          get referrerPolicy() {
            return this[$22].referrerPolicy;
          }
          set referrerPolicy(o3) {
            this[$22].referrerPolicy = ol(o3);
          }
          clone() {
            return new vr2(this);
          }
          get [Symbol.toStringTag]() {
            return "Request";
          }
        };
        n2(vr, "Request");
        dt = vr;
        Object.defineProperties(dt.prototype, { method: { enumerable: true }, url: { enumerable: true }, headers: { enumerable: true }, redirect: { enumerable: true }, clone: { enumerable: true }, signal: { enumerable: true }, referrer: { enumerable: true }, referrerPolicy: { enumerable: true } });
        ul = n2((i) => {
          const { parsedURL: o3 } = i[$22], a2 = new ye(i[$22].headers);
          a2.has("Accept") || a2.set("Accept", "*/*");
          let u2 = null;
          if (i.body === null && /^(post|put)$/i.test(i.method) && (u2 = "0"), i.body !== null) {
            const g3 = Js(i);
            typeof g3 == "number" && !Number.isNaN(g3) && (u2 = String(g3));
          }
          u2 && a2.set("Content-Length", u2), i.referrerPolicy === "" && (i.referrerPolicy = nl), i.referrer && i.referrer !== "no-referrer" ? i[$22].referrer = al(i) : i[$22].referrer = "no-referrer", i[$22].referrer instanceof URL && a2.set("Referer", i.referrer), a2.has("User-Agent") || a2.set("User-Agent", "node-fetch"), i.compress && !a2.has("Accept-Encoding") && a2.set("Accept-Encoding", "gzip, deflate, br");
          let { agent: l2 } = i;
          typeof l2 == "function" && (l2 = l2(o3));
          const p = rl(o3), h = { path: o3.pathname + p, method: i.method, headers: a2[Symbol.for("nodejs.util.inspect.custom")](), insecureHTTPParser: i.insecureHTTPParser, agent: l2 };
          return { parsedURL: o3, options: h };
        }, "getNodeRequestOptions");
        Hn = class Hn2 extends ft {
          static {
            __name(this, "Hn2");
          }
          constructor(o3, a2 = "aborted") {
            super(o3, a2);
          }
        };
        n2(Hn, "AbortError");
        _r = Hn;
        if (!globalThis.DOMException) try {
          const { MessageChannel: i } = __require("worker_threads"), o3 = new i().port1, a2 = new ArrayBuffer();
          o3.postMessage(a2, [a2, a2]);
        } catch (i) {
          i.constructor.name === "DOMException" && (globalThis.DOMException = i.constructor);
        }
        fl = globalThis.DOMException;
        cl = f(fl);
        ({ stat: $n } = import_node_fs4.promises);
        dl = n2((i, o3) => wi((0, import_node_fs4.statSync)(i), i, o3), "blobFromSync");
        hl = n2((i, o3) => $n(i).then((a2) => wi(a2, i, o3)), "blobFrom");
        pl = n2((i, o3) => $n(i).then((a2) => Ri(a2, i, o3)), "fileFrom");
        bl = n2((i, o3) => Ri((0, import_node_fs4.statSync)(i), i, o3), "fileFromSync");
        wi = n2((i, o3, a2 = "") => new ut([new Sr({ path: o3, size: i.size, lastModified: i.mtimeMs, start: 0 })], { type: a2 }), "fromBlob");
        Ri = n2((i, o3, a2 = "") => new On([new Sr({ path: o3, size: i.size, lastModified: i.mtimeMs, start: 0 })], (0, import_node_path4.basename)(o3), { type: a2, lastModified: i.mtimeMs }), "fromFile");
        Er = class Er2 {
          static {
            __name(this, "Er2");
          }
          constructor(o3) {
            be(this, Ne, void 0);
            be(this, He, void 0);
            X(this, Ne, o3.path), X(this, He, o3.start), this.size = o3.size, this.lastModified = o3.lastModified;
          }
          slice(o3, a2) {
            return new Er2({ path: O(this, Ne), lastModified: this.lastModified, size: a2 - o3, start: O(this, He) + o3 });
          }
          stream() {
            return __asyncGenerator(this, null, function* () {
              const { mtimeMs: o3 } = yield new __await($n(O(this, Ne)));
              if (o3 > this.lastModified) throw new cl("The requested file could not be read, typically due to permission problems that have occurred after a reference to a file was acquired.", "NotReadableError");
              yield* __yieldStar((0, import_node_fs4.createReadStream)(O(this, Ne), { start: O(this, He), end: O(this, He) + this.size - 1 }));
            });
          }
          get [Symbol.toStringTag]() {
            return "Blob";
          }
        };
        Ne = /* @__PURE__ */ new WeakMap(), He = /* @__PURE__ */ new WeakMap(), n2(Er, "BlobDataItem");
        Sr = Er;
        ml = /* @__PURE__ */ new Set(["data:", "http:", "https:"]);
        n2(Ti, "fetch$1");
        n2(yl, "fixResponseChunkedTransferBadEnding");
        Ci = /* @__PURE__ */ new WeakMap();
        Dn = /* @__PURE__ */ new WeakMap();
        n2(W, "pd");
        n2(Pi, "setCancelFlag");
        n2(ht, "Event"), ht.prototype = { get type() {
          return W(this).event.type;
        }, get target() {
          return W(this).eventTarget;
        }, get currentTarget() {
          return W(this).currentTarget;
        }, composedPath() {
          const i = W(this).currentTarget;
          return i == null ? [] : [i];
        }, get NONE() {
          return 0;
        }, get CAPTURING_PHASE() {
          return 1;
        }, get AT_TARGET() {
          return 2;
        }, get BUBBLING_PHASE() {
          return 3;
        }, get eventPhase() {
          return W(this).eventPhase;
        }, stopPropagation() {
          const i = W(this);
          i.stopped = true, typeof i.event.stopPropagation == "function" && i.event.stopPropagation();
        }, stopImmediatePropagation() {
          const i = W(this);
          i.stopped = true, i.immediateStopped = true, typeof i.event.stopImmediatePropagation == "function" && i.event.stopImmediatePropagation();
        }, get bubbles() {
          return !!W(this).event.bubbles;
        }, get cancelable() {
          return !!W(this).event.cancelable;
        }, preventDefault() {
          Pi(W(this));
        }, get defaultPrevented() {
          return W(this).canceled;
        }, get composed() {
          return !!W(this).event.composed;
        }, get timeStamp() {
          return W(this).timeStamp;
        }, get srcElement() {
          return W(this).eventTarget;
        }, get cancelBubble() {
          return W(this).stopped;
        }, set cancelBubble(i) {
          if (!i) return;
          const o3 = W(this);
          o3.stopped = true, typeof o3.event.cancelBubble == "boolean" && (o3.event.cancelBubble = true);
        }, get returnValue() {
          return !W(this).canceled;
        }, set returnValue(i) {
          i || Pi(W(this));
        }, initEvent() {
        } }, Object.defineProperty(ht.prototype, "constructor", { value: ht, configurable: true, writable: true }), typeof window < "u" && typeof window.Event < "u" && (Object.setPrototypeOf(ht.prototype, window.Event.prototype), Dn.set(window.Event.prototype, ht));
        n2(vi, "defineRedirectDescriptor");
        n2(gl, "defineCallDescriptor");
        n2(_l, "defineWrapper");
        n2(Ei, "getWrapper");
        n2(Sl, "wrapEvent");
        n2(wl, "isStopped");
        n2(Rl, "setEventPhase");
        n2(Tl, "setCurrentTarget");
        n2(Ai, "setPassiveListener");
        Bi = /* @__PURE__ */ new WeakMap();
        ki = 1;
        Wi = 2;
        wr = 3;
        n2(Rr, "isObject");
        n2(Bt, "getListeners");
        n2(Cl, "defineEventAttributeDescriptor");
        n2(qi, "defineEventAttribute");
        n2(Oi, "defineCustomEventTarget");
        n2(Pe, "EventTarget"), Pe.prototype = { addEventListener(i, o3, a2) {
          if (o3 == null) return;
          if (typeof o3 != "function" && !Rr(o3)) throw new TypeError("'listener' should be a function or an object.");
          const u2 = Bt(this), l2 = Rr(a2), h = (l2 ? !!a2.capture : !!a2) ? ki : Wi, g3 = { listener: o3, listenerType: h, passive: l2 && !!a2.passive, once: l2 && !!a2.once, next: null };
          let A2 = u2.get(i);
          if (A2 === void 0) {
            u2.set(i, g3);
            return;
          }
          let w2 = null;
          for (; A2 != null; ) {
            if (A2.listener === o3 && A2.listenerType === h) return;
            w2 = A2, A2 = A2.next;
          }
          w2.next = g3;
        }, removeEventListener(i, o3, a2) {
          if (o3 == null) return;
          const u2 = Bt(this), p = (Rr(a2) ? !!a2.capture : !!a2) ? ki : Wi;
          let h = null, g3 = u2.get(i);
          for (; g3 != null; ) {
            if (g3.listener === o3 && g3.listenerType === p) {
              h !== null ? h.next = g3.next : g3.next !== null ? u2.set(i, g3.next) : u2.delete(i);
              return;
            }
            h = g3, g3 = g3.next;
          }
        }, dispatchEvent(i) {
          if (i == null || typeof i.type != "string") throw new TypeError('"event.type" should be a string.');
          const o3 = Bt(this), a2 = i.type;
          let u2 = o3.get(a2);
          if (u2 == null) return true;
          const l2 = Sl(this, i);
          let p = null;
          for (; u2 != null; ) {
            if (u2.once ? p !== null ? p.next = u2.next : u2.next !== null ? o3.set(a2, u2.next) : o3.delete(a2) : p = u2, Ai(l2, u2.passive ? u2.listener : null), typeof u2.listener == "function") try {
              u2.listener.call(this, l2);
            } catch (h) {
              typeof console < "u" && typeof console.error == "function" && console.error(h);
            }
            else u2.listenerType !== wr && typeof u2.listener.handleEvent == "function" && u2.listener.handleEvent(l2);
            if (wl(l2)) break;
            u2 = u2.next;
          }
          return Ai(l2, null), Rl(l2, 0), Tl(l2, null), !l2.defaultPrevented;
        } }, Object.defineProperty(Pe.prototype, "constructor", { value: Pe, configurable: true, writable: true }), typeof window < "u" && typeof window.EventTarget < "u" && Object.setPrototypeOf(Pe.prototype, window.EventTarget.prototype);
        Vn = class Vn2 extends Pe {
          static {
            __name(this, "Vn2");
          }
          constructor() {
            throw super(), new TypeError("AbortSignal cannot be constructed directly");
          }
          get aborted() {
            const o3 = Tr.get(this);
            if (typeof o3 != "boolean") throw new TypeError(`Expected 'this' to be an 'AbortSignal' object, but got ${this === null ? "null" : typeof this}`);
            return o3;
          }
        };
        n2(Vn, "AbortSignal");
        pt = Vn;
        qi(pt.prototype, "abort");
        n2(Pl, "createAbortSignal");
        n2(vl, "abortSignal");
        Tr = /* @__PURE__ */ new WeakMap();
        Object.defineProperties(pt.prototype, { aborted: { enumerable: true } }), typeof Symbol == "function" && typeof Symbol.toStringTag == "symbol" && Object.defineProperty(pt.prototype, Symbol.toStringTag, { configurable: true, value: "AbortSignal" });
        Mn = (It = class {
          static {
            __name(this, "It");
          }
          constructor() {
            zi.set(this, Pl());
          }
          get signal() {
            return Ii(this);
          }
          abort() {
            vl(Ii(this));
          }
        }, n2(It, "AbortController"), It);
        zi = /* @__PURE__ */ new WeakMap();
        n2(Ii, "getSignal"), Object.defineProperties(Mn.prototype, { signal: { enumerable: true }, abort: { enumerable: true } }), typeof Symbol == "function" && typeof Symbol.toStringTag == "symbol" && Object.defineProperty(Mn.prototype, Symbol.toStringTag, { configurable: true, value: "AbortController" });
        El = Object.defineProperty;
        Al = n2((i, o3) => El(i, "name", { value: o3, configurable: true }), "e");
        Fi = Ti;
        ji();
        n2(ji, "s"), Al(ji, "checkNodeEnvironment");
      }
    });
    var require_posix = __commonJS2({
      "node_modules/which/node_modules/isexe/dist/cjs/posix.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        exports2.sync = exports2.isexe = void 0;
        var fs_1 = __require("fs");
        var promises_1 = __require("fs").promises;
        var isexe = /* @__PURE__ */ __name((_0, ..._1) => __async(exports2, [_0, ..._1], function* (path22, options = {}) {
          const { ignoreErrors = false } = options;
          try {
            return checkStat(yield (0, promises_1.stat)(path22), options);
          } catch (e) {
            const er = e;
            if (ignoreErrors || er.code === "EACCES")
              return false;
            throw er;
          }
        }), "isexe");
        exports2.isexe = isexe;
        var sync = /* @__PURE__ */ __name((path22, options = {}) => {
          const { ignoreErrors = false } = options;
          try {
            return checkStat((0, fs_1.statSync)(path22), options);
          } catch (e) {
            const er = e;
            if (ignoreErrors || er.code === "EACCES")
              return false;
            throw er;
          }
        }, "sync");
        exports2.sync = sync;
        var checkStat = /* @__PURE__ */ __name((stat, options) => stat.isFile() && checkMode(stat, options), "checkStat");
        var checkMode = /* @__PURE__ */ __name((stat, options) => {
          var _a2, _b2, _c, _d, _e, _f, _g, _h;
          const myUid = (_b2 = options.uid) != null ? _b2 : (_a2 = process.getuid) == null ? void 0 : _a2.call(process);
          const myGroups = (_e = (_d = options.groups) != null ? _d : (_c = process.getgroups) == null ? void 0 : _c.call(process)) != null ? _e : [];
          const myGid = (_h = (_g = options.gid) != null ? _g : (_f = process.getgid) == null ? void 0 : _f.call(process)) != null ? _h : myGroups[0];
          if (myUid === void 0 || myGid === void 0) {
            throw new Error("cannot get uid or gid");
          }
          const groups = /* @__PURE__ */ new Set([myGid, ...myGroups]);
          const mod = stat.mode;
          const uid = stat.uid;
          const gid = stat.gid;
          const u2 = parseInt("100", 8);
          const g3 = parseInt("010", 8);
          const o3 = parseInt("001", 8);
          const ug = u2 | g3;
          return !!(mod & o3 || mod & g3 && groups.has(gid) || mod & u2 && uid === myUid || mod & ug && myUid === 0);
        }, "checkMode");
      }
    });
    var require_win32 = __commonJS2({
      "node_modules/which/node_modules/isexe/dist/cjs/win32.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        exports2.sync = exports2.isexe = void 0;
        var fs_1 = __require("fs");
        var promises_1 = __require("fs").promises;
        var isexe = /* @__PURE__ */ __name((_0, ..._1) => __async(exports2, [_0, ..._1], function* (path22, options = {}) {
          const { ignoreErrors = false } = options;
          try {
            return checkStat(yield (0, promises_1.stat)(path22), path22, options);
          } catch (e) {
            const er = e;
            if (ignoreErrors || er.code === "EACCES")
              return false;
            throw er;
          }
        }), "isexe");
        exports2.isexe = isexe;
        var sync = /* @__PURE__ */ __name((path22, options = {}) => {
          const { ignoreErrors = false } = options;
          try {
            return checkStat((0, fs_1.statSync)(path22), path22, options);
          } catch (e) {
            const er = e;
            if (ignoreErrors || er.code === "EACCES")
              return false;
            throw er;
          }
        }, "sync");
        exports2.sync = sync;
        var checkPathExt = /* @__PURE__ */ __name((path22, options) => {
          const { pathExt = process.env.PATHEXT || "" } = options;
          const peSplit = pathExt.split(";");
          if (peSplit.indexOf("") !== -1) {
            return true;
          }
          for (let i = 0; i < peSplit.length; i++) {
            const p = peSplit[i].toLowerCase();
            const ext = path22.substring(path22.length - p.length).toLowerCase();
            if (p && ext === p) {
              return true;
            }
          }
          return false;
        }, "checkPathExt");
        var checkStat = /* @__PURE__ */ __name((stat, path22, options) => stat.isFile() && checkPathExt(path22, options), "checkStat");
      }
    });
    var require_options = __commonJS2({
      "node_modules/which/node_modules/isexe/dist/cjs/options.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
      }
    });
    var require_cjs = __commonJS2({
      "node_modules/which/node_modules/isexe/dist/cjs/index.js"(exports2) {
        "use strict";
        var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o3, m2, k2, k22) {
          if (k22 === void 0) k22 = k2;
          var desc = Object.getOwnPropertyDescriptor(m2, k2);
          if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
            desc = { enumerable: true, get: /* @__PURE__ */ __name(function() {
              return m2[k2];
            }, "get") };
          }
          Object.defineProperty(o3, k22, desc);
        } : function(o3, m2, k2, k22) {
          if (k22 === void 0) k22 = k2;
          o3[k22] = m2[k2];
        });
        var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o3, v2) {
          Object.defineProperty(o3, "default", { enumerable: true, value: v2 });
        } : function(o3, v2) {
          o3["default"] = v2;
        });
        var __importStar = exports2 && exports2.__importStar || function(mod) {
          if (mod && mod.__esModule) return mod;
          var result = {};
          if (mod != null) {
            for (var k2 in mod) if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2)) __createBinding(result, mod, k2);
          }
          __setModuleDefault(result, mod);
          return result;
        };
        var __exportStar = exports2 && exports2.__exportStar || function(m2, exports3) {
          for (var p in m2) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p)) __createBinding(exports3, m2, p);
        };
        Object.defineProperty(exports2, "__esModule", { value: true });
        exports2.sync = exports2.isexe = exports2.posix = exports2.win32 = void 0;
        var posix = __importStar(require_posix());
        exports2.posix = posix;
        var win32 = __importStar(require_win32());
        exports2.win32 = win32;
        __exportStar(require_options(), exports2);
        var platform = process.env._ISEXE_TEST_PLATFORM_ || process.platform;
        var impl = platform === "win32" ? win32 : posix;
        exports2.isexe = impl.isexe;
        exports2.sync = impl.sync;
      }
    });
    var require_lib22 = __commonJS2({
      "node_modules/which/lib/index.js"(exports2, module2) {
        "use strict";
        var { isexe, sync: isexeSync } = require_cjs();
        var { join, delimiter, sep, posix } = __require("path");
        var isWindows = process.platform === "win32";
        var rSlash = new RegExp(`[${posix.sep}${sep === posix.sep ? "" : sep}]`.replace(/(\\)/g, "\\$1"));
        var rRel = new RegExp(`^\\.${rSlash.source}`);
        var getNotFoundError = /* @__PURE__ */ __name((cmd) => Object.assign(new Error(`not found: ${cmd}`), { code: "ENOENT" }), "getNotFoundError");
        var getPathInfo = /* @__PURE__ */ __name((cmd, {
          path: optPath = process.env.PATH,
          pathExt: optPathExt = process.env.PATHEXT,
          delimiter: optDelimiter = delimiter
        }) => {
          const pathEnv = cmd.match(rSlash) ? [""] : [
            // windows always checks the cwd first
            ...isWindows ? [process.cwd()] : [],
            ...(optPath || /* istanbul ignore next: very unusual */
            "").split(optDelimiter)
          ];
          if (isWindows) {
            const pathExtExe = optPathExt || [".EXE", ".CMD", ".BAT", ".COM"].join(optDelimiter);
            const pathExt = pathExtExe.split(optDelimiter).flatMap((item) => [item, item.toLowerCase()]);
            if (cmd.includes(".") && pathExt[0] !== "") {
              pathExt.unshift("");
            }
            return { pathEnv, pathExt, pathExtExe };
          }
          return { pathEnv, pathExt: [""] };
        }, "getPathInfo");
        var getPathPart = /* @__PURE__ */ __name((raw, cmd) => {
          const pathPart = /^".*"$/.test(raw) ? raw.slice(1, -1) : raw;
          const prefix = !pathPart && rRel.test(cmd) ? cmd.slice(0, 2) : "";
          return prefix + join(pathPart, cmd);
        }, "getPathPart");
        var which2 = /* @__PURE__ */ __name((_0, ..._1) => __async(exports2, [_0, ..._1], function* (cmd, opt = {}) {
          const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt);
          const found = [];
          for (const envPart of pathEnv) {
            const p = getPathPart(envPart, cmd);
            for (const ext of pathExt) {
              const withExt = p + ext;
              const is = yield isexe(withExt, { pathExt: pathExtExe, ignoreErrors: true });
              if (is) {
                if (!opt.all) {
                  return withExt;
                }
                found.push(withExt);
              }
            }
          }
          if (opt.all && found.length) {
            return found;
          }
          if (opt.nothrow) {
            return null;
          }
          throw getNotFoundError(cmd);
        }), "which");
        var whichSync = /* @__PURE__ */ __name((cmd, opt = {}) => {
          const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt);
          const found = [];
          for (const pathEnvPart of pathEnv) {
            const p = getPathPart(pathEnvPart, cmd);
            for (const ext of pathExt) {
              const withExt = p + ext;
              const is = isexeSync(withExt, { pathExt: pathExtExe, ignoreErrors: true });
              if (is) {
                if (!opt.all) {
                  return withExt;
                }
                found.push(withExt);
              }
            }
          }
          if (opt.all && found.length) {
            return found;
          }
          if (opt.nothrow) {
            return null;
          }
          throw getNotFoundError(cmd);
        }, "whichSync");
        module2.exports = which2;
        which2.sync = whichSync;
      }
    });
    var require_minimist = __commonJS2({
      "node_modules/minimist/index.js"(exports2, module2) {
        "use strict";
        function hasKey(obj, keys) {
          var o3 = obj;
          keys.slice(0, -1).forEach(function(key2) {
            o3 = o3[key2] || {};
          });
          var key = keys[keys.length - 1];
          return key in o3;
        }
        __name(hasKey, "hasKey");
        function isNumber(x2) {
          if (typeof x2 === "number") {
            return true;
          }
          if (/^0x[0-9a-f]+$/i.test(x2)) {
            return true;
          }
          return /^[-+]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(x2);
        }
        __name(isNumber, "isNumber");
        function isConstructorOrProto(obj, key) {
          return key === "constructor" && typeof obj[key] === "function" || key === "__proto__";
        }
        __name(isConstructorOrProto, "isConstructorOrProto");
        module2.exports = function(args, opts) {
          if (!opts) {
            opts = {};
          }
          var flags = {
            bools: {},
            strings: {},
            unknownFn: null
          };
          if (typeof opts.unknown === "function") {
            flags.unknownFn = opts.unknown;
          }
          if (typeof opts.boolean === "boolean" && opts.boolean) {
            flags.allBools = true;
          } else {
            [].concat(opts.boolean).filter(Boolean).forEach(function(key2) {
              flags.bools[key2] = true;
            });
          }
          var aliases = {};
          function aliasIsBoolean(key2) {
            return aliases[key2].some(function(x2) {
              return flags.bools[x2];
            });
          }
          __name(aliasIsBoolean, "aliasIsBoolean");
          Object.keys(opts.alias || {}).forEach(function(key2) {
            aliases[key2] = [].concat(opts.alias[key2]);
            aliases[key2].forEach(function(x2) {
              aliases[x2] = [key2].concat(aliases[key2].filter(function(y) {
                return x2 !== y;
              }));
            });
          });
          [].concat(opts.string).filter(Boolean).forEach(function(key2) {
            flags.strings[key2] = true;
            if (aliases[key2]) {
              [].concat(aliases[key2]).forEach(function(k2) {
                flags.strings[k2] = true;
              });
            }
          });
          var defaults = opts.default || {};
          var argv = { _: [] };
          function argDefined(key2, arg2) {
            return flags.allBools && /^--[^=]+$/.test(arg2) || flags.strings[key2] || flags.bools[key2] || aliases[key2];
          }
          __name(argDefined, "argDefined");
          function setKey(obj, keys, value2) {
            var o3 = obj;
            for (var i2 = 0; i2 < keys.length - 1; i2++) {
              var key2 = keys[i2];
              if (isConstructorOrProto(o3, key2)) {
                return;
              }
              if (o3[key2] === void 0) {
                o3[key2] = {};
              }
              if (o3[key2] === Object.prototype || o3[key2] === Number.prototype || o3[key2] === String.prototype) {
                o3[key2] = {};
              }
              if (o3[key2] === Array.prototype) {
                o3[key2] = [];
              }
              o3 = o3[key2];
            }
            var lastKey = keys[keys.length - 1];
            if (isConstructorOrProto(o3, lastKey)) {
              return;
            }
            if (o3 === Object.prototype || o3 === Number.prototype || o3 === String.prototype) {
              o3 = {};
            }
            if (o3 === Array.prototype) {
              o3 = [];
            }
            if (o3[lastKey] === void 0 || flags.bools[lastKey] || typeof o3[lastKey] === "boolean") {
              o3[lastKey] = value2;
            } else if (Array.isArray(o3[lastKey])) {
              o3[lastKey].push(value2);
            } else {
              o3[lastKey] = [o3[lastKey], value2];
            }
          }
          __name(setKey, "setKey");
          function setArg(key2, val, arg2) {
            if (arg2 && flags.unknownFn && !argDefined(key2, arg2)) {
              if (flags.unknownFn(arg2) === false) {
                return;
              }
            }
            var value2 = !flags.strings[key2] && isNumber(val) ? Number(val) : val;
            setKey(argv, key2.split("."), value2);
            (aliases[key2] || []).forEach(function(x2) {
              setKey(argv, x2.split("."), value2);
            });
          }
          __name(setArg, "setArg");
          Object.keys(flags.bools).forEach(function(key2) {
            setArg(key2, defaults[key2] === void 0 ? false : defaults[key2]);
          });
          var notFlags = [];
          if (args.indexOf("--") !== -1) {
            notFlags = args.slice(args.indexOf("--") + 1);
            args = args.slice(0, args.indexOf("--"));
          }
          for (var i = 0; i < args.length; i++) {
            var arg = args[i];
            var key;
            var next;
            if (/^--.+=/.test(arg)) {
              var m2 = arg.match(/^--([^=]+)=([\s\S]*)$/);
              key = m2[1];
              var value = m2[2];
              if (flags.bools[key]) {
                value = value !== "false";
              }
              setArg(key, value, arg);
            } else if (/^--no-.+/.test(arg)) {
              key = arg.match(/^--no-(.+)/)[1];
              setArg(key, false, arg);
            } else if (/^--.+/.test(arg)) {
              key = arg.match(/^--(.+)/)[1];
              next = args[i + 1];
              if (next !== void 0 && !/^(-|--)[^-]/.test(next) && !flags.bools[key] && !flags.allBools && (aliases[key] ? !aliasIsBoolean(key) : true)) {
                setArg(key, next, arg);
                i += 1;
              } else if (/^(true|false)$/.test(next)) {
                setArg(key, next === "true", arg);
                i += 1;
              } else {
                setArg(key, flags.strings[key] ? "" : true, arg);
              }
            } else if (/^-[^-]+/.test(arg)) {
              var letters = arg.slice(1, -1).split("");
              var broken = false;
              for (var j = 0; j < letters.length; j++) {
                next = arg.slice(j + 2);
                if (next === "-") {
                  setArg(letters[j], next, arg);
                  continue;
                }
                if (/[A-Za-z]/.test(letters[j]) && next[0] === "=") {
                  setArg(letters[j], next.slice(1), arg);
                  broken = true;
                  break;
                }
                if (/[A-Za-z]/.test(letters[j]) && /-?\d+(\.\d*)?(e-?\d+)?$/.test(next)) {
                  setArg(letters[j], next, arg);
                  broken = true;
                  break;
                }
                if (letters[j + 1] && letters[j + 1].match(/\W/)) {
                  setArg(letters[j], arg.slice(j + 2), arg);
                  broken = true;
                  break;
                } else {
                  setArg(letters[j], flags.strings[letters[j]] ? "" : true, arg);
                }
              }
              key = arg.slice(-1)[0];
              if (!broken && key !== "-") {
                if (args[i + 1] && !/^(-|--)[^-]/.test(args[i + 1]) && !flags.bools[key] && (aliases[key] ? !aliasIsBoolean(key) : true)) {
                  setArg(key, args[i + 1], arg);
                  i += 1;
                } else if (args[i + 1] && /^(true|false)$/.test(args[i + 1])) {
                  setArg(key, args[i + 1] === "true", arg);
                  i += 1;
                } else {
                  setArg(key, flags.strings[key] ? "" : true, arg);
                }
              }
            } else {
              if (!flags.unknownFn || flags.unknownFn(arg) !== false) {
                argv._.push(flags.strings._ || !isNumber(arg) ? arg : Number(arg));
              }
              if (opts.stopEarly) {
                argv._.push.apply(argv._, args.slice(i + 1));
                break;
              }
            }
          }
          Object.keys(defaults).forEach(function(k2) {
            if (!hasKey(argv, k2.split("."))) {
              setKey(argv, k2.split("."), defaults[k2]);
              (aliases[k2] || []).forEach(function(x2) {
                setKey(argv, x2.split("."), defaults[k2]);
              });
            }
          });
          if (opts["--"]) {
            argv["--"] = notFlags.slice();
          } else {
            notFlags.forEach(function(k2) {
              argv._.push(k2);
            });
          }
          return argv;
        };
      }
    });
    var vendor_exports = {};
    __export2(vendor_exports, {
      YAML: /* @__PURE__ */ __name(() => YAML2, "YAML"),
      buildCmd: /* @__PURE__ */ __name(() => buildCmd, "buildCmd"),
      chalk: /* @__PURE__ */ __name(() => source_default, "chalk"),
      createRequire: /* @__PURE__ */ __name(() => createRequire3, "createRequire"),
      depseek: /* @__PURE__ */ __name(() => depseekSync, "depseek"),
      exec: /* @__PURE__ */ __name(() => exec, "exec"),
      fs: /* @__PURE__ */ __name(() => fs5, "fs"),
      glob: /* @__PURE__ */ __name(() => glob2, "glob"),
      globbyModule: /* @__PURE__ */ __name(() => globbyModule, "globbyModule"),
      minimist: /* @__PURE__ */ __name(() => import_minimist.default, "minimist"),
      nodeFetch: /* @__PURE__ */ __name(() => s, "nodeFetch"),
      parseLine: /* @__PURE__ */ __name(() => parseLine, "parseLine"),
      ps: /* @__PURE__ */ __name(() => ts_default, "ps"),
      which: /* @__PURE__ */ __name(() => import_which.default, "which")
    });
    module.exports = __toCommonJS2(vendor_exports);
    var import_node_process2 = __toESM2(__require("process"), 1);
    var import_node_fs2 = __toESM2(__require("fs"), 1);
    var import_node_path22 = __toESM2(__require("path"), 1);
    var import_node_events = __require("events");
    var import_node_stream = __require("stream");
    var import_promises = __require("stream").promises;
    function mergeStreams(streams) {
      if (!Array.isArray(streams)) {
        throw new TypeError(`Expected an array, got \`${typeof streams}\`.`);
      }
      for (const stream of streams) {
        validateStream(stream);
      }
      const objectMode = streams.some(({ readableObjectMode }) => readableObjectMode);
      const highWaterMark = getHighWaterMark(streams, objectMode);
      const passThroughStream = new MergedStream({
        objectMode,
        writableHighWaterMark: highWaterMark,
        readableHighWaterMark: highWaterMark
      });
      for (const stream of streams) {
        passThroughStream.add(stream);
      }
      if (streams.length === 0) {
        endStream(passThroughStream);
      }
      return passThroughStream;
    }
    __name(mergeStreams, "mergeStreams");
    var getHighWaterMark = /* @__PURE__ */ __name((streams, objectMode) => {
      if (streams.length === 0) {
        return 16384;
      }
      const highWaterMarks = streams.filter(({ readableObjectMode }) => readableObjectMode === objectMode).map(({ readableHighWaterMark }) => readableHighWaterMark);
      return Math.max(...highWaterMarks);
    }, "getHighWaterMark");
    var _streams;
    var _ended;
    var _aborted;
    var _onFinished;
    var MergedStream = class extends import_node_stream.PassThrough {
      static {
        __name(this, "MergedStream");
      }
      constructor() {
        super(...arguments);
        __privateAdd(this, _streams, /* @__PURE__ */ new Set([]));
        __privateAdd(this, _ended, /* @__PURE__ */ new Set([]));
        __privateAdd(this, _aborted, /* @__PURE__ */ new Set([]));
        __privateAdd(this, _onFinished);
      }
      add(stream) {
        var _a2;
        validateStream(stream);
        if (__privateGet(this, _streams).has(stream)) {
          return;
        }
        __privateGet(this, _streams).add(stream);
        (_a2 = __privateGet(this, _onFinished)) != null ? _a2 : __privateSet(this, _onFinished, onMergedStreamFinished(this, __privateGet(this, _streams)));
        endWhenStreamsDone({
          passThroughStream: this,
          stream,
          streams: __privateGet(this, _streams),
          ended: __privateGet(this, _ended),
          aborted: __privateGet(this, _aborted),
          onFinished: __privateGet(this, _onFinished)
        });
        stream.pipe(this, { end: false });
      }
      remove(stream) {
        validateStream(stream);
        if (!__privateGet(this, _streams).has(stream)) {
          return false;
        }
        stream.unpipe(this);
        return true;
      }
    };
    _streams = /* @__PURE__ */ new WeakMap();
    _ended = /* @__PURE__ */ new WeakMap();
    _aborted = /* @__PURE__ */ new WeakMap();
    _onFinished = /* @__PURE__ */ new WeakMap();
    var onMergedStreamFinished = /* @__PURE__ */ __name((passThroughStream, streams) => __async(void 0, null, function* () {
      updateMaxListeners(passThroughStream, PASSTHROUGH_LISTENERS_COUNT);
      const controller = new AbortController();
      try {
        yield Promise.race([
          onMergedStreamEnd(passThroughStream, controller),
          onInputStreamsUnpipe(passThroughStream, streams, controller)
        ]);
      } finally {
        controller.abort();
        updateMaxListeners(passThroughStream, -PASSTHROUGH_LISTENERS_COUNT);
      }
    }), "onMergedStreamFinished");
    var onMergedStreamEnd = /* @__PURE__ */ __name((_0, _1) => __async(void 0, [_0, _1], function* (passThroughStream, { signal }) {
      yield (0, import_promises.finished)(passThroughStream, { signal, cleanup: true });
    }), "onMergedStreamEnd");
    var onInputStreamsUnpipe = /* @__PURE__ */ __name((_0, _1, _2) => __async(void 0, [_0, _1, _2], function* (passThroughStream, streams, { signal }) {
      try {
        for (var iter = __forAwait((0, import_node_events.on)(passThroughStream, "unpipe", { signal })), more, temp, error; more = !(temp = yield iter.next()).done; more = false) {
          const [unpipedStream] = temp.value;
          if (streams.has(unpipedStream)) {
            unpipedStream.emit(unpipeEvent);
          }
        }
      } catch (temp2) {
        error = [temp2];
      } finally {
        try {
          more && (temp = iter.return) && (yield temp.call(iter));
        } finally {
          if (error)
            throw error[0];
        }
      }
    }), "onInputStreamsUnpipe");
    var validateStream = /* @__PURE__ */ __name((stream) => {
      if (typeof (stream == null ? void 0 : stream.pipe) !== "function") {
        throw new TypeError(`Expected a readable stream, got: \`${typeof stream}\`.`);
      }
    }, "validateStream");
    var endWhenStreamsDone = /* @__PURE__ */ __name((_0) => __async(void 0, [_0], function* ({ passThroughStream, stream, streams, ended, aborted, onFinished }) {
      updateMaxListeners(passThroughStream, PASSTHROUGH_LISTENERS_PER_STREAM);
      const controller = new AbortController();
      try {
        yield Promise.race([
          afterMergedStreamFinished(onFinished, stream),
          onInputStreamEnd({ passThroughStream, stream, streams, ended, aborted, controller }),
          onInputStreamUnpipe({ stream, streams, ended, aborted, controller })
        ]);
      } finally {
        controller.abort();
        updateMaxListeners(passThroughStream, -PASSTHROUGH_LISTENERS_PER_STREAM);
      }
      if (streams.size === ended.size + aborted.size) {
        if (ended.size === 0 && aborted.size > 0) {
          abortStream(passThroughStream);
        } else {
          endStream(passThroughStream);
        }
      }
    }), "endWhenStreamsDone");
    var isAbortError = /* @__PURE__ */ __name((error) => (error == null ? void 0 : error.code) === "ERR_STREAM_PREMATURE_CLOSE", "isAbortError");
    var afterMergedStreamFinished = /* @__PURE__ */ __name((onFinished, stream) => __async(void 0, null, function* () {
      try {
        yield onFinished;
        abortStream(stream);
      } catch (error) {
        if (isAbortError(error)) {
          abortStream(stream);
        } else {
          errorStream(stream, error);
        }
      }
    }), "afterMergedStreamFinished");
    var onInputStreamEnd = /* @__PURE__ */ __name((_0) => __async(void 0, [_0], function* ({ passThroughStream, stream, streams, ended, aborted, controller: { signal } }) {
      try {
        yield (0, import_promises.finished)(stream, { signal, cleanup: true, readable: true, writable: false });
        if (streams.has(stream)) {
          ended.add(stream);
        }
      } catch (error) {
        if (signal.aborted || !streams.has(stream)) {
          return;
        }
        if (isAbortError(error)) {
          aborted.add(stream);
        } else {
          errorStream(passThroughStream, error);
        }
      }
    }), "onInputStreamEnd");
    var onInputStreamUnpipe = /* @__PURE__ */ __name((_0) => __async(void 0, [_0], function* ({ stream, streams, ended, aborted, controller: { signal } }) {
      yield (0, import_node_events.once)(stream, unpipeEvent, { signal });
      streams.delete(stream);
      ended.delete(stream);
      aborted.delete(stream);
    }), "onInputStreamUnpipe");
    var unpipeEvent = Symbol("unpipe");
    var endStream = /* @__PURE__ */ __name((stream) => {
      if (stream.writable) {
        stream.end();
      }
    }, "endStream");
    var abortStream = /* @__PURE__ */ __name((stream) => {
      if (stream.readable || stream.writable) {
        stream.destroy();
      }
    }, "abortStream");
    var errorStream = /* @__PURE__ */ __name((stream, error) => {
      if (!stream.destroyed) {
        stream.once("error", noop);
        stream.destroy(error);
      }
    }, "errorStream");
    var noop = /* @__PURE__ */ __name(() => {
    }, "noop");
    var updateMaxListeners = /* @__PURE__ */ __name((passThroughStream, increment) => {
      const maxListeners = passThroughStream.getMaxListeners();
      if (maxListeners !== 0 && maxListeners !== Number.POSITIVE_INFINITY) {
        passThroughStream.setMaxListeners(maxListeners + increment);
      }
    }, "updateMaxListeners");
    var PASSTHROUGH_LISTENERS_COUNT = 2;
    var PASSTHROUGH_LISTENERS_PER_STREAM = 1;
    var import_fast_glob2 = __toESM2(require_out4(), 1);
    var import_fs = __toESM2(__require("fs"), 1);
    function isType(fsStatType, statsMethodName, filePath) {
      return __async(this, null, function* () {
        if (typeof filePath !== "string") {
          throw new TypeError(`Expected a string, got ${typeof filePath}`);
        }
        try {
          const stats = yield import_fs.promises[fsStatType](filePath);
          return stats[statsMethodName]();
        } catch (error) {
          if (error.code === "ENOENT") {
            return false;
          }
          throw error;
        }
      });
    }
    __name(isType, "isType");
    function isTypeSync(fsStatType, statsMethodName, filePath) {
      if (typeof filePath !== "string") {
        throw new TypeError(`Expected a string, got ${typeof filePath}`);
      }
      try {
        return import_fs.default[fsStatType](filePath)[statsMethodName]();
      } catch (error) {
        if (error.code === "ENOENT") {
          return false;
        }
        throw error;
      }
    }
    __name(isTypeSync, "isTypeSync");
    var isFile = isType.bind(null, "stat", "isFile");
    var isDirectory = isType.bind(null, "stat", "isDirectory");
    var isSymlink = isType.bind(null, "lstat", "isSymbolicLink");
    var isFileSync = isTypeSync.bind(null, "statSync", "isFile");
    var isDirectorySync = isTypeSync.bind(null, "statSync", "isDirectory");
    var isSymlinkSync = isTypeSync.bind(null, "lstatSync", "isSymbolicLink");
    var import_node_url4 = __require("url");
    function toPath(urlOrPath) {
      return urlOrPath instanceof URL ? (0, import_node_url4.fileURLToPath)(urlOrPath) : urlOrPath;
    }
    __name(toPath, "toPath");
    var import_node_process = __toESM2(__require("process"), 1);
    var import_node_fs = __toESM2(__require("fs"), 1);
    var import_promises2 = __toESM2(__require("fs").promises, 1);
    var import_node_path5 = __toESM2(__require("path"), 1);
    var import_fast_glob = __toESM2(require_out4(), 1);
    var import_ignore = __toESM2(require_ignore2(), 1);
    function slash(path22) {
      const isExtendedLengthPath = path22.startsWith("\\\\?\\");
      if (isExtendedLengthPath) {
        return path22;
      }
      return path22.replace(/\\/g, "/");
    }
    __name(slash, "slash");
    var isNegativePattern = /* @__PURE__ */ __name((pattern) => pattern[0] === "!", "isNegativePattern");
    var defaultIgnoredDirectories = [
      "**/node_modules",
      "**/flow-typed",
      "**/coverage",
      "**/.git"
    ];
    var ignoreFilesGlobOptions = {
      absolute: true,
      dot: true
    };
    var GITIGNORE_FILES_PATTERN = "**/.gitignore";
    var applyBaseToPattern = /* @__PURE__ */ __name((pattern, base) => isNegativePattern(pattern) ? "!" + import_node_path5.default.posix.join(base, pattern.slice(1)) : import_node_path5.default.posix.join(base, pattern), "applyBaseToPattern");
    var parseIgnoreFile = /* @__PURE__ */ __name((file, cwd) => {
      const base = slash(import_node_path5.default.relative(cwd, import_node_path5.default.dirname(file.filePath)));
      return file.content.split(/\r?\n/).filter((line) => line && !line.startsWith("#")).map((pattern) => applyBaseToPattern(pattern, base));
    }, "parseIgnoreFile");
    var toRelativePath = /* @__PURE__ */ __name((fileOrDirectory, cwd) => {
      cwd = slash(cwd);
      if (import_node_path5.default.isAbsolute(fileOrDirectory)) {
        if (slash(fileOrDirectory).startsWith(cwd)) {
          return import_node_path5.default.relative(cwd, fileOrDirectory);
        }
        throw new Error(`Path ${fileOrDirectory} is not in cwd ${cwd}`);
      }
      return fileOrDirectory;
    }, "toRelativePath");
    var getIsIgnoredPredicate = /* @__PURE__ */ __name((files, cwd) => {
      const patterns = files.flatMap((file) => parseIgnoreFile(file, cwd));
      const ignores = (0, import_ignore.default)().add(patterns);
      return (fileOrDirectory) => {
        fileOrDirectory = toPath(fileOrDirectory);
        fileOrDirectory = toRelativePath(fileOrDirectory, cwd);
        return fileOrDirectory ? ignores.ignores(slash(fileOrDirectory)) : false;
      };
    }, "getIsIgnoredPredicate");
    var normalizeOptions = /* @__PURE__ */ __name((options = {}) => {
      var _a2, _b2;
      return {
        cwd: (_a2 = toPath(options.cwd)) != null ? _a2 : import_node_process.default.cwd(),
        suppressErrors: Boolean(options.suppressErrors),
        deep: typeof options.deep === "number" ? options.deep : Number.POSITIVE_INFINITY,
        ignore: [...(_b2 = options.ignore) != null ? _b2 : [], ...defaultIgnoredDirectories]
      };
    }, "normalizeOptions");
    var isIgnoredByIgnoreFiles = /* @__PURE__ */ __name((patterns, options) => __async(void 0, null, function* () {
      const { cwd, suppressErrors, deep, ignore } = normalizeOptions(options);
      const paths = yield (0, import_fast_glob.default)(patterns, __spreadValues({
        cwd,
        suppressErrors,
        deep,
        ignore
      }, ignoreFilesGlobOptions));
      const files = yield Promise.all(
        paths.map((filePath) => __async(void 0, null, function* () {
          return {
            filePath,
            content: yield import_promises2.default.readFile(filePath, "utf8")
          };
        }))
      );
      return getIsIgnoredPredicate(files, cwd);
    }), "isIgnoredByIgnoreFiles");
    var isIgnoredByIgnoreFilesSync = /* @__PURE__ */ __name((patterns, options) => {
      const { cwd, suppressErrors, deep, ignore } = normalizeOptions(options);
      const paths = import_fast_glob.default.sync(patterns, __spreadValues({
        cwd,
        suppressErrors,
        deep,
        ignore
      }, ignoreFilesGlobOptions));
      const files = paths.map((filePath) => ({
        filePath,
        content: import_node_fs.default.readFileSync(filePath, "utf8")
      }));
      return getIsIgnoredPredicate(files, cwd);
    }, "isIgnoredByIgnoreFilesSync");
    var isGitIgnored = /* @__PURE__ */ __name((options) => isIgnoredByIgnoreFiles(GITIGNORE_FILES_PATTERN, options), "isGitIgnored");
    var isGitIgnoredSync = /* @__PURE__ */ __name((options) => isIgnoredByIgnoreFilesSync(GITIGNORE_FILES_PATTERN, options), "isGitIgnoredSync");
    var assertPatternsInput = /* @__PURE__ */ __name((patterns) => {
      if (patterns.some((pattern) => typeof pattern !== "string")) {
        throw new TypeError("Patterns must be a string or an array of strings");
      }
    }, "assertPatternsInput");
    var normalizePathForDirectoryGlob = /* @__PURE__ */ __name((filePath, cwd) => {
      const path22 = isNegativePattern(filePath) ? filePath.slice(1) : filePath;
      return import_node_path22.default.isAbsolute(path22) ? path22 : import_node_path22.default.join(cwd, path22);
    }, "normalizePathForDirectoryGlob");
    var getDirectoryGlob = /* @__PURE__ */ __name(({ directoryPath, files, extensions }) => {
      const extensionGlob = (extensions == null ? void 0 : extensions.length) > 0 ? `.${extensions.length > 1 ? `{${extensions.join(",")}}` : extensions[0]}` : "";
      return files ? files.map((file) => import_node_path22.default.posix.join(directoryPath, `**/${import_node_path22.default.extname(file) ? file : `${file}${extensionGlob}`}`)) : [import_node_path22.default.posix.join(directoryPath, `**${extensionGlob ? `/*${extensionGlob}` : ""}`)];
    }, "getDirectoryGlob");
    var directoryToGlob = /* @__PURE__ */ __name((_0, ..._1) => __async(void 0, [_0, ..._1], function* (directoryPaths, {
      cwd = import_node_process2.default.cwd(),
      files,
      extensions
    } = {}) {
      const globs = yield Promise.all(
        directoryPaths.map((directoryPath) => __async(void 0, null, function* () {
          return (yield isDirectory(normalizePathForDirectoryGlob(directoryPath, cwd))) ? getDirectoryGlob({ directoryPath, files, extensions }) : directoryPath;
        }))
      );
      return globs.flat();
    }), "directoryToGlob");
    var directoryToGlobSync = /* @__PURE__ */ __name((directoryPaths, {
      cwd = import_node_process2.default.cwd(),
      files,
      extensions
    } = {}) => directoryPaths.flatMap((directoryPath) => isDirectorySync(normalizePathForDirectoryGlob(directoryPath, cwd)) ? getDirectoryGlob({ directoryPath, files, extensions }) : directoryPath), "directoryToGlobSync");
    var toPatternsArray = /* @__PURE__ */ __name((patterns) => {
      patterns = [...new Set([patterns].flat())];
      assertPatternsInput(patterns);
      return patterns;
    }, "toPatternsArray");
    var checkCwdOption = /* @__PURE__ */ __name((cwd) => {
      if (!cwd) {
        return;
      }
      let stat;
      try {
        stat = import_node_fs2.default.statSync(cwd);
      } catch (e) {
        return;
      }
      if (!stat.isDirectory()) {
        throw new Error("The `cwd` option must be a path to a directory");
      }
    }, "checkCwdOption");
    var normalizeOptions2 = /* @__PURE__ */ __name((options = {}) => {
      var _a2, _b2;
      options = __spreadProps(__spreadValues({}, options), {
        ignore: (_a2 = options.ignore) != null ? _a2 : [],
        expandDirectories: (_b2 = options.expandDirectories) != null ? _b2 : true,
        cwd: toPath(options.cwd)
      });
      checkCwdOption(options.cwd);
      return options;
    }, "normalizeOptions2");
    var normalizeArguments = /* @__PURE__ */ __name((function_) => (patterns, options) => __async(void 0, null, function* () {
      return function_(toPatternsArray(patterns), normalizeOptions2(options));
    }), "normalizeArguments");
    var normalizeArgumentsSync = /* @__PURE__ */ __name((function_) => (patterns, options) => function_(toPatternsArray(patterns), normalizeOptions2(options)), "normalizeArgumentsSync");
    var getIgnoreFilesPatterns = /* @__PURE__ */ __name((options) => {
      const { ignoreFiles, gitignore } = options;
      const patterns = ignoreFiles ? toPatternsArray(ignoreFiles) : [];
      if (gitignore) {
        patterns.push(GITIGNORE_FILES_PATTERN);
      }
      return patterns;
    }, "getIgnoreFilesPatterns");
    var getFilter = /* @__PURE__ */ __name((options) => __async(void 0, null, function* () {
      const ignoreFilesPatterns = getIgnoreFilesPatterns(options);
      return createFilterFunction(
        ignoreFilesPatterns.length > 0 && (yield isIgnoredByIgnoreFiles(ignoreFilesPatterns, options))
      );
    }), "getFilter");
    var getFilterSync = /* @__PURE__ */ __name((options) => {
      const ignoreFilesPatterns = getIgnoreFilesPatterns(options);
      return createFilterFunction(
        ignoreFilesPatterns.length > 0 && isIgnoredByIgnoreFilesSync(ignoreFilesPatterns, options)
      );
    }, "getFilterSync");
    var createFilterFunction = /* @__PURE__ */ __name((isIgnored) => {
      const seen = /* @__PURE__ */ new Set();
      return (fastGlobResult) => {
        var _a2;
        const pathKey = import_node_path22.default.normalize((_a2 = fastGlobResult.path) != null ? _a2 : fastGlobResult);
        if (seen.has(pathKey) || isIgnored && isIgnored(pathKey)) {
          return false;
        }
        seen.add(pathKey);
        return true;
      };
    }, "createFilterFunction");
    var unionFastGlobResults = /* @__PURE__ */ __name((results, filter) => results.flat().filter((fastGlobResult) => filter(fastGlobResult)), "unionFastGlobResults");
    var convertNegativePatterns = /* @__PURE__ */ __name((patterns, options) => {
      const tasks = [];
      while (patterns.length > 0) {
        const index = patterns.findIndex((pattern) => isNegativePattern(pattern));
        if (index === -1) {
          tasks.push({ patterns, options });
          break;
        }
        const ignorePattern = patterns[index].slice(1);
        for (const task of tasks) {
          task.options.ignore.push(ignorePattern);
        }
        if (index !== 0) {
          tasks.push({
            patterns: patterns.slice(0, index),
            options: __spreadProps(__spreadValues({}, options), {
              ignore: [
                ...options.ignore,
                ignorePattern
              ]
            })
          });
        }
        patterns = patterns.slice(index + 1);
      }
      return tasks;
    }, "convertNegativePatterns");
    var normalizeExpandDirectoriesOption = /* @__PURE__ */ __name((options, cwd) => __spreadValues(__spreadValues({}, cwd ? { cwd } : {}), Array.isArray(options) ? { files: options } : options), "normalizeExpandDirectoriesOption");
    var generateTasks = /* @__PURE__ */ __name((patterns, options) => __async(void 0, null, function* () {
      const globTasks = convertNegativePatterns(patterns, options);
      const { cwd, expandDirectories } = options;
      if (!expandDirectories) {
        return globTasks;
      }
      const directoryToGlobOptions = normalizeExpandDirectoriesOption(expandDirectories, cwd);
      return Promise.all(
        globTasks.map((task) => __async(void 0, null, function* () {
          let { patterns: patterns2, options: options2 } = task;
          [
            patterns2,
            options2.ignore
          ] = yield Promise.all([
            directoryToGlob(patterns2, directoryToGlobOptions),
            directoryToGlob(options2.ignore, { cwd })
          ]);
          return { patterns: patterns2, options: options2 };
        }))
      );
    }), "generateTasks");
    var generateTasksSync = /* @__PURE__ */ __name((patterns, options) => {
      const globTasks = convertNegativePatterns(patterns, options);
      const { cwd, expandDirectories } = options;
      if (!expandDirectories) {
        return globTasks;
      }
      const directoryToGlobSyncOptions = normalizeExpandDirectoriesOption(expandDirectories, cwd);
      return globTasks.map((task) => {
        let { patterns: patterns2, options: options2 } = task;
        patterns2 = directoryToGlobSync(patterns2, directoryToGlobSyncOptions);
        options2.ignore = directoryToGlobSync(options2.ignore, { cwd });
        return { patterns: patterns2, options: options2 };
      });
    }, "generateTasksSync");
    var globby2 = normalizeArguments((patterns, options) => __async(void 0, null, function* () {
      const [
        tasks,
        filter
      ] = yield Promise.all([
        generateTasks(patterns, options),
        getFilter(options)
      ]);
      const results = yield Promise.all(tasks.map((task) => (0, import_fast_glob2.default)(task.patterns, task.options)));
      return unionFastGlobResults(results, filter);
    }));
    var globbySync = normalizeArgumentsSync((patterns, options) => {
      const tasks = generateTasksSync(patterns, options);
      const filter = getFilterSync(options);
      const results = tasks.map((task) => import_fast_glob2.default.sync(task.patterns, task.options));
      return unionFastGlobResults(results, filter);
    });
    var globbyStream = normalizeArgumentsSync((patterns, options) => {
      const tasks = generateTasksSync(patterns, options);
      const filter = getFilterSync(options);
      const streams = tasks.map((task) => import_fast_glob2.default.stream(task.patterns, task.options));
      const stream = mergeStreams(streams).filter((fastGlobResult) => filter(fastGlobResult));
      return stream;
    });
    var isDynamicPattern = normalizeArgumentsSync(
      (patterns, options) => patterns.some((pattern) => import_fast_glob2.default.isDynamicPattern(pattern, options))
    );
    var generateGlobTasks = normalizeArguments(generateTasks);
    var generateGlobTasksSync = normalizeArgumentsSync(generateTasksSync);
    var { convertPathToPattern } = import_fast_glob2.default;
    var yaml = __toESM2(require_dist(), 1);
    var _fs = __toESM2(require_lib6(), 1);
    var import_node_abort_controller = __toESM2(require_node_abort_controller(), 1);
    var cp = __toESM2(__require("child_process"), 1);
    var import_node_process3 = __toESM2(__require("process"), 1);
    var import_node_events2 = __toESM2(__require("events"), 1);
    var import_node_stream3 = __require("stream");
    var import_node_stream2 = __require("stream");
    var noop2 = /* @__PURE__ */ __name(() => {
    }, "noop2");
    var isPromiseLike = /* @__PURE__ */ __name((value) => typeof (value == null ? void 0 : value.then) === "function", "isPromiseLike");
    var assign = /* @__PURE__ */ __name((target, ...extras) => Object.defineProperties(target, extras.reduce((m2, extra) => __spreadValues(__spreadValues({}, m2), Object.fromEntries(Object.entries(Object.getOwnPropertyDescriptors(extra)).filter(([, v2]) => !Object.prototype.hasOwnProperty.call(v2, "value") || v2.value !== void 0))), {})), "assign");
    var buildCmd = /* @__PURE__ */ __name((quote2, pieces, args, subs = substitute) => {
      if (args.some(isPromiseLike))
        return Promise.all(args).then((args2) => buildCmd(quote2, pieces, args2));
      let cmd = pieces[0], i = 0;
      while (i < args.length) {
        const s2 = Array.isArray(args[i]) ? args[i].map((x2) => quote2(subs(x2))).join(" ") : quote2(subs(args[i]));
        cmd += s2 + pieces[++i];
      }
      return cmd;
    }, "buildCmd");
    var substitute = /* @__PURE__ */ __name((arg) => typeof (arg == null ? void 0 : arg.stdout) === "string" ? arg.stdout.replace(/\n$/, "") : `${arg}`, "substitute");
    var normalizeCtx = /* @__PURE__ */ __name((...ctxs) => assign({
      id: Math.random().toString(36).slice(2),
      cmd: "",
      cwd: import_node_process3.default.cwd(),
      sync: false,
      args: [],
      input: null,
      env: import_node_process3.default.env,
      ee: new import_node_events2.default(),
      ac: global.AbortController && new AbortController(),
      get signal() {
        var _a2;
        return (_a2 = this.ac) == null ? void 0 : _a2.signal;
      },
      on: {},
      detached: import_node_process3.default.platform !== "win32",
      shell: true,
      spawn: cp.spawn,
      spawnSync: cp.spawnSync,
      spawnOpts: {},
      callback: noop2,
      stdin: new VoidWritable(),
      stdout: new VoidWritable(),
      stderr: new VoidWritable(),
      stdio: ["pipe", "pipe", "pipe"],
      run: setImmediate
    }, ...ctxs), "normalizeCtx");
    var processInput = /* @__PURE__ */ __name((child, input) => {
      if (input && child.stdin && !child.stdin.destroyed) {
        if (input instanceof import_node_stream3.Stream) {
          input.pipe(child.stdin);
        } else {
          child.stdin.write(input);
          child.stdin.end();
        }
      }
    }, "processInput");
    var VoidWritable = class extends import_node_stream3.Transform {
      static {
        __name(this, "VoidWritable");
      }
      _transform(chunk, _, cb) {
        this.emit("data", chunk);
        cb();
      }
    };
    var buildSpawnOpts = /* @__PURE__ */ __name(({ spawnOpts, stdio, cwd, shell, input, env: env2, detached, signal }) => __spreadProps(__spreadValues({}, spawnOpts), {
      env: env2,
      cwd,
      stdio,
      shell,
      input,
      windowsHide: true,
      detached,
      signal
    }), "buildSpawnOpts");
    var attachListeners = /* @__PURE__ */ __name((ee2, on2 = {}) => {
      for (const [name, listener] of Object.entries(on2)) {
        ee2.on(name, listener);
      }
    }, "attachListeners");
    var invoke = /* @__PURE__ */ __name((c) => {
      const now = Date.now();
      const stdio = [c.stdin, c.stdout, c.stderr];
      try {
        if (c.sync) {
          attachListeners(c.ee, c.on);
          const opts = buildSpawnOpts(c);
          const result = c.spawnSync(c.cmd, c.args, opts);
          c.ee.emit("start", result, c);
          if (result.stdout.length > 0) {
            c.stdout.write(result.stdout);
            c.ee.emit("stdout", result.stdout, c);
          }
          if (result.stderr.length > 0) {
            c.stderr.write(result.stderr);
            c.ee.emit("stderr", result.stderr, c);
          }
          c.callback(null, c.fulfilled = __spreadProps(__spreadValues({}, result), {
            stdout: result.stdout.toString(),
            stderr: result.stderr.toString(),
            stdio,
            get stdall() {
              return this.stdout + this.stderr;
            },
            duration: Date.now() - now,
            ctx: c
          }));
          c.ee.emit("end", c.fulfilled, c);
        } else {
          c.run(() => {
            var _a2, _b2, _c;
            attachListeners(c.ee, c.on);
            let error = null;
            const opts = buildSpawnOpts(c);
            const stderr = [];
            const stdout = [];
            const stdall = [];
            const child = c.spawn(c.cmd, c.args, opts);
            c.child = child;
            c.ee.emit("start", child, c);
            (_a2 = opts.signal) == null ? void 0 : _a2.addEventListener("abort", (event) => {
              if (opts.detached && child.pid) {
                try {
                  import_node_process3.default.kill(-child.pid);
                } catch (e) {
                  child.kill();
                }
              }
              c.ee.emit("abort", event, c);
            });
            processInput(child, c.input || c.stdin);
            (_b2 = child.stdout) == null ? void 0 : _b2.pipe(c.stdout).on("data", (d2) => {
              stdout.push(d2);
              stdall.push(d2);
              c.ee.emit("stdout", d2, c);
            });
            (_c = child.stderr) == null ? void 0 : _c.pipe(c.stderr).on("data", (d2) => {
              stderr.push(d2);
              stdall.push(d2);
              c.ee.emit("stderr", d2, c);
            });
            child.on("error", (e) => {
              error = e;
              c.ee.emit("err", error, c);
            }).on("close", (status, signal) => {
              c.callback(error, c.fulfilled = {
                error,
                status,
                signal,
                stdout: stdout.join(""),
                stderr: stderr.join(""),
                stdall: stdall.join(""),
                stdio: [c.stdin, c.stdout, c.stderr],
                duration: Date.now() - now,
                ctx: c
              });
              c.ee.emit("end", c.fulfilled, c);
            });
          }, c);
        }
      } catch (error) {
        c.callback(
          error,
          c.fulfilled = {
            error,
            status: null,
            signal: null,
            stdout: "",
            stderr: "",
            stdall: "",
            stdio,
            duration: Date.now() - now,
            ctx: c
          }
        );
        c.ee.emit("err", error, c);
        c.ee.emit("end", c.fulfilled, c);
      }
      return c;
    }, "invoke");
    var exec = /* @__PURE__ */ __name((ctx) => invoke(normalizeCtx(ctx)), "exec");
    var import_create_require = __toESM2(require_create_require(), 1);
    init_node();
    init_node();
    var import_node_http3 = __require("http");
    var import_node_https3 = __require("https");
    var import_node_zlib3 = __require("zlib");
    var import_node_stream6 = __require("stream");
    var import_node_buffer3 = __require("buffer");
    var import_node_util3 = __require("util");
    init_node_fetch_native_1a4a356d();
    var import_node_url42 = __require("url");
    var import_node_net3 = __require("net");
    var import_node_fs5 = __require("fs");
    var import_node_path52 = __require("path");
    var a = Object.defineProperty;
    var t3 = /* @__PURE__ */ __name((e, r) => a(e, "name", { value: r, configurable: true }), "t3");
    var f2 = Object.defineProperty;
    var g2 = t3((e, r) => f2(e, "name", { value: r, configurable: true }), "e");
    var _a;
    var _b;
    var o2 = !!((_b = (_a = globalThis.process) == null ? void 0 : _a.env) == null ? void 0 : _b.FORCE_NODE_FETCH);
    function l() {
      return !o2 && globalThis.fetch ? globalThis.fetch : Fi;
    }
    __name(l, "l");
    t3(l, "p"), g2(l, "_getFetch");
    var s = l();
    var T = !o2 && globalThis.Blob || ut;
    var R2 = !o2 && globalThis.File || On;
    var u = !o2 && globalThis.FormData || br;
    var d = !o2 && globalThis.Headers || ye;
    var $3 = !o2 && globalThis.Request || dt;
    var C2 = !o2 && globalThis.Response || le;
    var A = !o2 && globalThis.AbortController || Mn;
    var importRequireRe = /((\.{3}|\s|[!%&(*+,/:;<=>?[^{|}~-]|^)(require\s?\(\s?|import\s?\(?\s?)|\sfrom)\s?$/;
    var isDep = /* @__PURE__ */ __name((proposal, re) => !!proposal && re.test(proposal), "isDep");
    var isSpace = /* @__PURE__ */ __name((value) => value === " " || value === "\n" || value === "	", "isSpace");
    var normalizeOpts = /* @__PURE__ */ __name((opts) => __spreadValues({
      bufferSize: 1e3,
      comments: false,
      re: importRequireRe,
      offset: 19
    }, opts), "normalizeOpts");
    var depseekSync = /* @__PURE__ */ __name((input, opts) => extract(readify(input.toString()), opts), "depseekSync");
    var readify = /* @__PURE__ */ __name((input) => {
      const chunks = [null, input];
      return { read: /* @__PURE__ */ __name(() => chunks.pop(), "read") };
    }, "readify");
    var extract = /* @__PURE__ */ __name((readable, _opts) => {
      const { re, comments, bufferSize, offset } = normalizeOpts(_opts);
      const refs = [];
      const pushRef = /* @__PURE__ */ __name((type, value, index) => refs.push({ type, value, index }), "pushRef");
      let i = 0;
      let prev = "";
      let chunk;
      let c = null;
      let q = null;
      let token = "";
      let strLiteral = "";
      let commentBlock = "";
      let commentValue = "";
      while (null !== (chunk = readable.read(bufferSize))) {
        const len = chunk.length;
        let j = 0;
        while (j < len) {
          const char = chunk[j];
          if (c === q) {
            if (isSpace(char)) {
              if (!isSpace(prev))
                token += char;
            } else if (char === '"' || char === "'" || char === "`")
              q = char;
            else if (prev === "/" && (char === "/" || char === "*"))
              c = char;
            else
              token += char;
          } else if (c === null) {
            if (q === char && prev !== "\\") {
              if (strLiteral && isDep(token.slice(-offset), re))
                pushRef("dep", strLiteral, i - strLiteral.length);
              strLiteral = "";
              token = "";
              q = null;
            } else
              strLiteral += char;
          } else if (q === null) {
            if (c === "/" && char === "\n" || c === "*" && prev === "*" && char === "/") {
              commentValue = c === "*" ? commentBlock.slice(0, -1) : commentBlock;
              if (commentValue && comments)
                pushRef("comment", commentValue, i - commentValue.length);
              commentBlock = "";
              token = token.slice(0, -1);
              c = null;
            } else if (comments)
              commentBlock += char;
          }
          prev = char;
          i++;
          j++;
        }
      }
      return refs;
    }, "extract");
    var ANSI_BACKGROUND_OFFSET = 10;
    var wrapAnsi16 = /* @__PURE__ */ __name((offset = 0) => (code) => `\x1B[${code + offset}m`, "wrapAnsi16");
    var wrapAnsi256 = /* @__PURE__ */ __name((offset = 0) => (code) => `\x1B[${38 + offset};5;${code}m`, "wrapAnsi256");
    var wrapAnsi16m = /* @__PURE__ */ __name((offset = 0) => (red, green, blue) => `\x1B[${38 + offset};2;${red};${green};${blue}m`, "wrapAnsi16m");
    var styles = {
      modifier: {
        reset: [0, 0],
        // 21 isn't widely supported and 22 does the same thing
        bold: [1, 22],
        dim: [2, 22],
        italic: [3, 23],
        underline: [4, 24],
        overline: [53, 55],
        inverse: [7, 27],
        hidden: [8, 28],
        strikethrough: [9, 29]
      },
      color: {
        black: [30, 39],
        red: [31, 39],
        green: [32, 39],
        yellow: [33, 39],
        blue: [34, 39],
        magenta: [35, 39],
        cyan: [36, 39],
        white: [37, 39],
        // Bright color
        blackBright: [90, 39],
        gray: [90, 39],
        // Alias of `blackBright`
        grey: [90, 39],
        // Alias of `blackBright`
        redBright: [91, 39],
        greenBright: [92, 39],
        yellowBright: [93, 39],
        blueBright: [94, 39],
        magentaBright: [95, 39],
        cyanBright: [96, 39],
        whiteBright: [97, 39]
      },
      bgColor: {
        bgBlack: [40, 49],
        bgRed: [41, 49],
        bgGreen: [42, 49],
        bgYellow: [43, 49],
        bgBlue: [44, 49],
        bgMagenta: [45, 49],
        bgCyan: [46, 49],
        bgWhite: [47, 49],
        // Bright color
        bgBlackBright: [100, 49],
        bgGray: [100, 49],
        // Alias of `bgBlackBright`
        bgGrey: [100, 49],
        // Alias of `bgBlackBright`
        bgRedBright: [101, 49],
        bgGreenBright: [102, 49],
        bgYellowBright: [103, 49],
        bgBlueBright: [104, 49],
        bgMagentaBright: [105, 49],
        bgCyanBright: [106, 49],
        bgWhiteBright: [107, 49]
      }
    };
    var modifierNames = Object.keys(styles.modifier);
    var foregroundColorNames = Object.keys(styles.color);
    var backgroundColorNames = Object.keys(styles.bgColor);
    var colorNames = [...foregroundColorNames, ...backgroundColorNames];
    function assembleStyles() {
      const codes = /* @__PURE__ */ new Map();
      for (const [groupName, group] of Object.entries(styles)) {
        for (const [styleName, style] of Object.entries(group)) {
          styles[styleName] = {
            open: `\x1B[${style[0]}m`,
            close: `\x1B[${style[1]}m`
          };
          group[styleName] = styles[styleName];
          codes.set(style[0], style[1]);
        }
        Object.defineProperty(styles, groupName, {
          value: group,
          enumerable: false
        });
      }
      Object.defineProperty(styles, "codes", {
        value: codes,
        enumerable: false
      });
      styles.color.close = "\x1B[39m";
      styles.bgColor.close = "\x1B[49m";
      styles.color.ansi = wrapAnsi16();
      styles.color.ansi256 = wrapAnsi256();
      styles.color.ansi16m = wrapAnsi16m();
      styles.bgColor.ansi = wrapAnsi16(ANSI_BACKGROUND_OFFSET);
      styles.bgColor.ansi256 = wrapAnsi256(ANSI_BACKGROUND_OFFSET);
      styles.bgColor.ansi16m = wrapAnsi16m(ANSI_BACKGROUND_OFFSET);
      Object.defineProperties(styles, {
        rgbToAnsi256: {
          value(red, green, blue) {
            if (red === green && green === blue) {
              if (red < 8) {
                return 16;
              }
              if (red > 248) {
                return 231;
              }
              return Math.round((red - 8) / 247 * 24) + 232;
            }
            return 16 + 36 * Math.round(red / 255 * 5) + 6 * Math.round(green / 255 * 5) + Math.round(blue / 255 * 5);
          },
          enumerable: false
        },
        hexToRgb: {
          value(hex) {
            const matches = /[a-f\d]{6}|[a-f\d]{3}/i.exec(hex.toString(16));
            if (!matches) {
              return [0, 0, 0];
            }
            let [colorString] = matches;
            if (colorString.length === 3) {
              colorString = [...colorString].map((character) => character + character).join("");
            }
            const integer = Number.parseInt(colorString, 16);
            return [
              /* eslint-disable no-bitwise */
              integer >> 16 & 255,
              integer >> 8 & 255,
              integer & 255
              /* eslint-enable no-bitwise */
            ];
          },
          enumerable: false
        },
        hexToAnsi256: {
          value: /* @__PURE__ */ __name((hex) => styles.rgbToAnsi256(...styles.hexToRgb(hex)), "value"),
          enumerable: false
        },
        ansi256ToAnsi: {
          value(code) {
            if (code < 8) {
              return 30 + code;
            }
            if (code < 16) {
              return 90 + (code - 8);
            }
            let red;
            let green;
            let blue;
            if (code >= 232) {
              red = ((code - 232) * 10 + 8) / 255;
              green = red;
              blue = red;
            } else {
              code -= 16;
              const remainder = code % 36;
              red = Math.floor(code / 36) / 5;
              green = Math.floor(remainder / 6) / 5;
              blue = remainder % 6 / 5;
            }
            const value = Math.max(red, green, blue) * 2;
            if (value === 0) {
              return 30;
            }
            let result = 30 + (Math.round(blue) << 2 | Math.round(green) << 1 | Math.round(red));
            if (value === 2) {
              result += 60;
            }
            return result;
          },
          enumerable: false
        },
        rgbToAnsi: {
          value: /* @__PURE__ */ __name((red, green, blue) => styles.ansi256ToAnsi(styles.rgbToAnsi256(red, green, blue)), "value"),
          enumerable: false
        },
        hexToAnsi: {
          value: /* @__PURE__ */ __name((hex) => styles.ansi256ToAnsi(styles.hexToAnsi256(hex)), "value"),
          enumerable: false
        }
      });
      return styles;
    }
    __name(assembleStyles, "assembleStyles");
    var ansiStyles = assembleStyles();
    var ansi_styles_default = ansiStyles;
    var import_node_process4 = __toESM2(__require("process"), 1);
    var import_node_os = __toESM2(__require("os"), 1);
    var import_node_tty = __toESM2(__require("tty"), 1);
    function hasFlag(flag, argv = globalThis.Deno ? globalThis.Deno.args : import_node_process4.default.argv) {
      const prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
      const position = argv.indexOf(prefix + flag);
      const terminatorPosition = argv.indexOf("--");
      return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
    }
    __name(hasFlag, "hasFlag");
    var { env } = import_node_process4.default;
    var flagForceColor;
    if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false") || hasFlag("color=never")) {
      flagForceColor = 0;
    } else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
      flagForceColor = 1;
    }
    function envForceColor() {
      if ("FORCE_COLOR" in env) {
        if (env.FORCE_COLOR === "true") {
          return 1;
        }
        if (env.FORCE_COLOR === "false") {
          return 0;
        }
        return env.FORCE_COLOR.length === 0 ? 1 : Math.min(Number.parseInt(env.FORCE_COLOR, 10), 3);
      }
    }
    __name(envForceColor, "envForceColor");
    function translateLevel(level) {
      if (level === 0) {
        return false;
      }
      return {
        level,
        hasBasic: true,
        has256: level >= 2,
        has16m: level >= 3
      };
    }
    __name(translateLevel, "translateLevel");
    function _supportsColor(haveStream, { streamIsTTY, sniffFlags = true } = {}) {
      const noFlagForceColor = envForceColor();
      if (noFlagForceColor !== void 0) {
        flagForceColor = noFlagForceColor;
      }
      const forceColor = sniffFlags ? flagForceColor : noFlagForceColor;
      if (forceColor === 0) {
        return 0;
      }
      if (sniffFlags) {
        if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
          return 3;
        }
        if (hasFlag("color=256")) {
          return 2;
        }
      }
      if ("TF_BUILD" in env && "AGENT_NAME" in env) {
        return 1;
      }
      if (haveStream && !streamIsTTY && forceColor === void 0) {
        return 0;
      }
      const min = forceColor || 0;
      if (env.TERM === "dumb") {
        return min;
      }
      if (import_node_process4.default.platform === "win32") {
        const osRelease = import_node_os.default.release().split(".");
        if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
          return Number(osRelease[2]) >= 14931 ? 3 : 2;
        }
        return 1;
      }
      if ("CI" in env) {
        if ("GITHUB_ACTIONS" in env || "GITEA_ACTIONS" in env) {
          return 3;
        }
        if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "BUILDKITE", "DRONE"].some((sign) => sign in env) || env.CI_NAME === "codeship") {
          return 1;
        }
        return min;
      }
      if ("TEAMCITY_VERSION" in env) {
        return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
      }
      if (env.COLORTERM === "truecolor") {
        return 3;
      }
      if (env.TERM === "xterm-kitty") {
        return 3;
      }
      if ("TERM_PROGRAM" in env) {
        const version2 = Number.parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
        switch (env.TERM_PROGRAM) {
          case "iTerm.app": {
            return version2 >= 3 ? 3 : 2;
          }
          case "Apple_Terminal": {
            return 2;
          }
        }
      }
      if (/-256(color)?$/i.test(env.TERM)) {
        return 2;
      }
      if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
        return 1;
      }
      if ("COLORTERM" in env) {
        return 1;
      }
      return min;
    }
    __name(_supportsColor, "_supportsColor");
    function createSupportsColor(stream, options = {}) {
      const level = _supportsColor(stream, __spreadValues({
        streamIsTTY: stream && stream.isTTY
      }, options));
      return translateLevel(level);
    }
    __name(createSupportsColor, "createSupportsColor");
    var supportsColor = {
      stdout: createSupportsColor({ isTTY: import_node_tty.default.isatty(1) }),
      stderr: createSupportsColor({ isTTY: import_node_tty.default.isatty(2) })
    };
    var supports_color_default = supportsColor;
    function stringReplaceAll(string, substring, replacer) {
      let index = string.indexOf(substring);
      if (index === -1) {
        return string;
      }
      const substringLength = substring.length;
      let endIndex = 0;
      let returnValue = "";
      do {
        returnValue += string.slice(endIndex, index) + substring + replacer;
        endIndex = index + substringLength;
        index = string.indexOf(substring, endIndex);
      } while (index !== -1);
      returnValue += string.slice(endIndex);
      return returnValue;
    }
    __name(stringReplaceAll, "stringReplaceAll");
    function stringEncaseCRLFWithFirstIndex(string, prefix, postfix, index) {
      let endIndex = 0;
      let returnValue = "";
      do {
        const gotCR = string[index - 1] === "\r";
        returnValue += string.slice(endIndex, gotCR ? index - 1 : index) + prefix + (gotCR ? "\r\n" : "\n") + postfix;
        endIndex = index + 1;
        index = string.indexOf("\n", endIndex);
      } while (index !== -1);
      returnValue += string.slice(endIndex);
      return returnValue;
    }
    __name(stringEncaseCRLFWithFirstIndex, "stringEncaseCRLFWithFirstIndex");
    var { stdout: stdoutColor, stderr: stderrColor } = supports_color_default;
    var GENERATOR = Symbol("GENERATOR");
    var STYLER = Symbol("STYLER");
    var IS_EMPTY = Symbol("IS_EMPTY");
    var levelMapping = [
      "ansi",
      "ansi",
      "ansi256",
      "ansi16m"
    ];
    var styles2 = /* @__PURE__ */ Object.create(null);
    var applyOptions = /* @__PURE__ */ __name((object, options = {}) => {
      if (options.level && !(Number.isInteger(options.level) && options.level >= 0 && options.level <= 3)) {
        throw new Error("The `level` option should be an integer from 0 to 3");
      }
      const colorLevel = stdoutColor ? stdoutColor.level : 0;
      object.level = options.level === void 0 ? colorLevel : options.level;
    }, "applyOptions");
    var chalkFactory = /* @__PURE__ */ __name((options) => {
      const chalk22 = /* @__PURE__ */ __name((...strings) => strings.join(" "), "chalk2");
      applyOptions(chalk22, options);
      Object.setPrototypeOf(chalk22, createChalk.prototype);
      return chalk22;
    }, "chalkFactory");
    function createChalk(options) {
      return chalkFactory(options);
    }
    __name(createChalk, "createChalk");
    Object.setPrototypeOf(createChalk.prototype, Function.prototype);
    for (const [styleName, style] of Object.entries(ansi_styles_default)) {
      styles2[styleName] = {
        get() {
          const builder = createBuilder(this, createStyler(style.open, style.close, this[STYLER]), this[IS_EMPTY]);
          Object.defineProperty(this, styleName, { value: builder });
          return builder;
        }
      };
    }
    styles2.visible = {
      get() {
        const builder = createBuilder(this, this[STYLER], true);
        Object.defineProperty(this, "visible", { value: builder });
        return builder;
      }
    };
    var getModelAnsi = /* @__PURE__ */ __name((model, level, type, ...arguments_) => {
      if (model === "rgb") {
        if (level === "ansi16m") {
          return ansi_styles_default[type].ansi16m(...arguments_);
        }
        if (level === "ansi256") {
          return ansi_styles_default[type].ansi256(ansi_styles_default.rgbToAnsi256(...arguments_));
        }
        return ansi_styles_default[type].ansi(ansi_styles_default.rgbToAnsi(...arguments_));
      }
      if (model === "hex") {
        return getModelAnsi("rgb", level, type, ...ansi_styles_default.hexToRgb(...arguments_));
      }
      return ansi_styles_default[type][model](...arguments_);
    }, "getModelAnsi");
    var usedModels = ["rgb", "hex", "ansi256"];
    for (const model of usedModels) {
      styles2[model] = {
        get() {
          const { level } = this;
          return function(...arguments_) {
            const styler = createStyler(getModelAnsi(model, levelMapping[level], "color", ...arguments_), ansi_styles_default.color.close, this[STYLER]);
            return createBuilder(this, styler, this[IS_EMPTY]);
          };
        }
      };
      const bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
      styles2[bgModel] = {
        get() {
          const { level } = this;
          return function(...arguments_) {
            const styler = createStyler(getModelAnsi(model, levelMapping[level], "bgColor", ...arguments_), ansi_styles_default.bgColor.close, this[STYLER]);
            return createBuilder(this, styler, this[IS_EMPTY]);
          };
        }
      };
    }
    var proto = Object.defineProperties(() => {
    }, __spreadProps(__spreadValues({}, styles2), {
      level: {
        enumerable: true,
        get() {
          return this[GENERATOR].level;
        },
        set(level) {
          this[GENERATOR].level = level;
        }
      }
    }));
    var createStyler = /* @__PURE__ */ __name((open, close, parent) => {
      let openAll;
      let closeAll;
      if (parent === void 0) {
        openAll = open;
        closeAll = close;
      } else {
        openAll = parent.openAll + open;
        closeAll = close + parent.closeAll;
      }
      return {
        open,
        close,
        openAll,
        closeAll,
        parent
      };
    }, "createStyler");
    var createBuilder = /* @__PURE__ */ __name((self2, _styler, _isEmpty) => {
      const builder = /* @__PURE__ */ __name((...arguments_) => applyStyle(builder, arguments_.length === 1 ? "" + arguments_[0] : arguments_.join(" ")), "builder");
      Object.setPrototypeOf(builder, proto);
      builder[GENERATOR] = self2;
      builder[STYLER] = _styler;
      builder[IS_EMPTY] = _isEmpty;
      return builder;
    }, "createBuilder");
    var applyStyle = /* @__PURE__ */ __name((self2, string) => {
      if (self2.level <= 0 || !string) {
        return self2[IS_EMPTY] ? "" : string;
      }
      let styler = self2[STYLER];
      if (styler === void 0) {
        return string;
      }
      const { openAll, closeAll } = styler;
      if (string.includes("\x1B")) {
        while (styler !== void 0) {
          string = stringReplaceAll(string, styler.close, styler.open);
          styler = styler.parent;
        }
      }
      const lfIndex = string.indexOf("\n");
      if (lfIndex !== -1) {
        string = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);
      }
      return openAll + string + closeAll;
    }, "applyStyle");
    Object.defineProperties(createChalk.prototype, styles2);
    var chalk2 = createChalk();
    var chalkStderr = createChalk({ level: stderrColor ? stderrColor.level : 0 });
    var source_default = chalk2;
    var import_which = __toESM2(require_lib22(), 1);
    var import_minimist = __toESM2(require_minimist(), 1);
    var import_node_process6 = __toESM2(__require("process"), 1);
    var import_node_fs6 = __toESM2(__require("fs"), 1);
    var EOL = /\r?\n|\r|\n/;
    var parseLine = /* @__PURE__ */ __name((line, sep = " ") => {
      const result = {
        spaces: [],
        words: []
      };
      const capture = /* @__PURE__ */ __name(() => {
        if (word) {
          result.words.push({
            s: s2,
            e: s2 + word.length - 1,
            w: word
          });
          word = "";
          s2 = -1;
        }
      }, "capture");
      let bb;
      let word = "";
      let s2 = -1;
      for (const i in [...line]) {
        const prev = line[+i - 1];
        const char = line[i];
        if (bb) {
          word += char;
          if (char === bb && prev !== "\\") {
            bb = void 0;
          }
          continue;
        }
        if (char === sep) {
          result.spaces.push(+i);
          capture();
          continue;
        }
        if (s2 === -1)
          s2 = +i;
        if (char === '"' || char === "'")
          bb = char;
        word += char;
      }
      capture();
      return result;
    }, "parseLine");
    var parseLines = /* @__PURE__ */ __name((input, sep) => input.split(EOL).map((l2) => parseLine(l2, sep)), "parseLines");
    var countWordsByIndex = /* @__PURE__ */ __name(({ words }, index) => words.filter(({ e }) => e < index).length, "countWordsByIndex");
    var getBorders = /* @__PURE__ */ __name((lines) => lines[0].spaces.reduce((m2, i) => {
      const c = countWordsByIndex(lines[0], i);
      if (lines.every((l2) => l2.spaces.includes(i) && c === countWordsByIndex(l2, i))) {
        m2.push(i);
      }
      return m2;
    }, []), "getBorders");
    var parseUnixGrid = /* @__PURE__ */ __name((input) => {
      const lines = parseLines(input);
      const borders = getBorders(lines);
      const _borders = [Number.NEGATIVE_INFINITY, ...borders, Number.POSITIVE_INFINITY];
      const grid = [];
      for (const { words } of lines) {
        const row = [];
        grid.push(row);
        for (const n3 in words) {
          const { w: w2, s: s2, e } = words[n3];
          for (const _b2 in _borders) {
            const a2 = _borders[+_b2];
            const b = _borders[+_b2 + 1];
            if (b === void 0)
              break;
            const block = row[_b2] || (row[_b2] = []);
            if (s2 > a2 && e < b)
              block.push(w2);
          }
        }
      }
      return gridToData(grid);
    }, "parseUnixGrid");
    var gridToData = /* @__PURE__ */ __name((grid) => {
      const data = [];
      const [headers, ...body] = grid;
      for (const row of body) {
        const entry = {};
        data.push(entry);
        for (const i in headers) {
          const keys = headers[i];
          if (keys.length === 0)
            continue;
          if (keys.length > row[i].length) {
            throw new Error("Malformed grid: row has more columns than headers");
          }
          for (const k2 in keys) {
            const key = keys[k2];
            const to = +k2 + 1 === keys.length ? Number.POSITIVE_INFINITY : +k2 + 1;
            entry[key] = row[i].slice(+k2, to);
          }
        }
      }
      return data;
    }, "gridToData");
    var cut = /* @__PURE__ */ __name((line, points, pad = 2) => {
      const chunks = [];
      let s2 = 0;
      for (const i in [...points, Number.POSITIVE_INFINITY]) {
        const chunk = line.slice(s2, points[i]);
        chunks.push(chunk);
        s2 = points[i] + pad;
      }
      return chunks;
    }, "cut");
    var parseWinGrid = /* @__PURE__ */ __name((input) => {
      var _a2;
      const lines = input.split(EOL);
      const headers = lines[0].trim().split(/\s+/);
      const data = [];
      let memo = null;
      for (const line of lines.slice(1)) {
        if (!line)
          continue;
        const { spaces } = parseLine(line);
        const borders = spaces.filter((s2, i) => spaces[i + 1] === s2 + 1 && spaces[i + 2] !== s2 + 2);
        let chunks = (borders.length > 0 ? cut(line, borders, 2) : [line]).map((l2) => l2.trim());
        if (chunks.length < headers.length) {
          memo = chunks;
          continue;
        } else if ((_a2 = chunks[0]) == null ? void 0 : _a2.trim()) {
          memo = null;
        } else {
          chunks = [...memo || ["<unknown>"], ...chunks].filter(Boolean);
        }
        const entry = Object.fromEntries(headers.map(
          (header, i) => [header, parseLine(chunks[i]).words.map(({ w: w2 }) => w2)]
        ));
        data.push(entry);
      }
      return data;
    }, "parseWinGrid");
    var parsers = {
      unix: parseUnixGrid,
      win: parseWinGrid
    };
    var parse2 = /* @__PURE__ */ __name((input, { format = "unix" } = {}) => {
      const parser = parsers[format];
      if (!parser)
        throw new Error(`unsupported format: ${format}`);
      return parser(input);
    }, "parse");
    var cp2 = __toESM2(__require("child_process"), 1);
    var import_node_process5 = __toESM2(__require("process"), 1);
    var import_node_events3 = __toESM2(__require("events"), 1);
    var import_node_stream8 = __require("stream");
    var import_node_stream7 = __require("stream");
    var noop3 = /* @__PURE__ */ __name(() => {
    }, "noop3");
    var assign2 = /* @__PURE__ */ __name((target, ...extras) => Object.defineProperties(target, extras.reduce((m2, extra) => __spreadValues(__spreadValues({}, m2), Object.fromEntries(Object.entries(Object.getOwnPropertyDescriptors(extra)).filter(([, v2]) => !Object.hasOwn(v2, "value") || v2.value !== void 0))), {})), "assign2");
    var normalizeCtx2 = /* @__PURE__ */ __name((...ctxs) => assign2({
      id: Math.random().toString(36).slice(2),
      cmd: "",
      cwd: import_node_process5.default.cwd(),
      sync: false,
      args: [],
      input: null,
      env: import_node_process5.default.env,
      ee: new import_node_events3.default(),
      ac: new AbortController(),
      on: {},
      detached: import_node_process5.default.platform !== "win32",
      shell: true,
      spawn: cp2.spawn,
      spawnSync: cp2.spawnSync,
      spawnOpts: {},
      callback: noop3,
      stdin: new VoidWritable2(),
      stdout: new VoidWritable2(),
      stderr: new VoidWritable2(),
      stdio: ["pipe", "pipe", "pipe"],
      run: setImmediate
    }, ...ctxs), "normalizeCtx2");
    var processInput2 = /* @__PURE__ */ __name((child, input) => {
      if (input && child.stdin && !child.stdin.destroyed) {
        if (input instanceof import_node_stream8.Stream) {
          input.pipe(child.stdin);
        } else {
          child.stdin.write(input);
          child.stdin.end();
        }
      }
    }, "processInput2");
    var VoidWritable2 = class extends import_node_stream8.Transform {
      static {
        __name(this, "VoidWritable2");
      }
      _transform(chunk, _, cb) {
        this.emit("data", chunk);
        cb();
      }
    };
    var buildSpawnOpts2 = /* @__PURE__ */ __name(({ spawnOpts, stdio, cwd, shell, input, env: env2, detached, ac: { signal } }) => __spreadProps(__spreadValues({}, spawnOpts), {
      env: env2,
      cwd,
      stdio,
      shell,
      input,
      windowsHide: true,
      detached,
      signal
    }), "buildSpawnOpts2");
    var attachListeners2 = /* @__PURE__ */ __name((ee2, on2 = {}) => {
      for (const [name, listener] of Object.entries(on2)) {
        ee2.on(name, listener);
      }
    }, "attachListeners2");
    var invoke2 = /* @__PURE__ */ __name((c) => {
      const now = Date.now();
      const stdio = [c.stdin, c.stdout, c.stderr];
      try {
        if (c.sync) {
          attachListeners2(c.ee, c.on);
          const opts = buildSpawnOpts2(c);
          const result = c.spawnSync(c.cmd, c.args, opts);
          c.ee.emit("start", result, c);
          if (result.stdout.length > 0) {
            c.stdout.write(result.stdout);
            c.ee.emit("stdout", result.stdout, c);
          }
          if (result.stderr.length > 0) {
            c.stderr.write(result.stderr);
            c.ee.emit("stderr", result.stderr, c);
          }
          c.callback(null, c.fulfilled = __spreadProps(__spreadValues({}, result), {
            stdout: result.stdout.toString(),
            stderr: result.stderr.toString(),
            stdio,
            get stdall() {
              return this.stdout + this.stderr;
            },
            duration: Date.now() - now,
            ctx: c
          }));
          c.ee.emit("end", c.fulfilled, c);
        } else {
          c.run(() => {
            attachListeners2(c.ee, c.on);
            let error = null;
            const opts = buildSpawnOpts2(c);
            const stderr = [];
            const stdout = [];
            const stdall = [];
            const child = c.spawn(c.cmd, c.args, opts);
            c.child = child;
            c.ee.emit("start", child, c);
            opts.signal.addEventListener("abort", (event) => {
              if (opts.detached && child.pid) {
                try {
                  import_node_process5.default.kill(-child.pid);
                } catch (e) {
                  child.kill();
                }
              }
              c.ee.emit("abort", event, c);
            });
            processInput2(child, c.input || c.stdin);
            child.stdout.pipe(c.stdout).on("data", (d2) => {
              stdout.push(d2);
              stdall.push(d2);
              c.ee.emit("stdout", d2, c);
            });
            child.stderr.pipe(c.stderr).on("data", (d2) => {
              stderr.push(d2);
              stdall.push(d2);
              c.ee.emit("stderr", d2, c);
            });
            child.on("error", (e) => {
              error = e;
              c.ee.emit("err", error, c);
            }).on("close", (status, signal) => {
              c.callback(error, c.fulfilled = {
                error,
                status,
                signal,
                stdout: stdout.join(""),
                stderr: stderr.join(""),
                stdall: stdall.join(""),
                stdio: [c.stdin, c.stdout, c.stderr],
                duration: Date.now() - now,
                ctx: c
              });
              c.ee.emit("end", c.fulfilled, c);
            });
          }, c);
        }
      } catch (error) {
        c.callback(
          error,
          c.fulfilled = {
            error,
            status: null,
            signal: null,
            stdout: "",
            stderr: "",
            stdall: "",
            stdio,
            duration: Date.now() - now,
            ctx: c
          }
        );
        c.ee.emit("err", error, c);
        c.ee.emit("end", c.fulfilled, c);
      }
      return c;
    }, "invoke2");
    var exec2 = /* @__PURE__ */ __name((ctx) => invoke2(normalizeCtx2(ctx)), "exec2");
    var import_node_os2 = __require("os");
    var EOL2 = /(\r\n)|(\n\r)|\n|\r/;
    var IS_WIN = import_node_process6.default.platform === "win32";
    var isBin = /* @__PURE__ */ __name((f3) => {
      if (f3 === "")
        return false;
      if (!f3.includes("/"))
        return true;
      if (!import_node_fs6.default.existsSync(f3))
        return false;
      const stat = import_node_fs6.default.lstatSync(f3);
      return stat.isFile() || stat.isSymbolicLink();
    }, "isBin");
    var lookup = /* @__PURE__ */ __name((query = {}, cb = noop4) => {
      const { promise, resolve, reject } = makeDeferred();
      const { psargs = ["-lx"] } = query;
      const args = typeof psargs === "string" ? psargs.split(/\s+/) : psargs;
      const extract2 = IS_WIN ? extractWmic : identity;
      const callback = /* @__PURE__ */ __name((err, { stdout }) => {
        if (err) {
          reject(err);
          cb(err);
          return;
        }
        const list = parseProcessList(extract2(stdout), query);
        resolve(list);
        cb(null, list);
      }, "callback");
      const ctx = IS_WIN ? {
        cmd: "cmd",
        input: "wmic process get ProcessId,ParentProcessId,CommandLine \n",
        callback,
        run(cb2) {
          cb2();
        }
      } : {
        cmd: "ps",
        args,
        run(cb2) {
          cb2();
        },
        callback
      };
      exec2(ctx);
      return promise;
    }, "lookup");
    var parseProcessList = /* @__PURE__ */ __name((output, query = {}) => {
      const processList = parseGrid(output.trim());
      const pidList = (query.pid === void 0 ? [] : [query.pid].flat(1)).map((v2) => v2 + "");
      const filters = [
        (p) => query.command ? new RegExp(query.command, "i").test(p.command) : true,
        (p) => query.arguments ? new RegExp(query.arguments, "i").test(p.arguments.join(" ")) : true,
        (p) => query.ppid ? query.ppid + "" === p.ppid : true
      ];
      return processList.filter(
        (p) => (pidList.length === 0 || pidList.includes(p.pid)) && filters.every((f3) => f3(p))
      );
    }, "parseProcessList");
    var extractWmic = /* @__PURE__ */ __name((stdout) => {
      const _stdout = stdout.split(EOL2);
      const beginRow = _stdout.findIndex((out) => (out == null ? void 0 : out.indexOf("CommandLine")) === 0);
      _stdout.splice(_stdout.length - 1, 1);
      _stdout.splice(0, beginRow);
      return _stdout.join(import_node_os2.EOL);
    }, "extractWmic");
    var pickTree = /* @__PURE__ */ __name((list, pid, recursive = false) => {
      const children = list.filter((p) => p.ppid === pid + "");
      return [
        ...children,
        ...children.flatMap((p) => recursive ? pickTree(list, p.pid, true) : [])
      ];
    }, "pickTree");
    var tree = /* @__PURE__ */ __name((_0, ..._1) => __async(void 0, [_0, ..._1], function* (opts, cb = noop4) {
      if (typeof opts === "string" || typeof opts === "number") {
        return tree({ pid: opts }, cb);
      }
      try {
        const all = yield lookup();
        if (opts === void 0)
          return all;
        const { pid, recursive = false } = opts;
        const list = pickTree(all, pid, recursive);
        cb(null, list);
        return list;
      } catch (err) {
        cb(err);
        throw err;
      }
    }), "tree");
    var kill = /* @__PURE__ */ __name((pid, opts, next) => {
      if (typeof opts == "function") {
        return kill(pid, void 0, opts);
      }
      if (typeof opts == "string" || typeof opts == "number") {
        return kill(pid, { signal: opts }, next);
      }
      const { promise, resolve, reject } = makeDeferred();
      const {
        timeout = 30,
        signal = "SIGTERM"
      } = opts || {};
      try {
        import_node_process6.default.kill(+pid, signal);
      } catch (e) {
        reject(e);
        next == null ? void 0 : next(e);
        return promise;
      }
      let checkConfident = 0;
      let checkTimeoutTimer;
      let checkIsTimeout = false;
      const checkKilled = /* @__PURE__ */ __name((finishCallback) => lookup({ pid }, (err, list = []) => {
        if (checkIsTimeout)
          return;
        if (err) {
          clearTimeout(checkTimeoutTimer);
          reject(err);
          finishCallback == null ? void 0 : finishCallback(err, pid);
        } else if (list.length > 0) {
          checkConfident = checkConfident - 1 || 0;
          checkKilled(finishCallback);
        } else {
          checkConfident++;
          if (checkConfident === 5) {
            clearTimeout(checkTimeoutTimer);
            resolve(pid);
            finishCallback == null ? void 0 : finishCallback(null, pid);
          } else {
            checkKilled(finishCallback);
          }
        }
      }), "checkKilled");
      if (next) {
        checkKilled(next);
        checkTimeoutTimer = setTimeout(() => {
          checkIsTimeout = true;
          next(new Error("Kill process timeout"));
        }, timeout * 1e3);
      } else {
        resolve(pid);
      }
      return promise;
    }, "kill");
    var parseGrid = /* @__PURE__ */ __name((output) => output ? formatOutput(parse2(output, { format: IS_WIN ? "win" : "unix" })) : [], "parseGrid");
    var formatOutput = /* @__PURE__ */ __name((data) => data.reduce((m2, d2) => {
      var _a2, _b2, _c, _d;
      const pid = ((_a2 = d2.PID) == null ? void 0 : _a2[0]) || ((_b2 = d2.ProcessId) == null ? void 0 : _b2[0]);
      const ppid = ((_c = d2.PPID) == null ? void 0 : _c[0]) || ((_d = d2.ParentProcessId) == null ? void 0 : _d[0]);
      const cmd = d2.CMD || d2.CommandLine || d2.COMMAND || [];
      if (pid && cmd.length > 0) {
        const c = cmd.findIndex((_v, i) => isBin(cmd.slice(0, i).join(" ")));
        const command = cmd.slice(0, c).join(" ");
        const args = cmd.length > 1 ? cmd.slice(c) : [];
        m2.push({
          pid,
          ppid,
          command,
          arguments: args
        });
      }
      return m2;
    }, []), "formatOutput");
    var makeDeferred = /* @__PURE__ */ __name(() => {
      let resolve;
      let reject;
      const promise = new Promise((res, rej) => {
        resolve = res;
        reject = rej;
      });
      return { resolve, reject, promise };
    }, "makeDeferred");
    var noop4 = /* @__PURE__ */ __name(() => {
    }, "noop4");
    var identity = /* @__PURE__ */ __name((v2) => v2, "identity");
    var ts_default = { lookup, kill, tree };
    var createRequire3 = import_create_require.default;
    global.AbortController = global.AbortController || import_node_abort_controller.AbortController;
    var globbyModule = {
      convertPathToPattern,
      globby: globby2,
      globbySync,
      globbyStream,
      generateGlobTasksSync,
      generateGlobTasks,
      isGitIgnoredSync,
      isGitIgnored,
      isDynamicPattern
    };
    var glob2 = Object.assign(/* @__PURE__ */ __name(function globby22(patterns, options) {
      return globbyModule.globby(patterns, options);
    }, "globby2"), globbyModule);
    var YAML2 = yaml;
    var fs5 = _fs;
  }
});

// node_modules/zx/build/util.cjs
var require_util = __commonJS({
  "node_modules/zx/build/util.cjs"(exports, module) {
    "use strict";
    init_cjs_shim();
    var {
      __spreadValues,
      __spreadProps,
      __export: __export2,
      __toESM: __toESM2,
      __toCommonJS: __toCommonJS2
    } = require_esblib();
    var util_exports = {};
    __export2(util_exports, {
      errnoMessage: /* @__PURE__ */ __name(() => errnoMessage, "errnoMessage"),
      exitCodeInfo: /* @__PURE__ */ __name(() => exitCodeInfo, "exitCodeInfo"),
      formatCmd: /* @__PURE__ */ __name(() => formatCmd, "formatCmd"),
      getCallerLocation: /* @__PURE__ */ __name(() => getCallerLocation, "getCallerLocation"),
      getCallerLocationFromString: /* @__PURE__ */ __name(() => getCallerLocationFromString, "getCallerLocationFromString"),
      isString: /* @__PURE__ */ __name(() => isString, "isString"),
      noop: /* @__PURE__ */ __name(() => noop, "noop"),
      noquote: /* @__PURE__ */ __name(() => noquote, "noquote"),
      normalizeMultilinePieces: /* @__PURE__ */ __name(() => normalizeMultilinePieces, "normalizeMultilinePieces"),
      parseDuration: /* @__PURE__ */ __name(() => parseDuration, "parseDuration"),
      preferNmBin: /* @__PURE__ */ __name(() => preferNmBin, "preferNmBin"),
      quote: /* @__PURE__ */ __name(() => quote2, "quote"),
      quotePowerShell: /* @__PURE__ */ __name(() => quotePowerShell2, "quotePowerShell"),
      randomId: /* @__PURE__ */ __name(() => randomId, "randomId"),
      tempdir: /* @__PURE__ */ __name(() => tempdir2, "tempdir"),
      tempfile: /* @__PURE__ */ __name(() => tempfile2, "tempfile")
    });
    module.exports = __toCommonJS2(util_exports);
    var import_node_os = __toESM2(__require("os"), 1);
    var import_node_path3 = __toESM2(__require("path"), 1);
    var import_vendor = require_vendor();
    function tempdir2(prefix = `zx-${randomId()}`) {
      const dirpath = import_node_path3.default.join(import_node_os.default.tmpdir(), prefix);
      import_vendor.fs.mkdirSync(dirpath, { recursive: true });
      return dirpath;
    }
    __name(tempdir2, "tempdir");
    function tempfile2(name, data) {
      const filepath = name ? import_node_path3.default.join(tempdir2(), name) : import_node_path3.default.join(import_node_os.default.tmpdir(), `zx-${randomId()}`);
      if (data === void 0) import_vendor.fs.closeSync(import_vendor.fs.openSync(filepath, "w"));
      else import_vendor.fs.writeFileSync(filepath, data);
      return filepath;
    }
    __name(tempfile2, "tempfile");
    function noop() {
    }
    __name(noop, "noop");
    function randomId() {
      return Math.random().toString(36).slice(2);
    }
    __name(randomId, "randomId");
    function isString(obj) {
      return typeof obj === "string";
    }
    __name(isString, "isString");
    var pad = /* @__PURE__ */ __name((v) => v === " " ? " " : "", "pad");
    function preferNmBin(env, ...dirs) {
      const pathKey = process.platform === "win32" ? Object.keys(env).reverse().find((key) => key.toUpperCase() === "PATH") || "Path" : "PATH";
      const pathValue = dirs.map((c) => c && import_node_path3.default.resolve(c, "node_modules", ".bin")).concat(env[pathKey]).filter(Boolean).join(import_node_path3.default.delimiter);
      return __spreadProps(__spreadValues({}, env), {
        [pathKey]: pathValue
      });
    }
    __name(preferNmBin, "preferNmBin");
    function normalizeMultilinePieces(pieces) {
      return Object.assign(
        pieces.map(
          (p, i) => p.trim() ? pad(p[0]) + (0, import_vendor.parseLine)(p).words.map(({ w }) => w === "\\" ? "" : w.trim()).join(" ") + pad(p[p.length - 1]) : pieces[i]
        ),
        { raw: pieces.raw }
      );
    }
    __name(normalizeMultilinePieces, "normalizeMultilinePieces");
    function noquote() {
      throw new Error("No quote function is defined: https://\xEF.at/no-quote-func");
    }
    __name(noquote, "noquote");
    function quote2(arg) {
      if (/^[a-z0-9/_.\-@:=]+$/i.test(arg) || arg === "") {
        return arg;
      }
      return `$'` + arg.replace(/\\/g, "\\\\").replace(/'/g, "\\'").replace(/\f/g, "\\f").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\t/g, "\\t").replace(/\v/g, "\\v").replace(/\0/g, "\\0") + `'`;
    }
    __name(quote2, "quote");
    function quotePowerShell2(arg) {
      if (/^[a-z0-9/_.\-]+$/i.test(arg) || arg === "") {
        return arg;
      }
      return `'` + arg.replace(/'/g, "''") + `'`;
    }
    __name(quotePowerShell2, "quotePowerShell");
    function exitCodeInfo(exitCode) {
      return {
        2: "Misuse of shell builtins",
        126: "Invoked command cannot execute",
        127: "Command not found",
        128: "Invalid exit argument",
        129: "Hangup",
        130: "Interrupt",
        131: "Quit and dump core",
        132: "Illegal instruction",
        133: "Trace/breakpoint trap",
        134: "Process aborted",
        135: 'Bus error: "access to undefined portion of memory object"',
        136: 'Floating point exception: "erroneous arithmetic operation"',
        137: "Kill (terminate immediately)",
        138: "User-defined 1",
        139: "Segmentation violation",
        140: "User-defined 2",
        141: "Write to pipe with no one reading",
        142: "Signal raised by alarm",
        143: "Termination (request to terminate)",
        145: "Child process terminated, stopped (or continued*)",
        146: "Continue if stopped",
        147: "Stop executing temporarily",
        148: "Terminal stop signal",
        149: 'Background process attempting to read from tty ("in")',
        150: 'Background process attempting to write to tty ("out")',
        151: "Urgent data available on socket",
        152: "CPU time limit exceeded",
        153: "File size limit exceeded",
        154: 'Signal raised by timer counting virtual time: "virtual timer expired"',
        155: "Profiling timer expired",
        157: "Pollable event",
        159: "Bad syscall"
      }[exitCode || -1];
    }
    __name(exitCodeInfo, "exitCodeInfo");
    function errnoMessage(errno) {
      if (errno === void 0) {
        return "Unknown error";
      }
      return {
        0: "Success",
        1: "Not super-user",
        2: "No such file or directory",
        3: "No such process",
        4: "Interrupted system call",
        5: "I/O error",
        6: "No such device or address",
        7: "Arg list too long",
        8: "Exec format error",
        9: "Bad file number",
        10: "No children",
        11: "No more processes",
        12: "Not enough core",
        13: "Permission denied",
        14: "Bad address",
        15: "Block device required",
        16: "Mount device busy",
        17: "File exists",
        18: "Cross-device link",
        19: "No such device",
        20: "Not a directory",
        21: "Is a directory",
        22: "Invalid argument",
        23: "Too many open files in system",
        24: "Too many open files",
        25: "Not a typewriter",
        26: "Text file busy",
        27: "File too large",
        28: "No space left on device",
        29: "Illegal seek",
        30: "Read only file system",
        31: "Too many links",
        32: "Broken pipe",
        33: "Math arg out of domain of func",
        34: "Math result not representable",
        35: "File locking deadlock error",
        36: "File or path name too long",
        37: "No record locks available",
        38: "Function not implemented",
        39: "Directory not empty",
        40: "Too many symbolic links",
        42: "No message of desired type",
        43: "Identifier removed",
        44: "Channel number out of range",
        45: "Level 2 not synchronized",
        46: "Level 3 halted",
        47: "Level 3 reset",
        48: "Link number out of range",
        49: "Protocol driver not attached",
        50: "No CSI structure available",
        51: "Level 2 halted",
        52: "Invalid exchange",
        53: "Invalid request descriptor",
        54: "Exchange full",
        55: "No anode",
        56: "Invalid request code",
        57: "Invalid slot",
        59: "Bad font file fmt",
        60: "Device not a stream",
        61: "No data (for no delay io)",
        62: "Timer expired",
        63: "Out of streams resources",
        64: "Machine is not on the network",
        65: "Package not installed",
        66: "The object is remote",
        67: "The link has been severed",
        68: "Advertise error",
        69: "Srmount error",
        70: "Communication error on send",
        71: "Protocol error",
        72: "Multihop attempted",
        73: "Cross mount point (not really error)",
        74: "Trying to read unreadable message",
        75: "Value too large for defined data type",
        76: "Given log. name not unique",
        77: "f.d. invalid for this operation",
        78: "Remote address changed",
        79: "Can   access a needed shared lib",
        80: "Accessing a corrupted shared lib",
        81: ".lib section in a.out corrupted",
        82: "Attempting to link in too many libs",
        83: "Attempting to exec a shared library",
        84: "Illegal byte sequence",
        86: "Streams pipe error",
        87: "Too many users",
        88: "Socket operation on non-socket",
        89: "Destination address required",
        90: "Message too long",
        91: "Protocol wrong type for socket",
        92: "Protocol not available",
        93: "Unknown protocol",
        94: "Socket type not supported",
        95: "Not supported",
        96: "Protocol family not supported",
        97: "Address family not supported by protocol family",
        98: "Address already in use",
        99: "Address not available",
        100: "Network interface is not configured",
        101: "Network is unreachable",
        102: "Connection reset by network",
        103: "Connection aborted",
        104: "Connection reset by peer",
        105: "No buffer space available",
        106: "Socket is already connected",
        107: "Socket is not connected",
        108: "Can't send after socket shutdown",
        109: "Too many references",
        110: "Connection timed out",
        111: "Connection refused",
        112: "Host is down",
        113: "Host is unreachable",
        114: "Socket already connected",
        115: "Connection already in progress",
        116: "Stale file handle",
        122: "Quota exceeded",
        123: "No medium (in tape drive)",
        125: "Operation canceled",
        130: "Previous owner died",
        131: "State not recoverable"
      }[-errno] || "Unknown error";
    }
    __name(errnoMessage, "errnoMessage");
    function parseDuration(d) {
      if (typeof d == "number") {
        if (isNaN(d) || d < 0) throw new Error(`Invalid duration: "${d}".`);
        return d;
      } else if (/\d+s/.test(d)) {
        return +d.slice(0, -1) * 1e3;
      } else if (/\d+ms/.test(d)) {
        return +d.slice(0, -2);
      } else if (/\d+m/.test(d)) {
        return +d.slice(0, -1) * 1e3 * 60;
      }
      throw new Error(`Unknown duration: "${d}".`);
    }
    __name(parseDuration, "parseDuration");
    function formatCmd(cmd) {
      if (cmd == void 0) return import_vendor.chalk.grey("undefined");
      const chars = [...cmd];
      let out = "$ ";
      let buf = "";
      let ch;
      let state = root;
      let wordCount = 0;
      while (state) {
        ch = chars.shift() || "EOF";
        if (ch == "\n") {
          out += style(state, buf) + "\n> ";
          buf = "";
          continue;
        }
        const next = ch == "EOF" ? void 0 : state();
        if (next != state) {
          out += style(state, buf);
          buf = "";
        }
        state = next == root ? next() : next;
        buf += ch;
      }
      function style(state2, s) {
        if (s == "") return "";
        if (reservedWords.includes(s)) {
          return import_vendor.chalk.cyanBright(s);
        }
        if (state2 == word && wordCount == 0) {
          wordCount++;
          return import_vendor.chalk.greenBright(s);
        }
        if (state2 == syntax) {
          wordCount = 0;
          return import_vendor.chalk.cyanBright(s);
        }
        if (state2 == dollar) return import_vendor.chalk.yellowBright(s);
        if (state2 == null ? void 0 : state2.name.startsWith("str")) return import_vendor.chalk.yellowBright(s);
        return s;
      }
      __name(style, "style");
      function isSyntax(ch2) {
        return "()[]{}<>;:+|&=".includes(ch2);
      }
      __name(isSyntax, "isSyntax");
      function root() {
        if (/\s/.test(ch)) return space;
        if (isSyntax(ch)) return syntax;
        if (/[$]/.test(ch)) return dollar;
        if (/["]/.test(ch)) return strDouble;
        if (/[']/.test(ch)) return strSingle;
        return word;
      }
      __name(root, "root");
      function space() {
        if (/\s/.test(ch)) return space;
        return root;
      }
      __name(space, "space");
      function word() {
        if (/[0-9a-z/_.]/i.test(ch)) return word;
        return root;
      }
      __name(word, "word");
      function syntax() {
        if (isSyntax(ch)) return syntax;
        return root;
      }
      __name(syntax, "syntax");
      function dollar() {
        if (/[']/.test(ch)) return str;
        return root;
      }
      __name(dollar, "dollar");
      function str() {
        if (/[']/.test(ch)) return strEnd;
        if (/[\\]/.test(ch)) return strBackslash;
        return str;
      }
      __name(str, "str");
      function strBackslash() {
        return strEscape;
      }
      __name(strBackslash, "strBackslash");
      function strEscape() {
        return str;
      }
      __name(strEscape, "strEscape");
      function strDouble() {
        if (/["]/.test(ch)) return strEnd;
        return strDouble;
      }
      __name(strDouble, "strDouble");
      function strSingle() {
        if (/[']/.test(ch)) return strEnd;
        return strSingle;
      }
      __name(strSingle, "strSingle");
      function strEnd() {
        return root;
      }
      __name(strEnd, "strEnd");
      return out + "\n";
    }
    __name(formatCmd, "formatCmd");
    var reservedWords = [
      "if",
      "then",
      "else",
      "elif",
      "fi",
      "case",
      "esac",
      "for",
      "select",
      "while",
      "until",
      "do",
      "done",
      "in"
    ];
    function getCallerLocation(err = new Error()) {
      return getCallerLocationFromString(err.stack);
    }
    __name(getCallerLocation, "getCallerLocation");
    function getCallerLocationFromString(stackString = "unknown") {
      var _a;
      return ((_a = stackString.split(/^\s*(at\s)?/m).filter((s) => s == null ? void 0 : s.includes(":"))[2]) == null ? void 0 : _a.trim()) || stackString;
    }
    __name(getCallerLocationFromString, "getCallerLocationFromString");
  }
});

// node_modules/zx/build/core.cjs
var require_core = __commonJS({
  "node_modules/zx/build/core.cjs"(exports, module) {
    "use strict";
    init_cjs_shim();
    var {
      __spreadValues,
      __export: __export2,
      __toESM: __toESM2,
      __toCommonJS: __toCommonJS2,
      __async
    } = require_esblib();
    var core_exports = {};
    __export2(core_exports, {
      $: /* @__PURE__ */ __name(() => $2, "$"),
      ProcessOutput: /* @__PURE__ */ __name(() => ProcessOutput, "ProcessOutput"),
      ProcessPromise: /* @__PURE__ */ __name(() => ProcessPromise, "ProcessPromise"),
      cd: /* @__PURE__ */ __name(() => cd2, "cd"),
      defaults: /* @__PURE__ */ __name(() => defaults, "defaults"),
      kill: /* @__PURE__ */ __name(() => kill, "kill"),
      log: /* @__PURE__ */ __name(() => log, "log"),
      syncProcessCwd: /* @__PURE__ */ __name(() => syncProcessCwd, "syncProcessCwd"),
      useBash: /* @__PURE__ */ __name(() => useBash, "useBash"),
      usePowerShell: /* @__PURE__ */ __name(() => usePowerShell, "usePowerShell"),
      usePwsh: /* @__PURE__ */ __name(() => usePwsh, "usePwsh"),
      within: /* @__PURE__ */ __name(() => within2, "within")
    });
    module.exports = __toCommonJS2(core_exports);
    var import_node_assert = __toESM2(__require("assert"), 1);
    var import_node_child_process = __require("child_process");
    var import_node_async_hooks = __require("async_hooks");
    var import_node_util2 = __require("util");
    var import_node_os = __require("os");
    var import_vendor = require_vendor();
    var import_util = require_util();
    var processCwd = Symbol("processCwd");
    var syncExec = Symbol("syncExec");
    var eol = Buffer.from(import_node_os.EOL);
    var storage = new import_node_async_hooks.AsyncLocalStorage();
    var cwdSyncHook = (0, import_node_async_hooks.createHook)({
      init: syncCwd,
      before: syncCwd,
      promiseResolve: syncCwd,
      after: syncCwd,
      destroy: syncCwd
    });
    function syncProcessCwd(flag = true) {
      if (flag) cwdSyncHook.enable();
      else cwdSyncHook.disable();
    }
    __name(syncProcessCwd, "syncProcessCwd");
    var defaults = {
      [processCwd]: process.cwd(),
      [syncExec]: false,
      verbose: false,
      env: process.env,
      sync: false,
      shell: true,
      stdio: ["inherit", "pipe", "pipe"],
      nothrow: false,
      quiet: false,
      prefix: "",
      postfix: "",
      quote: import_util.noquote,
      detached: false,
      preferLocal: false,
      spawn: import_node_child_process.spawn,
      spawnSync: import_node_child_process.spawnSync,
      log,
      kill
    };
    function usePowerShell() {
      $2.shell = import_vendor.which.sync("powershell.exe");
      $2.prefix = "";
      $2.postfix = "; exit $LastExitCode";
      $2.quote = import_util.quotePowerShell;
    }
    __name(usePowerShell, "usePowerShell");
    function usePwsh() {
      $2.shell = import_vendor.which.sync("pwsh");
      $2.prefix = "";
      $2.postfix = "; exit $LastExitCode";
      $2.quote = import_util.quotePowerShell;
    }
    __name(usePwsh, "usePwsh");
    function useBash() {
      $2.shell = import_vendor.which.sync("bash");
      $2.prefix = "set -euo pipefail;";
      $2.postfix = "";
      $2.quote = import_util.quote;
    }
    __name(useBash, "useBash");
    function checkShell() {
      if (!$2.shell) {
        throw new Error(`shell is not available: setup guide goes here`);
      }
    }
    __name(checkShell, "checkShell");
    function getStore() {
      return storage.getStore() || defaults;
    }
    __name(getStore, "getStore");
    var $2 = new Proxy(
      function(pieces, ...args) {
        checkShell();
        if (!Array.isArray(pieces)) {
          return function(...args2) {
            const self2 = this;
            return within2(() => {
              return Object.assign($2, pieces).apply(self2, args2);
            });
          };
        }
        const from = (0, import_util.getCallerLocation)();
        if (pieces.some((p) => p == void 0)) {
          throw new Error(`Malformed command at ${from}`);
        }
        let resolve, reject;
        const promise = new ProcessPromise((...args2) => [resolve, reject] = args2);
        const cmd = (0, import_vendor.buildCmd)(
          $2.quote,
          pieces,
          args
        );
        const snapshot = getStore();
        const sync = snapshot[syncExec];
        const callback = /* @__PURE__ */ __name(() => promise.isHalted() || promise.run(), "callback");
        promise._bind(
          cmd,
          from,
          resolve,
          (v) => {
            reject(v);
            if (sync) throw v;
          },
          snapshot
        );
        sync ? callback() : setImmediate(callback);
        return sync ? promise.output : promise;
      },
      {
        set(_, key, value) {
          const target = key in Function.prototype ? _ : getStore();
          Reflect.set(target, key === "sync" ? syncExec : key, value);
          return true;
        },
        get(_, key) {
          if (key === "sync") return $2({ sync: true });
          const target = key in Function.prototype ? _ : getStore();
          return Reflect.get(target, key);
        }
      }
    );
    try {
      useBash();
    } catch (err) {
    }
    var ProcessPromise = class _ProcessPromise extends Promise {
      static {
        __name(this, "_ProcessPromise");
      }
      constructor() {
        super(...arguments);
        this._command = "";
        this._from = "";
        this._resolve = import_util.noop;
        this._reject = import_util.noop;
        this._snapshot = getStore();
        this._timeoutSignal = "SIGTERM";
        this._resolved = false;
        this._halted = false;
        this._piped = false;
        this._zurk = null;
        this._output = null;
        this._prerun = import_util.noop;
        this._postrun = import_util.noop;
      }
      _bind(cmd, from, resolve, reject, options) {
        this._command = cmd;
        this._from = from;
        this._resolve = resolve;
        this._reject = reject;
        this._snapshot = __spreadValues({ ac: new AbortController() }, options);
      }
      run() {
        var _a, _b, _c, _d;
        if (this.child) return this;
        this._prerun();
        const $22 = this._snapshot;
        const self2 = this;
        const input = (_b = (_a = $22.input) == null ? void 0 : _a.stdout) != null ? _b : $22.input;
        if (input) this.stdio("pipe");
        if ($22.timeout) this.timeout($22.timeout, $22.timeoutSignal);
        if ($22.preferLocal) $22.env = (0, import_util.preferNmBin)($22.env, $22.cwd, $22[processCwd]);
        $22.log({
          kind: "cmd",
          cmd: this._command,
          verbose: self2.isVerbose()
        });
        this._zurk = (0, import_vendor.exec)({
          input,
          cmd: $22.prefix + self2._command + $22.postfix,
          cwd: (_c = $22.cwd) != null ? _c : $22[processCwd],
          ac: $22.ac,
          signal: $22.signal,
          shell: typeof $22.shell === "string" ? $22.shell : true,
          env: $22.env,
          spawn: $22.spawn,
          spawnSync: $22.spawnSync,
          stdio: (_d = self2._stdio) != null ? _d : $22.stdio,
          sync: $22[syncExec],
          detached: $22.detached,
          run: /* @__PURE__ */ __name((cb) => cb(), "run"),
          on: {
            start: /* @__PURE__ */ __name(() => {
              if (self2._timeout) {
                const t = setTimeout(
                  () => self2.kill(self2._timeoutSignal),
                  self2._timeout
                );
                self2.finally(() => clearTimeout(t)).catch(import_util.noop);
              }
            }, "start"),
            stdout: /* @__PURE__ */ __name((data) => {
              if (self2._piped) return;
              $22.log({ kind: "stdout", data, verbose: self2.isVerbose() });
            }, "stdout"),
            stderr: /* @__PURE__ */ __name((data) => {
              $22.log({ kind: "stderr", data, verbose: !self2.isQuiet() });
            }, "stderr"),
            end: /* @__PURE__ */ __name(({ error, stdout, stderr, stdall, status, signal }, c) => {
              var _a2, _b2, _c2, _d2;
              self2._resolved = true;
              if (stderr && !stderr.endsWith("\n")) (_b2 = (_a2 = c.on).stderr) == null ? void 0 : _b2.call(_a2, eol, c);
              if (stdout && !stdout.endsWith("\n")) (_d2 = (_c2 = c.on).stdout) == null ? void 0 : _d2.call(_c2, eol, c);
              if (error) {
                const message = ProcessOutput.getErrorMessage(error, self2._from);
                const output = new ProcessOutput(
                  null,
                  null,
                  stdout,
                  stderr,
                  stdall,
                  message
                );
                self2._output = output;
                self2._reject(output);
              } else {
                const message = ProcessOutput.getExitMessage(
                  status,
                  signal,
                  stderr,
                  self2._from
                );
                const output = new ProcessOutput(
                  status,
                  signal,
                  stdout,
                  stderr,
                  stdall,
                  message
                );
                self2._output = output;
                if (status === 0 || self2.isNothrow()) {
                  self2._resolve(output);
                } else {
                  self2._reject(output);
                }
              }
            }, "end")
          }
        });
        this._postrun();
        return this;
      }
      get child() {
        var _a;
        return (_a = this._zurk) == null ? void 0 : _a.child;
      }
      get stdin() {
        this.stdio("pipe");
        this.run();
        (0, import_node_assert.default)(this.child);
        if (this.child.stdin == null)
          throw new Error("The stdin of subprocess is null.");
        return this.child.stdin;
      }
      get stdout() {
        this.run();
        (0, import_node_assert.default)(this.child);
        if (this.child.stdout == null)
          throw new Error("The stdout of subprocess is null.");
        return this.child.stdout;
      }
      get stderr() {
        this.run();
        (0, import_node_assert.default)(this.child);
        if (this.child.stderr == null)
          throw new Error("The stderr of subprocess is null.");
        return this.child.stderr;
      }
      get exitCode() {
        return this.then(
          (p) => p.exitCode,
          (p) => p.exitCode
        );
      }
      json() {
        return this.then((p) => p.json());
      }
      text(encoding) {
        return this.then((p) => p.text(encoding));
      }
      lines() {
        return this.then((p) => p.lines());
      }
      buffer() {
        return this.then((p) => p.buffer());
      }
      blob(type) {
        return this.then((p) => p.blob(type));
      }
      then(onfulfilled, onrejected) {
        if (this.isHalted() && !this.child) {
          throw new Error("The process is halted!");
        }
        return super.then(onfulfilled, onrejected);
      }
      catch(onrejected) {
        return super.catch(onrejected);
      }
      pipe(dest) {
        if (typeof dest === "string")
          throw new Error("The pipe() method does not take strings. Forgot $?");
        if (this._resolved) {
          if (dest instanceof _ProcessPromise) dest.stdin.end();
          throw new Error(
            "The pipe() method shouldn't be called after promise is already resolved!"
          );
        }
        this._piped = true;
        if (dest instanceof _ProcessPromise) {
          dest.stdio("pipe");
          dest._prerun = this.run.bind(this);
          dest._postrun = () => {
            if (!dest.child)
              throw new Error(
                "Access to stdin of pipe destination without creation a subprocess."
              );
            this.stdout.pipe(dest.stdin);
          };
          return dest;
        } else {
          this._postrun = () => this.stdout.pipe(dest);
          return this;
        }
      }
      abort(reason) {
        var _a, _b;
        if (this.signal !== ((_a = this._snapshot.ac) == null ? void 0 : _a.signal))
          throw new Error("The signal is controlled by another process.");
        if (!this.child)
          throw new Error("Trying to abort a process without creating one.");
        (_b = this._zurk) == null ? void 0 : _b.ac.abort(reason);
      }
      get signal() {
        var _a;
        return this._snapshot.signal || ((_a = this._snapshot.ac) == null ? void 0 : _a.signal);
      }
      kill(signal = "SIGTERM") {
        return __async(this, null, function* () {
          if (!this.child)
            throw new Error("Trying to kill a process without creating one.");
          if (!this.child.pid) throw new Error("The process pid is undefined.");
          return $2.kill(this.child.pid, signal);
        });
      }
      stdio(stdin, stdout = "pipe", stderr = "pipe") {
        this._stdio = [stdin, stdout, stderr];
        return this;
      }
      nothrow() {
        this._nothrow = true;
        return this;
      }
      quiet(v = true) {
        this._quiet = v;
        return this;
      }
      verbose(v = true) {
        this._verbose = v;
        return this;
      }
      isQuiet() {
        var _a;
        return (_a = this._quiet) != null ? _a : this._snapshot.quiet;
      }
      isVerbose() {
        var _a;
        return ((_a = this._verbose) != null ? _a : this._snapshot.verbose) && !this.isQuiet();
      }
      isNothrow() {
        var _a;
        return (_a = this._nothrow) != null ? _a : this._snapshot.nothrow;
      }
      timeout(d, signal = "SIGTERM") {
        this._timeout = (0, import_util.parseDuration)(d);
        this._timeoutSignal = signal;
        return this;
      }
      halt() {
        this._halted = true;
        return this;
      }
      isHalted() {
        return this._halted;
      }
      get output() {
        return this._output;
      }
    };
    var ProcessOutput = class extends Error {
      static {
        __name(this, "ProcessOutput");
      }
      constructor(code, signal, stdout, stderr, combined, message) {
        super(message);
        this._code = code;
        this._signal = signal;
        this._stdout = stdout;
        this._stderr = stderr;
        this._combined = combined;
      }
      toString() {
        return this._combined;
      }
      json() {
        return JSON.parse(this._combined);
      }
      buffer() {
        return Buffer.from(this._combined);
      }
      blob(type = "text/plain") {
        if (!globalThis.Blob)
          throw new Error(
            "Blob is not supported in this environment. Provide a polyfill"
          );
        return new Blob([this.buffer()], { type });
      }
      text(encoding = "utf8") {
        return encoding === "utf8" ? this.toString() : this.buffer().toString(encoding);
      }
      lines() {
        return this.valueOf().split(/\r?\n/);
      }
      valueOf() {
        return this._combined.trim();
      }
      get stdout() {
        return this._stdout;
      }
      get stderr() {
        return this._stderr;
      }
      get exitCode() {
        return this._code;
      }
      get signal() {
        return this._signal;
      }
      static getExitMessage(code, signal, stderr, from) {
        let message = `exit code: ${code}`;
        if (code != 0 || signal != null) {
          message = `${stderr || "\n"}    at ${from}`;
          message += `
    exit code: ${code}${(0, import_util.exitCodeInfo)(code) ? " (" + (0, import_util.exitCodeInfo)(code) + ")" : ""}`;
          if (signal != null) {
            message += `
    signal: ${signal}`;
          }
        }
        return message;
      }
      static getErrorMessage(err, from) {
        return `${err.message}
    errno: ${err.errno} (${(0, import_util.errnoMessage)(err.errno)})
    code: ${err.code}
    at ${from}`;
      }
      [import_node_util2.inspect.custom]() {
        let stringify2 = /* @__PURE__ */ __name((s, c) => s.length === 0 ? "''" : c((0, import_node_util2.inspect)(s)), "stringify");
        return `ProcessOutput {
  stdout: ${stringify2(this.stdout, import_vendor.chalk.green)},
  stderr: ${stringify2(this.stderr, import_vendor.chalk.red)},
  signal: ${(0, import_node_util2.inspect)(this.signal)},
  exitCode: ${(this.exitCode === 0 ? import_vendor.chalk.green : import_vendor.chalk.red)(this.exitCode)}${(0, import_util.exitCodeInfo)(this.exitCode) ? import_vendor.chalk.grey(" (" + (0, import_util.exitCodeInfo)(this.exitCode) + ")") : ""}
}`;
      }
    };
    function within2(callback) {
      return storage.run(__spreadValues({}, getStore()), callback);
    }
    __name(within2, "within");
    function syncCwd() {
      if ($2[processCwd] != process.cwd()) process.chdir($2[processCwd]);
    }
    __name(syncCwd, "syncCwd");
    function cd2(dir) {
      if (dir instanceof ProcessOutput) {
        dir = dir.toString().trim();
      }
      $2.log({ kind: "cd", dir });
      process.chdir(dir);
      $2[processCwd] = process.cwd();
    }
    __name(cd2, "cd");
    function kill(pid, signal) {
      return __async(this, null, function* () {
        let children = yield import_vendor.ps.tree({ pid, recursive: true });
        for (const p of children) {
          try {
            process.kill(+p.pid, signal);
          } catch (e) {
          }
        }
        try {
          process.kill(-pid, signal);
        } catch (e) {
          try {
            process.kill(+pid, signal);
          } catch (e2) {
          }
        }
      });
    }
    __name(kill, "kill");
    function log(entry) {
      switch (entry.kind) {
        case "cmd":
          if (!entry.verbose) return;
          process.stderr.write((0, import_util.formatCmd)(entry.cmd));
          break;
        case "stdout":
        case "stderr":
          if (!entry.verbose) return;
          process.stderr.write(entry.data);
          break;
        case "cd":
          if (!$2.verbose) return;
          process.stderr.write("$ " + import_vendor.chalk.greenBright("cd") + ` ${entry.dir}
`);
          break;
        case "fetch":
          if (!$2.verbose) return;
          const init = entry.init ? " " + (0, import_node_util2.inspect)(entry.init) : "";
          process.stderr.write(
            "$ " + import_vendor.chalk.greenBright("fetch") + ` ${entry.url}${init}
`
          );
          break;
        case "retry":
          if (!$2.verbose) return;
          process.stderr.write(entry.error + "\n");
      }
    }
    __name(log, "log");
  }
});

// node_modules/zx/build/goods.cjs
var require_goods = __commonJS({
  "node_modules/zx/build/goods.cjs"(exports, module) {
    "use strict";
    init_cjs_shim();
    var {
      __pow,
      __export: __export2,
      __toESM: __toESM2,
      __toCommonJS: __toCommonJS2,
      __async,
      __forAwait
    } = require_esblib();
    var goods_exports = {};
    __export2(goods_exports, {
      argv: /* @__PURE__ */ __name(() => argv, "argv"),
      echo: /* @__PURE__ */ __name(() => echo, "echo"),
      expBackoff: /* @__PURE__ */ __name(() => expBackoff, "expBackoff"),
      fetch: /* @__PURE__ */ __name(() => fetch, "fetch"),
      os: /* @__PURE__ */ __name(() => os, "os"),
      path: /* @__PURE__ */ __name(() => import_node_path3.default, "path"),
      question: /* @__PURE__ */ __name(() => question, "question"),
      retry: /* @__PURE__ */ __name(() => retry, "retry"),
      sleep: /* @__PURE__ */ __name(() => sleep, "sleep"),
      spinner: /* @__PURE__ */ __name(() => spinner, "spinner"),
      stdin: /* @__PURE__ */ __name(() => stdin, "stdin"),
      updateArgv: /* @__PURE__ */ __name(() => updateArgv, "updateArgv")
    });
    module.exports = __toCommonJS2(goods_exports);
    var import_node_assert = __toESM2(__require("assert"), 1);
    var import_node_readline = __require("readline");
    var import_core2 = require_core();
    var import_util = require_util();
    var import_vendor = require_vendor();
    var import_node_path3 = __toESM2(__require("path"), 1);
    var os = __toESM2(__require("os"), 1);
    var argv = (0, import_vendor.minimist)(process.argv.slice(2));
    function updateArgv(args) {
      argv = (0, import_vendor.minimist)(args);
      global.argv = argv;
    }
    __name(updateArgv, "updateArgv");
    function sleep(duration) {
      return new Promise((resolve) => {
        setTimeout(resolve, (0, import_util.parseDuration)(duration));
      });
    }
    __name(sleep, "sleep");
    function fetch(url2, init) {
      return __async(this, null, function* () {
        import_core2.$.log({ kind: "fetch", url: url2, init });
        return (0, import_vendor.nodeFetch)(url2, init);
      });
    }
    __name(fetch, "fetch");
    function echo(pieces, ...args) {
      let msg;
      const lastIdx = pieces.length - 1;
      if (Array.isArray(pieces) && pieces.every(import_util.isString) && lastIdx === args.length) {
        msg = args.map((a, i) => pieces[i] + stringify2(a)).join("") + pieces[lastIdx];
      } else {
        msg = [pieces, ...args].map(stringify2).join(" ");
      }
      console.log(msg);
    }
    __name(echo, "echo");
    function stringify2(arg) {
      if (arg instanceof import_core2.ProcessOutput) {
        return arg.toString().replace(/\n$/, "");
      }
      return `${arg}`;
    }
    __name(stringify2, "stringify");
    function question(query, options) {
      return __async(this, null, function* () {
        let completer = void 0;
        if (options && Array.isArray(options.choices)) {
          completer = /* @__PURE__ */ __name(function completer2(line) {
            const completions = options.choices;
            const hits = completions.filter((c) => c.startsWith(line));
            return [hits.length ? hits : completions, line];
          }, "completer2");
        }
        const rl = (0, import_node_readline.createInterface)({
          input: process.stdin,
          output: process.stdout,
          terminal: true,
          completer
        });
        return new Promise(
          (resolve) => rl.question(query != null ? query : "", (answer) => {
            rl.close();
            resolve(answer);
          })
        );
      });
    }
    __name(question, "question");
    function stdin() {
      return __async(this, null, function* () {
        let buf = "";
        process.stdin.setEncoding("utf8");
        try {
          for (var iter = __forAwait(process.stdin), more, temp, error; more = !(temp = yield iter.next()).done; more = false) {
            const chunk = temp.value;
            buf += chunk;
          }
        } catch (temp2) {
          error = [temp2];
        } finally {
          try {
            more && (temp = iter.return) && (yield temp.call(iter));
          } finally {
            if (error)
              throw error[0];
          }
        }
        return buf;
      });
    }
    __name(stdin, "stdin");
    function retry(count, a, b) {
      return __async(this, null, function* () {
        const total = count;
        let callback;
        let delayStatic = 0;
        let delayGen;
        if (typeof a == "function") {
          callback = a;
        } else {
          if (typeof a == "object") {
            delayGen = a;
          } else {
            delayStatic = (0, import_util.parseDuration)(a);
          }
          (0, import_node_assert.default)(b);
          callback = b;
        }
        let lastErr;
        let attempt = 0;
        while (count-- > 0) {
          attempt++;
          try {
            return yield callback();
          } catch (err) {
            let delay = 0;
            if (delayStatic > 0) delay = delayStatic;
            if (delayGen) delay = delayGen.next().value;
            import_core2.$.log({
              kind: "retry",
              error: import_vendor.chalk.bgRed.white(" FAIL ") + ` Attempt: ${attempt}${total == Infinity ? "" : `/${total}`}` + (delay > 0 ? `; next in ${delay}ms` : "")
            });
            lastErr = err;
            if (count == 0) break;
            if (delay) yield sleep(delay);
          }
        }
        throw lastErr;
      });
    }
    __name(retry, "retry");
    function* expBackoff(max = "60s", rand = "100ms") {
      const maxMs = (0, import_util.parseDuration)(max);
      const randMs = (0, import_util.parseDuration)(rand);
      let n = 1;
      while (true) {
        const ms = Math.floor(Math.random() * randMs);
        yield Math.min(__pow(2, n++), maxMs) + ms;
      }
    }
    __name(expBackoff, "expBackoff");
    function spinner(title, callback) {
      return __async(this, null, function* () {
        if (typeof title == "function") {
          callback = title;
          title = "";
        }
        let i = 0;
        const spin = /* @__PURE__ */ __name(() => process.stderr.write(`  ${"\u280B\u2819\u2839\u2838\u283C\u2834\u2826\u2827\u2807\u280F"[i++ % 10]} ${title}\r`), "spin");
        return (0, import_core2.within)(() => __async(this, null, function* () {
          import_core2.$.verbose = false;
          const id = setInterval(spin, 100);
          let result;
          try {
            result = yield callback();
          } finally {
            clearInterval(id);
            process.stderr.write(" ".repeat((process.stdout.columns || 1) - 1) + "\r");
          }
          return result;
        }));
      });
    }
    __name(spinner, "spinner");
  }
});

// node_modules/zx/build/index.cjs
var require_build = __commonJS({
  "node_modules/zx/build/index.cjs"(exports, module) {
    "use strict";
    init_cjs_shim();
    var {
      __export: __export2,
      __reExport,
      __toCommonJS: __toCommonJS2
    } = require_esblib();
    var src_exports = {};
    __export2(src_exports, {
      YAML: /* @__PURE__ */ __name(() => import_vendor.YAML, "YAML"),
      chalk: /* @__PURE__ */ __name(() => import_vendor.chalk, "chalk"),
      fs: /* @__PURE__ */ __name(() => import_vendor.fs, "fs"),
      glob: /* @__PURE__ */ __name(() => import_vendor.glob, "glob"),
      globby: /* @__PURE__ */ __name(() => import_vendor.glob, "globby"),
      minimist: /* @__PURE__ */ __name(() => import_vendor.minimist, "minimist"),
      nothrow: /* @__PURE__ */ __name(() => nothrow, "nothrow"),
      ps: /* @__PURE__ */ __name(() => import_vendor.ps, "ps"),
      quiet: /* @__PURE__ */ __name(() => quiet, "quiet"),
      quote: /* @__PURE__ */ __name(() => import_util.quote, "quote"),
      quotePowerShell: /* @__PURE__ */ __name(() => import_util.quotePowerShell, "quotePowerShell"),
      tempdir: /* @__PURE__ */ __name(() => import_util.tempdir, "tempdir"),
      tempfile: /* @__PURE__ */ __name(() => import_util.tempfile, "tempfile"),
      tmpdir: /* @__PURE__ */ __name(() => import_util.tempdir, "tmpdir"),
      tmpfile: /* @__PURE__ */ __name(() => import_util.tempfile, "tmpfile"),
      which: /* @__PURE__ */ __name(() => import_vendor.which, "which")
    });
    module.exports = __toCommonJS2(src_exports);
    __reExport(src_exports, require_core(), module.exports);
    __reExport(src_exports, require_goods(), module.exports);
    var import_vendor = require_vendor();
    var import_util = require_util();
    function nothrow(promise) {
      return promise.nothrow();
    }
    __name(nothrow, "nothrow");
    function quiet(promise) {
      return promise.quiet();
    }
    __name(quiet, "quiet");
  }
});

// node_modules/zx/build/globals.cjs
var require_globals = __commonJS({
  "node_modules/zx/build/globals.cjs"() {
    "use strict";
    init_cjs_shim();
    var {
      __toESM: __toESM2
    } = require_esblib();
    var _ = __toESM2(require_build(), 1);
    Object.assign(globalThis, _);
  }
});

// node_modules/@actions/core/lib/utils.js
var require_utils = __commonJS({
  "node_modules/@actions/core/lib/utils.js"(exports) {
    "use strict";
    init_cjs_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toCommandProperties = exports.toCommandValue = void 0;
    function toCommandValue(input) {
      if (input === null || input === void 0) {
        return "";
      } else if (typeof input === "string" || input instanceof String) {
        return input;
      }
      return JSON.stringify(input);
    }
    __name(toCommandValue, "toCommandValue");
    exports.toCommandValue = toCommandValue;
    function toCommandProperties(annotationProperties) {
      if (!Object.keys(annotationProperties).length) {
        return {};
      }
      return {
        title: annotationProperties.title,
        file: annotationProperties.file,
        line: annotationProperties.startLine,
        endLine: annotationProperties.endLine,
        col: annotationProperties.startColumn,
        endColumn: annotationProperties.endColumn
      };
    }
    __name(toCommandProperties, "toCommandProperties");
    exports.toCommandProperties = toCommandProperties;
  }
});

// node_modules/@actions/core/lib/command.js
var require_command = __commonJS({
  "node_modules/@actions/core/lib/command.js"(exports) {
    "use strict";
    init_cjs_shim();
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return m[k];
      }, "get") });
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.issue = exports.issueCommand = void 0;
    var os = __importStar(__require("os"));
    var utils_1 = require_utils();
    function issueCommand(command, properties, message) {
      const cmd = new Command(command, properties, message);
      process.stdout.write(cmd.toString() + os.EOL);
    }
    __name(issueCommand, "issueCommand");
    exports.issueCommand = issueCommand;
    function issue(name, message = "") {
      issueCommand(name, {}, message);
    }
    __name(issue, "issue");
    exports.issue = issue;
    var CMD_STRING = "::";
    var Command = class {
      static {
        __name(this, "Command");
      }
      constructor(command, properties, message) {
        if (!command) {
          command = "missing.command";
        }
        this.command = command;
        this.properties = properties;
        this.message = message;
      }
      toString() {
        let cmdStr = CMD_STRING + this.command;
        if (this.properties && Object.keys(this.properties).length > 0) {
          cmdStr += " ";
          let first = true;
          for (const key in this.properties) {
            if (this.properties.hasOwnProperty(key)) {
              const val = this.properties[key];
              if (val) {
                if (first) {
                  first = false;
                } else {
                  cmdStr += ",";
                }
                cmdStr += `${key}=${escapeProperty(val)}`;
              }
            }
          }
        }
        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;
        return cmdStr;
      }
    };
    function escapeData(s) {
      return utils_1.toCommandValue(s).replace(/%/g, "%25").replace(/\r/g, "%0D").replace(/\n/g, "%0A");
    }
    __name(escapeData, "escapeData");
    function escapeProperty(s) {
      return utils_1.toCommandValue(s).replace(/%/g, "%25").replace(/\r/g, "%0D").replace(/\n/g, "%0A").replace(/:/g, "%3A").replace(/,/g, "%2C");
    }
    __name(escapeProperty, "escapeProperty");
  }
});

// node_modules/uuid/dist/esm-node/rng.js
import crypto from "crypto";
function rng() {
  if (poolPtr > rnds8Pool.length - 16) {
    crypto.randomFillSync(rnds8Pool);
    poolPtr = 0;
  }
  return rnds8Pool.slice(poolPtr, poolPtr += 16);
}
var rnds8Pool, poolPtr;
var init_rng = __esm({
  "node_modules/uuid/dist/esm-node/rng.js"() {
    init_cjs_shim();
    rnds8Pool = new Uint8Array(256);
    poolPtr = rnds8Pool.length;
    __name(rng, "rng");
  }
});

// node_modules/uuid/dist/esm-node/regex.js
var regex_default;
var init_regex = __esm({
  "node_modules/uuid/dist/esm-node/regex.js"() {
    init_cjs_shim();
    regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
  }
});

// node_modules/uuid/dist/esm-node/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default;
var init_validate = __esm({
  "node_modules/uuid/dist/esm-node/validate.js"() {
    init_cjs_shim();
    init_regex();
    __name(validate, "validate");
    validate_default = validate;
  }
});

// node_modules/uuid/dist/esm-node/stringify.js
function stringify(arr, offset = 0) {
  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
  if (!validate_default(uuid)) {
    throw TypeError("Stringified UUID is invalid");
  }
  return uuid;
}
var byteToHex, stringify_default;
var init_stringify = __esm({
  "node_modules/uuid/dist/esm-node/stringify.js"() {
    init_cjs_shim();
    init_validate();
    byteToHex = [];
    for (let i = 0; i < 256; ++i) {
      byteToHex.push((i + 256).toString(16).substr(1));
    }
    __name(stringify, "stringify");
    stringify_default = stringify;
  }
});

// node_modules/uuid/dist/esm-node/v1.js
function v1(options, buf, offset) {
  let i = buf && offset || 0;
  const b = buf || new Array(16);
  options = options || {};
  let node = options.node || _nodeId;
  let clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
  if (node == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || rng)();
    if (node == null) {
      node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }
    if (clockseq == null) {
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
    }
  }
  let msecs = options.msecs !== void 0 ? options.msecs : Date.now();
  let nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
  if (dt < 0 && options.clockseq === void 0) {
    clockseq = clockseq + 1 & 16383;
  }
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
    nsecs = 0;
  }
  if (nsecs >= 1e4) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }
  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;
  msecs += 122192928e5;
  const tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
  b[i++] = tl >>> 24 & 255;
  b[i++] = tl >>> 16 & 255;
  b[i++] = tl >>> 8 & 255;
  b[i++] = tl & 255;
  const tmh = msecs / 4294967296 * 1e4 & 268435455;
  b[i++] = tmh >>> 8 & 255;
  b[i++] = tmh & 255;
  b[i++] = tmh >>> 24 & 15 | 16;
  b[i++] = tmh >>> 16 & 255;
  b[i++] = clockseq >>> 8 | 128;
  b[i++] = clockseq & 255;
  for (let n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }
  return buf || stringify_default(b);
}
var _nodeId, _clockseq, _lastMSecs, _lastNSecs, v1_default;
var init_v1 = __esm({
  "node_modules/uuid/dist/esm-node/v1.js"() {
    init_cjs_shim();
    init_rng();
    init_stringify();
    _lastMSecs = 0;
    _lastNSecs = 0;
    __name(v1, "v1");
    v1_default = v1;
  }
});

// node_modules/uuid/dist/esm-node/parse.js
function parse(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  let v;
  const arr = new Uint8Array(16);
  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 255;
  arr[2] = v >>> 8 & 255;
  arr[3] = v & 255;
  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 255;
  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 255;
  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 255;
  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
  arr[11] = v / 4294967296 & 255;
  arr[12] = v >>> 24 & 255;
  arr[13] = v >>> 16 & 255;
  arr[14] = v >>> 8 & 255;
  arr[15] = v & 255;
  return arr;
}
var parse_default;
var init_parse = __esm({
  "node_modules/uuid/dist/esm-node/parse.js"() {
    init_cjs_shim();
    init_validate();
    __name(parse, "parse");
    parse_default = parse;
  }
});

// node_modules/uuid/dist/esm-node/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  const bytes = [];
  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }
  return bytes;
}
function v35_default(name, version2, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === "string") {
      value = stringToBytes(value);
    }
    if (typeof namespace === "string") {
      namespace = parse_default(namespace);
    }
    if (namespace.length !== 16) {
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    }
    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 15 | version2;
    bytes[8] = bytes[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }
      return buf;
    }
    return stringify_default(bytes);
  }
  __name(generateUUID, "generateUUID");
  try {
    generateUUID.name = name;
  } catch (err) {
  }
  generateUUID.DNS = DNS;
  generateUUID.URL = URL2;
  return generateUUID;
}
var DNS, URL2;
var init_v35 = __esm({
  "node_modules/uuid/dist/esm-node/v35.js"() {
    init_cjs_shim();
    init_stringify();
    init_parse();
    __name(stringToBytes, "stringToBytes");
    DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
    URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
    __name(v35_default, "default");
  }
});

// node_modules/uuid/dist/esm-node/md5.js
import crypto2 from "crypto";
function md5(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === "string") {
    bytes = Buffer.from(bytes, "utf8");
  }
  return crypto2.createHash("md5").update(bytes).digest();
}
var md5_default;
var init_md5 = __esm({
  "node_modules/uuid/dist/esm-node/md5.js"() {
    init_cjs_shim();
    __name(md5, "md5");
    md5_default = md5;
  }
});

// node_modules/uuid/dist/esm-node/v3.js
var v3, v3_default;
var init_v3 = __esm({
  "node_modules/uuid/dist/esm-node/v3.js"() {
    init_cjs_shim();
    init_v35();
    init_md5();
    v3 = v35_default("v3", 48, md5_default);
    v3_default = v3;
  }
});

// node_modules/uuid/dist/esm-node/v4.js
function v4(options, buf, offset) {
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return stringify_default(rnds);
}
var v4_default;
var init_v4 = __esm({
  "node_modules/uuid/dist/esm-node/v4.js"() {
    init_cjs_shim();
    init_rng();
    init_stringify();
    __name(v4, "v4");
    v4_default = v4;
  }
});

// node_modules/uuid/dist/esm-node/sha1.js
import crypto3 from "crypto";
function sha1(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === "string") {
    bytes = Buffer.from(bytes, "utf8");
  }
  return crypto3.createHash("sha1").update(bytes).digest();
}
var sha1_default;
var init_sha1 = __esm({
  "node_modules/uuid/dist/esm-node/sha1.js"() {
    init_cjs_shim();
    __name(sha1, "sha1");
    sha1_default = sha1;
  }
});

// node_modules/uuid/dist/esm-node/v5.js
var v5, v5_default;
var init_v5 = __esm({
  "node_modules/uuid/dist/esm-node/v5.js"() {
    init_cjs_shim();
    init_v35();
    init_sha1();
    v5 = v35_default("v5", 80, sha1_default);
    v5_default = v5;
  }
});

// node_modules/uuid/dist/esm-node/nil.js
var nil_default;
var init_nil = __esm({
  "node_modules/uuid/dist/esm-node/nil.js"() {
    init_cjs_shim();
    nil_default = "00000000-0000-0000-0000-000000000000";
  }
});

// node_modules/uuid/dist/esm-node/version.js
function version(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  return parseInt(uuid.substr(14, 1), 16);
}
var version_default;
var init_version = __esm({
  "node_modules/uuid/dist/esm-node/version.js"() {
    init_cjs_shim();
    init_validate();
    __name(version, "version");
    version_default = version;
  }
});

// node_modules/uuid/dist/esm-node/index.js
var esm_node_exports = {};
__export(esm_node_exports, {
  NIL: () => nil_default,
  parse: () => parse_default,
  stringify: () => stringify_default,
  v1: () => v1_default,
  v3: () => v3_default,
  v4: () => v4_default,
  v5: () => v5_default,
  validate: () => validate_default,
  version: () => version_default
});
var init_esm_node = __esm({
  "node_modules/uuid/dist/esm-node/index.js"() {
    init_cjs_shim();
    init_v1();
    init_v3();
    init_v4();
    init_v5();
    init_nil();
    init_version();
    init_validate();
    init_stringify();
    init_parse();
  }
});

// node_modules/@actions/core/lib/file-command.js
var require_file_command = __commonJS({
  "node_modules/@actions/core/lib/file-command.js"(exports) {
    "use strict";
    init_cjs_shim();
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return m[k];
      }, "get") });
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.prepareKeyValueMessage = exports.issueFileCommand = void 0;
    var fs2 = __importStar(__require("fs"));
    var os = __importStar(__require("os"));
    var uuid_1 = (init_esm_node(), __toCommonJS(esm_node_exports));
    var utils_1 = require_utils();
    function issueFileCommand(command, message) {
      const filePath = process.env[`GITHUB_${command}`];
      if (!filePath) {
        throw new Error(`Unable to find environment variable for file command ${command}`);
      }
      if (!fs2.existsSync(filePath)) {
        throw new Error(`Missing file at path: ${filePath}`);
      }
      fs2.appendFileSync(filePath, `${utils_1.toCommandValue(message)}${os.EOL}`, {
        encoding: "utf8"
      });
    }
    __name(issueFileCommand, "issueFileCommand");
    exports.issueFileCommand = issueFileCommand;
    function prepareKeyValueMessage(key, value) {
      const delimiter = `ghadelimiter_${uuid_1.v4()}`;
      const convertedValue = utils_1.toCommandValue(value);
      if (key.includes(delimiter)) {
        throw new Error(`Unexpected input: name should not contain the delimiter "${delimiter}"`);
      }
      if (convertedValue.includes(delimiter)) {
        throw new Error(`Unexpected input: value should not contain the delimiter "${delimiter}"`);
      }
      return `${key}<<${delimiter}${os.EOL}${convertedValue}${os.EOL}${delimiter}`;
    }
    __name(prepareKeyValueMessage, "prepareKeyValueMessage");
    exports.prepareKeyValueMessage = prepareKeyValueMessage;
  }
});

// node_modules/@actions/http-client/lib/proxy.js
var require_proxy = __commonJS({
  "node_modules/@actions/http-client/lib/proxy.js"(exports) {
    "use strict";
    init_cjs_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.checkBypass = exports.getProxyUrl = void 0;
    function getProxyUrl(reqUrl) {
      const usingSsl = reqUrl.protocol === "https:";
      if (checkBypass(reqUrl)) {
        return void 0;
      }
      const proxyVar = (() => {
        if (usingSsl) {
          return process.env["https_proxy"] || process.env["HTTPS_PROXY"];
        } else {
          return process.env["http_proxy"] || process.env["HTTP_PROXY"];
        }
      })();
      if (proxyVar) {
        try {
          return new URL(proxyVar);
        } catch (_a) {
          if (!proxyVar.startsWith("http://") && !proxyVar.startsWith("https://"))
            return new URL(`http://${proxyVar}`);
        }
      } else {
        return void 0;
      }
    }
    __name(getProxyUrl, "getProxyUrl");
    exports.getProxyUrl = getProxyUrl;
    function checkBypass(reqUrl) {
      if (!reqUrl.hostname) {
        return false;
      }
      const reqHost = reqUrl.hostname;
      if (isLoopbackAddress(reqHost)) {
        return true;
      }
      const noProxy = process.env["no_proxy"] || process.env["NO_PROXY"] || "";
      if (!noProxy) {
        return false;
      }
      let reqPort;
      if (reqUrl.port) {
        reqPort = Number(reqUrl.port);
      } else if (reqUrl.protocol === "http:") {
        reqPort = 80;
      } else if (reqUrl.protocol === "https:") {
        reqPort = 443;
      }
      const upperReqHosts = [reqUrl.hostname.toUpperCase()];
      if (typeof reqPort === "number") {
        upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);
      }
      for (const upperNoProxyItem of noProxy.split(",").map((x) => x.trim().toUpperCase()).filter((x) => x)) {
        if (upperNoProxyItem === "*" || upperReqHosts.some((x) => x === upperNoProxyItem || x.endsWith(`.${upperNoProxyItem}`) || upperNoProxyItem.startsWith(".") && x.endsWith(`${upperNoProxyItem}`))) {
          return true;
        }
      }
      return false;
    }
    __name(checkBypass, "checkBypass");
    exports.checkBypass = checkBypass;
    function isLoopbackAddress(host) {
      const hostLower = host.toLowerCase();
      return hostLower === "localhost" || hostLower.startsWith("127.") || hostLower.startsWith("[::1]") || hostLower.startsWith("[0:0:0:0:0:0:0:1]");
    }
    __name(isLoopbackAddress, "isLoopbackAddress");
  }
});

// node_modules/tunnel/lib/tunnel.js
var require_tunnel = __commonJS({
  "node_modules/tunnel/lib/tunnel.js"(exports) {
    "use strict";
    init_cjs_shim();
    var net = __require("net");
    var tls = __require("tls");
    var http = __require("http");
    var https = __require("https");
    var events = __require("events");
    var assert = __require("assert");
    var util = __require("util");
    exports.httpOverHttp = httpOverHttp;
    exports.httpsOverHttp = httpsOverHttp;
    exports.httpOverHttps = httpOverHttps;
    exports.httpsOverHttps = httpsOverHttps;
    function httpOverHttp(options) {
      var agent = new TunnelingAgent(options);
      agent.request = http.request;
      return agent;
    }
    __name(httpOverHttp, "httpOverHttp");
    function httpsOverHttp(options) {
      var agent = new TunnelingAgent(options);
      agent.request = http.request;
      agent.createSocket = createSecureSocket;
      agent.defaultPort = 443;
      return agent;
    }
    __name(httpsOverHttp, "httpsOverHttp");
    function httpOverHttps(options) {
      var agent = new TunnelingAgent(options);
      agent.request = https.request;
      return agent;
    }
    __name(httpOverHttps, "httpOverHttps");
    function httpsOverHttps(options) {
      var agent = new TunnelingAgent(options);
      agent.request = https.request;
      agent.createSocket = createSecureSocket;
      agent.defaultPort = 443;
      return agent;
    }
    __name(httpsOverHttps, "httpsOverHttps");
    function TunnelingAgent(options) {
      var self2 = this;
      self2.options = options || {};
      self2.proxyOptions = self2.options.proxy || {};
      self2.maxSockets = self2.options.maxSockets || http.Agent.defaultMaxSockets;
      self2.requests = [];
      self2.sockets = [];
      self2.on("free", /* @__PURE__ */ __name(function onFree(socket, host, port, localAddress) {
        var options2 = toOptions(host, port, localAddress);
        for (var i = 0, len = self2.requests.length; i < len; ++i) {
          var pending = self2.requests[i];
          if (pending.host === options2.host && pending.port === options2.port) {
            self2.requests.splice(i, 1);
            pending.request.onSocket(socket);
            return;
          }
        }
        socket.destroy();
        self2.removeSocket(socket);
      }, "onFree"));
    }
    __name(TunnelingAgent, "TunnelingAgent");
    util.inherits(TunnelingAgent, events.EventEmitter);
    TunnelingAgent.prototype.addRequest = /* @__PURE__ */ __name(function addRequest(req, host, port, localAddress) {
      var self2 = this;
      var options = mergeOptions({ request: req }, self2.options, toOptions(host, port, localAddress));
      if (self2.sockets.length >= this.maxSockets) {
        self2.requests.push(options);
        return;
      }
      self2.createSocket(options, function(socket) {
        socket.on("free", onFree);
        socket.on("close", onCloseOrRemove);
        socket.on("agentRemove", onCloseOrRemove);
        req.onSocket(socket);
        function onFree() {
          self2.emit("free", socket, options);
        }
        __name(onFree, "onFree");
        function onCloseOrRemove(err) {
          self2.removeSocket(socket);
          socket.removeListener("free", onFree);
          socket.removeListener("close", onCloseOrRemove);
          socket.removeListener("agentRemove", onCloseOrRemove);
        }
        __name(onCloseOrRemove, "onCloseOrRemove");
      });
    }, "addRequest");
    TunnelingAgent.prototype.createSocket = /* @__PURE__ */ __name(function createSocket(options, cb) {
      var self2 = this;
      var placeholder = {};
      self2.sockets.push(placeholder);
      var connectOptions = mergeOptions({}, self2.proxyOptions, {
        method: "CONNECT",
        path: options.host + ":" + options.port,
        agent: false,
        headers: {
          host: options.host + ":" + options.port
        }
      });
      if (options.localAddress) {
        connectOptions.localAddress = options.localAddress;
      }
      if (connectOptions.proxyAuth) {
        connectOptions.headers = connectOptions.headers || {};
        connectOptions.headers["Proxy-Authorization"] = "Basic " + new Buffer(connectOptions.proxyAuth).toString("base64");
      }
      debug("making CONNECT request");
      var connectReq = self2.request(connectOptions);
      connectReq.useChunkedEncodingByDefault = false;
      connectReq.once("response", onResponse);
      connectReq.once("upgrade", onUpgrade);
      connectReq.once("connect", onConnect);
      connectReq.once("error", onError);
      connectReq.end();
      function onResponse(res) {
        res.upgrade = true;
      }
      __name(onResponse, "onResponse");
      function onUpgrade(res, socket, head) {
        process.nextTick(function() {
          onConnect(res, socket, head);
        });
      }
      __name(onUpgrade, "onUpgrade");
      function onConnect(res, socket, head) {
        connectReq.removeAllListeners();
        socket.removeAllListeners();
        if (res.statusCode !== 200) {
          debug(
            "tunneling socket could not be established, statusCode=%d",
            res.statusCode
          );
          socket.destroy();
          var error = new Error("tunneling socket could not be established, statusCode=" + res.statusCode);
          error.code = "ECONNRESET";
          options.request.emit("error", error);
          self2.removeSocket(placeholder);
          return;
        }
        if (head.length > 0) {
          debug("got illegal response body from proxy");
          socket.destroy();
          var error = new Error("got illegal response body from proxy");
          error.code = "ECONNRESET";
          options.request.emit("error", error);
          self2.removeSocket(placeholder);
          return;
        }
        debug("tunneling connection has established");
        self2.sockets[self2.sockets.indexOf(placeholder)] = socket;
        return cb(socket);
      }
      __name(onConnect, "onConnect");
      function onError(cause) {
        connectReq.removeAllListeners();
        debug(
          "tunneling socket could not be established, cause=%s\n",
          cause.message,
          cause.stack
        );
        var error = new Error("tunneling socket could not be established, cause=" + cause.message);
        error.code = "ECONNRESET";
        options.request.emit("error", error);
        self2.removeSocket(placeholder);
      }
      __name(onError, "onError");
    }, "createSocket");
    TunnelingAgent.prototype.removeSocket = /* @__PURE__ */ __name(function removeSocket(socket) {
      var pos = this.sockets.indexOf(socket);
      if (pos === -1) {
        return;
      }
      this.sockets.splice(pos, 1);
      var pending = this.requests.shift();
      if (pending) {
        this.createSocket(pending, function(socket2) {
          pending.request.onSocket(socket2);
        });
      }
    }, "removeSocket");
    function createSecureSocket(options, cb) {
      var self2 = this;
      TunnelingAgent.prototype.createSocket.call(self2, options, function(socket) {
        var hostHeader = options.request.getHeader("host");
        var tlsOptions = mergeOptions({}, self2.options, {
          socket,
          servername: hostHeader ? hostHeader.replace(/:.*$/, "") : options.host
        });
        var secureSocket = tls.connect(0, tlsOptions);
        self2.sockets[self2.sockets.indexOf(socket)] = secureSocket;
        cb(secureSocket);
      });
    }
    __name(createSecureSocket, "createSecureSocket");
    function toOptions(host, port, localAddress) {
      if (typeof host === "string") {
        return {
          host,
          port,
          localAddress
        };
      }
      return host;
    }
    __name(toOptions, "toOptions");
    function mergeOptions(target) {
      for (var i = 1, len = arguments.length; i < len; ++i) {
        var overrides = arguments[i];
        if (typeof overrides === "object") {
          var keys = Object.keys(overrides);
          for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
            var k = keys[j];
            if (overrides[k] !== void 0) {
              target[k] = overrides[k];
            }
          }
        }
      }
      return target;
    }
    __name(mergeOptions, "mergeOptions");
    var debug;
    if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
      debug = /* @__PURE__ */ __name(function() {
        var args = Array.prototype.slice.call(arguments);
        if (typeof args[0] === "string") {
          args[0] = "TUNNEL: " + args[0];
        } else {
          args.unshift("TUNNEL:");
        }
        console.error.apply(console, args);
      }, "debug");
    } else {
      debug = /* @__PURE__ */ __name(function() {
      }, "debug");
    }
    exports.debug = debug;
  }
});

// node_modules/tunnel/index.js
var require_tunnel2 = __commonJS({
  "node_modules/tunnel/index.js"(exports, module) {
    init_cjs_shim();
    module.exports = require_tunnel();
  }
});

// node_modules/undici/lib/core/symbols.js
var require_symbols = __commonJS({
  "node_modules/undici/lib/core/symbols.js"(exports, module) {
    init_cjs_shim();
    module.exports = {
      kClose: Symbol("close"),
      kDestroy: Symbol("destroy"),
      kDispatch: Symbol("dispatch"),
      kUrl: Symbol("url"),
      kWriting: Symbol("writing"),
      kResuming: Symbol("resuming"),
      kQueue: Symbol("queue"),
      kConnect: Symbol("connect"),
      kConnecting: Symbol("connecting"),
      kHeadersList: Symbol("headers list"),
      kKeepAliveDefaultTimeout: Symbol("default keep alive timeout"),
      kKeepAliveMaxTimeout: Symbol("max keep alive timeout"),
      kKeepAliveTimeoutThreshold: Symbol("keep alive timeout threshold"),
      kKeepAliveTimeoutValue: Symbol("keep alive timeout"),
      kKeepAlive: Symbol("keep alive"),
      kHeadersTimeout: Symbol("headers timeout"),
      kBodyTimeout: Symbol("body timeout"),
      kServerName: Symbol("server name"),
      kLocalAddress: Symbol("local address"),
      kHost: Symbol("host"),
      kNoRef: Symbol("no ref"),
      kBodyUsed: Symbol("used"),
      kRunning: Symbol("running"),
      kBlocking: Symbol("blocking"),
      kPending: Symbol("pending"),
      kSize: Symbol("size"),
      kBusy: Symbol("busy"),
      kQueued: Symbol("queued"),
      kFree: Symbol("free"),
      kConnected: Symbol("connected"),
      kClosed: Symbol("closed"),
      kNeedDrain: Symbol("need drain"),
      kReset: Symbol("reset"),
      kDestroyed: Symbol.for("nodejs.stream.destroyed"),
      kMaxHeadersSize: Symbol("max headers size"),
      kRunningIdx: Symbol("running index"),
      kPendingIdx: Symbol("pending index"),
      kError: Symbol("error"),
      kClients: Symbol("clients"),
      kClient: Symbol("client"),
      kParser: Symbol("parser"),
      kOnDestroyed: Symbol("destroy callbacks"),
      kPipelining: Symbol("pipelining"),
      kSocket: Symbol("socket"),
      kHostHeader: Symbol("host header"),
      kConnector: Symbol("connector"),
      kStrictContentLength: Symbol("strict content length"),
      kMaxRedirections: Symbol("maxRedirections"),
      kMaxRequests: Symbol("maxRequestsPerClient"),
      kProxy: Symbol("proxy agent options"),
      kCounter: Symbol("socket request counter"),
      kInterceptors: Symbol("dispatch interceptors"),
      kMaxResponseSize: Symbol("max response size"),
      kHTTP2Session: Symbol("http2Session"),
      kHTTP2SessionState: Symbol("http2Session state"),
      kHTTP2BuildRequest: Symbol("http2 build request"),
      kHTTP1BuildRequest: Symbol("http1 build request"),
      kHTTP2CopyHeaders: Symbol("http2 copy headers"),
      kHTTPConnVersion: Symbol("http connection version"),
      kRetryHandlerDefaultRetry: Symbol("retry agent default retry"),
      kConstruct: Symbol("constructable")
    };
  }
});

// node_modules/undici/lib/core/errors.js
var require_errors = __commonJS({
  "node_modules/undici/lib/core/errors.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var UndiciError = class extends Error {
      static {
        __name(this, "UndiciError");
      }
      constructor(message) {
        super(message);
        this.name = "UndiciError";
        this.code = "UND_ERR";
      }
    };
    var ConnectTimeoutError = class _ConnectTimeoutError extends UndiciError {
      static {
        __name(this, "ConnectTimeoutError");
      }
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _ConnectTimeoutError);
        this.name = "ConnectTimeoutError";
        this.message = message || "Connect Timeout Error";
        this.code = "UND_ERR_CONNECT_TIMEOUT";
      }
    };
    var HeadersTimeoutError = class _HeadersTimeoutError extends UndiciError {
      static {
        __name(this, "HeadersTimeoutError");
      }
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _HeadersTimeoutError);
        this.name = "HeadersTimeoutError";
        this.message = message || "Headers Timeout Error";
        this.code = "UND_ERR_HEADERS_TIMEOUT";
      }
    };
    var HeadersOverflowError = class _HeadersOverflowError extends UndiciError {
      static {
        __name(this, "HeadersOverflowError");
      }
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _HeadersOverflowError);
        this.name = "HeadersOverflowError";
        this.message = message || "Headers Overflow Error";
        this.code = "UND_ERR_HEADERS_OVERFLOW";
      }
    };
    var BodyTimeoutError = class _BodyTimeoutError extends UndiciError {
      static {
        __name(this, "BodyTimeoutError");
      }
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _BodyTimeoutError);
        this.name = "BodyTimeoutError";
        this.message = message || "Body Timeout Error";
        this.code = "UND_ERR_BODY_TIMEOUT";
      }
    };
    var ResponseStatusCodeError = class _ResponseStatusCodeError extends UndiciError {
      static {
        __name(this, "ResponseStatusCodeError");
      }
      constructor(message, statusCode, headers, body) {
        super(message);
        Error.captureStackTrace(this, _ResponseStatusCodeError);
        this.name = "ResponseStatusCodeError";
        this.message = message || "Response Status Code Error";
        this.code = "UND_ERR_RESPONSE_STATUS_CODE";
        this.body = body;
        this.status = statusCode;
        this.statusCode = statusCode;
        this.headers = headers;
      }
    };
    var InvalidArgumentError = class _InvalidArgumentError extends UndiciError {
      static {
        __name(this, "InvalidArgumentError");
      }
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _InvalidArgumentError);
        this.name = "InvalidArgumentError";
        this.message = message || "Invalid Argument Error";
        this.code = "UND_ERR_INVALID_ARG";
      }
    };
    var InvalidReturnValueError = class _InvalidReturnValueError extends UndiciError {
      static {
        __name(this, "InvalidReturnValueError");
      }
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _InvalidReturnValueError);
        this.name = "InvalidReturnValueError";
        this.message = message || "Invalid Return Value Error";
        this.code = "UND_ERR_INVALID_RETURN_VALUE";
      }
    };
    var RequestAbortedError = class _RequestAbortedError extends UndiciError {
      static {
        __name(this, "RequestAbortedError");
      }
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _RequestAbortedError);
        this.name = "AbortError";
        this.message = message || "Request aborted";
        this.code = "UND_ERR_ABORTED";
      }
    };
    var InformationalError = class _InformationalError extends UndiciError {
      static {
        __name(this, "InformationalError");
      }
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _InformationalError);
        this.name = "InformationalError";
        this.message = message || "Request information";
        this.code = "UND_ERR_INFO";
      }
    };
    var RequestContentLengthMismatchError = class _RequestContentLengthMismatchError extends UndiciError {
      static {
        __name(this, "RequestContentLengthMismatchError");
      }
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _RequestContentLengthMismatchError);
        this.name = "RequestContentLengthMismatchError";
        this.message = message || "Request body length does not match content-length header";
        this.code = "UND_ERR_REQ_CONTENT_LENGTH_MISMATCH";
      }
    };
    var ResponseContentLengthMismatchError = class _ResponseContentLengthMismatchError extends UndiciError {
      static {
        __name(this, "ResponseContentLengthMismatchError");
      }
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _ResponseContentLengthMismatchError);
        this.name = "ResponseContentLengthMismatchError";
        this.message = message || "Response body length does not match content-length header";
        this.code = "UND_ERR_RES_CONTENT_LENGTH_MISMATCH";
      }
    };
    var ClientDestroyedError = class _ClientDestroyedError extends UndiciError {
      static {
        __name(this, "ClientDestroyedError");
      }
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _ClientDestroyedError);
        this.name = "ClientDestroyedError";
        this.message = message || "The client is destroyed";
        this.code = "UND_ERR_DESTROYED";
      }
    };
    var ClientClosedError = class _ClientClosedError extends UndiciError {
      static {
        __name(this, "ClientClosedError");
      }
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _ClientClosedError);
        this.name = "ClientClosedError";
        this.message = message || "The client is closed";
        this.code = "UND_ERR_CLOSED";
      }
    };
    var SocketError = class _SocketError extends UndiciError {
      static {
        __name(this, "SocketError");
      }
      constructor(message, socket) {
        super(message);
        Error.captureStackTrace(this, _SocketError);
        this.name = "SocketError";
        this.message = message || "Socket error";
        this.code = "UND_ERR_SOCKET";
        this.socket = socket;
      }
    };
    var NotSupportedError = class _NotSupportedError extends UndiciError {
      static {
        __name(this, "NotSupportedError");
      }
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _NotSupportedError);
        this.name = "NotSupportedError";
        this.message = message || "Not supported error";
        this.code = "UND_ERR_NOT_SUPPORTED";
      }
    };
    var BalancedPoolMissingUpstreamError = class extends UndiciError {
      static {
        __name(this, "BalancedPoolMissingUpstreamError");
      }
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, NotSupportedError);
        this.name = "MissingUpstreamError";
        this.message = message || "No upstream has been added to the BalancedPool";
        this.code = "UND_ERR_BPL_MISSING_UPSTREAM";
      }
    };
    var HTTPParserError = class _HTTPParserError extends Error {
      static {
        __name(this, "HTTPParserError");
      }
      constructor(message, code, data) {
        super(message);
        Error.captureStackTrace(this, _HTTPParserError);
        this.name = "HTTPParserError";
        this.code = code ? `HPE_${code}` : void 0;
        this.data = data ? data.toString() : void 0;
      }
    };
    var ResponseExceededMaxSizeError = class _ResponseExceededMaxSizeError extends UndiciError {
      static {
        __name(this, "ResponseExceededMaxSizeError");
      }
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _ResponseExceededMaxSizeError);
        this.name = "ResponseExceededMaxSizeError";
        this.message = message || "Response content exceeded max size";
        this.code = "UND_ERR_RES_EXCEEDED_MAX_SIZE";
      }
    };
    var RequestRetryError = class _RequestRetryError extends UndiciError {
      static {
        __name(this, "RequestRetryError");
      }
      constructor(message, code, { headers, data }) {
        super(message);
        Error.captureStackTrace(this, _RequestRetryError);
        this.name = "RequestRetryError";
        this.message = message || "Request retry error";
        this.code = "UND_ERR_REQ_RETRY";
        this.statusCode = code;
        this.data = data;
        this.headers = headers;
      }
    };
    module.exports = {
      HTTPParserError,
      UndiciError,
      HeadersTimeoutError,
      HeadersOverflowError,
      BodyTimeoutError,
      RequestContentLengthMismatchError,
      ConnectTimeoutError,
      ResponseStatusCodeError,
      InvalidArgumentError,
      InvalidReturnValueError,
      RequestAbortedError,
      ClientDestroyedError,
      ClientClosedError,
      InformationalError,
      SocketError,
      NotSupportedError,
      ResponseContentLengthMismatchError,
      BalancedPoolMissingUpstreamError,
      ResponseExceededMaxSizeError,
      RequestRetryError
    };
  }
});

// node_modules/undici/lib/core/constants.js
var require_constants = __commonJS({
  "node_modules/undici/lib/core/constants.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var headerNameLowerCasedRecord = {};
    var wellknownHeaderNames = [
      "Accept",
      "Accept-Encoding",
      "Accept-Language",
      "Accept-Ranges",
      "Access-Control-Allow-Credentials",
      "Access-Control-Allow-Headers",
      "Access-Control-Allow-Methods",
      "Access-Control-Allow-Origin",
      "Access-Control-Expose-Headers",
      "Access-Control-Max-Age",
      "Access-Control-Request-Headers",
      "Access-Control-Request-Method",
      "Age",
      "Allow",
      "Alt-Svc",
      "Alt-Used",
      "Authorization",
      "Cache-Control",
      "Clear-Site-Data",
      "Connection",
      "Content-Disposition",
      "Content-Encoding",
      "Content-Language",
      "Content-Length",
      "Content-Location",
      "Content-Range",
      "Content-Security-Policy",
      "Content-Security-Policy-Report-Only",
      "Content-Type",
      "Cookie",
      "Cross-Origin-Embedder-Policy",
      "Cross-Origin-Opener-Policy",
      "Cross-Origin-Resource-Policy",
      "Date",
      "Device-Memory",
      "Downlink",
      "ECT",
      "ETag",
      "Expect",
      "Expect-CT",
      "Expires",
      "Forwarded",
      "From",
      "Host",
      "If-Match",
      "If-Modified-Since",
      "If-None-Match",
      "If-Range",
      "If-Unmodified-Since",
      "Keep-Alive",
      "Last-Modified",
      "Link",
      "Location",
      "Max-Forwards",
      "Origin",
      "Permissions-Policy",
      "Pragma",
      "Proxy-Authenticate",
      "Proxy-Authorization",
      "RTT",
      "Range",
      "Referer",
      "Referrer-Policy",
      "Refresh",
      "Retry-After",
      "Sec-WebSocket-Accept",
      "Sec-WebSocket-Extensions",
      "Sec-WebSocket-Key",
      "Sec-WebSocket-Protocol",
      "Sec-WebSocket-Version",
      "Server",
      "Server-Timing",
      "Service-Worker-Allowed",
      "Service-Worker-Navigation-Preload",
      "Set-Cookie",
      "SourceMap",
      "Strict-Transport-Security",
      "Supports-Loading-Mode",
      "TE",
      "Timing-Allow-Origin",
      "Trailer",
      "Transfer-Encoding",
      "Upgrade",
      "Upgrade-Insecure-Requests",
      "User-Agent",
      "Vary",
      "Via",
      "WWW-Authenticate",
      "X-Content-Type-Options",
      "X-DNS-Prefetch-Control",
      "X-Frame-Options",
      "X-Permitted-Cross-Domain-Policies",
      "X-Powered-By",
      "X-Requested-With",
      "X-XSS-Protection"
    ];
    for (let i = 0; i < wellknownHeaderNames.length; ++i) {
      const key = wellknownHeaderNames[i];
      const lowerCasedKey = key.toLowerCase();
      headerNameLowerCasedRecord[key] = headerNameLowerCasedRecord[lowerCasedKey] = lowerCasedKey;
    }
    Object.setPrototypeOf(headerNameLowerCasedRecord, null);
    module.exports = {
      wellknownHeaderNames,
      headerNameLowerCasedRecord
    };
  }
});

// node_modules/undici/lib/core/util.js
var require_util2 = __commonJS({
  "node_modules/undici/lib/core/util.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var assert = __require("assert");
    var { kDestroyed, kBodyUsed } = require_symbols();
    var { IncomingMessage } = __require("http");
    var stream = __require("stream");
    var net = __require("net");
    var { InvalidArgumentError } = require_errors();
    var { Blob: Blob2 } = __require("buffer");
    var nodeUtil = __require("util");
    var { stringify: stringify2 } = __require("querystring");
    var { headerNameLowerCasedRecord } = require_constants();
    var [nodeMajor, nodeMinor] = process.versions.node.split(".").map((v) => Number(v));
    function nop() {
    }
    __name(nop, "nop");
    function isStream(obj) {
      return obj && typeof obj === "object" && typeof obj.pipe === "function" && typeof obj.on === "function";
    }
    __name(isStream, "isStream");
    function isBlobLike(object) {
      return Blob2 && object instanceof Blob2 || object && typeof object === "object" && (typeof object.stream === "function" || typeof object.arrayBuffer === "function") && /^(Blob|File)$/.test(object[Symbol.toStringTag]);
    }
    __name(isBlobLike, "isBlobLike");
    function buildURL(url2, queryParams) {
      if (url2.includes("?") || url2.includes("#")) {
        throw new Error('Query params cannot be passed when url already contains "?" or "#".');
      }
      const stringified = stringify2(queryParams);
      if (stringified) {
        url2 += "?" + stringified;
      }
      return url2;
    }
    __name(buildURL, "buildURL");
    function parseURL(url2) {
      if (typeof url2 === "string") {
        url2 = new URL(url2);
        if (!/^https?:/.test(url2.origin || url2.protocol)) {
          throw new InvalidArgumentError("Invalid URL protocol: the URL must start with `http:` or `https:`.");
        }
        return url2;
      }
      if (!url2 || typeof url2 !== "object") {
        throw new InvalidArgumentError("Invalid URL: The URL argument must be a non-null object.");
      }
      if (!/^https?:/.test(url2.origin || url2.protocol)) {
        throw new InvalidArgumentError("Invalid URL protocol: the URL must start with `http:` or `https:`.");
      }
      if (!(url2 instanceof URL)) {
        if (url2.port != null && url2.port !== "" && !Number.isFinite(parseInt(url2.port))) {
          throw new InvalidArgumentError("Invalid URL: port must be a valid integer or a string representation of an integer.");
        }
        if (url2.path != null && typeof url2.path !== "string") {
          throw new InvalidArgumentError("Invalid URL path: the path must be a string or null/undefined.");
        }
        if (url2.pathname != null && typeof url2.pathname !== "string") {
          throw new InvalidArgumentError("Invalid URL pathname: the pathname must be a string or null/undefined.");
        }
        if (url2.hostname != null && typeof url2.hostname !== "string") {
          throw new InvalidArgumentError("Invalid URL hostname: the hostname must be a string or null/undefined.");
        }
        if (url2.origin != null && typeof url2.origin !== "string") {
          throw new InvalidArgumentError("Invalid URL origin: the origin must be a string or null/undefined.");
        }
        const port = url2.port != null ? url2.port : url2.protocol === "https:" ? 443 : 80;
        let origin = url2.origin != null ? url2.origin : `${url2.protocol}//${url2.hostname}:${port}`;
        let path5 = url2.path != null ? url2.path : `${url2.pathname || ""}${url2.search || ""}`;
        if (origin.endsWith("/")) {
          origin = origin.substring(0, origin.length - 1);
        }
        if (path5 && !path5.startsWith("/")) {
          path5 = `/${path5}`;
        }
        url2 = new URL(origin + path5);
      }
      return url2;
    }
    __name(parseURL, "parseURL");
    function parseOrigin(url2) {
      url2 = parseURL(url2);
      if (url2.pathname !== "/" || url2.search || url2.hash) {
        throw new InvalidArgumentError("invalid url");
      }
      return url2;
    }
    __name(parseOrigin, "parseOrigin");
    function getHostname(host) {
      if (host[0] === "[") {
        const idx2 = host.indexOf("]");
        assert(idx2 !== -1);
        return host.substring(1, idx2);
      }
      const idx = host.indexOf(":");
      if (idx === -1) return host;
      return host.substring(0, idx);
    }
    __name(getHostname, "getHostname");
    function getServerName(host) {
      if (!host) {
        return null;
      }
      assert.strictEqual(typeof host, "string");
      const servername = getHostname(host);
      if (net.isIP(servername)) {
        return "";
      }
      return servername;
    }
    __name(getServerName, "getServerName");
    function deepClone(obj) {
      return JSON.parse(JSON.stringify(obj));
    }
    __name(deepClone, "deepClone");
    function isAsyncIterable(obj) {
      return !!(obj != null && typeof obj[Symbol.asyncIterator] === "function");
    }
    __name(isAsyncIterable, "isAsyncIterable");
    function isIterable(obj) {
      return !!(obj != null && (typeof obj[Symbol.iterator] === "function" || typeof obj[Symbol.asyncIterator] === "function"));
    }
    __name(isIterable, "isIterable");
    function bodyLength(body) {
      if (body == null) {
        return 0;
      } else if (isStream(body)) {
        const state = body._readableState;
        return state && state.objectMode === false && state.ended === true && Number.isFinite(state.length) ? state.length : null;
      } else if (isBlobLike(body)) {
        return body.size != null ? body.size : null;
      } else if (isBuffer(body)) {
        return body.byteLength;
      }
      return null;
    }
    __name(bodyLength, "bodyLength");
    function isDestroyed(stream2) {
      return !stream2 || !!(stream2.destroyed || stream2[kDestroyed]);
    }
    __name(isDestroyed, "isDestroyed");
    function isReadableAborted(stream2) {
      const state = stream2 && stream2._readableState;
      return isDestroyed(stream2) && state && !state.endEmitted;
    }
    __name(isReadableAborted, "isReadableAborted");
    function destroy(stream2, err) {
      if (stream2 == null || !isStream(stream2) || isDestroyed(stream2)) {
        return;
      }
      if (typeof stream2.destroy === "function") {
        if (Object.getPrototypeOf(stream2).constructor === IncomingMessage) {
          stream2.socket = null;
        }
        stream2.destroy(err);
      } else if (err) {
        process.nextTick((stream3, err2) => {
          stream3.emit("error", err2);
        }, stream2, err);
      }
      if (stream2.destroyed !== true) {
        stream2[kDestroyed] = true;
      }
    }
    __name(destroy, "destroy");
    var KEEPALIVE_TIMEOUT_EXPR = /timeout=(\d+)/;
    function parseKeepAliveTimeout(val) {
      const m = val.toString().match(KEEPALIVE_TIMEOUT_EXPR);
      return m ? parseInt(m[1], 10) * 1e3 : null;
    }
    __name(parseKeepAliveTimeout, "parseKeepAliveTimeout");
    function headerNameToString(value) {
      return headerNameLowerCasedRecord[value] || value.toLowerCase();
    }
    __name(headerNameToString, "headerNameToString");
    function parseHeaders(headers, obj = {}) {
      if (!Array.isArray(headers)) return headers;
      for (let i = 0; i < headers.length; i += 2) {
        const key = headers[i].toString().toLowerCase();
        let val = obj[key];
        if (!val) {
          if (Array.isArray(headers[i + 1])) {
            obj[key] = headers[i + 1].map((x) => x.toString("utf8"));
          } else {
            obj[key] = headers[i + 1].toString("utf8");
          }
        } else {
          if (!Array.isArray(val)) {
            val = [val];
            obj[key] = val;
          }
          val.push(headers[i + 1].toString("utf8"));
        }
      }
      if ("content-length" in obj && "content-disposition" in obj) {
        obj["content-disposition"] = Buffer.from(obj["content-disposition"]).toString("latin1");
      }
      return obj;
    }
    __name(parseHeaders, "parseHeaders");
    function parseRawHeaders(headers) {
      const ret = [];
      let hasContentLength = false;
      let contentDispositionIdx = -1;
      for (let n = 0; n < headers.length; n += 2) {
        const key = headers[n + 0].toString();
        const val = headers[n + 1].toString("utf8");
        if (key.length === 14 && (key === "content-length" || key.toLowerCase() === "content-length")) {
          ret.push(key, val);
          hasContentLength = true;
        } else if (key.length === 19 && (key === "content-disposition" || key.toLowerCase() === "content-disposition")) {
          contentDispositionIdx = ret.push(key, val) - 1;
        } else {
          ret.push(key, val);
        }
      }
      if (hasContentLength && contentDispositionIdx !== -1) {
        ret[contentDispositionIdx] = Buffer.from(ret[contentDispositionIdx]).toString("latin1");
      }
      return ret;
    }
    __name(parseRawHeaders, "parseRawHeaders");
    function isBuffer(buffer) {
      return buffer instanceof Uint8Array || Buffer.isBuffer(buffer);
    }
    __name(isBuffer, "isBuffer");
    function validateHandler(handler, method, upgrade) {
      if (!handler || typeof handler !== "object") {
        throw new InvalidArgumentError("handler must be an object");
      }
      if (typeof handler.onConnect !== "function") {
        throw new InvalidArgumentError("invalid onConnect method");
      }
      if (typeof handler.onError !== "function") {
        throw new InvalidArgumentError("invalid onError method");
      }
      if (typeof handler.onBodySent !== "function" && handler.onBodySent !== void 0) {
        throw new InvalidArgumentError("invalid onBodySent method");
      }
      if (upgrade || method === "CONNECT") {
        if (typeof handler.onUpgrade !== "function") {
          throw new InvalidArgumentError("invalid onUpgrade method");
        }
      } else {
        if (typeof handler.onHeaders !== "function") {
          throw new InvalidArgumentError("invalid onHeaders method");
        }
        if (typeof handler.onData !== "function") {
          throw new InvalidArgumentError("invalid onData method");
        }
        if (typeof handler.onComplete !== "function") {
          throw new InvalidArgumentError("invalid onComplete method");
        }
      }
    }
    __name(validateHandler, "validateHandler");
    function isDisturbed(body) {
      return !!(body && (stream.isDisturbed ? stream.isDisturbed(body) || body[kBodyUsed] : body[kBodyUsed] || body.readableDidRead || body._readableState && body._readableState.dataEmitted || isReadableAborted(body)));
    }
    __name(isDisturbed, "isDisturbed");
    function isErrored(body) {
      return !!(body && (stream.isErrored ? stream.isErrored(body) : /state: 'errored'/.test(
        nodeUtil.inspect(body)
      )));
    }
    __name(isErrored, "isErrored");
    function isReadable(body) {
      return !!(body && (stream.isReadable ? stream.isReadable(body) : /state: 'readable'/.test(
        nodeUtil.inspect(body)
      )));
    }
    __name(isReadable, "isReadable");
    function getSocketInfo(socket) {
      return {
        localAddress: socket.localAddress,
        localPort: socket.localPort,
        remoteAddress: socket.remoteAddress,
        remotePort: socket.remotePort,
        remoteFamily: socket.remoteFamily,
        timeout: socket.timeout,
        bytesWritten: socket.bytesWritten,
        bytesRead: socket.bytesRead
      };
    }
    __name(getSocketInfo, "getSocketInfo");
    async function* convertIterableToBuffer(iterable) {
      for await (const chunk of iterable) {
        yield Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk);
      }
    }
    __name(convertIterableToBuffer, "convertIterableToBuffer");
    var ReadableStream2;
    function ReadableStreamFrom(iterable) {
      if (!ReadableStream2) {
        ReadableStream2 = __require("stream/web").ReadableStream;
      }
      if (ReadableStream2.from) {
        return ReadableStream2.from(convertIterableToBuffer(iterable));
      }
      let iterator;
      return new ReadableStream2(
        {
          async start() {
            iterator = iterable[Symbol.asyncIterator]();
          },
          async pull(controller) {
            const { done, value } = await iterator.next();
            if (done) {
              queueMicrotask(() => {
                controller.close();
              });
            } else {
              const buf = Buffer.isBuffer(value) ? value : Buffer.from(value);
              controller.enqueue(new Uint8Array(buf));
            }
            return controller.desiredSize > 0;
          },
          async cancel(reason) {
            await iterator.return();
          }
        },
        0
      );
    }
    __name(ReadableStreamFrom, "ReadableStreamFrom");
    function isFormDataLike(object) {
      return object && typeof object === "object" && typeof object.append === "function" && typeof object.delete === "function" && typeof object.get === "function" && typeof object.getAll === "function" && typeof object.has === "function" && typeof object.set === "function" && object[Symbol.toStringTag] === "FormData";
    }
    __name(isFormDataLike, "isFormDataLike");
    function throwIfAborted(signal) {
      if (!signal) {
        return;
      }
      if (typeof signal.throwIfAborted === "function") {
        signal.throwIfAborted();
      } else {
        if (signal.aborted) {
          const err = new Error("The operation was aborted");
          err.name = "AbortError";
          throw err;
        }
      }
    }
    __name(throwIfAborted, "throwIfAborted");
    function addAbortListener(signal, listener) {
      if ("addEventListener" in signal) {
        signal.addEventListener("abort", listener, { once: true });
        return () => signal.removeEventListener("abort", listener);
      }
      signal.addListener("abort", listener);
      return () => signal.removeListener("abort", listener);
    }
    __name(addAbortListener, "addAbortListener");
    var hasToWellFormed = !!String.prototype.toWellFormed;
    function toUSVString(val) {
      if (hasToWellFormed) {
        return `${val}`.toWellFormed();
      } else if (nodeUtil.toUSVString) {
        return nodeUtil.toUSVString(val);
      }
      return `${val}`;
    }
    __name(toUSVString, "toUSVString");
    function parseRangeHeader(range) {
      if (range == null || range === "") return { start: 0, end: null, size: null };
      const m = range ? range.match(/^bytes (\d+)-(\d+)\/(\d+)?$/) : null;
      return m ? {
        start: parseInt(m[1]),
        end: m[2] ? parseInt(m[2]) : null,
        size: m[3] ? parseInt(m[3]) : null
      } : null;
    }
    __name(parseRangeHeader, "parseRangeHeader");
    var kEnumerableProperty = /* @__PURE__ */ Object.create(null);
    kEnumerableProperty.enumerable = true;
    module.exports = {
      kEnumerableProperty,
      nop,
      isDisturbed,
      isErrored,
      isReadable,
      toUSVString,
      isReadableAborted,
      isBlobLike,
      parseOrigin,
      parseURL,
      getServerName,
      isStream,
      isIterable,
      isAsyncIterable,
      isDestroyed,
      headerNameToString,
      parseRawHeaders,
      parseHeaders,
      parseKeepAliveTimeout,
      destroy,
      bodyLength,
      deepClone,
      ReadableStreamFrom,
      isBuffer,
      validateHandler,
      getSocketInfo,
      isFormDataLike,
      buildURL,
      throwIfAborted,
      addAbortListener,
      parseRangeHeader,
      nodeMajor,
      nodeMinor,
      nodeHasAutoSelectFamily: nodeMajor > 18 || nodeMajor === 18 && nodeMinor >= 13,
      safeHTTPMethods: ["GET", "HEAD", "OPTIONS", "TRACE"]
    };
  }
});

// node_modules/undici/lib/timers.js
var require_timers = __commonJS({
  "node_modules/undici/lib/timers.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var fastNow = Date.now();
    var fastNowTimeout;
    var fastTimers = [];
    function onTimeout() {
      fastNow = Date.now();
      let len = fastTimers.length;
      let idx = 0;
      while (idx < len) {
        const timer = fastTimers[idx];
        if (timer.state === 0) {
          timer.state = fastNow + timer.delay;
        } else if (timer.state > 0 && fastNow >= timer.state) {
          timer.state = -1;
          timer.callback(timer.opaque);
        }
        if (timer.state === -1) {
          timer.state = -2;
          if (idx !== len - 1) {
            fastTimers[idx] = fastTimers.pop();
          } else {
            fastTimers.pop();
          }
          len -= 1;
        } else {
          idx += 1;
        }
      }
      if (fastTimers.length > 0) {
        refreshTimeout();
      }
    }
    __name(onTimeout, "onTimeout");
    function refreshTimeout() {
      if (fastNowTimeout && fastNowTimeout.refresh) {
        fastNowTimeout.refresh();
      } else {
        clearTimeout(fastNowTimeout);
        fastNowTimeout = setTimeout(onTimeout, 1e3);
        if (fastNowTimeout.unref) {
          fastNowTimeout.unref();
        }
      }
    }
    __name(refreshTimeout, "refreshTimeout");
    var Timeout = class {
      static {
        __name(this, "Timeout");
      }
      constructor(callback, delay, opaque) {
        this.callback = callback;
        this.delay = delay;
        this.opaque = opaque;
        this.state = -2;
        this.refresh();
      }
      refresh() {
        if (this.state === -2) {
          fastTimers.push(this);
          if (!fastNowTimeout || fastTimers.length === 1) {
            refreshTimeout();
          }
        }
        this.state = 0;
      }
      clear() {
        this.state = -1;
      }
    };
    module.exports = {
      setTimeout(callback, delay, opaque) {
        return delay < 1e3 ? setTimeout(callback, delay, opaque) : new Timeout(callback, delay, opaque);
      },
      clearTimeout(timeout) {
        if (timeout instanceof Timeout) {
          timeout.clear();
        } else {
          clearTimeout(timeout);
        }
      }
    };
  }
});

// node_modules/@fastify/busboy/deps/streamsearch/sbmh.js
var require_sbmh = __commonJS({
  "node_modules/@fastify/busboy/deps/streamsearch/sbmh.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var EventEmitter = __require("node:events").EventEmitter;
    var inherits = __require("node:util").inherits;
    function SBMH(needle) {
      if (typeof needle === "string") {
        needle = Buffer.from(needle);
      }
      if (!Buffer.isBuffer(needle)) {
        throw new TypeError("The needle has to be a String or a Buffer.");
      }
      const needleLength = needle.length;
      if (needleLength === 0) {
        throw new Error("The needle cannot be an empty String/Buffer.");
      }
      if (needleLength > 256) {
        throw new Error("The needle cannot have a length bigger than 256.");
      }
      this.maxMatches = Infinity;
      this.matches = 0;
      this._occ = new Array(256).fill(needleLength);
      this._lookbehind_size = 0;
      this._needle = needle;
      this._bufpos = 0;
      this._lookbehind = Buffer.alloc(needleLength);
      for (var i = 0; i < needleLength - 1; ++i) {
        this._occ[needle[i]] = needleLength - 1 - i;
      }
    }
    __name(SBMH, "SBMH");
    inherits(SBMH, EventEmitter);
    SBMH.prototype.reset = function() {
      this._lookbehind_size = 0;
      this.matches = 0;
      this._bufpos = 0;
    };
    SBMH.prototype.push = function(chunk, pos) {
      if (!Buffer.isBuffer(chunk)) {
        chunk = Buffer.from(chunk, "binary");
      }
      const chlen = chunk.length;
      this._bufpos = pos || 0;
      let r;
      while (r !== chlen && this.matches < this.maxMatches) {
        r = this._sbmh_feed(chunk);
      }
      return r;
    };
    SBMH.prototype._sbmh_feed = function(data) {
      const len = data.length;
      const needle = this._needle;
      const needleLength = needle.length;
      const lastNeedleChar = needle[needleLength - 1];
      let pos = -this._lookbehind_size;
      let ch;
      if (pos < 0) {
        while (pos < 0 && pos <= len - needleLength) {
          ch = this._sbmh_lookup_char(data, pos + needleLength - 1);
          if (ch === lastNeedleChar && this._sbmh_memcmp(data, pos, needleLength - 1)) {
            this._lookbehind_size = 0;
            ++this.matches;
            this.emit("info", true);
            return this._bufpos = pos + needleLength;
          }
          pos += this._occ[ch];
        }
        if (pos < 0) {
          while (pos < 0 && !this._sbmh_memcmp(data, pos, len - pos)) {
            ++pos;
          }
        }
        if (pos >= 0) {
          this.emit("info", false, this._lookbehind, 0, this._lookbehind_size);
          this._lookbehind_size = 0;
        } else {
          const bytesToCutOff = this._lookbehind_size + pos;
          if (bytesToCutOff > 0) {
            this.emit("info", false, this._lookbehind, 0, bytesToCutOff);
          }
          this._lookbehind.copy(
            this._lookbehind,
            0,
            bytesToCutOff,
            this._lookbehind_size - bytesToCutOff
          );
          this._lookbehind_size -= bytesToCutOff;
          data.copy(this._lookbehind, this._lookbehind_size);
          this._lookbehind_size += len;
          this._bufpos = len;
          return len;
        }
      }
      pos += (pos >= 0) * this._bufpos;
      if (data.indexOf(needle, pos) !== -1) {
        pos = data.indexOf(needle, pos);
        ++this.matches;
        if (pos > 0) {
          this.emit("info", true, data, this._bufpos, pos);
        } else {
          this.emit("info", true);
        }
        return this._bufpos = pos + needleLength;
      } else {
        pos = len - needleLength;
      }
      while (pos < len && (data[pos] !== needle[0] || Buffer.compare(
        data.subarray(pos, pos + len - pos),
        needle.subarray(0, len - pos)
      ) !== 0)) {
        ++pos;
      }
      if (pos < len) {
        data.copy(this._lookbehind, 0, pos, pos + (len - pos));
        this._lookbehind_size = len - pos;
      }
      if (pos > 0) {
        this.emit("info", false, data, this._bufpos, pos < len ? pos : len);
      }
      this._bufpos = len;
      return len;
    };
    SBMH.prototype._sbmh_lookup_char = function(data, pos) {
      return pos < 0 ? this._lookbehind[this._lookbehind_size + pos] : data[pos];
    };
    SBMH.prototype._sbmh_memcmp = function(data, pos, len) {
      for (var i = 0; i < len; ++i) {
        if (this._sbmh_lookup_char(data, pos + i) !== this._needle[i]) {
          return false;
        }
      }
      return true;
    };
    module.exports = SBMH;
  }
});

// node_modules/@fastify/busboy/deps/dicer/lib/PartStream.js
var require_PartStream = __commonJS({
  "node_modules/@fastify/busboy/deps/dicer/lib/PartStream.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var inherits = __require("node:util").inherits;
    var ReadableStream2 = __require("node:stream").Readable;
    function PartStream(opts) {
      ReadableStream2.call(this, opts);
    }
    __name(PartStream, "PartStream");
    inherits(PartStream, ReadableStream2);
    PartStream.prototype._read = function(n) {
    };
    module.exports = PartStream;
  }
});

// node_modules/@fastify/busboy/lib/utils/getLimit.js
var require_getLimit = __commonJS({
  "node_modules/@fastify/busboy/lib/utils/getLimit.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    module.exports = /* @__PURE__ */ __name(function getLimit(limits, name, defaultLimit) {
      if (!limits || limits[name] === void 0 || limits[name] === null) {
        return defaultLimit;
      }
      if (typeof limits[name] !== "number" || isNaN(limits[name])) {
        throw new TypeError("Limit " + name + " is not a valid number");
      }
      return limits[name];
    }, "getLimit");
  }
});

// node_modules/@fastify/busboy/deps/dicer/lib/HeaderParser.js
var require_HeaderParser = __commonJS({
  "node_modules/@fastify/busboy/deps/dicer/lib/HeaderParser.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var EventEmitter = __require("node:events").EventEmitter;
    var inherits = __require("node:util").inherits;
    var getLimit = require_getLimit();
    var StreamSearch = require_sbmh();
    var B_DCRLF = Buffer.from("\r\n\r\n");
    var RE_CRLF = /\r\n/g;
    var RE_HDR = /^([^:]+):[ \t]?([\x00-\xFF]+)?$/;
    function HeaderParser(cfg) {
      EventEmitter.call(this);
      cfg = cfg || {};
      const self2 = this;
      this.nread = 0;
      this.maxed = false;
      this.npairs = 0;
      this.maxHeaderPairs = getLimit(cfg, "maxHeaderPairs", 2e3);
      this.maxHeaderSize = getLimit(cfg, "maxHeaderSize", 80 * 1024);
      this.buffer = "";
      this.header = {};
      this.finished = false;
      this.ss = new StreamSearch(B_DCRLF);
      this.ss.on("info", function(isMatch, data, start, end) {
        if (data && !self2.maxed) {
          if (self2.nread + end - start >= self2.maxHeaderSize) {
            end = self2.maxHeaderSize - self2.nread + start;
            self2.nread = self2.maxHeaderSize;
            self2.maxed = true;
          } else {
            self2.nread += end - start;
          }
          self2.buffer += data.toString("binary", start, end);
        }
        if (isMatch) {
          self2._finish();
        }
      });
    }
    __name(HeaderParser, "HeaderParser");
    inherits(HeaderParser, EventEmitter);
    HeaderParser.prototype.push = function(data) {
      const r = this.ss.push(data);
      if (this.finished) {
        return r;
      }
    };
    HeaderParser.prototype.reset = function() {
      this.finished = false;
      this.buffer = "";
      this.header = {};
      this.ss.reset();
    };
    HeaderParser.prototype._finish = function() {
      if (this.buffer) {
        this._parseHeader();
      }
      this.ss.matches = this.ss.maxMatches;
      const header = this.header;
      this.header = {};
      this.buffer = "";
      this.finished = true;
      this.nread = this.npairs = 0;
      this.maxed = false;
      this.emit("header", header);
    };
    HeaderParser.prototype._parseHeader = function() {
      if (this.npairs === this.maxHeaderPairs) {
        return;
      }
      const lines = this.buffer.split(RE_CRLF);
      const len = lines.length;
      let m, h;
      for (var i = 0; i < len; ++i) {
        if (lines[i].length === 0) {
          continue;
        }
        if (lines[i][0] === "	" || lines[i][0] === " ") {
          if (h) {
            this.header[h][this.header[h].length - 1] += lines[i];
            continue;
          }
        }
        const posColon = lines[i].indexOf(":");
        if (posColon === -1 || posColon === 0) {
          return;
        }
        m = RE_HDR.exec(lines[i]);
        h = m[1].toLowerCase();
        this.header[h] = this.header[h] || [];
        this.header[h].push(m[2] || "");
        if (++this.npairs === this.maxHeaderPairs) {
          break;
        }
      }
    };
    module.exports = HeaderParser;
  }
});

// node_modules/@fastify/busboy/deps/dicer/lib/Dicer.js
var require_Dicer = __commonJS({
  "node_modules/@fastify/busboy/deps/dicer/lib/Dicer.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var WritableStream = __require("node:stream").Writable;
    var inherits = __require("node:util").inherits;
    var StreamSearch = require_sbmh();
    var PartStream = require_PartStream();
    var HeaderParser = require_HeaderParser();
    var DASH = 45;
    var B_ONEDASH = Buffer.from("-");
    var B_CRLF = Buffer.from("\r\n");
    var EMPTY_FN = /* @__PURE__ */ __name(function() {
    }, "EMPTY_FN");
    function Dicer(cfg) {
      if (!(this instanceof Dicer)) {
        return new Dicer(cfg);
      }
      WritableStream.call(this, cfg);
      if (!cfg || !cfg.headerFirst && typeof cfg.boundary !== "string") {
        throw new TypeError("Boundary required");
      }
      if (typeof cfg.boundary === "string") {
        this.setBoundary(cfg.boundary);
      } else {
        this._bparser = void 0;
      }
      this._headerFirst = cfg.headerFirst;
      this._dashes = 0;
      this._parts = 0;
      this._finished = false;
      this._realFinish = false;
      this._isPreamble = true;
      this._justMatched = false;
      this._firstWrite = true;
      this._inHeader = true;
      this._part = void 0;
      this._cb = void 0;
      this._ignoreData = false;
      this._partOpts = { highWaterMark: cfg.partHwm };
      this._pause = false;
      const self2 = this;
      this._hparser = new HeaderParser(cfg);
      this._hparser.on("header", function(header) {
        self2._inHeader = false;
        self2._part.emit("header", header);
      });
    }
    __name(Dicer, "Dicer");
    inherits(Dicer, WritableStream);
    Dicer.prototype.emit = function(ev) {
      if (ev === "finish" && !this._realFinish) {
        if (!this._finished) {
          const self2 = this;
          process.nextTick(function() {
            self2.emit("error", new Error("Unexpected end of multipart data"));
            if (self2._part && !self2._ignoreData) {
              const type = self2._isPreamble ? "Preamble" : "Part";
              self2._part.emit("error", new Error(type + " terminated early due to unexpected end of multipart data"));
              self2._part.push(null);
              process.nextTick(function() {
                self2._realFinish = true;
                self2.emit("finish");
                self2._realFinish = false;
              });
              return;
            }
            self2._realFinish = true;
            self2.emit("finish");
            self2._realFinish = false;
          });
        }
      } else {
        WritableStream.prototype.emit.apply(this, arguments);
      }
    };
    Dicer.prototype._write = function(data, encoding, cb) {
      if (!this._hparser && !this._bparser) {
        return cb();
      }
      if (this._headerFirst && this._isPreamble) {
        if (!this._part) {
          this._part = new PartStream(this._partOpts);
          if (this.listenerCount("preamble") !== 0) {
            this.emit("preamble", this._part);
          } else {
            this._ignore();
          }
        }
        const r = this._hparser.push(data);
        if (!this._inHeader && r !== void 0 && r < data.length) {
          data = data.slice(r);
        } else {
          return cb();
        }
      }
      if (this._firstWrite) {
        this._bparser.push(B_CRLF);
        this._firstWrite = false;
      }
      this._bparser.push(data);
      if (this._pause) {
        this._cb = cb;
      } else {
        cb();
      }
    };
    Dicer.prototype.reset = function() {
      this._part = void 0;
      this._bparser = void 0;
      this._hparser = void 0;
    };
    Dicer.prototype.setBoundary = function(boundary) {
      const self2 = this;
      this._bparser = new StreamSearch("\r\n--" + boundary);
      this._bparser.on("info", function(isMatch, data, start, end) {
        self2._oninfo(isMatch, data, start, end);
      });
    };
    Dicer.prototype._ignore = function() {
      if (this._part && !this._ignoreData) {
        this._ignoreData = true;
        this._part.on("error", EMPTY_FN);
        this._part.resume();
      }
    };
    Dicer.prototype._oninfo = function(isMatch, data, start, end) {
      let buf;
      const self2 = this;
      let i = 0;
      let r;
      let shouldWriteMore = true;
      if (!this._part && this._justMatched && data) {
        while (this._dashes < 2 && start + i < end) {
          if (data[start + i] === DASH) {
            ++i;
            ++this._dashes;
          } else {
            if (this._dashes) {
              buf = B_ONEDASH;
            }
            this._dashes = 0;
            break;
          }
        }
        if (this._dashes === 2) {
          if (start + i < end && this.listenerCount("trailer") !== 0) {
            this.emit("trailer", data.slice(start + i, end));
          }
          this.reset();
          this._finished = true;
          if (self2._parts === 0) {
            self2._realFinish = true;
            self2.emit("finish");
            self2._realFinish = false;
          }
        }
        if (this._dashes) {
          return;
        }
      }
      if (this._justMatched) {
        this._justMatched = false;
      }
      if (!this._part) {
        this._part = new PartStream(this._partOpts);
        this._part._read = function(n) {
          self2._unpause();
        };
        if (this._isPreamble && this.listenerCount("preamble") !== 0) {
          this.emit("preamble", this._part);
        } else if (this._isPreamble !== true && this.listenerCount("part") !== 0) {
          this.emit("part", this._part);
        } else {
          this._ignore();
        }
        if (!this._isPreamble) {
          this._inHeader = true;
        }
      }
      if (data && start < end && !this._ignoreData) {
        if (this._isPreamble || !this._inHeader) {
          if (buf) {
            shouldWriteMore = this._part.push(buf);
          }
          shouldWriteMore = this._part.push(data.slice(start, end));
          if (!shouldWriteMore) {
            this._pause = true;
          }
        } else if (!this._isPreamble && this._inHeader) {
          if (buf) {
            this._hparser.push(buf);
          }
          r = this._hparser.push(data.slice(start, end));
          if (!this._inHeader && r !== void 0 && r < end) {
            this._oninfo(false, data, start + r, end);
          }
        }
      }
      if (isMatch) {
        this._hparser.reset();
        if (this._isPreamble) {
          this._isPreamble = false;
        } else {
          if (start !== end) {
            ++this._parts;
            this._part.on("end", function() {
              if (--self2._parts === 0) {
                if (self2._finished) {
                  self2._realFinish = true;
                  self2.emit("finish");
                  self2._realFinish = false;
                } else {
                  self2._unpause();
                }
              }
            });
          }
        }
        this._part.push(null);
        this._part = void 0;
        this._ignoreData = false;
        this._justMatched = true;
        this._dashes = 0;
      }
    };
    Dicer.prototype._unpause = function() {
      if (!this._pause) {
        return;
      }
      this._pause = false;
      if (this._cb) {
        const cb = this._cb;
        this._cb = void 0;
        cb();
      }
    };
    module.exports = Dicer;
  }
});

// node_modules/@fastify/busboy/lib/utils/decodeText.js
var require_decodeText = __commonJS({
  "node_modules/@fastify/busboy/lib/utils/decodeText.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var utf8Decoder = new TextDecoder("utf-8");
    var textDecoders = /* @__PURE__ */ new Map([
      ["utf-8", utf8Decoder],
      ["utf8", utf8Decoder]
    ]);
    function getDecoder(charset) {
      let lc;
      while (true) {
        switch (charset) {
          case "utf-8":
          case "utf8":
            return decoders.utf8;
          case "latin1":
          case "ascii":
          case "us-ascii":
          case "iso-8859-1":
          case "iso8859-1":
          case "iso88591":
          case "iso_8859-1":
          case "windows-1252":
          case "iso_8859-1:1987":
          case "cp1252":
          case "x-cp1252":
            return decoders.latin1;
          case "utf16le":
          case "utf-16le":
          case "ucs2":
          case "ucs-2":
            return decoders.utf16le;
          case "base64":
            return decoders.base64;
          default:
            if (lc === void 0) {
              lc = true;
              charset = charset.toLowerCase();
              continue;
            }
            return decoders.other.bind(charset);
        }
      }
    }
    __name(getDecoder, "getDecoder");
    var decoders = {
      utf8: /* @__PURE__ */ __name((data, sourceEncoding) => {
        if (data.length === 0) {
          return "";
        }
        if (typeof data === "string") {
          data = Buffer.from(data, sourceEncoding);
        }
        return data.utf8Slice(0, data.length);
      }, "utf8"),
      latin1: /* @__PURE__ */ __name((data, sourceEncoding) => {
        if (data.length === 0) {
          return "";
        }
        if (typeof data === "string") {
          return data;
        }
        return data.latin1Slice(0, data.length);
      }, "latin1"),
      utf16le: /* @__PURE__ */ __name((data, sourceEncoding) => {
        if (data.length === 0) {
          return "";
        }
        if (typeof data === "string") {
          data = Buffer.from(data, sourceEncoding);
        }
        return data.ucs2Slice(0, data.length);
      }, "utf16le"),
      base64: /* @__PURE__ */ __name((data, sourceEncoding) => {
        if (data.length === 0) {
          return "";
        }
        if (typeof data === "string") {
          data = Buffer.from(data, sourceEncoding);
        }
        return data.base64Slice(0, data.length);
      }, "base64"),
      other: /* @__PURE__ */ __name((data, sourceEncoding) => {
        if (data.length === 0) {
          return "";
        }
        if (typeof data === "string") {
          data = Buffer.from(data, sourceEncoding);
        }
        if (textDecoders.has(exports.toString())) {
          try {
            return textDecoders.get(exports).decode(data);
          } catch {
          }
        }
        return typeof data === "string" ? data : data.toString();
      }, "other")
    };
    function decodeText(text, sourceEncoding, destEncoding) {
      if (text) {
        return getDecoder(destEncoding)(text, sourceEncoding);
      }
      return text;
    }
    __name(decodeText, "decodeText");
    module.exports = decodeText;
  }
});

// node_modules/@fastify/busboy/lib/utils/parseParams.js
var require_parseParams = __commonJS({
  "node_modules/@fastify/busboy/lib/utils/parseParams.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var decodeText = require_decodeText();
    var RE_ENCODED = /%[a-fA-F0-9][a-fA-F0-9]/g;
    var EncodedLookup = {
      "%00": "\0",
      "%01": "",
      "%02": "",
      "%03": "",
      "%04": "",
      "%05": "",
      "%06": "",
      "%07": "\x07",
      "%08": "\b",
      "%09": "	",
      "%0a": "\n",
      "%0A": "\n",
      "%0b": "\v",
      "%0B": "\v",
      "%0c": "\f",
      "%0C": "\f",
      "%0d": "\r",
      "%0D": "\r",
      "%0e": "",
      "%0E": "",
      "%0f": "",
      "%0F": "",
      "%10": "",
      "%11": "",
      "%12": "",
      "%13": "",
      "%14": "",
      "%15": "",
      "%16": "",
      "%17": "",
      "%18": "",
      "%19": "",
      "%1a": "",
      "%1A": "",
      "%1b": "\x1B",
      "%1B": "\x1B",
      "%1c": "",
      "%1C": "",
      "%1d": "",
      "%1D": "",
      "%1e": "",
      "%1E": "",
      "%1f": "",
      "%1F": "",
      "%20": " ",
      "%21": "!",
      "%22": '"',
      "%23": "#",
      "%24": "$",
      "%25": "%",
      "%26": "&",
      "%27": "'",
      "%28": "(",
      "%29": ")",
      "%2a": "*",
      "%2A": "*",
      "%2b": "+",
      "%2B": "+",
      "%2c": ",",
      "%2C": ",",
      "%2d": "-",
      "%2D": "-",
      "%2e": ".",
      "%2E": ".",
      "%2f": "/",
      "%2F": "/",
      "%30": "0",
      "%31": "1",
      "%32": "2",
      "%33": "3",
      "%34": "4",
      "%35": "5",
      "%36": "6",
      "%37": "7",
      "%38": "8",
      "%39": "9",
      "%3a": ":",
      "%3A": ":",
      "%3b": ";",
      "%3B": ";",
      "%3c": "<",
      "%3C": "<",
      "%3d": "=",
      "%3D": "=",
      "%3e": ">",
      "%3E": ">",
      "%3f": "?",
      "%3F": "?",
      "%40": "@",
      "%41": "A",
      "%42": "B",
      "%43": "C",
      "%44": "D",
      "%45": "E",
      "%46": "F",
      "%47": "G",
      "%48": "H",
      "%49": "I",
      "%4a": "J",
      "%4A": "J",
      "%4b": "K",
      "%4B": "K",
      "%4c": "L",
      "%4C": "L",
      "%4d": "M",
      "%4D": "M",
      "%4e": "N",
      "%4E": "N",
      "%4f": "O",
      "%4F": "O",
      "%50": "P",
      "%51": "Q",
      "%52": "R",
      "%53": "S",
      "%54": "T",
      "%55": "U",
      "%56": "V",
      "%57": "W",
      "%58": "X",
      "%59": "Y",
      "%5a": "Z",
      "%5A": "Z",
      "%5b": "[",
      "%5B": "[",
      "%5c": "\\",
      "%5C": "\\",
      "%5d": "]",
      "%5D": "]",
      "%5e": "^",
      "%5E": "^",
      "%5f": "_",
      "%5F": "_",
      "%60": "`",
      "%61": "a",
      "%62": "b",
      "%63": "c",
      "%64": "d",
      "%65": "e",
      "%66": "f",
      "%67": "g",
      "%68": "h",
      "%69": "i",
      "%6a": "j",
      "%6A": "j",
      "%6b": "k",
      "%6B": "k",
      "%6c": "l",
      "%6C": "l",
      "%6d": "m",
      "%6D": "m",
      "%6e": "n",
      "%6E": "n",
      "%6f": "o",
      "%6F": "o",
      "%70": "p",
      "%71": "q",
      "%72": "r",
      "%73": "s",
      "%74": "t",
      "%75": "u",
      "%76": "v",
      "%77": "w",
      "%78": "x",
      "%79": "y",
      "%7a": "z",
      "%7A": "z",
      "%7b": "{",
      "%7B": "{",
      "%7c": "|",
      "%7C": "|",
      "%7d": "}",
      "%7D": "}",
      "%7e": "~",
      "%7E": "~",
      "%7f": "\x7F",
      "%7F": "\x7F",
      "%80": "\x80",
      "%81": "\x81",
      "%82": "\x82",
      "%83": "\x83",
      "%84": "\x84",
      "%85": "\x85",
      "%86": "\x86",
      "%87": "\x87",
      "%88": "\x88",
      "%89": "\x89",
      "%8a": "\x8A",
      "%8A": "\x8A",
      "%8b": "\x8B",
      "%8B": "\x8B",
      "%8c": "\x8C",
      "%8C": "\x8C",
      "%8d": "\x8D",
      "%8D": "\x8D",
      "%8e": "\x8E",
      "%8E": "\x8E",
      "%8f": "\x8F",
      "%8F": "\x8F",
      "%90": "\x90",
      "%91": "\x91",
      "%92": "\x92",
      "%93": "\x93",
      "%94": "\x94",
      "%95": "\x95",
      "%96": "\x96",
      "%97": "\x97",
      "%98": "\x98",
      "%99": "\x99",
      "%9a": "\x9A",
      "%9A": "\x9A",
      "%9b": "\x9B",
      "%9B": "\x9B",
      "%9c": "\x9C",
      "%9C": "\x9C",
      "%9d": "\x9D",
      "%9D": "\x9D",
      "%9e": "\x9E",
      "%9E": "\x9E",
      "%9f": "\x9F",
      "%9F": "\x9F",
      "%a0": "\xA0",
      "%A0": "\xA0",
      "%a1": "\xA1",
      "%A1": "\xA1",
      "%a2": "\xA2",
      "%A2": "\xA2",
      "%a3": "\xA3",
      "%A3": "\xA3",
      "%a4": "\xA4",
      "%A4": "\xA4",
      "%a5": "\xA5",
      "%A5": "\xA5",
      "%a6": "\xA6",
      "%A6": "\xA6",
      "%a7": "\xA7",
      "%A7": "\xA7",
      "%a8": "\xA8",
      "%A8": "\xA8",
      "%a9": "\xA9",
      "%A9": "\xA9",
      "%aa": "\xAA",
      "%Aa": "\xAA",
      "%aA": "\xAA",
      "%AA": "\xAA",
      "%ab": "\xAB",
      "%Ab": "\xAB",
      "%aB": "\xAB",
      "%AB": "\xAB",
      "%ac": "\xAC",
      "%Ac": "\xAC",
      "%aC": "\xAC",
      "%AC": "\xAC",
      "%ad": "\xAD",
      "%Ad": "\xAD",
      "%aD": "\xAD",
      "%AD": "\xAD",
      "%ae": "\xAE",
      "%Ae": "\xAE",
      "%aE": "\xAE",
      "%AE": "\xAE",
      "%af": "\xAF",
      "%Af": "\xAF",
      "%aF": "\xAF",
      "%AF": "\xAF",
      "%b0": "\xB0",
      "%B0": "\xB0",
      "%b1": "\xB1",
      "%B1": "\xB1",
      "%b2": "\xB2",
      "%B2": "\xB2",
      "%b3": "\xB3",
      "%B3": "\xB3",
      "%b4": "\xB4",
      "%B4": "\xB4",
      "%b5": "\xB5",
      "%B5": "\xB5",
      "%b6": "\xB6",
      "%B6": "\xB6",
      "%b7": "\xB7",
      "%B7": "\xB7",
      "%b8": "\xB8",
      "%B8": "\xB8",
      "%b9": "\xB9",
      "%B9": "\xB9",
      "%ba": "\xBA",
      "%Ba": "\xBA",
      "%bA": "\xBA",
      "%BA": "\xBA",
      "%bb": "\xBB",
      "%Bb": "\xBB",
      "%bB": "\xBB",
      "%BB": "\xBB",
      "%bc": "\xBC",
      "%Bc": "\xBC",
      "%bC": "\xBC",
      "%BC": "\xBC",
      "%bd": "\xBD",
      "%Bd": "\xBD",
      "%bD": "\xBD",
      "%BD": "\xBD",
      "%be": "\xBE",
      "%Be": "\xBE",
      "%bE": "\xBE",
      "%BE": "\xBE",
      "%bf": "\xBF",
      "%Bf": "\xBF",
      "%bF": "\xBF",
      "%BF": "\xBF",
      "%c0": "\xC0",
      "%C0": "\xC0",
      "%c1": "\xC1",
      "%C1": "\xC1",
      "%c2": "\xC2",
      "%C2": "\xC2",
      "%c3": "\xC3",
      "%C3": "\xC3",
      "%c4": "\xC4",
      "%C4": "\xC4",
      "%c5": "\xC5",
      "%C5": "\xC5",
      "%c6": "\xC6",
      "%C6": "\xC6",
      "%c7": "\xC7",
      "%C7": "\xC7",
      "%c8": "\xC8",
      "%C8": "\xC8",
      "%c9": "\xC9",
      "%C9": "\xC9",
      "%ca": "\xCA",
      "%Ca": "\xCA",
      "%cA": "\xCA",
      "%CA": "\xCA",
      "%cb": "\xCB",
      "%Cb": "\xCB",
      "%cB": "\xCB",
      "%CB": "\xCB",
      "%cc": "\xCC",
      "%Cc": "\xCC",
      "%cC": "\xCC",
      "%CC": "\xCC",
      "%cd": "\xCD",
      "%Cd": "\xCD",
      "%cD": "\xCD",
      "%CD": "\xCD",
      "%ce": "\xCE",
      "%Ce": "\xCE",
      "%cE": "\xCE",
      "%CE": "\xCE",
      "%cf": "\xCF",
      "%Cf": "\xCF",
      "%cF": "\xCF",
      "%CF": "\xCF",
      "%d0": "\xD0",
      "%D0": "\xD0",
      "%d1": "\xD1",
      "%D1": "\xD1",
      "%d2": "\xD2",
      "%D2": "\xD2",
      "%d3": "\xD3",
      "%D3": "\xD3",
      "%d4": "\xD4",
      "%D4": "\xD4",
      "%d5": "\xD5",
      "%D5": "\xD5",
      "%d6": "\xD6",
      "%D6": "\xD6",
      "%d7": "\xD7",
      "%D7": "\xD7",
      "%d8": "\xD8",
      "%D8": "\xD8",
      "%d9": "\xD9",
      "%D9": "\xD9",
      "%da": "\xDA",
      "%Da": "\xDA",
      "%dA": "\xDA",
      "%DA": "\xDA",
      "%db": "\xDB",
      "%Db": "\xDB",
      "%dB": "\xDB",
      "%DB": "\xDB",
      "%dc": "\xDC",
      "%Dc": "\xDC",
      "%dC": "\xDC",
      "%DC": "\xDC",
      "%dd": "\xDD",
      "%Dd": "\xDD",
      "%dD": "\xDD",
      "%DD": "\xDD",
      "%de": "\xDE",
      "%De": "\xDE",
      "%dE": "\xDE",
      "%DE": "\xDE",
      "%df": "\xDF",
      "%Df": "\xDF",
      "%dF": "\xDF",
      "%DF": "\xDF",
      "%e0": "\xE0",
      "%E0": "\xE0",
      "%e1": "\xE1",
      "%E1": "\xE1",
      "%e2": "\xE2",
      "%E2": "\xE2",
      "%e3": "\xE3",
      "%E3": "\xE3",
      "%e4": "\xE4",
      "%E4": "\xE4",
      "%e5": "\xE5",
      "%E5": "\xE5",
      "%e6": "\xE6",
      "%E6": "\xE6",
      "%e7": "\xE7",
      "%E7": "\xE7",
      "%e8": "\xE8",
      "%E8": "\xE8",
      "%e9": "\xE9",
      "%E9": "\xE9",
      "%ea": "\xEA",
      "%Ea": "\xEA",
      "%eA": "\xEA",
      "%EA": "\xEA",
      "%eb": "\xEB",
      "%Eb": "\xEB",
      "%eB": "\xEB",
      "%EB": "\xEB",
      "%ec": "\xEC",
      "%Ec": "\xEC",
      "%eC": "\xEC",
      "%EC": "\xEC",
      "%ed": "\xED",
      "%Ed": "\xED",
      "%eD": "\xED",
      "%ED": "\xED",
      "%ee": "\xEE",
      "%Ee": "\xEE",
      "%eE": "\xEE",
      "%EE": "\xEE",
      "%ef": "\xEF",
      "%Ef": "\xEF",
      "%eF": "\xEF",
      "%EF": "\xEF",
      "%f0": "\xF0",
      "%F0": "\xF0",
      "%f1": "\xF1",
      "%F1": "\xF1",
      "%f2": "\xF2",
      "%F2": "\xF2",
      "%f3": "\xF3",
      "%F3": "\xF3",
      "%f4": "\xF4",
      "%F4": "\xF4",
      "%f5": "\xF5",
      "%F5": "\xF5",
      "%f6": "\xF6",
      "%F6": "\xF6",
      "%f7": "\xF7",
      "%F7": "\xF7",
      "%f8": "\xF8",
      "%F8": "\xF8",
      "%f9": "\xF9",
      "%F9": "\xF9",
      "%fa": "\xFA",
      "%Fa": "\xFA",
      "%fA": "\xFA",
      "%FA": "\xFA",
      "%fb": "\xFB",
      "%Fb": "\xFB",
      "%fB": "\xFB",
      "%FB": "\xFB",
      "%fc": "\xFC",
      "%Fc": "\xFC",
      "%fC": "\xFC",
      "%FC": "\xFC",
      "%fd": "\xFD",
      "%Fd": "\xFD",
      "%fD": "\xFD",
      "%FD": "\xFD",
      "%fe": "\xFE",
      "%Fe": "\xFE",
      "%fE": "\xFE",
      "%FE": "\xFE",
      "%ff": "\xFF",
      "%Ff": "\xFF",
      "%fF": "\xFF",
      "%FF": "\xFF"
    };
    function encodedReplacer(match) {
      return EncodedLookup[match];
    }
    __name(encodedReplacer, "encodedReplacer");
    var STATE_KEY = 0;
    var STATE_VALUE = 1;
    var STATE_CHARSET = 2;
    var STATE_LANG = 3;
    function parseParams(str) {
      const res = [];
      let state = STATE_KEY;
      let charset = "";
      let inquote = false;
      let escaping = false;
      let p = 0;
      let tmp = "";
      const len = str.length;
      for (var i = 0; i < len; ++i) {
        const char = str[i];
        if (char === "\\" && inquote) {
          if (escaping) {
            escaping = false;
          } else {
            escaping = true;
            continue;
          }
        } else if (char === '"') {
          if (!escaping) {
            if (inquote) {
              inquote = false;
              state = STATE_KEY;
            } else {
              inquote = true;
            }
            continue;
          } else {
            escaping = false;
          }
        } else {
          if (escaping && inquote) {
            tmp += "\\";
          }
          escaping = false;
          if ((state === STATE_CHARSET || state === STATE_LANG) && char === "'") {
            if (state === STATE_CHARSET) {
              state = STATE_LANG;
              charset = tmp.substring(1);
            } else {
              state = STATE_VALUE;
            }
            tmp = "";
            continue;
          } else if (state === STATE_KEY && (char === "*" || char === "=") && res.length) {
            state = char === "*" ? STATE_CHARSET : STATE_VALUE;
            res[p] = [tmp, void 0];
            tmp = "";
            continue;
          } else if (!inquote && char === ";") {
            state = STATE_KEY;
            if (charset) {
              if (tmp.length) {
                tmp = decodeText(
                  tmp.replace(RE_ENCODED, encodedReplacer),
                  "binary",
                  charset
                );
              }
              charset = "";
            } else if (tmp.length) {
              tmp = decodeText(tmp, "binary", "utf8");
            }
            if (res[p] === void 0) {
              res[p] = tmp;
            } else {
              res[p][1] = tmp;
            }
            tmp = "";
            ++p;
            continue;
          } else if (!inquote && (char === " " || char === "	")) {
            continue;
          }
        }
        tmp += char;
      }
      if (charset && tmp.length) {
        tmp = decodeText(
          tmp.replace(RE_ENCODED, encodedReplacer),
          "binary",
          charset
        );
      } else if (tmp) {
        tmp = decodeText(tmp, "binary", "utf8");
      }
      if (res[p] === void 0) {
        if (tmp) {
          res[p] = tmp;
        }
      } else {
        res[p][1] = tmp;
      }
      return res;
    }
    __name(parseParams, "parseParams");
    module.exports = parseParams;
  }
});

// node_modules/@fastify/busboy/lib/utils/basename.js
var require_basename = __commonJS({
  "node_modules/@fastify/busboy/lib/utils/basename.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    module.exports = /* @__PURE__ */ __name(function basename(path5) {
      if (typeof path5 !== "string") {
        return "";
      }
      for (var i = path5.length - 1; i >= 0; --i) {
        switch (path5.charCodeAt(i)) {
          case 47:
          case 92:
            path5 = path5.slice(i + 1);
            return path5 === ".." || path5 === "." ? "" : path5;
        }
      }
      return path5 === ".." || path5 === "." ? "" : path5;
    }, "basename");
  }
});

// node_modules/@fastify/busboy/lib/types/multipart.js
var require_multipart = __commonJS({
  "node_modules/@fastify/busboy/lib/types/multipart.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var { Readable } = __require("node:stream");
    var { inherits } = __require("node:util");
    var Dicer = require_Dicer();
    var parseParams = require_parseParams();
    var decodeText = require_decodeText();
    var basename = require_basename();
    var getLimit = require_getLimit();
    var RE_BOUNDARY = /^boundary$/i;
    var RE_FIELD = /^form-data$/i;
    var RE_CHARSET = /^charset$/i;
    var RE_FILENAME = /^filename$/i;
    var RE_NAME = /^name$/i;
    Multipart.detect = /^multipart\/form-data/i;
    function Multipart(boy, cfg) {
      let i;
      let len;
      const self2 = this;
      let boundary;
      const limits = cfg.limits;
      const isPartAFile = cfg.isPartAFile || ((fieldName, contentType, fileName) => contentType === "application/octet-stream" || fileName !== void 0);
      const parsedConType = cfg.parsedConType || [];
      const defCharset = cfg.defCharset || "utf8";
      const preservePath = cfg.preservePath;
      const fileOpts = { highWaterMark: cfg.fileHwm };
      for (i = 0, len = parsedConType.length; i < len; ++i) {
        if (Array.isArray(parsedConType[i]) && RE_BOUNDARY.test(parsedConType[i][0])) {
          boundary = parsedConType[i][1];
          break;
        }
      }
      function checkFinished() {
        if (nends === 0 && finished && !boy._done) {
          finished = false;
          self2.end();
        }
      }
      __name(checkFinished, "checkFinished");
      if (typeof boundary !== "string") {
        throw new Error("Multipart: Boundary not found");
      }
      const fieldSizeLimit = getLimit(limits, "fieldSize", 1 * 1024 * 1024);
      const fileSizeLimit = getLimit(limits, "fileSize", Infinity);
      const filesLimit = getLimit(limits, "files", Infinity);
      const fieldsLimit = getLimit(limits, "fields", Infinity);
      const partsLimit = getLimit(limits, "parts", Infinity);
      const headerPairsLimit = getLimit(limits, "headerPairs", 2e3);
      const headerSizeLimit = getLimit(limits, "headerSize", 80 * 1024);
      let nfiles = 0;
      let nfields = 0;
      let nends = 0;
      let curFile;
      let curField;
      let finished = false;
      this._needDrain = false;
      this._pause = false;
      this._cb = void 0;
      this._nparts = 0;
      this._boy = boy;
      const parserCfg = {
        boundary,
        maxHeaderPairs: headerPairsLimit,
        maxHeaderSize: headerSizeLimit,
        partHwm: fileOpts.highWaterMark,
        highWaterMark: cfg.highWaterMark
      };
      this.parser = new Dicer(parserCfg);
      this.parser.on("drain", function() {
        self2._needDrain = false;
        if (self2._cb && !self2._pause) {
          const cb = self2._cb;
          self2._cb = void 0;
          cb();
        }
      }).on("part", /* @__PURE__ */ __name(function onPart(part) {
        if (++self2._nparts > partsLimit) {
          self2.parser.removeListener("part", onPart);
          self2.parser.on("part", skipPart);
          boy.hitPartsLimit = true;
          boy.emit("partsLimit");
          return skipPart(part);
        }
        if (curField) {
          const field = curField;
          field.emit("end");
          field.removeAllListeners("end");
        }
        part.on("header", function(header) {
          let contype;
          let fieldname;
          let parsed;
          let charset;
          let encoding;
          let filename;
          let nsize = 0;
          if (header["content-type"]) {
            parsed = parseParams(header["content-type"][0]);
            if (parsed[0]) {
              contype = parsed[0].toLowerCase();
              for (i = 0, len = parsed.length; i < len; ++i) {
                if (RE_CHARSET.test(parsed[i][0])) {
                  charset = parsed[i][1].toLowerCase();
                  break;
                }
              }
            }
          }
          if (contype === void 0) {
            contype = "text/plain";
          }
          if (charset === void 0) {
            charset = defCharset;
          }
          if (header["content-disposition"]) {
            parsed = parseParams(header["content-disposition"][0]);
            if (!RE_FIELD.test(parsed[0])) {
              return skipPart(part);
            }
            for (i = 0, len = parsed.length; i < len; ++i) {
              if (RE_NAME.test(parsed[i][0])) {
                fieldname = parsed[i][1];
              } else if (RE_FILENAME.test(parsed[i][0])) {
                filename = parsed[i][1];
                if (!preservePath) {
                  filename = basename(filename);
                }
              }
            }
          } else {
            return skipPart(part);
          }
          if (header["content-transfer-encoding"]) {
            encoding = header["content-transfer-encoding"][0].toLowerCase();
          } else {
            encoding = "7bit";
          }
          let onData, onEnd;
          if (isPartAFile(fieldname, contype, filename)) {
            if (nfiles === filesLimit) {
              if (!boy.hitFilesLimit) {
                boy.hitFilesLimit = true;
                boy.emit("filesLimit");
              }
              return skipPart(part);
            }
            ++nfiles;
            if (boy.listenerCount("file") === 0) {
              self2.parser._ignore();
              return;
            }
            ++nends;
            const file = new FileStream(fileOpts);
            curFile = file;
            file.on("end", function() {
              --nends;
              self2._pause = false;
              checkFinished();
              if (self2._cb && !self2._needDrain) {
                const cb = self2._cb;
                self2._cb = void 0;
                cb();
              }
            });
            file._read = function(n) {
              if (!self2._pause) {
                return;
              }
              self2._pause = false;
              if (self2._cb && !self2._needDrain) {
                const cb = self2._cb;
                self2._cb = void 0;
                cb();
              }
            };
            boy.emit("file", fieldname, file, filename, encoding, contype);
            onData = /* @__PURE__ */ __name(function(data) {
              if ((nsize += data.length) > fileSizeLimit) {
                const extralen = fileSizeLimit - nsize + data.length;
                if (extralen > 0) {
                  file.push(data.slice(0, extralen));
                }
                file.truncated = true;
                file.bytesRead = fileSizeLimit;
                part.removeAllListeners("data");
                file.emit("limit");
                return;
              } else if (!file.push(data)) {
                self2._pause = true;
              }
              file.bytesRead = nsize;
            }, "onData");
            onEnd = /* @__PURE__ */ __name(function() {
              curFile = void 0;
              file.push(null);
            }, "onEnd");
          } else {
            if (nfields === fieldsLimit) {
              if (!boy.hitFieldsLimit) {
                boy.hitFieldsLimit = true;
                boy.emit("fieldsLimit");
              }
              return skipPart(part);
            }
            ++nfields;
            ++nends;
            let buffer = "";
            let truncated = false;
            curField = part;
            onData = /* @__PURE__ */ __name(function(data) {
              if ((nsize += data.length) > fieldSizeLimit) {
                const extralen = fieldSizeLimit - (nsize - data.length);
                buffer += data.toString("binary", 0, extralen);
                truncated = true;
                part.removeAllListeners("data");
              } else {
                buffer += data.toString("binary");
              }
            }, "onData");
            onEnd = /* @__PURE__ */ __name(function() {
              curField = void 0;
              if (buffer.length) {
                buffer = decodeText(buffer, "binary", charset);
              }
              boy.emit("field", fieldname, buffer, false, truncated, encoding, contype);
              --nends;
              checkFinished();
            }, "onEnd");
          }
          part._readableState.sync = false;
          part.on("data", onData);
          part.on("end", onEnd);
        }).on("error", function(err) {
          if (curFile) {
            curFile.emit("error", err);
          }
        });
      }, "onPart")).on("error", function(err) {
        boy.emit("error", err);
      }).on("finish", function() {
        finished = true;
        checkFinished();
      });
    }
    __name(Multipart, "Multipart");
    Multipart.prototype.write = function(chunk, cb) {
      const r = this.parser.write(chunk);
      if (r && !this._pause) {
        cb();
      } else {
        this._needDrain = !r;
        this._cb = cb;
      }
    };
    Multipart.prototype.end = function() {
      const self2 = this;
      if (self2.parser.writable) {
        self2.parser.end();
      } else if (!self2._boy._done) {
        process.nextTick(function() {
          self2._boy._done = true;
          self2._boy.emit("finish");
        });
      }
    };
    function skipPart(part) {
      part.resume();
    }
    __name(skipPart, "skipPart");
    function FileStream(opts) {
      Readable.call(this, opts);
      this.bytesRead = 0;
      this.truncated = false;
    }
    __name(FileStream, "FileStream");
    inherits(FileStream, Readable);
    FileStream.prototype._read = function(n) {
    };
    module.exports = Multipart;
  }
});

// node_modules/@fastify/busboy/lib/utils/Decoder.js
var require_Decoder = __commonJS({
  "node_modules/@fastify/busboy/lib/utils/Decoder.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var RE_PLUS = /\+/g;
    var HEX = [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      1,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ];
    function Decoder() {
      this.buffer = void 0;
    }
    __name(Decoder, "Decoder");
    Decoder.prototype.write = function(str) {
      str = str.replace(RE_PLUS, " ");
      let res = "";
      let i = 0;
      let p = 0;
      const len = str.length;
      for (; i < len; ++i) {
        if (this.buffer !== void 0) {
          if (!HEX[str.charCodeAt(i)]) {
            res += "%" + this.buffer;
            this.buffer = void 0;
            --i;
          } else {
            this.buffer += str[i];
            ++p;
            if (this.buffer.length === 2) {
              res += String.fromCharCode(parseInt(this.buffer, 16));
              this.buffer = void 0;
            }
          }
        } else if (str[i] === "%") {
          if (i > p) {
            res += str.substring(p, i);
            p = i;
          }
          this.buffer = "";
          ++p;
        }
      }
      if (p < len && this.buffer === void 0) {
        res += str.substring(p);
      }
      return res;
    };
    Decoder.prototype.reset = function() {
      this.buffer = void 0;
    };
    module.exports = Decoder;
  }
});

// node_modules/@fastify/busboy/lib/types/urlencoded.js
var require_urlencoded = __commonJS({
  "node_modules/@fastify/busboy/lib/types/urlencoded.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var Decoder = require_Decoder();
    var decodeText = require_decodeText();
    var getLimit = require_getLimit();
    var RE_CHARSET = /^charset$/i;
    UrlEncoded.detect = /^application\/x-www-form-urlencoded/i;
    function UrlEncoded(boy, cfg) {
      const limits = cfg.limits;
      const parsedConType = cfg.parsedConType;
      this.boy = boy;
      this.fieldSizeLimit = getLimit(limits, "fieldSize", 1 * 1024 * 1024);
      this.fieldNameSizeLimit = getLimit(limits, "fieldNameSize", 100);
      this.fieldsLimit = getLimit(limits, "fields", Infinity);
      let charset;
      for (var i = 0, len = parsedConType.length; i < len; ++i) {
        if (Array.isArray(parsedConType[i]) && RE_CHARSET.test(parsedConType[i][0])) {
          charset = parsedConType[i][1].toLowerCase();
          break;
        }
      }
      if (charset === void 0) {
        charset = cfg.defCharset || "utf8";
      }
      this.decoder = new Decoder();
      this.charset = charset;
      this._fields = 0;
      this._state = "key";
      this._checkingBytes = true;
      this._bytesKey = 0;
      this._bytesVal = 0;
      this._key = "";
      this._val = "";
      this._keyTrunc = false;
      this._valTrunc = false;
      this._hitLimit = false;
    }
    __name(UrlEncoded, "UrlEncoded");
    UrlEncoded.prototype.write = function(data, cb) {
      if (this._fields === this.fieldsLimit) {
        if (!this.boy.hitFieldsLimit) {
          this.boy.hitFieldsLimit = true;
          this.boy.emit("fieldsLimit");
        }
        return cb();
      }
      let idxeq;
      let idxamp;
      let i;
      let p = 0;
      const len = data.length;
      while (p < len) {
        if (this._state === "key") {
          idxeq = idxamp = void 0;
          for (i = p; i < len; ++i) {
            if (!this._checkingBytes) {
              ++p;
            }
            if (data[i] === 61) {
              idxeq = i;
              break;
            } else if (data[i] === 38) {
              idxamp = i;
              break;
            }
            if (this._checkingBytes && this._bytesKey === this.fieldNameSizeLimit) {
              this._hitLimit = true;
              break;
            } else if (this._checkingBytes) {
              ++this._bytesKey;
            }
          }
          if (idxeq !== void 0) {
            if (idxeq > p) {
              this._key += this.decoder.write(data.toString("binary", p, idxeq));
            }
            this._state = "val";
            this._hitLimit = false;
            this._checkingBytes = true;
            this._val = "";
            this._bytesVal = 0;
            this._valTrunc = false;
            this.decoder.reset();
            p = idxeq + 1;
          } else if (idxamp !== void 0) {
            ++this._fields;
            let key;
            const keyTrunc = this._keyTrunc;
            if (idxamp > p) {
              key = this._key += this.decoder.write(data.toString("binary", p, idxamp));
            } else {
              key = this._key;
            }
            this._hitLimit = false;
            this._checkingBytes = true;
            this._key = "";
            this._bytesKey = 0;
            this._keyTrunc = false;
            this.decoder.reset();
            if (key.length) {
              this.boy.emit(
                "field",
                decodeText(key, "binary", this.charset),
                "",
                keyTrunc,
                false
              );
            }
            p = idxamp + 1;
            if (this._fields === this.fieldsLimit) {
              return cb();
            }
          } else if (this._hitLimit) {
            if (i > p) {
              this._key += this.decoder.write(data.toString("binary", p, i));
            }
            p = i;
            if ((this._bytesKey = this._key.length) === this.fieldNameSizeLimit) {
              this._checkingBytes = false;
              this._keyTrunc = true;
            }
          } else {
            if (p < len) {
              this._key += this.decoder.write(data.toString("binary", p));
            }
            p = len;
          }
        } else {
          idxamp = void 0;
          for (i = p; i < len; ++i) {
            if (!this._checkingBytes) {
              ++p;
            }
            if (data[i] === 38) {
              idxamp = i;
              break;
            }
            if (this._checkingBytes && this._bytesVal === this.fieldSizeLimit) {
              this._hitLimit = true;
              break;
            } else if (this._checkingBytes) {
              ++this._bytesVal;
            }
          }
          if (idxamp !== void 0) {
            ++this._fields;
            if (idxamp > p) {
              this._val += this.decoder.write(data.toString("binary", p, idxamp));
            }
            this.boy.emit(
              "field",
              decodeText(this._key, "binary", this.charset),
              decodeText(this._val, "binary", this.charset),
              this._keyTrunc,
              this._valTrunc
            );
            this._state = "key";
            this._hitLimit = false;
            this._checkingBytes = true;
            this._key = "";
            this._bytesKey = 0;
            this._keyTrunc = false;
            this.decoder.reset();
            p = idxamp + 1;
            if (this._fields === this.fieldsLimit) {
              return cb();
            }
          } else if (this._hitLimit) {
            if (i > p) {
              this._val += this.decoder.write(data.toString("binary", p, i));
            }
            p = i;
            if (this._val === "" && this.fieldSizeLimit === 0 || (this._bytesVal = this._val.length) === this.fieldSizeLimit) {
              this._checkingBytes = false;
              this._valTrunc = true;
            }
          } else {
            if (p < len) {
              this._val += this.decoder.write(data.toString("binary", p));
            }
            p = len;
          }
        }
      }
      cb();
    };
    UrlEncoded.prototype.end = function() {
      if (this.boy._done) {
        return;
      }
      if (this._state === "key" && this._key.length > 0) {
        this.boy.emit(
          "field",
          decodeText(this._key, "binary", this.charset),
          "",
          this._keyTrunc,
          false
        );
      } else if (this._state === "val") {
        this.boy.emit(
          "field",
          decodeText(this._key, "binary", this.charset),
          decodeText(this._val, "binary", this.charset),
          this._keyTrunc,
          this._valTrunc
        );
      }
      this.boy._done = true;
      this.boy.emit("finish");
    };
    module.exports = UrlEncoded;
  }
});

// node_modules/@fastify/busboy/lib/main.js
var require_main = __commonJS({
  "node_modules/@fastify/busboy/lib/main.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var WritableStream = __require("node:stream").Writable;
    var { inherits } = __require("node:util");
    var Dicer = require_Dicer();
    var MultipartParser = require_multipart();
    var UrlencodedParser = require_urlencoded();
    var parseParams = require_parseParams();
    function Busboy(opts) {
      if (!(this instanceof Busboy)) {
        return new Busboy(opts);
      }
      if (typeof opts !== "object") {
        throw new TypeError("Busboy expected an options-Object.");
      }
      if (typeof opts.headers !== "object") {
        throw new TypeError("Busboy expected an options-Object with headers-attribute.");
      }
      if (typeof opts.headers["content-type"] !== "string") {
        throw new TypeError("Missing Content-Type-header.");
      }
      const {
        headers,
        ...streamOptions
      } = opts;
      this.opts = {
        autoDestroy: false,
        ...streamOptions
      };
      WritableStream.call(this, this.opts);
      this._done = false;
      this._parser = this.getParserByHeaders(headers);
      this._finished = false;
    }
    __name(Busboy, "Busboy");
    inherits(Busboy, WritableStream);
    Busboy.prototype.emit = function(ev) {
      if (ev === "finish") {
        if (!this._done) {
          this._parser?.end();
          return;
        } else if (this._finished) {
          return;
        }
        this._finished = true;
      }
      WritableStream.prototype.emit.apply(this, arguments);
    };
    Busboy.prototype.getParserByHeaders = function(headers) {
      const parsed = parseParams(headers["content-type"]);
      const cfg = {
        defCharset: this.opts.defCharset,
        fileHwm: this.opts.fileHwm,
        headers,
        highWaterMark: this.opts.highWaterMark,
        isPartAFile: this.opts.isPartAFile,
        limits: this.opts.limits,
        parsedConType: parsed,
        preservePath: this.opts.preservePath
      };
      if (MultipartParser.detect.test(parsed[0])) {
        return new MultipartParser(this, cfg);
      }
      if (UrlencodedParser.detect.test(parsed[0])) {
        return new UrlencodedParser(this, cfg);
      }
      throw new Error("Unsupported Content-Type.");
    };
    Busboy.prototype._write = function(chunk, encoding, cb) {
      this._parser.write(chunk, cb);
    };
    module.exports = Busboy;
    module.exports.default = Busboy;
    module.exports.Busboy = Busboy;
    module.exports.Dicer = Dicer;
  }
});

// node_modules/undici/lib/fetch/constants.js
var require_constants2 = __commonJS({
  "node_modules/undici/lib/fetch/constants.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var { MessageChannel, receiveMessageOnPort } = __require("worker_threads");
    var corsSafeListedMethods = ["GET", "HEAD", "POST"];
    var corsSafeListedMethodsSet = new Set(corsSafeListedMethods);
    var nullBodyStatus = [101, 204, 205, 304];
    var redirectStatus = [301, 302, 303, 307, 308];
    var redirectStatusSet = new Set(redirectStatus);
    var badPorts = [
      "1",
      "7",
      "9",
      "11",
      "13",
      "15",
      "17",
      "19",
      "20",
      "21",
      "22",
      "23",
      "25",
      "37",
      "42",
      "43",
      "53",
      "69",
      "77",
      "79",
      "87",
      "95",
      "101",
      "102",
      "103",
      "104",
      "109",
      "110",
      "111",
      "113",
      "115",
      "117",
      "119",
      "123",
      "135",
      "137",
      "139",
      "143",
      "161",
      "179",
      "389",
      "427",
      "465",
      "512",
      "513",
      "514",
      "515",
      "526",
      "530",
      "531",
      "532",
      "540",
      "548",
      "554",
      "556",
      "563",
      "587",
      "601",
      "636",
      "989",
      "990",
      "993",
      "995",
      "1719",
      "1720",
      "1723",
      "2049",
      "3659",
      "4045",
      "5060",
      "5061",
      "6000",
      "6566",
      "6665",
      "6666",
      "6667",
      "6668",
      "6669",
      "6697",
      "10080"
    ];
    var badPortsSet = new Set(badPorts);
    var referrerPolicy = [
      "",
      "no-referrer",
      "no-referrer-when-downgrade",
      "same-origin",
      "origin",
      "strict-origin",
      "origin-when-cross-origin",
      "strict-origin-when-cross-origin",
      "unsafe-url"
    ];
    var referrerPolicySet = new Set(referrerPolicy);
    var requestRedirect = ["follow", "manual", "error"];
    var safeMethods = ["GET", "HEAD", "OPTIONS", "TRACE"];
    var safeMethodsSet = new Set(safeMethods);
    var requestMode = ["navigate", "same-origin", "no-cors", "cors"];
    var requestCredentials = ["omit", "same-origin", "include"];
    var requestCache = [
      "default",
      "no-store",
      "reload",
      "no-cache",
      "force-cache",
      "only-if-cached"
    ];
    var requestBodyHeader = [
      "content-encoding",
      "content-language",
      "content-location",
      "content-type",
      // See https://github.com/nodejs/undici/issues/2021
      // 'Content-Length' is a forbidden header name, which is typically
      // removed in the Headers implementation. However, undici doesn't
      // filter out headers, so we add it here.
      "content-length"
    ];
    var requestDuplex = [
      "half"
    ];
    var forbiddenMethods = ["CONNECT", "TRACE", "TRACK"];
    var forbiddenMethodsSet = new Set(forbiddenMethods);
    var subresource = [
      "audio",
      "audioworklet",
      "font",
      "image",
      "manifest",
      "paintworklet",
      "script",
      "style",
      "track",
      "video",
      "xslt",
      ""
    ];
    var subresourceSet = new Set(subresource);
    var DOMException2 = globalThis.DOMException ?? (() => {
      try {
        atob("~");
      } catch (err) {
        return Object.getPrototypeOf(err).constructor;
      }
    })();
    var channel;
    var structuredClone2 = globalThis.structuredClone ?? // https://github.com/nodejs/node/blob/b27ae24dcc4251bad726d9d84baf678d1f707fed/lib/internal/structured_clone.js
    // structuredClone was added in v17.0.0, but fetch supports v16.8
    /* @__PURE__ */ __name(function structuredClone3(value, options = void 0) {
      if (arguments.length === 0) {
        throw new TypeError("missing argument");
      }
      if (!channel) {
        channel = new MessageChannel();
      }
      channel.port1.unref();
      channel.port2.unref();
      channel.port1.postMessage(value, options?.transfer);
      return receiveMessageOnPort(channel.port2).message;
    }, "structuredClone");
    module.exports = {
      DOMException: DOMException2,
      structuredClone: structuredClone2,
      subresource,
      forbiddenMethods,
      requestBodyHeader,
      referrerPolicy,
      requestRedirect,
      requestMode,
      requestCredentials,
      requestCache,
      redirectStatus,
      corsSafeListedMethods,
      nullBodyStatus,
      safeMethods,
      badPorts,
      requestDuplex,
      subresourceSet,
      badPortsSet,
      redirectStatusSet,
      corsSafeListedMethodsSet,
      safeMethodsSet,
      forbiddenMethodsSet,
      referrerPolicySet
    };
  }
});

// node_modules/undici/lib/fetch/global.js
var require_global = __commonJS({
  "node_modules/undici/lib/fetch/global.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var globalOrigin = Symbol.for("undici.globalOrigin.1");
    function getGlobalOrigin() {
      return globalThis[globalOrigin];
    }
    __name(getGlobalOrigin, "getGlobalOrigin");
    function setGlobalOrigin(newOrigin) {
      if (newOrigin === void 0) {
        Object.defineProperty(globalThis, globalOrigin, {
          value: void 0,
          writable: true,
          enumerable: false,
          configurable: false
        });
        return;
      }
      const parsedURL = new URL(newOrigin);
      if (parsedURL.protocol !== "http:" && parsedURL.protocol !== "https:") {
        throw new TypeError(`Only http & https urls are allowed, received ${parsedURL.protocol}`);
      }
      Object.defineProperty(globalThis, globalOrigin, {
        value: parsedURL,
        writable: true,
        enumerable: false,
        configurable: false
      });
    }
    __name(setGlobalOrigin, "setGlobalOrigin");
    module.exports = {
      getGlobalOrigin,
      setGlobalOrigin
    };
  }
});

// node_modules/undici/lib/fetch/util.js
var require_util3 = __commonJS({
  "node_modules/undici/lib/fetch/util.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var { redirectStatusSet, referrerPolicySet: referrerPolicyTokens, badPortsSet } = require_constants2();
    var { getGlobalOrigin } = require_global();
    var { performance: performance2 } = __require("perf_hooks");
    var { isBlobLike, toUSVString, ReadableStreamFrom } = require_util2();
    var assert = __require("assert");
    var { isUint8Array } = __require("util/types");
    var supportedHashes = [];
    var crypto4;
    try {
      crypto4 = __require("crypto");
      const possibleRelevantHashes = ["sha256", "sha384", "sha512"];
      supportedHashes = crypto4.getHashes().filter((hash) => possibleRelevantHashes.includes(hash));
    } catch {
    }
    function responseURL(response) {
      const urlList = response.urlList;
      const length = urlList.length;
      return length === 0 ? null : urlList[length - 1].toString();
    }
    __name(responseURL, "responseURL");
    function responseLocationURL(response, requestFragment) {
      if (!redirectStatusSet.has(response.status)) {
        return null;
      }
      let location = response.headersList.get("location");
      if (location !== null && isValidHeaderValue(location)) {
        location = new URL(location, responseURL(response));
      }
      if (location && !location.hash) {
        location.hash = requestFragment;
      }
      return location;
    }
    __name(responseLocationURL, "responseLocationURL");
    function requestCurrentURL(request) {
      return request.urlList[request.urlList.length - 1];
    }
    __name(requestCurrentURL, "requestCurrentURL");
    function requestBadPort(request) {
      const url2 = requestCurrentURL(request);
      if (urlIsHttpHttpsScheme(url2) && badPortsSet.has(url2.port)) {
        return "blocked";
      }
      return "allowed";
    }
    __name(requestBadPort, "requestBadPort");
    function isErrorLike(object) {
      return object instanceof Error || (object?.constructor?.name === "Error" || object?.constructor?.name === "DOMException");
    }
    __name(isErrorLike, "isErrorLike");
    function isValidReasonPhrase(statusText) {
      for (let i = 0; i < statusText.length; ++i) {
        const c = statusText.charCodeAt(i);
        if (!(c === 9 || // HTAB
        c >= 32 && c <= 126 || // SP / VCHAR
        c >= 128 && c <= 255)) {
          return false;
        }
      }
      return true;
    }
    __name(isValidReasonPhrase, "isValidReasonPhrase");
    function isTokenCharCode(c) {
      switch (c) {
        case 34:
        case 40:
        case 41:
        case 44:
        case 47:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 91:
        case 92:
        case 93:
        case 123:
        case 125:
          return false;
        default:
          return c >= 33 && c <= 126;
      }
    }
    __name(isTokenCharCode, "isTokenCharCode");
    function isValidHTTPToken(characters) {
      if (characters.length === 0) {
        return false;
      }
      for (let i = 0; i < characters.length; ++i) {
        if (!isTokenCharCode(characters.charCodeAt(i))) {
          return false;
        }
      }
      return true;
    }
    __name(isValidHTTPToken, "isValidHTTPToken");
    function isValidHeaderName(potentialValue) {
      return isValidHTTPToken(potentialValue);
    }
    __name(isValidHeaderName, "isValidHeaderName");
    function isValidHeaderValue(potentialValue) {
      if (potentialValue.startsWith("	") || potentialValue.startsWith(" ") || potentialValue.endsWith("	") || potentialValue.endsWith(" ")) {
        return false;
      }
      if (potentialValue.includes("\0") || potentialValue.includes("\r") || potentialValue.includes("\n")) {
        return false;
      }
      return true;
    }
    __name(isValidHeaderValue, "isValidHeaderValue");
    function setRequestReferrerPolicyOnRedirect(request, actualResponse) {
      const { headersList } = actualResponse;
      const policyHeader = (headersList.get("referrer-policy") ?? "").split(",");
      let policy = "";
      if (policyHeader.length > 0) {
        for (let i = policyHeader.length; i !== 0; i--) {
          const token = policyHeader[i - 1].trim();
          if (referrerPolicyTokens.has(token)) {
            policy = token;
            break;
          }
        }
      }
      if (policy !== "") {
        request.referrerPolicy = policy;
      }
    }
    __name(setRequestReferrerPolicyOnRedirect, "setRequestReferrerPolicyOnRedirect");
    function crossOriginResourcePolicyCheck() {
      return "allowed";
    }
    __name(crossOriginResourcePolicyCheck, "crossOriginResourcePolicyCheck");
    function corsCheck() {
      return "success";
    }
    __name(corsCheck, "corsCheck");
    function TAOCheck() {
      return "success";
    }
    __name(TAOCheck, "TAOCheck");
    function appendFetchMetadata(httpRequest) {
      let header = null;
      header = httpRequest.mode;
      httpRequest.headersList.set("sec-fetch-mode", header);
    }
    __name(appendFetchMetadata, "appendFetchMetadata");
    function appendRequestOriginHeader(request) {
      let serializedOrigin = request.origin;
      if (request.responseTainting === "cors" || request.mode === "websocket") {
        if (serializedOrigin) {
          request.headersList.append("origin", serializedOrigin);
        }
      } else if (request.method !== "GET" && request.method !== "HEAD") {
        switch (request.referrerPolicy) {
          case "no-referrer":
            serializedOrigin = null;
            break;
          case "no-referrer-when-downgrade":
          case "strict-origin":
          case "strict-origin-when-cross-origin":
            if (request.origin && urlHasHttpsScheme(request.origin) && !urlHasHttpsScheme(requestCurrentURL(request))) {
              serializedOrigin = null;
            }
            break;
          case "same-origin":
            if (!sameOrigin(request, requestCurrentURL(request))) {
              serializedOrigin = null;
            }
            break;
          default:
        }
        if (serializedOrigin) {
          request.headersList.append("origin", serializedOrigin);
        }
      }
    }
    __name(appendRequestOriginHeader, "appendRequestOriginHeader");
    function coarsenedSharedCurrentTime(crossOriginIsolatedCapability) {
      return performance2.now();
    }
    __name(coarsenedSharedCurrentTime, "coarsenedSharedCurrentTime");
    function createOpaqueTimingInfo(timingInfo) {
      return {
        startTime: timingInfo.startTime ?? 0,
        redirectStartTime: 0,
        redirectEndTime: 0,
        postRedirectStartTime: timingInfo.startTime ?? 0,
        finalServiceWorkerStartTime: 0,
        finalNetworkResponseStartTime: 0,
        finalNetworkRequestStartTime: 0,
        endTime: 0,
        encodedBodySize: 0,
        decodedBodySize: 0,
        finalConnectionTimingInfo: null
      };
    }
    __name(createOpaqueTimingInfo, "createOpaqueTimingInfo");
    function makePolicyContainer() {
      return {
        referrerPolicy: "strict-origin-when-cross-origin"
      };
    }
    __name(makePolicyContainer, "makePolicyContainer");
    function clonePolicyContainer(policyContainer) {
      return {
        referrerPolicy: policyContainer.referrerPolicy
      };
    }
    __name(clonePolicyContainer, "clonePolicyContainer");
    function determineRequestsReferrer(request) {
      const policy = request.referrerPolicy;
      assert(policy);
      let referrerSource = null;
      if (request.referrer === "client") {
        const globalOrigin = getGlobalOrigin();
        if (!globalOrigin || globalOrigin.origin === "null") {
          return "no-referrer";
        }
        referrerSource = new URL(globalOrigin);
      } else if (request.referrer instanceof URL) {
        referrerSource = request.referrer;
      }
      let referrerURL = stripURLForReferrer(referrerSource);
      const referrerOrigin = stripURLForReferrer(referrerSource, true);
      if (referrerURL.toString().length > 4096) {
        referrerURL = referrerOrigin;
      }
      const areSameOrigin = sameOrigin(request, referrerURL);
      const isNonPotentiallyTrustWorthy = isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(request.url);
      switch (policy) {
        case "origin":
          return referrerOrigin != null ? referrerOrigin : stripURLForReferrer(referrerSource, true);
        case "unsafe-url":
          return referrerURL;
        case "same-origin":
          return areSameOrigin ? referrerOrigin : "no-referrer";
        case "origin-when-cross-origin":
          return areSameOrigin ? referrerURL : referrerOrigin;
        case "strict-origin-when-cross-origin": {
          const currentURL = requestCurrentURL(request);
          if (sameOrigin(referrerURL, currentURL)) {
            return referrerURL;
          }
          if (isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(currentURL)) {
            return "no-referrer";
          }
          return referrerOrigin;
        }
        case "strict-origin":
        case "no-referrer-when-downgrade":
        default:
          return isNonPotentiallyTrustWorthy ? "no-referrer" : referrerOrigin;
      }
    }
    __name(determineRequestsReferrer, "determineRequestsReferrer");
    function stripURLForReferrer(url2, originOnly) {
      assert(url2 instanceof URL);
      if (url2.protocol === "file:" || url2.protocol === "about:" || url2.protocol === "blank:") {
        return "no-referrer";
      }
      url2.username = "";
      url2.password = "";
      url2.hash = "";
      if (originOnly) {
        url2.pathname = "";
        url2.search = "";
      }
      return url2;
    }
    __name(stripURLForReferrer, "stripURLForReferrer");
    function isURLPotentiallyTrustworthy(url2) {
      if (!(url2 instanceof URL)) {
        return false;
      }
      if (url2.href === "about:blank" || url2.href === "about:srcdoc") {
        return true;
      }
      if (url2.protocol === "data:") return true;
      if (url2.protocol === "file:") return true;
      return isOriginPotentiallyTrustworthy(url2.origin);
      function isOriginPotentiallyTrustworthy(origin) {
        if (origin == null || origin === "null") return false;
        const originAsURL = new URL(origin);
        if (originAsURL.protocol === "https:" || originAsURL.protocol === "wss:") {
          return true;
        }
        if (/^127(?:\.[0-9]+){0,2}\.[0-9]+$|^\[(?:0*:)*?:?0*1\]$/.test(originAsURL.hostname) || (originAsURL.hostname === "localhost" || originAsURL.hostname.includes("localhost.")) || originAsURL.hostname.endsWith(".localhost")) {
          return true;
        }
        return false;
      }
      __name(isOriginPotentiallyTrustworthy, "isOriginPotentiallyTrustworthy");
    }
    __name(isURLPotentiallyTrustworthy, "isURLPotentiallyTrustworthy");
    function bytesMatch(bytes, metadataList) {
      if (crypto4 === void 0) {
        return true;
      }
      const parsedMetadata = parseMetadata(metadataList);
      if (parsedMetadata === "no metadata") {
        return true;
      }
      if (parsedMetadata.length === 0) {
        return true;
      }
      const strongest = getStrongestMetadata(parsedMetadata);
      const metadata = filterMetadataListByAlgorithm(parsedMetadata, strongest);
      for (const item of metadata) {
        const algorithm = item.algo;
        const expectedValue = item.hash;
        let actualValue = crypto4.createHash(algorithm).update(bytes).digest("base64");
        if (actualValue[actualValue.length - 1] === "=") {
          if (actualValue[actualValue.length - 2] === "=") {
            actualValue = actualValue.slice(0, -2);
          } else {
            actualValue = actualValue.slice(0, -1);
          }
        }
        if (compareBase64Mixed(actualValue, expectedValue)) {
          return true;
        }
      }
      return false;
    }
    __name(bytesMatch, "bytesMatch");
    var parseHashWithOptions = /(?<algo>sha256|sha384|sha512)-((?<hash>[A-Za-z0-9+/]+|[A-Za-z0-9_-]+)={0,2}(?:\s|$)( +[!-~]*)?)?/i;
    function parseMetadata(metadata) {
      const result = [];
      let empty = true;
      for (const token of metadata.split(" ")) {
        empty = false;
        const parsedToken = parseHashWithOptions.exec(token);
        if (parsedToken === null || parsedToken.groups === void 0 || parsedToken.groups.algo === void 0) {
          continue;
        }
        const algorithm = parsedToken.groups.algo.toLowerCase();
        if (supportedHashes.includes(algorithm)) {
          result.push(parsedToken.groups);
        }
      }
      if (empty === true) {
        return "no metadata";
      }
      return result;
    }
    __name(parseMetadata, "parseMetadata");
    function getStrongestMetadata(metadataList) {
      let algorithm = metadataList[0].algo;
      if (algorithm[3] === "5") {
        return algorithm;
      }
      for (let i = 1; i < metadataList.length; ++i) {
        const metadata = metadataList[i];
        if (metadata.algo[3] === "5") {
          algorithm = "sha512";
          break;
        } else if (algorithm[3] === "3") {
          continue;
        } else if (metadata.algo[3] === "3") {
          algorithm = "sha384";
        }
      }
      return algorithm;
    }
    __name(getStrongestMetadata, "getStrongestMetadata");
    function filterMetadataListByAlgorithm(metadataList, algorithm) {
      if (metadataList.length === 1) {
        return metadataList;
      }
      let pos = 0;
      for (let i = 0; i < metadataList.length; ++i) {
        if (metadataList[i].algo === algorithm) {
          metadataList[pos++] = metadataList[i];
        }
      }
      metadataList.length = pos;
      return metadataList;
    }
    __name(filterMetadataListByAlgorithm, "filterMetadataListByAlgorithm");
    function compareBase64Mixed(actualValue, expectedValue) {
      if (actualValue.length !== expectedValue.length) {
        return false;
      }
      for (let i = 0; i < actualValue.length; ++i) {
        if (actualValue[i] !== expectedValue[i]) {
          if (actualValue[i] === "+" && expectedValue[i] === "-" || actualValue[i] === "/" && expectedValue[i] === "_") {
            continue;
          }
          return false;
        }
      }
      return true;
    }
    __name(compareBase64Mixed, "compareBase64Mixed");
    function tryUpgradeRequestToAPotentiallyTrustworthyURL(request) {
    }
    __name(tryUpgradeRequestToAPotentiallyTrustworthyURL, "tryUpgradeRequestToAPotentiallyTrustworthyURL");
    function sameOrigin(A, B) {
      if (A.origin === B.origin && A.origin === "null") {
        return true;
      }
      if (A.protocol === B.protocol && A.hostname === B.hostname && A.port === B.port) {
        return true;
      }
      return false;
    }
    __name(sameOrigin, "sameOrigin");
    function createDeferredPromise() {
      let res;
      let rej;
      const promise = new Promise((resolve, reject) => {
        res = resolve;
        rej = reject;
      });
      return { promise, resolve: res, reject: rej };
    }
    __name(createDeferredPromise, "createDeferredPromise");
    function isAborted(fetchParams) {
      return fetchParams.controller.state === "aborted";
    }
    __name(isAborted, "isAborted");
    function isCancelled(fetchParams) {
      return fetchParams.controller.state === "aborted" || fetchParams.controller.state === "terminated";
    }
    __name(isCancelled, "isCancelled");
    var normalizeMethodRecord = {
      delete: "DELETE",
      DELETE: "DELETE",
      get: "GET",
      GET: "GET",
      head: "HEAD",
      HEAD: "HEAD",
      options: "OPTIONS",
      OPTIONS: "OPTIONS",
      post: "POST",
      POST: "POST",
      put: "PUT",
      PUT: "PUT"
    };
    Object.setPrototypeOf(normalizeMethodRecord, null);
    function normalizeMethod(method) {
      return normalizeMethodRecord[method.toLowerCase()] ?? method;
    }
    __name(normalizeMethod, "normalizeMethod");
    function serializeJavascriptValueToJSONString(value) {
      const result = JSON.stringify(value);
      if (result === void 0) {
        throw new TypeError("Value is not JSON serializable");
      }
      assert(typeof result === "string");
      return result;
    }
    __name(serializeJavascriptValueToJSONString, "serializeJavascriptValueToJSONString");
    var esIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));
    function makeIterator(iterator, name, kind) {
      const object = {
        index: 0,
        kind,
        target: iterator
      };
      const i = {
        next() {
          if (Object.getPrototypeOf(this) !== i) {
            throw new TypeError(
              `'next' called on an object that does not implement interface ${name} Iterator.`
            );
          }
          const { index, kind: kind2, target } = object;
          const values = target();
          const len = values.length;
          if (index >= len) {
            return { value: void 0, done: true };
          }
          const pair = values[index];
          object.index = index + 1;
          return iteratorResult(pair, kind2);
        },
        // The class string of an iterator prototype object for a given interface is the
        // result of concatenating the identifier of the interface and the string " Iterator".
        [Symbol.toStringTag]: `${name} Iterator`
      };
      Object.setPrototypeOf(i, esIteratorPrototype);
      return Object.setPrototypeOf({}, i);
    }
    __name(makeIterator, "makeIterator");
    function iteratorResult(pair, kind) {
      let result;
      switch (kind) {
        case "key": {
          result = pair[0];
          break;
        }
        case "value": {
          result = pair[1];
          break;
        }
        case "key+value": {
          result = pair;
          break;
        }
      }
      return { value: result, done: false };
    }
    __name(iteratorResult, "iteratorResult");
    async function fullyReadBody(body, processBody, processBodyError) {
      const successSteps = processBody;
      const errorSteps = processBodyError;
      let reader;
      try {
        reader = body.stream.getReader();
      } catch (e) {
        errorSteps(e);
        return;
      }
      try {
        const result = await readAllBytes(reader);
        successSteps(result);
      } catch (e) {
        errorSteps(e);
      }
    }
    __name(fullyReadBody, "fullyReadBody");
    var ReadableStream2 = globalThis.ReadableStream;
    function isReadableStreamLike(stream) {
      if (!ReadableStream2) {
        ReadableStream2 = __require("stream/web").ReadableStream;
      }
      return stream instanceof ReadableStream2 || stream[Symbol.toStringTag] === "ReadableStream" && typeof stream.tee === "function";
    }
    __name(isReadableStreamLike, "isReadableStreamLike");
    var MAXIMUM_ARGUMENT_LENGTH = 65535;
    function isomorphicDecode(input) {
      if (input.length < MAXIMUM_ARGUMENT_LENGTH) {
        return String.fromCharCode(...input);
      }
      return input.reduce((previous, current) => previous + String.fromCharCode(current), "");
    }
    __name(isomorphicDecode, "isomorphicDecode");
    function readableStreamClose(controller) {
      try {
        controller.close();
      } catch (err) {
        if (!err.message.includes("Controller is already closed")) {
          throw err;
        }
      }
    }
    __name(readableStreamClose, "readableStreamClose");
    function isomorphicEncode(input) {
      for (let i = 0; i < input.length; i++) {
        assert(input.charCodeAt(i) <= 255);
      }
      return input;
    }
    __name(isomorphicEncode, "isomorphicEncode");
    async function readAllBytes(reader) {
      const bytes = [];
      let byteLength = 0;
      while (true) {
        const { done, value: chunk } = await reader.read();
        if (done) {
          return Buffer.concat(bytes, byteLength);
        }
        if (!isUint8Array(chunk)) {
          throw new TypeError("Received non-Uint8Array chunk");
        }
        bytes.push(chunk);
        byteLength += chunk.length;
      }
    }
    __name(readAllBytes, "readAllBytes");
    function urlIsLocal(url2) {
      assert("protocol" in url2);
      const protocol = url2.protocol;
      return protocol === "about:" || protocol === "blob:" || protocol === "data:";
    }
    __name(urlIsLocal, "urlIsLocal");
    function urlHasHttpsScheme(url2) {
      if (typeof url2 === "string") {
        return url2.startsWith("https:");
      }
      return url2.protocol === "https:";
    }
    __name(urlHasHttpsScheme, "urlHasHttpsScheme");
    function urlIsHttpHttpsScheme(url2) {
      assert("protocol" in url2);
      const protocol = url2.protocol;
      return protocol === "http:" || protocol === "https:";
    }
    __name(urlIsHttpHttpsScheme, "urlIsHttpHttpsScheme");
    var hasOwn = Object.hasOwn || ((dict, key) => Object.prototype.hasOwnProperty.call(dict, key));
    module.exports = {
      isAborted,
      isCancelled,
      createDeferredPromise,
      ReadableStreamFrom,
      toUSVString,
      tryUpgradeRequestToAPotentiallyTrustworthyURL,
      coarsenedSharedCurrentTime,
      determineRequestsReferrer,
      makePolicyContainer,
      clonePolicyContainer,
      appendFetchMetadata,
      appendRequestOriginHeader,
      TAOCheck,
      corsCheck,
      crossOriginResourcePolicyCheck,
      createOpaqueTimingInfo,
      setRequestReferrerPolicyOnRedirect,
      isValidHTTPToken,
      requestBadPort,
      requestCurrentURL,
      responseURL,
      responseLocationURL,
      isBlobLike,
      isURLPotentiallyTrustworthy,
      isValidReasonPhrase,
      sameOrigin,
      normalizeMethod,
      serializeJavascriptValueToJSONString,
      makeIterator,
      isValidHeaderName,
      isValidHeaderValue,
      hasOwn,
      isErrorLike,
      fullyReadBody,
      bytesMatch,
      isReadableStreamLike,
      readableStreamClose,
      isomorphicEncode,
      isomorphicDecode,
      urlIsLocal,
      urlHasHttpsScheme,
      urlIsHttpHttpsScheme,
      readAllBytes,
      normalizeMethodRecord,
      parseMetadata
    };
  }
});

// node_modules/undici/lib/fetch/symbols.js
var require_symbols2 = __commonJS({
  "node_modules/undici/lib/fetch/symbols.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    module.exports = {
      kUrl: Symbol("url"),
      kHeaders: Symbol("headers"),
      kSignal: Symbol("signal"),
      kState: Symbol("state"),
      kGuard: Symbol("guard"),
      kRealm: Symbol("realm")
    };
  }
});

// node_modules/undici/lib/fetch/webidl.js
var require_webidl = __commonJS({
  "node_modules/undici/lib/fetch/webidl.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var { types } = __require("util");
    var { hasOwn, toUSVString } = require_util3();
    var webidl = {};
    webidl.converters = {};
    webidl.util = {};
    webidl.errors = {};
    webidl.errors.exception = function(message) {
      return new TypeError(`${message.header}: ${message.message}`);
    };
    webidl.errors.conversionFailed = function(context) {
      const plural = context.types.length === 1 ? "" : " one of";
      const message = `${context.argument} could not be converted to${plural}: ${context.types.join(", ")}.`;
      return webidl.errors.exception({
        header: context.prefix,
        message
      });
    };
    webidl.errors.invalidArgument = function(context) {
      return webidl.errors.exception({
        header: context.prefix,
        message: `"${context.value}" is an invalid ${context.type}.`
      });
    };
    webidl.brandCheck = function(V, I, opts = void 0) {
      if (opts?.strict !== false && !(V instanceof I)) {
        throw new TypeError("Illegal invocation");
      } else {
        return V?.[Symbol.toStringTag] === I.prototype[Symbol.toStringTag];
      }
    };
    webidl.argumentLengthCheck = function({ length }, min, ctx) {
      if (length < min) {
        throw webidl.errors.exception({
          message: `${min} argument${min !== 1 ? "s" : ""} required, but${length ? " only" : ""} ${length} found.`,
          ...ctx
        });
      }
    };
    webidl.illegalConstructor = function() {
      throw webidl.errors.exception({
        header: "TypeError",
        message: "Illegal constructor"
      });
    };
    webidl.util.Type = function(V) {
      switch (typeof V) {
        case "undefined":
          return "Undefined";
        case "boolean":
          return "Boolean";
        case "string":
          return "String";
        case "symbol":
          return "Symbol";
        case "number":
          return "Number";
        case "bigint":
          return "BigInt";
        case "function":
        case "object": {
          if (V === null) {
            return "Null";
          }
          return "Object";
        }
      }
    };
    webidl.util.ConvertToInt = function(V, bitLength, signedness, opts = {}) {
      let upperBound;
      let lowerBound;
      if (bitLength === 64) {
        upperBound = Math.pow(2, 53) - 1;
        if (signedness === "unsigned") {
          lowerBound = 0;
        } else {
          lowerBound = Math.pow(-2, 53) + 1;
        }
      } else if (signedness === "unsigned") {
        lowerBound = 0;
        upperBound = Math.pow(2, bitLength) - 1;
      } else {
        lowerBound = Math.pow(-2, bitLength) - 1;
        upperBound = Math.pow(2, bitLength - 1) - 1;
      }
      let x = Number(V);
      if (x === 0) {
        x = 0;
      }
      if (opts.enforceRange === true) {
        if (Number.isNaN(x) || x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY) {
          throw webidl.errors.exception({
            header: "Integer conversion",
            message: `Could not convert ${V} to an integer.`
          });
        }
        x = webidl.util.IntegerPart(x);
        if (x < lowerBound || x > upperBound) {
          throw webidl.errors.exception({
            header: "Integer conversion",
            message: `Value must be between ${lowerBound}-${upperBound}, got ${x}.`
          });
        }
        return x;
      }
      if (!Number.isNaN(x) && opts.clamp === true) {
        x = Math.min(Math.max(x, lowerBound), upperBound);
        if (Math.floor(x) % 2 === 0) {
          x = Math.floor(x);
        } else {
          x = Math.ceil(x);
        }
        return x;
      }
      if (Number.isNaN(x) || x === 0 && Object.is(0, x) || x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY) {
        return 0;
      }
      x = webidl.util.IntegerPart(x);
      x = x % Math.pow(2, bitLength);
      if (signedness === "signed" && x >= Math.pow(2, bitLength) - 1) {
        return x - Math.pow(2, bitLength);
      }
      return x;
    };
    webidl.util.IntegerPart = function(n) {
      const r = Math.floor(Math.abs(n));
      if (n < 0) {
        return -1 * r;
      }
      return r;
    };
    webidl.sequenceConverter = function(converter) {
      return (V) => {
        if (webidl.util.Type(V) !== "Object") {
          throw webidl.errors.exception({
            header: "Sequence",
            message: `Value of type ${webidl.util.Type(V)} is not an Object.`
          });
        }
        const method = V?.[Symbol.iterator]?.();
        const seq = [];
        if (method === void 0 || typeof method.next !== "function") {
          throw webidl.errors.exception({
            header: "Sequence",
            message: "Object is not an iterator."
          });
        }
        while (true) {
          const { done, value } = method.next();
          if (done) {
            break;
          }
          seq.push(converter(value));
        }
        return seq;
      };
    };
    webidl.recordConverter = function(keyConverter, valueConverter) {
      return (O) => {
        if (webidl.util.Type(O) !== "Object") {
          throw webidl.errors.exception({
            header: "Record",
            message: `Value of type ${webidl.util.Type(O)} is not an Object.`
          });
        }
        const result = {};
        if (!types.isProxy(O)) {
          const keys2 = Object.keys(O);
          for (const key of keys2) {
            const typedKey = keyConverter(key);
            const typedValue = valueConverter(O[key]);
            result[typedKey] = typedValue;
          }
          return result;
        }
        const keys = Reflect.ownKeys(O);
        for (const key of keys) {
          const desc = Reflect.getOwnPropertyDescriptor(O, key);
          if (desc?.enumerable) {
            const typedKey = keyConverter(key);
            const typedValue = valueConverter(O[key]);
            result[typedKey] = typedValue;
          }
        }
        return result;
      };
    };
    webidl.interfaceConverter = function(i) {
      return (V, opts = {}) => {
        if (opts.strict !== false && !(V instanceof i)) {
          throw webidl.errors.exception({
            header: i.name,
            message: `Expected ${V} to be an instance of ${i.name}.`
          });
        }
        return V;
      };
    };
    webidl.dictionaryConverter = function(converters) {
      return (dictionary) => {
        const type = webidl.util.Type(dictionary);
        const dict = {};
        if (type === "Null" || type === "Undefined") {
          return dict;
        } else if (type !== "Object") {
          throw webidl.errors.exception({
            header: "Dictionary",
            message: `Expected ${dictionary} to be one of: Null, Undefined, Object.`
          });
        }
        for (const options of converters) {
          const { key, defaultValue, required, converter } = options;
          if (required === true) {
            if (!hasOwn(dictionary, key)) {
              throw webidl.errors.exception({
                header: "Dictionary",
                message: `Missing required key "${key}".`
              });
            }
          }
          let value = dictionary[key];
          const hasDefault = hasOwn(options, "defaultValue");
          if (hasDefault && value !== null) {
            value = value ?? defaultValue;
          }
          if (required || hasDefault || value !== void 0) {
            value = converter(value);
            if (options.allowedValues && !options.allowedValues.includes(value)) {
              throw webidl.errors.exception({
                header: "Dictionary",
                message: `${value} is not an accepted type. Expected one of ${options.allowedValues.join(", ")}.`
              });
            }
            dict[key] = value;
          }
        }
        return dict;
      };
    };
    webidl.nullableConverter = function(converter) {
      return (V) => {
        if (V === null) {
          return V;
        }
        return converter(V);
      };
    };
    webidl.converters.DOMString = function(V, opts = {}) {
      if (V === null && opts.legacyNullToEmptyString) {
        return "";
      }
      if (typeof V === "symbol") {
        throw new TypeError("Could not convert argument of type symbol to string.");
      }
      return String(V);
    };
    webidl.converters.ByteString = function(V) {
      const x = webidl.converters.DOMString(V);
      for (let index = 0; index < x.length; index++) {
        if (x.charCodeAt(index) > 255) {
          throw new TypeError(
            `Cannot convert argument to a ByteString because the character at index ${index} has a value of ${x.charCodeAt(index)} which is greater than 255.`
          );
        }
      }
      return x;
    };
    webidl.converters.USVString = toUSVString;
    webidl.converters.boolean = function(V) {
      const x = Boolean(V);
      return x;
    };
    webidl.converters.any = function(V) {
      return V;
    };
    webidl.converters["long long"] = function(V) {
      const x = webidl.util.ConvertToInt(V, 64, "signed");
      return x;
    };
    webidl.converters["unsigned long long"] = function(V) {
      const x = webidl.util.ConvertToInt(V, 64, "unsigned");
      return x;
    };
    webidl.converters["unsigned long"] = function(V) {
      const x = webidl.util.ConvertToInt(V, 32, "unsigned");
      return x;
    };
    webidl.converters["unsigned short"] = function(V, opts) {
      const x = webidl.util.ConvertToInt(V, 16, "unsigned", opts);
      return x;
    };
    webidl.converters.ArrayBuffer = function(V, opts = {}) {
      if (webidl.util.Type(V) !== "Object" || !types.isAnyArrayBuffer(V)) {
        throw webidl.errors.conversionFailed({
          prefix: `${V}`,
          argument: `${V}`,
          types: ["ArrayBuffer"]
        });
      }
      if (opts.allowShared === false && types.isSharedArrayBuffer(V)) {
        throw webidl.errors.exception({
          header: "ArrayBuffer",
          message: "SharedArrayBuffer is not allowed."
        });
      }
      return V;
    };
    webidl.converters.TypedArray = function(V, T, opts = {}) {
      if (webidl.util.Type(V) !== "Object" || !types.isTypedArray(V) || V.constructor.name !== T.name) {
        throw webidl.errors.conversionFailed({
          prefix: `${T.name}`,
          argument: `${V}`,
          types: [T.name]
        });
      }
      if (opts.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {
        throw webidl.errors.exception({
          header: "ArrayBuffer",
          message: "SharedArrayBuffer is not allowed."
        });
      }
      return V;
    };
    webidl.converters.DataView = function(V, opts = {}) {
      if (webidl.util.Type(V) !== "Object" || !types.isDataView(V)) {
        throw webidl.errors.exception({
          header: "DataView",
          message: "Object is not a DataView."
        });
      }
      if (opts.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {
        throw webidl.errors.exception({
          header: "ArrayBuffer",
          message: "SharedArrayBuffer is not allowed."
        });
      }
      return V;
    };
    webidl.converters.BufferSource = function(V, opts = {}) {
      if (types.isAnyArrayBuffer(V)) {
        return webidl.converters.ArrayBuffer(V, opts);
      }
      if (types.isTypedArray(V)) {
        return webidl.converters.TypedArray(V, V.constructor);
      }
      if (types.isDataView(V)) {
        return webidl.converters.DataView(V, opts);
      }
      throw new TypeError(`Could not convert ${V} to a BufferSource.`);
    };
    webidl.converters["sequence<ByteString>"] = webidl.sequenceConverter(
      webidl.converters.ByteString
    );
    webidl.converters["sequence<sequence<ByteString>>"] = webidl.sequenceConverter(
      webidl.converters["sequence<ByteString>"]
    );
    webidl.converters["record<ByteString, ByteString>"] = webidl.recordConverter(
      webidl.converters.ByteString,
      webidl.converters.ByteString
    );
    module.exports = {
      webidl
    };
  }
});

// node_modules/undici/lib/fetch/dataURL.js
var require_dataURL = __commonJS({
  "node_modules/undici/lib/fetch/dataURL.js"(exports, module) {
    init_cjs_shim();
    var assert = __require("assert");
    var { atob: atob2 } = __require("buffer");
    var { isomorphicDecode } = require_util3();
    var encoder = new TextEncoder();
    var HTTP_TOKEN_CODEPOINTS = /^[!#$%&'*+-.^_|~A-Za-z0-9]+$/;
    var HTTP_WHITESPACE_REGEX = /(\u000A|\u000D|\u0009|\u0020)/;
    var HTTP_QUOTED_STRING_TOKENS = /[\u0009|\u0020-\u007E|\u0080-\u00FF]/;
    function dataURLProcessor(dataURL) {
      assert(dataURL.protocol === "data:");
      let input = URLSerializer(dataURL, true);
      input = input.slice(5);
      const position = { position: 0 };
      let mimeType = collectASequenceOfCodePointsFast(
        ",",
        input,
        position
      );
      const mimeTypeLength = mimeType.length;
      mimeType = removeASCIIWhitespace(mimeType, true, true);
      if (position.position >= input.length) {
        return "failure";
      }
      position.position++;
      const encodedBody = input.slice(mimeTypeLength + 1);
      let body = stringPercentDecode(encodedBody);
      if (/;(\u0020){0,}base64$/i.test(mimeType)) {
        const stringBody = isomorphicDecode(body);
        body = forgivingBase64(stringBody);
        if (body === "failure") {
          return "failure";
        }
        mimeType = mimeType.slice(0, -6);
        mimeType = mimeType.replace(/(\u0020)+$/, "");
        mimeType = mimeType.slice(0, -1);
      }
      if (mimeType.startsWith(";")) {
        mimeType = "text/plain" + mimeType;
      }
      let mimeTypeRecord = parseMIMEType(mimeType);
      if (mimeTypeRecord === "failure") {
        mimeTypeRecord = parseMIMEType("text/plain;charset=US-ASCII");
      }
      return { mimeType: mimeTypeRecord, body };
    }
    __name(dataURLProcessor, "dataURLProcessor");
    function URLSerializer(url2, excludeFragment = false) {
      if (!excludeFragment) {
        return url2.href;
      }
      const href = url2.href;
      const hashLength = url2.hash.length;
      return hashLength === 0 ? href : href.substring(0, href.length - hashLength);
    }
    __name(URLSerializer, "URLSerializer");
    function collectASequenceOfCodePoints(condition, input, position) {
      let result = "";
      while (position.position < input.length && condition(input[position.position])) {
        result += input[position.position];
        position.position++;
      }
      return result;
    }
    __name(collectASequenceOfCodePoints, "collectASequenceOfCodePoints");
    function collectASequenceOfCodePointsFast(char, input, position) {
      const idx = input.indexOf(char, position.position);
      const start = position.position;
      if (idx === -1) {
        position.position = input.length;
        return input.slice(start);
      }
      position.position = idx;
      return input.slice(start, position.position);
    }
    __name(collectASequenceOfCodePointsFast, "collectASequenceOfCodePointsFast");
    function stringPercentDecode(input) {
      const bytes = encoder.encode(input);
      return percentDecode(bytes);
    }
    __name(stringPercentDecode, "stringPercentDecode");
    function percentDecode(input) {
      const output = [];
      for (let i = 0; i < input.length; i++) {
        const byte = input[i];
        if (byte !== 37) {
          output.push(byte);
        } else if (byte === 37 && !/^[0-9A-Fa-f]{2}$/i.test(String.fromCharCode(input[i + 1], input[i + 2]))) {
          output.push(37);
        } else {
          const nextTwoBytes = String.fromCharCode(input[i + 1], input[i + 2]);
          const bytePoint = Number.parseInt(nextTwoBytes, 16);
          output.push(bytePoint);
          i += 2;
        }
      }
      return Uint8Array.from(output);
    }
    __name(percentDecode, "percentDecode");
    function parseMIMEType(input) {
      input = removeHTTPWhitespace(input, true, true);
      const position = { position: 0 };
      const type = collectASequenceOfCodePointsFast(
        "/",
        input,
        position
      );
      if (type.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(type)) {
        return "failure";
      }
      if (position.position > input.length) {
        return "failure";
      }
      position.position++;
      let subtype = collectASequenceOfCodePointsFast(
        ";",
        input,
        position
      );
      subtype = removeHTTPWhitespace(subtype, false, true);
      if (subtype.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(subtype)) {
        return "failure";
      }
      const typeLowercase = type.toLowerCase();
      const subtypeLowercase = subtype.toLowerCase();
      const mimeType = {
        type: typeLowercase,
        subtype: subtypeLowercase,
        /** @type {Map<string, string>} */
        parameters: /* @__PURE__ */ new Map(),
        // https://mimesniff.spec.whatwg.org/#mime-type-essence
        essence: `${typeLowercase}/${subtypeLowercase}`
      };
      while (position.position < input.length) {
        position.position++;
        collectASequenceOfCodePoints(
          // https://fetch.spec.whatwg.org/#http-whitespace
          (char) => HTTP_WHITESPACE_REGEX.test(char),
          input,
          position
        );
        let parameterName = collectASequenceOfCodePoints(
          (char) => char !== ";" && char !== "=",
          input,
          position
        );
        parameterName = parameterName.toLowerCase();
        if (position.position < input.length) {
          if (input[position.position] === ";") {
            continue;
          }
          position.position++;
        }
        if (position.position > input.length) {
          break;
        }
        let parameterValue = null;
        if (input[position.position] === '"') {
          parameterValue = collectAnHTTPQuotedString(input, position, true);
          collectASequenceOfCodePointsFast(
            ";",
            input,
            position
          );
        } else {
          parameterValue = collectASequenceOfCodePointsFast(
            ";",
            input,
            position
          );
          parameterValue = removeHTTPWhitespace(parameterValue, false, true);
          if (parameterValue.length === 0) {
            continue;
          }
        }
        if (parameterName.length !== 0 && HTTP_TOKEN_CODEPOINTS.test(parameterName) && (parameterValue.length === 0 || HTTP_QUOTED_STRING_TOKENS.test(parameterValue)) && !mimeType.parameters.has(parameterName)) {
          mimeType.parameters.set(parameterName, parameterValue);
        }
      }
      return mimeType;
    }
    __name(parseMIMEType, "parseMIMEType");
    function forgivingBase64(data) {
      data = data.replace(/[\u0009\u000A\u000C\u000D\u0020]/g, "");
      if (data.length % 4 === 0) {
        data = data.replace(/=?=$/, "");
      }
      if (data.length % 4 === 1) {
        return "failure";
      }
      if (/[^+/0-9A-Za-z]/.test(data)) {
        return "failure";
      }
      const binary = atob2(data);
      const bytes = new Uint8Array(binary.length);
      for (let byte = 0; byte < binary.length; byte++) {
        bytes[byte] = binary.charCodeAt(byte);
      }
      return bytes;
    }
    __name(forgivingBase64, "forgivingBase64");
    function collectAnHTTPQuotedString(input, position, extractValue) {
      const positionStart = position.position;
      let value = "";
      assert(input[position.position] === '"');
      position.position++;
      while (true) {
        value += collectASequenceOfCodePoints(
          (char) => char !== '"' && char !== "\\",
          input,
          position
        );
        if (position.position >= input.length) {
          break;
        }
        const quoteOrBackslash = input[position.position];
        position.position++;
        if (quoteOrBackslash === "\\") {
          if (position.position >= input.length) {
            value += "\\";
            break;
          }
          value += input[position.position];
          position.position++;
        } else {
          assert(quoteOrBackslash === '"');
          break;
        }
      }
      if (extractValue) {
        return value;
      }
      return input.slice(positionStart, position.position);
    }
    __name(collectAnHTTPQuotedString, "collectAnHTTPQuotedString");
    function serializeAMimeType(mimeType) {
      assert(mimeType !== "failure");
      const { parameters, essence } = mimeType;
      let serialization = essence;
      for (let [name, value] of parameters.entries()) {
        serialization += ";";
        serialization += name;
        serialization += "=";
        if (!HTTP_TOKEN_CODEPOINTS.test(value)) {
          value = value.replace(/(\\|")/g, "\\$1");
          value = '"' + value;
          value += '"';
        }
        serialization += value;
      }
      return serialization;
    }
    __name(serializeAMimeType, "serializeAMimeType");
    function isHTTPWhiteSpace(char) {
      return char === "\r" || char === "\n" || char === "	" || char === " ";
    }
    __name(isHTTPWhiteSpace, "isHTTPWhiteSpace");
    function removeHTTPWhitespace(str, leading = true, trailing = true) {
      let lead = 0;
      let trail = str.length - 1;
      if (leading) {
        for (; lead < str.length && isHTTPWhiteSpace(str[lead]); lead++) ;
      }
      if (trailing) {
        for (; trail > 0 && isHTTPWhiteSpace(str[trail]); trail--) ;
      }
      return str.slice(lead, trail + 1);
    }
    __name(removeHTTPWhitespace, "removeHTTPWhitespace");
    function isASCIIWhitespace(char) {
      return char === "\r" || char === "\n" || char === "	" || char === "\f" || char === " ";
    }
    __name(isASCIIWhitespace, "isASCIIWhitespace");
    function removeASCIIWhitespace(str, leading = true, trailing = true) {
      let lead = 0;
      let trail = str.length - 1;
      if (leading) {
        for (; lead < str.length && isASCIIWhitespace(str[lead]); lead++) ;
      }
      if (trailing) {
        for (; trail > 0 && isASCIIWhitespace(str[trail]); trail--) ;
      }
      return str.slice(lead, trail + 1);
    }
    __name(removeASCIIWhitespace, "removeASCIIWhitespace");
    module.exports = {
      dataURLProcessor,
      URLSerializer,
      collectASequenceOfCodePoints,
      collectASequenceOfCodePointsFast,
      stringPercentDecode,
      parseMIMEType,
      collectAnHTTPQuotedString,
      serializeAMimeType
    };
  }
});

// node_modules/undici/lib/fetch/file.js
var require_file = __commonJS({
  "node_modules/undici/lib/fetch/file.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var { Blob: Blob2, File: NativeFile } = __require("buffer");
    var { types } = __require("util");
    var { kState } = require_symbols2();
    var { isBlobLike } = require_util3();
    var { webidl } = require_webidl();
    var { parseMIMEType, serializeAMimeType } = require_dataURL();
    var { kEnumerableProperty } = require_util2();
    var encoder = new TextEncoder();
    var File = class _File extends Blob2 {
      static {
        __name(this, "File");
      }
      constructor(fileBits, fileName, options = {}) {
        webidl.argumentLengthCheck(arguments, 2, { header: "File constructor" });
        fileBits = webidl.converters["sequence<BlobPart>"](fileBits);
        fileName = webidl.converters.USVString(fileName);
        options = webidl.converters.FilePropertyBag(options);
        const n = fileName;
        let t = options.type;
        let d;
        substep: {
          if (t) {
            t = parseMIMEType(t);
            if (t === "failure") {
              t = "";
              break substep;
            }
            t = serializeAMimeType(t).toLowerCase();
          }
          d = options.lastModified;
        }
        super(processBlobParts(fileBits, options), { type: t });
        this[kState] = {
          name: n,
          lastModified: d,
          type: t
        };
      }
      get name() {
        webidl.brandCheck(this, _File);
        return this[kState].name;
      }
      get lastModified() {
        webidl.brandCheck(this, _File);
        return this[kState].lastModified;
      }
      get type() {
        webidl.brandCheck(this, _File);
        return this[kState].type;
      }
    };
    var FileLike = class _FileLike {
      static {
        __name(this, "FileLike");
      }
      constructor(blobLike, fileName, options = {}) {
        const n = fileName;
        const t = options.type;
        const d = options.lastModified ?? Date.now();
        this[kState] = {
          blobLike,
          name: n,
          type: t,
          lastModified: d
        };
      }
      stream(...args) {
        webidl.brandCheck(this, _FileLike);
        return this[kState].blobLike.stream(...args);
      }
      arrayBuffer(...args) {
        webidl.brandCheck(this, _FileLike);
        return this[kState].blobLike.arrayBuffer(...args);
      }
      slice(...args) {
        webidl.brandCheck(this, _FileLike);
        return this[kState].blobLike.slice(...args);
      }
      text(...args) {
        webidl.brandCheck(this, _FileLike);
        return this[kState].blobLike.text(...args);
      }
      get size() {
        webidl.brandCheck(this, _FileLike);
        return this[kState].blobLike.size;
      }
      get type() {
        webidl.brandCheck(this, _FileLike);
        return this[kState].blobLike.type;
      }
      get name() {
        webidl.brandCheck(this, _FileLike);
        return this[kState].name;
      }
      get lastModified() {
        webidl.brandCheck(this, _FileLike);
        return this[kState].lastModified;
      }
      get [Symbol.toStringTag]() {
        return "File";
      }
    };
    Object.defineProperties(File.prototype, {
      [Symbol.toStringTag]: {
        value: "File",
        configurable: true
      },
      name: kEnumerableProperty,
      lastModified: kEnumerableProperty
    });
    webidl.converters.Blob = webidl.interfaceConverter(Blob2);
    webidl.converters.BlobPart = function(V, opts) {
      if (webidl.util.Type(V) === "Object") {
        if (isBlobLike(V)) {
          return webidl.converters.Blob(V, { strict: false });
        }
        if (ArrayBuffer.isView(V) || types.isAnyArrayBuffer(V)) {
          return webidl.converters.BufferSource(V, opts);
        }
      }
      return webidl.converters.USVString(V, opts);
    };
    webidl.converters["sequence<BlobPart>"] = webidl.sequenceConverter(
      webidl.converters.BlobPart
    );
    webidl.converters.FilePropertyBag = webidl.dictionaryConverter([
      {
        key: "lastModified",
        converter: webidl.converters["long long"],
        get defaultValue() {
          return Date.now();
        }
      },
      {
        key: "type",
        converter: webidl.converters.DOMString,
        defaultValue: ""
      },
      {
        key: "endings",
        converter: /* @__PURE__ */ __name((value) => {
          value = webidl.converters.DOMString(value);
          value = value.toLowerCase();
          if (value !== "native") {
            value = "transparent";
          }
          return value;
        }, "converter"),
        defaultValue: "transparent"
      }
    ]);
    function processBlobParts(parts, options) {
      const bytes = [];
      for (const element of parts) {
        if (typeof element === "string") {
          let s = element;
          if (options.endings === "native") {
            s = convertLineEndingsNative(s);
          }
          bytes.push(encoder.encode(s));
        } else if (types.isAnyArrayBuffer(element) || types.isTypedArray(element)) {
          if (!element.buffer) {
            bytes.push(new Uint8Array(element));
          } else {
            bytes.push(
              new Uint8Array(element.buffer, element.byteOffset, element.byteLength)
            );
          }
        } else if (isBlobLike(element)) {
          bytes.push(element);
        }
      }
      return bytes;
    }
    __name(processBlobParts, "processBlobParts");
    function convertLineEndingsNative(s) {
      let nativeLineEnding = "\n";
      if (process.platform === "win32") {
        nativeLineEnding = "\r\n";
      }
      return s.replace(/\r?\n/g, nativeLineEnding);
    }
    __name(convertLineEndingsNative, "convertLineEndingsNative");
    function isFileLike(object) {
      return NativeFile && object instanceof NativeFile || object instanceof File || object && (typeof object.stream === "function" || typeof object.arrayBuffer === "function") && object[Symbol.toStringTag] === "File";
    }
    __name(isFileLike, "isFileLike");
    module.exports = { File, FileLike, isFileLike };
  }
});

// node_modules/undici/lib/fetch/formdata.js
var require_formdata = __commonJS({
  "node_modules/undici/lib/fetch/formdata.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var { isBlobLike, toUSVString, makeIterator } = require_util3();
    var { kState } = require_symbols2();
    var { File: UndiciFile, FileLike, isFileLike } = require_file();
    var { webidl } = require_webidl();
    var { Blob: Blob2, File: NativeFile } = __require("buffer");
    var File = NativeFile ?? UndiciFile;
    var FormData = class _FormData {
      static {
        __name(this, "FormData");
      }
      constructor(form) {
        if (form !== void 0) {
          throw webidl.errors.conversionFailed({
            prefix: "FormData constructor",
            argument: "Argument 1",
            types: ["undefined"]
          });
        }
        this[kState] = [];
      }
      append(name, value, filename = void 0) {
        webidl.brandCheck(this, _FormData);
        webidl.argumentLengthCheck(arguments, 2, { header: "FormData.append" });
        if (arguments.length === 3 && !isBlobLike(value)) {
          throw new TypeError(
            "Failed to execute 'append' on 'FormData': parameter 2 is not of type 'Blob'"
          );
        }
        name = webidl.converters.USVString(name);
        value = isBlobLike(value) ? webidl.converters.Blob(value, { strict: false }) : webidl.converters.USVString(value);
        filename = arguments.length === 3 ? webidl.converters.USVString(filename) : void 0;
        const entry = makeEntry(name, value, filename);
        this[kState].push(entry);
      }
      delete(name) {
        webidl.brandCheck(this, _FormData);
        webidl.argumentLengthCheck(arguments, 1, { header: "FormData.delete" });
        name = webidl.converters.USVString(name);
        this[kState] = this[kState].filter((entry) => entry.name !== name);
      }
      get(name) {
        webidl.brandCheck(this, _FormData);
        webidl.argumentLengthCheck(arguments, 1, { header: "FormData.get" });
        name = webidl.converters.USVString(name);
        const idx = this[kState].findIndex((entry) => entry.name === name);
        if (idx === -1) {
          return null;
        }
        return this[kState][idx].value;
      }
      getAll(name) {
        webidl.brandCheck(this, _FormData);
        webidl.argumentLengthCheck(arguments, 1, { header: "FormData.getAll" });
        name = webidl.converters.USVString(name);
        return this[kState].filter((entry) => entry.name === name).map((entry) => entry.value);
      }
      has(name) {
        webidl.brandCheck(this, _FormData);
        webidl.argumentLengthCheck(arguments, 1, { header: "FormData.has" });
        name = webidl.converters.USVString(name);
        return this[kState].findIndex((entry) => entry.name === name) !== -1;
      }
      set(name, value, filename = void 0) {
        webidl.brandCheck(this, _FormData);
        webidl.argumentLengthCheck(arguments, 2, { header: "FormData.set" });
        if (arguments.length === 3 && !isBlobLike(value)) {
          throw new TypeError(
            "Failed to execute 'set' on 'FormData': parameter 2 is not of type 'Blob'"
          );
        }
        name = webidl.converters.USVString(name);
        value = isBlobLike(value) ? webidl.converters.Blob(value, { strict: false }) : webidl.converters.USVString(value);
        filename = arguments.length === 3 ? toUSVString(filename) : void 0;
        const entry = makeEntry(name, value, filename);
        const idx = this[kState].findIndex((entry2) => entry2.name === name);
        if (idx !== -1) {
          this[kState] = [
            ...this[kState].slice(0, idx),
            entry,
            ...this[kState].slice(idx + 1).filter((entry2) => entry2.name !== name)
          ];
        } else {
          this[kState].push(entry);
        }
      }
      entries() {
        webidl.brandCheck(this, _FormData);
        return makeIterator(
          () => this[kState].map((pair) => [pair.name, pair.value]),
          "FormData",
          "key+value"
        );
      }
      keys() {
        webidl.brandCheck(this, _FormData);
        return makeIterator(
          () => this[kState].map((pair) => [pair.name, pair.value]),
          "FormData",
          "key"
        );
      }
      values() {
        webidl.brandCheck(this, _FormData);
        return makeIterator(
          () => this[kState].map((pair) => [pair.name, pair.value]),
          "FormData",
          "value"
        );
      }
      /**
       * @param {(value: string, key: string, self: FormData) => void} callbackFn
       * @param {unknown} thisArg
       */
      forEach(callbackFn, thisArg = globalThis) {
        webidl.brandCheck(this, _FormData);
        webidl.argumentLengthCheck(arguments, 1, { header: "FormData.forEach" });
        if (typeof callbackFn !== "function") {
          throw new TypeError(
            "Failed to execute 'forEach' on 'FormData': parameter 1 is not of type 'Function'."
          );
        }
        for (const [key, value] of this) {
          callbackFn.apply(thisArg, [value, key, this]);
        }
      }
    };
    FormData.prototype[Symbol.iterator] = FormData.prototype.entries;
    Object.defineProperties(FormData.prototype, {
      [Symbol.toStringTag]: {
        value: "FormData",
        configurable: true
      }
    });
    function makeEntry(name, value, filename) {
      name = Buffer.from(name).toString("utf8");
      if (typeof value === "string") {
        value = Buffer.from(value).toString("utf8");
      } else {
        if (!isFileLike(value)) {
          value = value instanceof Blob2 ? new File([value], "blob", { type: value.type }) : new FileLike(value, "blob", { type: value.type });
        }
        if (filename !== void 0) {
          const options = {
            type: value.type,
            lastModified: value.lastModified
          };
          value = NativeFile && value instanceof NativeFile || value instanceof UndiciFile ? new File([value], filename, options) : new FileLike(value, filename, options);
        }
      }
      return { name, value };
    }
    __name(makeEntry, "makeEntry");
    module.exports = { FormData };
  }
});

// node_modules/undici/lib/fetch/body.js
var require_body = __commonJS({
  "node_modules/undici/lib/fetch/body.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var Busboy = require_main();
    var util = require_util2();
    var {
      ReadableStreamFrom,
      isBlobLike,
      isReadableStreamLike,
      readableStreamClose,
      createDeferredPromise,
      fullyReadBody
    } = require_util3();
    var { FormData } = require_formdata();
    var { kState } = require_symbols2();
    var { webidl } = require_webidl();
    var { DOMException: DOMException2, structuredClone: structuredClone2 } = require_constants2();
    var { Blob: Blob2, File: NativeFile } = __require("buffer");
    var { kBodyUsed } = require_symbols();
    var assert = __require("assert");
    var { isErrored } = require_util2();
    var { isUint8Array, isArrayBuffer } = __require("util/types");
    var { File: UndiciFile } = require_file();
    var { parseMIMEType, serializeAMimeType } = require_dataURL();
    var ReadableStream2 = globalThis.ReadableStream;
    var File = NativeFile ?? UndiciFile;
    var textEncoder = new TextEncoder();
    var textDecoder = new TextDecoder();
    function extractBody(object, keepalive = false) {
      if (!ReadableStream2) {
        ReadableStream2 = __require("stream/web").ReadableStream;
      }
      let stream = null;
      if (object instanceof ReadableStream2) {
        stream = object;
      } else if (isBlobLike(object)) {
        stream = object.stream();
      } else {
        stream = new ReadableStream2({
          async pull(controller) {
            controller.enqueue(
              typeof source === "string" ? textEncoder.encode(source) : source
            );
            queueMicrotask(() => readableStreamClose(controller));
          },
          start() {
          },
          type: void 0
        });
      }
      assert(isReadableStreamLike(stream));
      let action = null;
      let source = null;
      let length = null;
      let type = null;
      if (typeof object === "string") {
        source = object;
        type = "text/plain;charset=UTF-8";
      } else if (object instanceof URLSearchParams) {
        source = object.toString();
        type = "application/x-www-form-urlencoded;charset=UTF-8";
      } else if (isArrayBuffer(object)) {
        source = new Uint8Array(object.slice());
      } else if (ArrayBuffer.isView(object)) {
        source = new Uint8Array(object.buffer.slice(object.byteOffset, object.byteOffset + object.byteLength));
      } else if (util.isFormDataLike(object)) {
        const boundary = `----formdata-undici-0${`${Math.floor(Math.random() * 1e11)}`.padStart(11, "0")}`;
        const prefix = `--${boundary}\r
Content-Disposition: form-data`;
        const escape = /* @__PURE__ */ __name((str) => str.replace(/\n/g, "%0A").replace(/\r/g, "%0D").replace(/"/g, "%22"), "escape");
        const normalizeLinefeeds = /* @__PURE__ */ __name((value) => value.replace(/\r?\n|\r/g, "\r\n"), "normalizeLinefeeds");
        const blobParts = [];
        const rn = new Uint8Array([13, 10]);
        length = 0;
        let hasUnknownSizeValue = false;
        for (const [name, value] of object) {
          if (typeof value === "string") {
            const chunk2 = textEncoder.encode(prefix + `; name="${escape(normalizeLinefeeds(name))}"\r
\r
${normalizeLinefeeds(value)}\r
`);
            blobParts.push(chunk2);
            length += chunk2.byteLength;
          } else {
            const chunk2 = textEncoder.encode(`${prefix}; name="${escape(normalizeLinefeeds(name))}"` + (value.name ? `; filename="${escape(value.name)}"` : "") + `\r
Content-Type: ${value.type || "application/octet-stream"}\r
\r
`);
            blobParts.push(chunk2, value, rn);
            if (typeof value.size === "number") {
              length += chunk2.byteLength + value.size + rn.byteLength;
            } else {
              hasUnknownSizeValue = true;
            }
          }
        }
        const chunk = textEncoder.encode(`--${boundary}--`);
        blobParts.push(chunk);
        length += chunk.byteLength;
        if (hasUnknownSizeValue) {
          length = null;
        }
        source = object;
        action = /* @__PURE__ */ __name(async function* () {
          for (const part of blobParts) {
            if (part.stream) {
              yield* part.stream();
            } else {
              yield part;
            }
          }
        }, "action");
        type = "multipart/form-data; boundary=" + boundary;
      } else if (isBlobLike(object)) {
        source = object;
        length = object.size;
        if (object.type) {
          type = object.type;
        }
      } else if (typeof object[Symbol.asyncIterator] === "function") {
        if (keepalive) {
          throw new TypeError("keepalive");
        }
        if (util.isDisturbed(object) || object.locked) {
          throw new TypeError(
            "Response body object should not be disturbed or locked"
          );
        }
        stream = object instanceof ReadableStream2 ? object : ReadableStreamFrom(object);
      }
      if (typeof source === "string" || util.isBuffer(source)) {
        length = Buffer.byteLength(source);
      }
      if (action != null) {
        let iterator;
        stream = new ReadableStream2({
          async start() {
            iterator = action(object)[Symbol.asyncIterator]();
          },
          async pull(controller) {
            const { value, done } = await iterator.next();
            if (done) {
              queueMicrotask(() => {
                controller.close();
              });
            } else {
              if (!isErrored(stream)) {
                controller.enqueue(new Uint8Array(value));
              }
            }
            return controller.desiredSize > 0;
          },
          async cancel(reason) {
            await iterator.return();
          },
          type: void 0
        });
      }
      const body = { stream, source, length };
      return [body, type];
    }
    __name(extractBody, "extractBody");
    function safelyExtractBody(object, keepalive = false) {
      if (!ReadableStream2) {
        ReadableStream2 = __require("stream/web").ReadableStream;
      }
      if (object instanceof ReadableStream2) {
        assert(!util.isDisturbed(object), "The body has already been consumed.");
        assert(!object.locked, "The stream is locked.");
      }
      return extractBody(object, keepalive);
    }
    __name(safelyExtractBody, "safelyExtractBody");
    function cloneBody(body) {
      const [out1, out2] = body.stream.tee();
      const out2Clone = structuredClone2(out2, { transfer: [out2] });
      const [, finalClone] = out2Clone.tee();
      body.stream = out1;
      return {
        stream: finalClone,
        length: body.length,
        source: body.source
      };
    }
    __name(cloneBody, "cloneBody");
    async function* consumeBody(body) {
      if (body) {
        if (isUint8Array(body)) {
          yield body;
        } else {
          const stream = body.stream;
          if (util.isDisturbed(stream)) {
            throw new TypeError("The body has already been consumed.");
          }
          if (stream.locked) {
            throw new TypeError("The stream is locked.");
          }
          stream[kBodyUsed] = true;
          yield* stream;
        }
      }
    }
    __name(consumeBody, "consumeBody");
    function throwIfAborted(state) {
      if (state.aborted) {
        throw new DOMException2("The operation was aborted.", "AbortError");
      }
    }
    __name(throwIfAborted, "throwIfAborted");
    function bodyMixinMethods(instance) {
      const methods = {
        blob() {
          return specConsumeBody(this, (bytes) => {
            let mimeType = bodyMimeType(this);
            if (mimeType === "failure") {
              mimeType = "";
            } else if (mimeType) {
              mimeType = serializeAMimeType(mimeType);
            }
            return new Blob2([bytes], { type: mimeType });
          }, instance);
        },
        arrayBuffer() {
          return specConsumeBody(this, (bytes) => {
            return new Uint8Array(bytes).buffer;
          }, instance);
        },
        text() {
          return specConsumeBody(this, utf8DecodeBytes, instance);
        },
        json() {
          return specConsumeBody(this, parseJSONFromBytes, instance);
        },
        async formData() {
          webidl.brandCheck(this, instance);
          throwIfAborted(this[kState]);
          const contentType = this.headers.get("Content-Type");
          if (/multipart\/form-data/.test(contentType)) {
            const headers = {};
            for (const [key, value] of this.headers) headers[key.toLowerCase()] = value;
            const responseFormData = new FormData();
            let busboy;
            try {
              busboy = new Busboy({
                headers,
                preservePath: true
              });
            } catch (err) {
              throw new DOMException2(`${err}`, "AbortError");
            }
            busboy.on("field", (name, value) => {
              responseFormData.append(name, value);
            });
            busboy.on("file", (name, value, filename, encoding, mimeType) => {
              const chunks = [];
              if (encoding === "base64" || encoding.toLowerCase() === "base64") {
                let base64chunk = "";
                value.on("data", (chunk) => {
                  base64chunk += chunk.toString().replace(/[\r\n]/gm, "");
                  const end = base64chunk.length - base64chunk.length % 4;
                  chunks.push(Buffer.from(base64chunk.slice(0, end), "base64"));
                  base64chunk = base64chunk.slice(end);
                });
                value.on("end", () => {
                  chunks.push(Buffer.from(base64chunk, "base64"));
                  responseFormData.append(name, new File(chunks, filename, { type: mimeType }));
                });
              } else {
                value.on("data", (chunk) => {
                  chunks.push(chunk);
                });
                value.on("end", () => {
                  responseFormData.append(name, new File(chunks, filename, { type: mimeType }));
                });
              }
            });
            const busboyResolve = new Promise((resolve, reject) => {
              busboy.on("finish", resolve);
              busboy.on("error", (err) => reject(new TypeError(err)));
            });
            if (this.body !== null) for await (const chunk of consumeBody(this[kState].body)) busboy.write(chunk);
            busboy.end();
            await busboyResolve;
            return responseFormData;
          } else if (/application\/x-www-form-urlencoded/.test(contentType)) {
            let entries;
            try {
              let text = "";
              const streamingDecoder = new TextDecoder("utf-8", { ignoreBOM: true });
              for await (const chunk of consumeBody(this[kState].body)) {
                if (!isUint8Array(chunk)) {
                  throw new TypeError("Expected Uint8Array chunk");
                }
                text += streamingDecoder.decode(chunk, { stream: true });
              }
              text += streamingDecoder.decode();
              entries = new URLSearchParams(text);
            } catch (err) {
              throw Object.assign(new TypeError(), { cause: err });
            }
            const formData = new FormData();
            for (const [name, value] of entries) {
              formData.append(name, value);
            }
            return formData;
          } else {
            await Promise.resolve();
            throwIfAborted(this[kState]);
            throw webidl.errors.exception({
              header: `${instance.name}.formData`,
              message: "Could not parse content as FormData."
            });
          }
        }
      };
      return methods;
    }
    __name(bodyMixinMethods, "bodyMixinMethods");
    function mixinBody(prototype) {
      Object.assign(prototype.prototype, bodyMixinMethods(prototype));
    }
    __name(mixinBody, "mixinBody");
    async function specConsumeBody(object, convertBytesToJSValue, instance) {
      webidl.brandCheck(object, instance);
      throwIfAborted(object[kState]);
      if (bodyUnusable(object[kState].body)) {
        throw new TypeError("Body is unusable");
      }
      const promise = createDeferredPromise();
      const errorSteps = /* @__PURE__ */ __name((error) => promise.reject(error), "errorSteps");
      const successSteps = /* @__PURE__ */ __name((data) => {
        try {
          promise.resolve(convertBytesToJSValue(data));
        } catch (e) {
          errorSteps(e);
        }
      }, "successSteps");
      if (object[kState].body == null) {
        successSteps(new Uint8Array());
        return promise.promise;
      }
      await fullyReadBody(object[kState].body, successSteps, errorSteps);
      return promise.promise;
    }
    __name(specConsumeBody, "specConsumeBody");
    function bodyUnusable(body) {
      return body != null && (body.stream.locked || util.isDisturbed(body.stream));
    }
    __name(bodyUnusable, "bodyUnusable");
    function utf8DecodeBytes(buffer) {
      if (buffer.length === 0) {
        return "";
      }
      if (buffer[0] === 239 && buffer[1] === 187 && buffer[2] === 191) {
        buffer = buffer.subarray(3);
      }
      const output = textDecoder.decode(buffer);
      return output;
    }
    __name(utf8DecodeBytes, "utf8DecodeBytes");
    function parseJSONFromBytes(bytes) {
      return JSON.parse(utf8DecodeBytes(bytes));
    }
    __name(parseJSONFromBytes, "parseJSONFromBytes");
    function bodyMimeType(object) {
      const { headersList } = object[kState];
      const contentType = headersList.get("content-type");
      if (contentType === null) {
        return "failure";
      }
      return parseMIMEType(contentType);
    }
    __name(bodyMimeType, "bodyMimeType");
    module.exports = {
      extractBody,
      safelyExtractBody,
      cloneBody,
      mixinBody
    };
  }
});

// node_modules/undici/lib/core/request.js
var require_request = __commonJS({
  "node_modules/undici/lib/core/request.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var {
      InvalidArgumentError,
      NotSupportedError
    } = require_errors();
    var assert = __require("assert");
    var { kHTTP2BuildRequest, kHTTP2CopyHeaders, kHTTP1BuildRequest } = require_symbols();
    var util = require_util2();
    var tokenRegExp = /^[\^_`a-zA-Z\-0-9!#$%&'*+.|~]+$/;
    var headerCharRegex = /[^\t\x20-\x7e\x80-\xff]/;
    var invalidPathRegex = /[^\u0021-\u00ff]/;
    var kHandler = Symbol("handler");
    var channels = {};
    var extractBody;
    try {
      const diagnosticsChannel = __require("diagnostics_channel");
      channels.create = diagnosticsChannel.channel("undici:request:create");
      channels.bodySent = diagnosticsChannel.channel("undici:request:bodySent");
      channels.headers = diagnosticsChannel.channel("undici:request:headers");
      channels.trailers = diagnosticsChannel.channel("undici:request:trailers");
      channels.error = diagnosticsChannel.channel("undici:request:error");
    } catch {
      channels.create = { hasSubscribers: false };
      channels.bodySent = { hasSubscribers: false };
      channels.headers = { hasSubscribers: false };
      channels.trailers = { hasSubscribers: false };
      channels.error = { hasSubscribers: false };
    }
    var Request = class _Request {
      static {
        __name(this, "Request");
      }
      constructor(origin, {
        path: path5,
        method,
        body,
        headers,
        query,
        idempotent,
        blocking,
        upgrade,
        headersTimeout,
        bodyTimeout,
        reset,
        throwOnError,
        expectContinue
      }, handler) {
        if (typeof path5 !== "string") {
          throw new InvalidArgumentError("path must be a string");
        } else if (path5[0] !== "/" && !(path5.startsWith("http://") || path5.startsWith("https://")) && method !== "CONNECT") {
          throw new InvalidArgumentError("path must be an absolute URL or start with a slash");
        } else if (invalidPathRegex.exec(path5) !== null) {
          throw new InvalidArgumentError("invalid request path");
        }
        if (typeof method !== "string") {
          throw new InvalidArgumentError("method must be a string");
        } else if (tokenRegExp.exec(method) === null) {
          throw new InvalidArgumentError("invalid request method");
        }
        if (upgrade && typeof upgrade !== "string") {
          throw new InvalidArgumentError("upgrade must be a string");
        }
        if (headersTimeout != null && (!Number.isFinite(headersTimeout) || headersTimeout < 0)) {
          throw new InvalidArgumentError("invalid headersTimeout");
        }
        if (bodyTimeout != null && (!Number.isFinite(bodyTimeout) || bodyTimeout < 0)) {
          throw new InvalidArgumentError("invalid bodyTimeout");
        }
        if (reset != null && typeof reset !== "boolean") {
          throw new InvalidArgumentError("invalid reset");
        }
        if (expectContinue != null && typeof expectContinue !== "boolean") {
          throw new InvalidArgumentError("invalid expectContinue");
        }
        this.headersTimeout = headersTimeout;
        this.bodyTimeout = bodyTimeout;
        this.throwOnError = throwOnError === true;
        this.method = method;
        this.abort = null;
        if (body == null) {
          this.body = null;
        } else if (util.isStream(body)) {
          this.body = body;
          const rState = this.body._readableState;
          if (!rState || !rState.autoDestroy) {
            this.endHandler = /* @__PURE__ */ __name(function autoDestroy() {
              util.destroy(this);
            }, "autoDestroy");
            this.body.on("end", this.endHandler);
          }
          this.errorHandler = (err) => {
            if (this.abort) {
              this.abort(err);
            } else {
              this.error = err;
            }
          };
          this.body.on("error", this.errorHandler);
        } else if (util.isBuffer(body)) {
          this.body = body.byteLength ? body : null;
        } else if (ArrayBuffer.isView(body)) {
          this.body = body.buffer.byteLength ? Buffer.from(body.buffer, body.byteOffset, body.byteLength) : null;
        } else if (body instanceof ArrayBuffer) {
          this.body = body.byteLength ? Buffer.from(body) : null;
        } else if (typeof body === "string") {
          this.body = body.length ? Buffer.from(body) : null;
        } else if (util.isFormDataLike(body) || util.isIterable(body) || util.isBlobLike(body)) {
          this.body = body;
        } else {
          throw new InvalidArgumentError("body must be a string, a Buffer, a Readable stream, an iterable, or an async iterable");
        }
        this.completed = false;
        this.aborted = false;
        this.upgrade = upgrade || null;
        this.path = query ? util.buildURL(path5, query) : path5;
        this.origin = origin;
        this.idempotent = idempotent == null ? method === "HEAD" || method === "GET" : idempotent;
        this.blocking = blocking == null ? false : blocking;
        this.reset = reset == null ? null : reset;
        this.host = null;
        this.contentLength = null;
        this.contentType = null;
        this.headers = "";
        this.expectContinue = expectContinue != null ? expectContinue : false;
        if (Array.isArray(headers)) {
          if (headers.length % 2 !== 0) {
            throw new InvalidArgumentError("headers array must be even");
          }
          for (let i = 0; i < headers.length; i += 2) {
            processHeader(this, headers[i], headers[i + 1]);
          }
        } else if (headers && typeof headers === "object") {
          const keys = Object.keys(headers);
          for (let i = 0; i < keys.length; i++) {
            const key = keys[i];
            processHeader(this, key, headers[key]);
          }
        } else if (headers != null) {
          throw new InvalidArgumentError("headers must be an object or an array");
        }
        if (util.isFormDataLike(this.body)) {
          if (util.nodeMajor < 16 || util.nodeMajor === 16 && util.nodeMinor < 8) {
            throw new InvalidArgumentError("Form-Data bodies are only supported in node v16.8 and newer.");
          }
          if (!extractBody) {
            extractBody = require_body().extractBody;
          }
          const [bodyStream, contentType] = extractBody(body);
          if (this.contentType == null) {
            this.contentType = contentType;
            this.headers += `content-type: ${contentType}\r
`;
          }
          this.body = bodyStream.stream;
          this.contentLength = bodyStream.length;
        } else if (util.isBlobLike(body) && this.contentType == null && body.type) {
          this.contentType = body.type;
          this.headers += `content-type: ${body.type}\r
`;
        }
        util.validateHandler(handler, method, upgrade);
        this.servername = util.getServerName(this.host);
        this[kHandler] = handler;
        if (channels.create.hasSubscribers) {
          channels.create.publish({ request: this });
        }
      }
      onBodySent(chunk) {
        if (this[kHandler].onBodySent) {
          try {
            return this[kHandler].onBodySent(chunk);
          } catch (err) {
            this.abort(err);
          }
        }
      }
      onRequestSent() {
        if (channels.bodySent.hasSubscribers) {
          channels.bodySent.publish({ request: this });
        }
        if (this[kHandler].onRequestSent) {
          try {
            return this[kHandler].onRequestSent();
          } catch (err) {
            this.abort(err);
          }
        }
      }
      onConnect(abort) {
        assert(!this.aborted);
        assert(!this.completed);
        if (this.error) {
          abort(this.error);
        } else {
          this.abort = abort;
          return this[kHandler].onConnect(abort);
        }
      }
      onHeaders(statusCode, headers, resume, statusText) {
        assert(!this.aborted);
        assert(!this.completed);
        if (channels.headers.hasSubscribers) {
          channels.headers.publish({ request: this, response: { statusCode, headers, statusText } });
        }
        try {
          return this[kHandler].onHeaders(statusCode, headers, resume, statusText);
        } catch (err) {
          this.abort(err);
        }
      }
      onData(chunk) {
        assert(!this.aborted);
        assert(!this.completed);
        try {
          return this[kHandler].onData(chunk);
        } catch (err) {
          this.abort(err);
          return false;
        }
      }
      onUpgrade(statusCode, headers, socket) {
        assert(!this.aborted);
        assert(!this.completed);
        return this[kHandler].onUpgrade(statusCode, headers, socket);
      }
      onComplete(trailers) {
        this.onFinally();
        assert(!this.aborted);
        this.completed = true;
        if (channels.trailers.hasSubscribers) {
          channels.trailers.publish({ request: this, trailers });
        }
        try {
          return this[kHandler].onComplete(trailers);
        } catch (err) {
          this.onError(err);
        }
      }
      onError(error) {
        this.onFinally();
        if (channels.error.hasSubscribers) {
          channels.error.publish({ request: this, error });
        }
        if (this.aborted) {
          return;
        }
        this.aborted = true;
        return this[kHandler].onError(error);
      }
      onFinally() {
        if (this.errorHandler) {
          this.body.off("error", this.errorHandler);
          this.errorHandler = null;
        }
        if (this.endHandler) {
          this.body.off("end", this.endHandler);
          this.endHandler = null;
        }
      }
      // TODO: adjust to support H2
      addHeader(key, value) {
        processHeader(this, key, value);
        return this;
      }
      static [kHTTP1BuildRequest](origin, opts, handler) {
        return new _Request(origin, opts, handler);
      }
      static [kHTTP2BuildRequest](origin, opts, handler) {
        const headers = opts.headers;
        opts = { ...opts, headers: null };
        const request = new _Request(origin, opts, handler);
        request.headers = {};
        if (Array.isArray(headers)) {
          if (headers.length % 2 !== 0) {
            throw new InvalidArgumentError("headers array must be even");
          }
          for (let i = 0; i < headers.length; i += 2) {
            processHeader(request, headers[i], headers[i + 1], true);
          }
        } else if (headers && typeof headers === "object") {
          const keys = Object.keys(headers);
          for (let i = 0; i < keys.length; i++) {
            const key = keys[i];
            processHeader(request, key, headers[key], true);
          }
        } else if (headers != null) {
          throw new InvalidArgumentError("headers must be an object or an array");
        }
        return request;
      }
      static [kHTTP2CopyHeaders](raw) {
        const rawHeaders = raw.split("\r\n");
        const headers = {};
        for (const header of rawHeaders) {
          const [key, value] = header.split(": ");
          if (value == null || value.length === 0) continue;
          if (headers[key]) headers[key] += `,${value}`;
          else headers[key] = value;
        }
        return headers;
      }
    };
    function processHeaderValue(key, val, skipAppend) {
      if (val && typeof val === "object") {
        throw new InvalidArgumentError(`invalid ${key} header`);
      }
      val = val != null ? `${val}` : "";
      if (headerCharRegex.exec(val) !== null) {
        throw new InvalidArgumentError(`invalid ${key} header`);
      }
      return skipAppend ? val : `${key}: ${val}\r
`;
    }
    __name(processHeaderValue, "processHeaderValue");
    function processHeader(request, key, val, skipAppend = false) {
      if (val && (typeof val === "object" && !Array.isArray(val))) {
        throw new InvalidArgumentError(`invalid ${key} header`);
      } else if (val === void 0) {
        return;
      }
      if (request.host === null && key.length === 4 && key.toLowerCase() === "host") {
        if (headerCharRegex.exec(val) !== null) {
          throw new InvalidArgumentError(`invalid ${key} header`);
        }
        request.host = val;
      } else if (request.contentLength === null && key.length === 14 && key.toLowerCase() === "content-length") {
        request.contentLength = parseInt(val, 10);
        if (!Number.isFinite(request.contentLength)) {
          throw new InvalidArgumentError("invalid content-length header");
        }
      } else if (request.contentType === null && key.length === 12 && key.toLowerCase() === "content-type") {
        request.contentType = val;
        if (skipAppend) request.headers[key] = processHeaderValue(key, val, skipAppend);
        else request.headers += processHeaderValue(key, val);
      } else if (key.length === 17 && key.toLowerCase() === "transfer-encoding") {
        throw new InvalidArgumentError("invalid transfer-encoding header");
      } else if (key.length === 10 && key.toLowerCase() === "connection") {
        const value = typeof val === "string" ? val.toLowerCase() : null;
        if (value !== "close" && value !== "keep-alive") {
          throw new InvalidArgumentError("invalid connection header");
        } else if (value === "close") {
          request.reset = true;
        }
      } else if (key.length === 10 && key.toLowerCase() === "keep-alive") {
        throw new InvalidArgumentError("invalid keep-alive header");
      } else if (key.length === 7 && key.toLowerCase() === "upgrade") {
        throw new InvalidArgumentError("invalid upgrade header");
      } else if (key.length === 6 && key.toLowerCase() === "expect") {
        throw new NotSupportedError("expect header not supported");
      } else if (tokenRegExp.exec(key) === null) {
        throw new InvalidArgumentError("invalid header key");
      } else {
        if (Array.isArray(val)) {
          for (let i = 0; i < val.length; i++) {
            if (skipAppend) {
              if (request.headers[key]) request.headers[key] += `,${processHeaderValue(key, val[i], skipAppend)}`;
              else request.headers[key] = processHeaderValue(key, val[i], skipAppend);
            } else {
              request.headers += processHeaderValue(key, val[i]);
            }
          }
        } else {
          if (skipAppend) request.headers[key] = processHeaderValue(key, val, skipAppend);
          else request.headers += processHeaderValue(key, val);
        }
      }
    }
    __name(processHeader, "processHeader");
    module.exports = Request;
  }
});

// node_modules/undici/lib/dispatcher.js
var require_dispatcher = __commonJS({
  "node_modules/undici/lib/dispatcher.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var EventEmitter = __require("events");
    var Dispatcher = class extends EventEmitter {
      static {
        __name(this, "Dispatcher");
      }
      dispatch() {
        throw new Error("not implemented");
      }
      close() {
        throw new Error("not implemented");
      }
      destroy() {
        throw new Error("not implemented");
      }
    };
    module.exports = Dispatcher;
  }
});

// node_modules/undici/lib/dispatcher-base.js
var require_dispatcher_base = __commonJS({
  "node_modules/undici/lib/dispatcher-base.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var Dispatcher = require_dispatcher();
    var {
      ClientDestroyedError,
      ClientClosedError,
      InvalidArgumentError
    } = require_errors();
    var { kDestroy, kClose, kDispatch, kInterceptors } = require_symbols();
    var kDestroyed = Symbol("destroyed");
    var kClosed = Symbol("closed");
    var kOnDestroyed = Symbol("onDestroyed");
    var kOnClosed = Symbol("onClosed");
    var kInterceptedDispatch = Symbol("Intercepted Dispatch");
    var DispatcherBase = class extends Dispatcher {
      static {
        __name(this, "DispatcherBase");
      }
      constructor() {
        super();
        this[kDestroyed] = false;
        this[kOnDestroyed] = null;
        this[kClosed] = false;
        this[kOnClosed] = [];
      }
      get destroyed() {
        return this[kDestroyed];
      }
      get closed() {
        return this[kClosed];
      }
      get interceptors() {
        return this[kInterceptors];
      }
      set interceptors(newInterceptors) {
        if (newInterceptors) {
          for (let i = newInterceptors.length - 1; i >= 0; i--) {
            const interceptor = this[kInterceptors][i];
            if (typeof interceptor !== "function") {
              throw new InvalidArgumentError("interceptor must be an function");
            }
          }
        }
        this[kInterceptors] = newInterceptors;
      }
      close(callback) {
        if (callback === void 0) {
          return new Promise((resolve, reject) => {
            this.close((err, data) => {
              return err ? reject(err) : resolve(data);
            });
          });
        }
        if (typeof callback !== "function") {
          throw new InvalidArgumentError("invalid callback");
        }
        if (this[kDestroyed]) {
          queueMicrotask(() => callback(new ClientDestroyedError(), null));
          return;
        }
        if (this[kClosed]) {
          if (this[kOnClosed]) {
            this[kOnClosed].push(callback);
          } else {
            queueMicrotask(() => callback(null, null));
          }
          return;
        }
        this[kClosed] = true;
        this[kOnClosed].push(callback);
        const onClosed = /* @__PURE__ */ __name(() => {
          const callbacks = this[kOnClosed];
          this[kOnClosed] = null;
          for (let i = 0; i < callbacks.length; i++) {
            callbacks[i](null, null);
          }
        }, "onClosed");
        this[kClose]().then(() => this.destroy()).then(() => {
          queueMicrotask(onClosed);
        });
      }
      destroy(err, callback) {
        if (typeof err === "function") {
          callback = err;
          err = null;
        }
        if (callback === void 0) {
          return new Promise((resolve, reject) => {
            this.destroy(err, (err2, data) => {
              return err2 ? (
                /* istanbul ignore next: should never error */
                reject(err2)
              ) : resolve(data);
            });
          });
        }
        if (typeof callback !== "function") {
          throw new InvalidArgumentError("invalid callback");
        }
        if (this[kDestroyed]) {
          if (this[kOnDestroyed]) {
            this[kOnDestroyed].push(callback);
          } else {
            queueMicrotask(() => callback(null, null));
          }
          return;
        }
        if (!err) {
          err = new ClientDestroyedError();
        }
        this[kDestroyed] = true;
        this[kOnDestroyed] = this[kOnDestroyed] || [];
        this[kOnDestroyed].push(callback);
        const onDestroyed = /* @__PURE__ */ __name(() => {
          const callbacks = this[kOnDestroyed];
          this[kOnDestroyed] = null;
          for (let i = 0; i < callbacks.length; i++) {
            callbacks[i](null, null);
          }
        }, "onDestroyed");
        this[kDestroy](err).then(() => {
          queueMicrotask(onDestroyed);
        });
      }
      [kInterceptedDispatch](opts, handler) {
        if (!this[kInterceptors] || this[kInterceptors].length === 0) {
          this[kInterceptedDispatch] = this[kDispatch];
          return this[kDispatch](opts, handler);
        }
        let dispatch = this[kDispatch].bind(this);
        for (let i = this[kInterceptors].length - 1; i >= 0; i--) {
          dispatch = this[kInterceptors][i](dispatch);
        }
        this[kInterceptedDispatch] = dispatch;
        return dispatch(opts, handler);
      }
      dispatch(opts, handler) {
        if (!handler || typeof handler !== "object") {
          throw new InvalidArgumentError("handler must be an object");
        }
        try {
          if (!opts || typeof opts !== "object") {
            throw new InvalidArgumentError("opts must be an object.");
          }
          if (this[kDestroyed] || this[kOnDestroyed]) {
            throw new ClientDestroyedError();
          }
          if (this[kClosed]) {
            throw new ClientClosedError();
          }
          return this[kInterceptedDispatch](opts, handler);
        } catch (err) {
          if (typeof handler.onError !== "function") {
            throw new InvalidArgumentError("invalid onError method");
          }
          handler.onError(err);
          return false;
        }
      }
    };
    module.exports = DispatcherBase;
  }
});

// node_modules/undici/lib/core/connect.js
var require_connect = __commonJS({
  "node_modules/undici/lib/core/connect.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var net = __require("net");
    var assert = __require("assert");
    var util = require_util2();
    var { InvalidArgumentError, ConnectTimeoutError } = require_errors();
    var tls;
    var SessionCache;
    if (global.FinalizationRegistry && !process.env.NODE_V8_COVERAGE) {
      SessionCache = class WeakSessionCache {
        static {
          __name(this, "WeakSessionCache");
        }
        constructor(maxCachedSessions) {
          this._maxCachedSessions = maxCachedSessions;
          this._sessionCache = /* @__PURE__ */ new Map();
          this._sessionRegistry = new global.FinalizationRegistry((key) => {
            if (this._sessionCache.size < this._maxCachedSessions) {
              return;
            }
            const ref = this._sessionCache.get(key);
            if (ref !== void 0 && ref.deref() === void 0) {
              this._sessionCache.delete(key);
            }
          });
        }
        get(sessionKey) {
          const ref = this._sessionCache.get(sessionKey);
          return ref ? ref.deref() : null;
        }
        set(sessionKey, session) {
          if (this._maxCachedSessions === 0) {
            return;
          }
          this._sessionCache.set(sessionKey, new WeakRef(session));
          this._sessionRegistry.register(session, sessionKey);
        }
      };
    } else {
      SessionCache = class SimpleSessionCache {
        static {
          __name(this, "SimpleSessionCache");
        }
        constructor(maxCachedSessions) {
          this._maxCachedSessions = maxCachedSessions;
          this._sessionCache = /* @__PURE__ */ new Map();
        }
        get(sessionKey) {
          return this._sessionCache.get(sessionKey);
        }
        set(sessionKey, session) {
          if (this._maxCachedSessions === 0) {
            return;
          }
          if (this._sessionCache.size >= this._maxCachedSessions) {
            const { value: oldestKey } = this._sessionCache.keys().next();
            this._sessionCache.delete(oldestKey);
          }
          this._sessionCache.set(sessionKey, session);
        }
      };
    }
    function buildConnector({ allowH2, maxCachedSessions, socketPath, timeout, ...opts }) {
      if (maxCachedSessions != null && (!Number.isInteger(maxCachedSessions) || maxCachedSessions < 0)) {
        throw new InvalidArgumentError("maxCachedSessions must be a positive integer or zero");
      }
      const options = { path: socketPath, ...opts };
      const sessionCache = new SessionCache(maxCachedSessions == null ? 100 : maxCachedSessions);
      timeout = timeout == null ? 1e4 : timeout;
      allowH2 = allowH2 != null ? allowH2 : false;
      return /* @__PURE__ */ __name(function connect({ hostname, host, protocol, port, servername, localAddress, httpSocket }, callback) {
        let socket;
        if (protocol === "https:") {
          if (!tls) {
            tls = __require("tls");
          }
          servername = servername || options.servername || util.getServerName(host) || null;
          const sessionKey = servername || hostname;
          const session = sessionCache.get(sessionKey) || null;
          assert(sessionKey);
          socket = tls.connect({
            highWaterMark: 16384,
            // TLS in node can't have bigger HWM anyway...
            ...options,
            servername,
            session,
            localAddress,
            // TODO(HTTP/2): Add support for h2c
            ALPNProtocols: allowH2 ? ["http/1.1", "h2"] : ["http/1.1"],
            socket: httpSocket,
            // upgrade socket connection
            port: port || 443,
            host: hostname
          });
          socket.on("session", function(session2) {
            sessionCache.set(sessionKey, session2);
          });
        } else {
          assert(!httpSocket, "httpSocket can only be sent on TLS update");
          socket = net.connect({
            highWaterMark: 64 * 1024,
            // Same as nodejs fs streams.
            ...options,
            localAddress,
            port: port || 80,
            host: hostname
          });
        }
        if (options.keepAlive == null || options.keepAlive) {
          const keepAliveInitialDelay = options.keepAliveInitialDelay === void 0 ? 6e4 : options.keepAliveInitialDelay;
          socket.setKeepAlive(true, keepAliveInitialDelay);
        }
        const cancelTimeout = setupTimeout(() => onConnectTimeout(socket), timeout);
        socket.setNoDelay(true).once(protocol === "https:" ? "secureConnect" : "connect", function() {
          cancelTimeout();
          if (callback) {
            const cb = callback;
            callback = null;
            cb(null, this);
          }
        }).on("error", function(err) {
          cancelTimeout();
          if (callback) {
            const cb = callback;
            callback = null;
            cb(err);
          }
        });
        return socket;
      }, "connect");
    }
    __name(buildConnector, "buildConnector");
    function setupTimeout(onConnectTimeout2, timeout) {
      if (!timeout) {
        return () => {
        };
      }
      let s1 = null;
      let s2 = null;
      const timeoutId = setTimeout(() => {
        s1 = setImmediate(() => {
          if (process.platform === "win32") {
            s2 = setImmediate(() => onConnectTimeout2());
          } else {
            onConnectTimeout2();
          }
        });
      }, timeout);
      return () => {
        clearTimeout(timeoutId);
        clearImmediate(s1);
        clearImmediate(s2);
      };
    }
    __name(setupTimeout, "setupTimeout");
    function onConnectTimeout(socket) {
      util.destroy(socket, new ConnectTimeoutError());
    }
    __name(onConnectTimeout, "onConnectTimeout");
    module.exports = buildConnector;
  }
});

// node_modules/undici/lib/llhttp/utils.js
var require_utils2 = __commonJS({
  "node_modules/undici/lib/llhttp/utils.js"(exports) {
    "use strict";
    init_cjs_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.enumToMap = void 0;
    function enumToMap(obj) {
      const res = {};
      Object.keys(obj).forEach((key) => {
        const value = obj[key];
        if (typeof value === "number") {
          res[key] = value;
        }
      });
      return res;
    }
    __name(enumToMap, "enumToMap");
    exports.enumToMap = enumToMap;
  }
});

// node_modules/undici/lib/llhttp/constants.js
var require_constants3 = __commonJS({
  "node_modules/undici/lib/llhttp/constants.js"(exports) {
    "use strict";
    init_cjs_shim();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SPECIAL_HEADERS = exports.HEADER_STATE = exports.MINOR = exports.MAJOR = exports.CONNECTION_TOKEN_CHARS = exports.HEADER_CHARS = exports.TOKEN = exports.STRICT_TOKEN = exports.HEX = exports.URL_CHAR = exports.STRICT_URL_CHAR = exports.USERINFO_CHARS = exports.MARK = exports.ALPHANUM = exports.NUM = exports.HEX_MAP = exports.NUM_MAP = exports.ALPHA = exports.FINISH = exports.H_METHOD_MAP = exports.METHOD_MAP = exports.METHODS_RTSP = exports.METHODS_ICE = exports.METHODS_HTTP = exports.METHODS = exports.LENIENT_FLAGS = exports.FLAGS = exports.TYPE = exports.ERROR = void 0;
    var utils_1 = require_utils2();
    var ERROR;
    (function(ERROR2) {
      ERROR2[ERROR2["OK"] = 0] = "OK";
      ERROR2[ERROR2["INTERNAL"] = 1] = "INTERNAL";
      ERROR2[ERROR2["STRICT"] = 2] = "STRICT";
      ERROR2[ERROR2["LF_EXPECTED"] = 3] = "LF_EXPECTED";
      ERROR2[ERROR2["UNEXPECTED_CONTENT_LENGTH"] = 4] = "UNEXPECTED_CONTENT_LENGTH";
      ERROR2[ERROR2["CLOSED_CONNECTION"] = 5] = "CLOSED_CONNECTION";
      ERROR2[ERROR2["INVALID_METHOD"] = 6] = "INVALID_METHOD";
      ERROR2[ERROR2["INVALID_URL"] = 7] = "INVALID_URL";
      ERROR2[ERROR2["INVALID_CONSTANT"] = 8] = "INVALID_CONSTANT";
      ERROR2[ERROR2["INVALID_VERSION"] = 9] = "INVALID_VERSION";
      ERROR2[ERROR2["INVALID_HEADER_TOKEN"] = 10] = "INVALID_HEADER_TOKEN";
      ERROR2[ERROR2["INVALID_CONTENT_LENGTH"] = 11] = "INVALID_CONTENT_LENGTH";
      ERROR2[ERROR2["INVALID_CHUNK_SIZE"] = 12] = "INVALID_CHUNK_SIZE";
      ERROR2[ERROR2["INVALID_STATUS"] = 13] = "INVALID_STATUS";
      ERROR2[ERROR2["INVALID_EOF_STATE"] = 14] = "INVALID_EOF_STATE";
      ERROR2[ERROR2["INVALID_TRANSFER_ENCODING"] = 15] = "INVALID_TRANSFER_ENCODING";
      ERROR2[ERROR2["CB_MESSAGE_BEGIN"] = 16] = "CB_MESSAGE_BEGIN";
      ERROR2[ERROR2["CB_HEADERS_COMPLETE"] = 17] = "CB_HEADERS_COMPLETE";
      ERROR2[ERROR2["CB_MESSAGE_COMPLETE"] = 18] = "CB_MESSAGE_COMPLETE";
      ERROR2[ERROR2["CB_CHUNK_HEADER"] = 19] = "CB_CHUNK_HEADER";
      ERROR2[ERROR2["CB_CHUNK_COMPLETE"] = 20] = "CB_CHUNK_COMPLETE";
      ERROR2[ERROR2["PAUSED"] = 21] = "PAUSED";
      ERROR2[ERROR2["PAUSED_UPGRADE"] = 22] = "PAUSED_UPGRADE";
      ERROR2[ERROR2["PAUSED_H2_UPGRADE"] = 23] = "PAUSED_H2_UPGRADE";
      ERROR2[ERROR2["USER"] = 24] = "USER";
    })(ERROR = exports.ERROR || (exports.ERROR = {}));
    var TYPE;
    (function(TYPE2) {
      TYPE2[TYPE2["BOTH"] = 0] = "BOTH";
      TYPE2[TYPE2["REQUEST"] = 1] = "REQUEST";
      TYPE2[TYPE2["RESPONSE"] = 2] = "RESPONSE";
    })(TYPE = exports.TYPE || (exports.TYPE = {}));
    var FLAGS;
    (function(FLAGS2) {
      FLAGS2[FLAGS2["CONNECTION_KEEP_ALIVE"] = 1] = "CONNECTION_KEEP_ALIVE";
      FLAGS2[FLAGS2["CONNECTION_CLOSE"] = 2] = "CONNECTION_CLOSE";
      FLAGS2[FLAGS2["CONNECTION_UPGRADE"] = 4] = "CONNECTION_UPGRADE";
      FLAGS2[FLAGS2["CHUNKED"] = 8] = "CHUNKED";
      FLAGS2[FLAGS2["UPGRADE"] = 16] = "UPGRADE";
      FLAGS2[FLAGS2["CONTENT_LENGTH"] = 32] = "CONTENT_LENGTH";
      FLAGS2[FLAGS2["SKIPBODY"] = 64] = "SKIPBODY";
      FLAGS2[FLAGS2["TRAILING"] = 128] = "TRAILING";
      FLAGS2[FLAGS2["TRANSFER_ENCODING"] = 512] = "TRANSFER_ENCODING";
    })(FLAGS = exports.FLAGS || (exports.FLAGS = {}));
    var LENIENT_FLAGS;
    (function(LENIENT_FLAGS2) {
      LENIENT_FLAGS2[LENIENT_FLAGS2["HEADERS"] = 1] = "HEADERS";
      LENIENT_FLAGS2[LENIENT_FLAGS2["CHUNKED_LENGTH"] = 2] = "CHUNKED_LENGTH";
      LENIENT_FLAGS2[LENIENT_FLAGS2["KEEP_ALIVE"] = 4] = "KEEP_ALIVE";
    })(LENIENT_FLAGS = exports.LENIENT_FLAGS || (exports.LENIENT_FLAGS = {}));
    var METHODS;
    (function(METHODS2) {
      METHODS2[METHODS2["DELETE"] = 0] = "DELETE";
      METHODS2[METHODS2["GET"] = 1] = "GET";
      METHODS2[METHODS2["HEAD"] = 2] = "HEAD";
      METHODS2[METHODS2["POST"] = 3] = "POST";
      METHODS2[METHODS2["PUT"] = 4] = "PUT";
      METHODS2[METHODS2["CONNECT"] = 5] = "CONNECT";
      METHODS2[METHODS2["OPTIONS"] = 6] = "OPTIONS";
      METHODS2[METHODS2["TRACE"] = 7] = "TRACE";
      METHODS2[METHODS2["COPY"] = 8] = "COPY";
      METHODS2[METHODS2["LOCK"] = 9] = "LOCK";
      METHODS2[METHODS2["MKCOL"] = 10] = "MKCOL";
      METHODS2[METHODS2["MOVE"] = 11] = "MOVE";
      METHODS2[METHODS2["PROPFIND"] = 12] = "PROPFIND";
      METHODS2[METHODS2["PROPPATCH"] = 13] = "PROPPATCH";
      METHODS2[METHODS2["SEARCH"] = 14] = "SEARCH";
      METHODS2[METHODS2["UNLOCK"] = 15] = "UNLOCK";
      METHODS2[METHODS2["BIND"] = 16] = "BIND";
      METHODS2[METHODS2["REBIND"] = 17] = "REBIND";
      METHODS2[METHODS2["UNBIND"] = 18] = "UNBIND";
      METHODS2[METHODS2["ACL"] = 19] = "ACL";
      METHODS2[METHODS2["REPORT"] = 20] = "REPORT";
      METHODS2[METHODS2["MKACTIVITY"] = 21] = "MKACTIVITY";
      METHODS2[METHODS2["CHECKOUT"] = 22] = "CHECKOUT";
      METHODS2[METHODS2["MERGE"] = 23] = "MERGE";
      METHODS2[METHODS2["M-SEARCH"] = 24] = "M-SEARCH";
      METHODS2[METHODS2["NOTIFY"] = 25] = "NOTIFY";
      METHODS2[METHODS2["SUBSCRIBE"] = 26] = "SUBSCRIBE";
      METHODS2[METHODS2["UNSUBSCRIBE"] = 27] = "UNSUBSCRIBE";
      METHODS2[METHODS2["PATCH"] = 28] = "PATCH";
      METHODS2[METHODS2["PURGE"] = 29] = "PURGE";
      METHODS2[METHODS2["MKCALENDAR"] = 30] = "MKCALENDAR";
      METHODS2[METHODS2["LINK"] = 31] = "LINK";
      METHODS2[METHODS2["UNLINK"] = 32] = "UNLINK";
      METHODS2[METHODS2["SOURCE"] = 33] = "SOURCE";
      METHODS2[METHODS2["PRI"] = 34] = "PRI";
      METHODS2[METHODS2["DESCRIBE"] = 35] = "DESCRIBE";
      METHODS2[METHODS2["ANNOUNCE"] = 36] = "ANNOUNCE";
      METHODS2[METHODS2["SETUP"] = 37] = "SETUP";
      METHODS2[METHODS2["PLAY"] = 38] = "PLAY";
      METHODS2[METHODS2["PAUSE"] = 39] = "PAUSE";
      METHODS2[METHODS2["TEARDOWN"] = 40] = "TEARDOWN";
      METHODS2[METHODS2["GET_PARAMETER"] = 41] = "GET_PARAMETER";
      METHODS2[METHODS2["SET_PARAMETER"] = 42] = "SET_PARAMETER";
      METHODS2[METHODS2["REDIRECT"] = 43] = "REDIRECT";
      METHODS2[METHODS2["RECORD"] = 44] = "RECORD";
      METHODS2[METHODS2["FLUSH"] = 45] = "FLUSH";
    })(METHODS = exports.METHODS || (exports.METHODS = {}));
    exports.METHODS_HTTP = [
      METHODS.DELETE,
      METHODS.GET,
      METHODS.HEAD,
      METHODS.POST,
      METHODS.PUT,
      METHODS.CONNECT,
      METHODS.OPTIONS,
      METHODS.TRACE,
      METHODS.COPY,
      METHODS.LOCK,
      METHODS.MKCOL,
      METHODS.MOVE,
      METHODS.PROPFIND,
      METHODS.PROPPATCH,
      METHODS.SEARCH,
      METHODS.UNLOCK,
      METHODS.BIND,
      METHODS.REBIND,
      METHODS.UNBIND,
      METHODS.ACL,
      METHODS.REPORT,
      METHODS.MKACTIVITY,
      METHODS.CHECKOUT,
      METHODS.MERGE,
      METHODS["M-SEARCH"],
      METHODS.NOTIFY,
      METHODS.SUBSCRIBE,
      METHODS.UNSUBSCRIBE,
      METHODS.PATCH,
      METHODS.PURGE,
      METHODS.MKCALENDAR,
      METHODS.LINK,
      METHODS.UNLINK,
      METHODS.PRI,
      // TODO(indutny): should we allow it with HTTP?
      METHODS.SOURCE
    ];
    exports.METHODS_ICE = [
      METHODS.SOURCE
    ];
    exports.METHODS_RTSP = [
      METHODS.OPTIONS,
      METHODS.DESCRIBE,
      METHODS.ANNOUNCE,
      METHODS.SETUP,
      METHODS.PLAY,
      METHODS.PAUSE,
      METHODS.TEARDOWN,
      METHODS.GET_PARAMETER,
      METHODS.SET_PARAMETER,
      METHODS.REDIRECT,
      METHODS.RECORD,
      METHODS.FLUSH,
      // For AirPlay
      METHODS.GET,
      METHODS.POST
    ];
    exports.METHOD_MAP = utils_1.enumToMap(METHODS);
    exports.H_METHOD_MAP = {};
    Object.keys(exports.METHOD_MAP).forEach((key) => {
      if (/^H/.test(key)) {
        exports.H_METHOD_MAP[key] = exports.METHOD_MAP[key];
      }
    });
    var FINISH;
    (function(FINISH2) {
      FINISH2[FINISH2["SAFE"] = 0] = "SAFE";
      FINISH2[FINISH2["SAFE_WITH_CB"] = 1] = "SAFE_WITH_CB";
      FINISH2[FINISH2["UNSAFE"] = 2] = "UNSAFE";
    })(FINISH = exports.FINISH || (exports.FINISH = {}));
    exports.ALPHA = [];
    for (let i = "A".charCodeAt(0); i <= "Z".charCodeAt(0); i++) {
      exports.ALPHA.push(String.fromCharCode(i));
      exports.ALPHA.push(String.fromCharCode(i + 32));
    }
    exports.NUM_MAP = {
      0: 0,
      1: 1,
      2: 2,
      3: 3,
      4: 4,
      5: 5,
      6: 6,
      7: 7,
      8: 8,
      9: 9
    };
    exports.HEX_MAP = {
      0: 0,
      1: 1,
      2: 2,
      3: 3,
      4: 4,
      5: 5,
      6: 6,
      7: 7,
      8: 8,
      9: 9,
      A: 10,
      B: 11,
      C: 12,
      D: 13,
      E: 14,
      F: 15,
      a: 10,
      b: 11,
      c: 12,
      d: 13,
      e: 14,
      f: 15
    };
    exports.NUM = [
      "0",
      "1",
      "2",
      "3",
      "4",
      "5",
      "6",
      "7",
      "8",
      "9"
    ];
    exports.ALPHANUM = exports.ALPHA.concat(exports.NUM);
    exports.MARK = ["-", "_", ".", "!", "~", "*", "'", "(", ")"];
    exports.USERINFO_CHARS = exports.ALPHANUM.concat(exports.MARK).concat(["%", ";", ":", "&", "=", "+", "$", ","]);
    exports.STRICT_URL_CHAR = [
      "!",
      '"',
      "$",
      "%",
      "&",
      "'",
      "(",
      ")",
      "*",
      "+",
      ",",
      "-",
      ".",
      "/",
      ":",
      ";",
      "<",
      "=",
      ">",
      "@",
      "[",
      "\\",
      "]",
      "^",
      "_",
      "`",
      "{",
      "|",
      "}",
      "~"
    ].concat(exports.ALPHANUM);
    exports.URL_CHAR = exports.STRICT_URL_CHAR.concat(["	", "\f"]);
    for (let i = 128; i <= 255; i++) {
      exports.URL_CHAR.push(i);
    }
    exports.HEX = exports.NUM.concat(["a", "b", "c", "d", "e", "f", "A", "B", "C", "D", "E", "F"]);
    exports.STRICT_TOKEN = [
      "!",
      "#",
      "$",
      "%",
      "&",
      "'",
      "*",
      "+",
      "-",
      ".",
      "^",
      "_",
      "`",
      "|",
      "~"
    ].concat(exports.ALPHANUM);
    exports.TOKEN = exports.STRICT_TOKEN.concat([" "]);
    exports.HEADER_CHARS = ["	"];
    for (let i = 32; i <= 255; i++) {
      if (i !== 127) {
        exports.HEADER_CHARS.push(i);
      }
    }
    exports.CONNECTION_TOKEN_CHARS = exports.HEADER_CHARS.filter((c) => c !== 44);
    exports.MAJOR = exports.NUM_MAP;
    exports.MINOR = exports.MAJOR;
    var HEADER_STATE;
    (function(HEADER_STATE2) {
      HEADER_STATE2[HEADER_STATE2["GENERAL"] = 0] = "GENERAL";
      HEADER_STATE2[HEADER_STATE2["CONNECTION"] = 1] = "CONNECTION";
      HEADER_STATE2[HEADER_STATE2["CONTENT_LENGTH"] = 2] = "CONTENT_LENGTH";
      HEADER_STATE2[HEADER_STATE2["TRANSFER_ENCODING"] = 3] = "TRANSFER_ENCODING";
      HEADER_STATE2[HEADER_STATE2["UPGRADE"] = 4] = "UPGRADE";
      HEADER_STATE2[HEADER_STATE2["CONNECTION_KEEP_ALIVE"] = 5] = "CONNECTION_KEEP_ALIVE";
      HEADER_STATE2[HEADER_STATE2["CONNECTION_CLOSE"] = 6] = "CONNECTION_CLOSE";
      HEADER_STATE2[HEADER_STATE2["CONNECTION_UPGRADE"] = 7] = "CONNECTION_UPGRADE";
      HEADER_STATE2[HEADER_STATE2["TRANSFER_ENCODING_CHUNKED"] = 8] = "TRANSFER_ENCODING_CHUNKED";
    })(HEADER_STATE = exports.HEADER_STATE || (exports.HEADER_STATE = {}));
    exports.SPECIAL_HEADERS = {
      "connection": HEADER_STATE.CONNECTION,
      "content-length": HEADER_STATE.CONTENT_LENGTH,
      "proxy-connection": HEADER_STATE.CONNECTION,
      "transfer-encoding": HEADER_STATE.TRANSFER_ENCODING,
      "upgrade": HEADER_STATE.UPGRADE
    };
  }
});

// node_modules/undici/lib/handler/RedirectHandler.js
var require_RedirectHandler = __commonJS({
  "node_modules/undici/lib/handler/RedirectHandler.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var util = require_util2();
    var { kBodyUsed } = require_symbols();
    var assert = __require("assert");
    var { InvalidArgumentError } = require_errors();
    var EE = __require("events");
    var redirectableStatusCodes = [300, 301, 302, 303, 307, 308];
    var kBody = Symbol("body");
    var BodyAsyncIterable = class {
      static {
        __name(this, "BodyAsyncIterable");
      }
      constructor(body) {
        this[kBody] = body;
        this[kBodyUsed] = false;
      }
      async *[Symbol.asyncIterator]() {
        assert(!this[kBodyUsed], "disturbed");
        this[kBodyUsed] = true;
        yield* this[kBody];
      }
    };
    var RedirectHandler = class {
      static {
        __name(this, "RedirectHandler");
      }
      constructor(dispatch, maxRedirections, opts, handler) {
        if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {
          throw new InvalidArgumentError("maxRedirections must be a positive number");
        }
        util.validateHandler(handler, opts.method, opts.upgrade);
        this.dispatch = dispatch;
        this.location = null;
        this.abort = null;
        this.opts = { ...opts, maxRedirections: 0 };
        this.maxRedirections = maxRedirections;
        this.handler = handler;
        this.history = [];
        if (util.isStream(this.opts.body)) {
          if (util.bodyLength(this.opts.body) === 0) {
            this.opts.body.on("data", function() {
              assert(false);
            });
          }
          if (typeof this.opts.body.readableDidRead !== "boolean") {
            this.opts.body[kBodyUsed] = false;
            EE.prototype.on.call(this.opts.body, "data", function() {
              this[kBodyUsed] = true;
            });
          }
        } else if (this.opts.body && typeof this.opts.body.pipeTo === "function") {
          this.opts.body = new BodyAsyncIterable(this.opts.body);
        } else if (this.opts.body && typeof this.opts.body !== "string" && !ArrayBuffer.isView(this.opts.body) && util.isIterable(this.opts.body)) {
          this.opts.body = new BodyAsyncIterable(this.opts.body);
        }
      }
      onConnect(abort) {
        this.abort = abort;
        this.handler.onConnect(abort, { history: this.history });
      }
      onUpgrade(statusCode, headers, socket) {
        this.handler.onUpgrade(statusCode, headers, socket);
      }
      onError(error) {
        this.handler.onError(error);
      }
      onHeaders(statusCode, headers, resume, statusText) {
        this.location = this.history.length >= this.maxRedirections || util.isDisturbed(this.opts.body) ? null : parseLocation(statusCode, headers);
        if (this.opts.origin) {
          this.history.push(new URL(this.opts.path, this.opts.origin));
        }
        if (!this.location) {
          return this.handler.onHeaders(statusCode, headers, resume, statusText);
        }
        const { origin, pathname, search } = util.parseURL(new URL(this.location, this.opts.origin && new URL(this.opts.path, this.opts.origin)));
        const path5 = search ? `${pathname}${search}` : pathname;
        this.opts.headers = cleanRequestHeaders(this.opts.headers, statusCode === 303, this.opts.origin !== origin);
        this.opts.path = path5;
        this.opts.origin = origin;
        this.opts.maxRedirections = 0;
        this.opts.query = null;
        if (statusCode === 303 && this.opts.method !== "HEAD") {
          this.opts.method = "GET";
          this.opts.body = null;
        }
      }
      onData(chunk) {
        if (this.location) {
        } else {
          return this.handler.onData(chunk);
        }
      }
      onComplete(trailers) {
        if (this.location) {
          this.location = null;
          this.abort = null;
          this.dispatch(this.opts, this);
        } else {
          this.handler.onComplete(trailers);
        }
      }
      onBodySent(chunk) {
        if (this.handler.onBodySent) {
          this.handler.onBodySent(chunk);
        }
      }
    };
    function parseLocation(statusCode, headers) {
      if (redirectableStatusCodes.indexOf(statusCode) === -1) {
        return null;
      }
      for (let i = 0; i < headers.length; i += 2) {
        if (headers[i].toString().toLowerCase() === "location") {
          return headers[i + 1];
        }
      }
    }
    __name(parseLocation, "parseLocation");
    function shouldRemoveHeader(header, removeContent, unknownOrigin) {
      if (header.length === 4) {
        return util.headerNameToString(header) === "host";
      }
      if (removeContent && util.headerNameToString(header).startsWith("content-")) {
        return true;
      }
      if (unknownOrigin && (header.length === 13 || header.length === 6 || header.length === 19)) {
        const name = util.headerNameToString(header);
        return name === "authorization" || name === "cookie" || name === "proxy-authorization";
      }
      return false;
    }
    __name(shouldRemoveHeader, "shouldRemoveHeader");
    function cleanRequestHeaders(headers, removeContent, unknownOrigin) {
      const ret = [];
      if (Array.isArray(headers)) {
        for (let i = 0; i < headers.length; i += 2) {
          if (!shouldRemoveHeader(headers[i], removeContent, unknownOrigin)) {
            ret.push(headers[i], headers[i + 1]);
          }
        }
      } else if (headers && typeof headers === "object") {
        for (const key of Object.keys(headers)) {
          if (!shouldRemoveHeader(key, removeContent, unknownOrigin)) {
            ret.push(key, headers[key]);
          }
        }
      } else {
        assert(headers == null, "headers must be an object or an array");
      }
      return ret;
    }
    __name(cleanRequestHeaders, "cleanRequestHeaders");
    module.exports = RedirectHandler;
  }
});

// node_modules/undici/lib/interceptor/redirectInterceptor.js
var require_redirectInterceptor = __commonJS({
  "node_modules/undici/lib/interceptor/redirectInterceptor.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var RedirectHandler = require_RedirectHandler();
    function createRedirectInterceptor({ maxRedirections: defaultMaxRedirections }) {
      return (dispatch) => {
        return /* @__PURE__ */ __name(function Intercept(opts, handler) {
          const { maxRedirections = defaultMaxRedirections } = opts;
          if (!maxRedirections) {
            return dispatch(opts, handler);
          }
          const redirectHandler = new RedirectHandler(dispatch, maxRedirections, opts, handler);
          opts = { ...opts, maxRedirections: 0 };
          return dispatch(opts, redirectHandler);
        }, "Intercept");
      };
    }
    __name(createRedirectInterceptor, "createRedirectInterceptor");
    module.exports = createRedirectInterceptor;
  }
});

// node_modules/undici/lib/llhttp/llhttp-wasm.js
var require_llhttp_wasm = __commonJS({
  "node_modules/undici/lib/llhttp/llhttp-wasm.js"(exports, module) {
    init_cjs_shim();
    module.exports = "";
  }
});

// node_modules/undici/lib/llhttp/llhttp_simd-wasm.js
var require_llhttp_simd_wasm = __commonJS({
  "node_modules/undici/lib/llhttp/llhttp_simd-wasm.js"(exports, module) {
    init_cjs_shim();
    module.exports = "";
  }
});

// node_modules/undici/lib/client.js
var require_client = __commonJS({
  "node_modules/undici/lib/client.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var assert = __require("assert");
    var net = __require("net");
    var http = __require("http");
    var { pipeline } = __require("stream");
    var util = require_util2();
    var timers = require_timers();
    var Request = require_request();
    var DispatcherBase = require_dispatcher_base();
    var {
      RequestContentLengthMismatchError,
      ResponseContentLengthMismatchError,
      InvalidArgumentError,
      RequestAbortedError,
      HeadersTimeoutError,
      HeadersOverflowError,
      SocketError,
      InformationalError,
      BodyTimeoutError,
      HTTPParserError,
      ResponseExceededMaxSizeError,
      ClientDestroyedError
    } = require_errors();
    var buildConnector = require_connect();
    var {
      kUrl,
      kReset,
      kServerName,
      kClient,
      kBusy,
      kParser,
      kConnect,
      kBlocking,
      kResuming,
      kRunning,
      kPending,
      kSize,
      kWriting,
      kQueue,
      kConnected,
      kConnecting,
      kNeedDrain,
      kNoRef,
      kKeepAliveDefaultTimeout,
      kHostHeader,
      kPendingIdx,
      kRunningIdx,
      kError,
      kPipelining,
      kSocket,
      kKeepAliveTimeoutValue,
      kMaxHeadersSize,
      kKeepAliveMaxTimeout,
      kKeepAliveTimeoutThreshold,
      kHeadersTimeout,
      kBodyTimeout,
      kStrictContentLength,
      kConnector,
      kMaxRedirections,
      kMaxRequests,
      kCounter,
      kClose,
      kDestroy,
      kDispatch,
      kInterceptors,
      kLocalAddress,
      kMaxResponseSize,
      kHTTPConnVersion,
      // HTTP2
      kHost,
      kHTTP2Session,
      kHTTP2SessionState,
      kHTTP2BuildRequest,
      kHTTP2CopyHeaders,
      kHTTP1BuildRequest
    } = require_symbols();
    var http2;
    try {
      http2 = __require("http2");
    } catch {
      http2 = { constants: {} };
    }
    var {
      constants: {
        HTTP2_HEADER_AUTHORITY,
        HTTP2_HEADER_METHOD,
        HTTP2_HEADER_PATH,
        HTTP2_HEADER_SCHEME,
        HTTP2_HEADER_CONTENT_LENGTH,
        HTTP2_HEADER_EXPECT,
        HTTP2_HEADER_STATUS
      }
    } = http2;
    var h2ExperimentalWarned = false;
    var FastBuffer = Buffer[Symbol.species];
    var kClosedResolve = Symbol("kClosedResolve");
    var channels = {};
    try {
      const diagnosticsChannel = __require("diagnostics_channel");
      channels.sendHeaders = diagnosticsChannel.channel("undici:client:sendHeaders");
      channels.beforeConnect = diagnosticsChannel.channel("undici:client:beforeConnect");
      channels.connectError = diagnosticsChannel.channel("undici:client:connectError");
      channels.connected = diagnosticsChannel.channel("undici:client:connected");
    } catch {
      channels.sendHeaders = { hasSubscribers: false };
      channels.beforeConnect = { hasSubscribers: false };
      channels.connectError = { hasSubscribers: false };
      channels.connected = { hasSubscribers: false };
    }
    var Client = class extends DispatcherBase {
      static {
        __name(this, "Client");
      }
      /**
       *
       * @param {string|URL} url
       * @param {import('../types/client').Client.Options} options
       */
      constructor(url2, {
        interceptors,
        maxHeaderSize,
        headersTimeout,
        socketTimeout,
        requestTimeout,
        connectTimeout,
        bodyTimeout,
        idleTimeout,
        keepAlive,
        keepAliveTimeout,
        maxKeepAliveTimeout,
        keepAliveMaxTimeout,
        keepAliveTimeoutThreshold,
        socketPath,
        pipelining,
        tls,
        strictContentLength,
        maxCachedSessions,
        maxRedirections,
        connect: connect2,
        maxRequestsPerClient,
        localAddress,
        maxResponseSize,
        autoSelectFamily,
        autoSelectFamilyAttemptTimeout,
        // h2
        allowH2,
        maxConcurrentStreams
      } = {}) {
        super();
        if (keepAlive !== void 0) {
          throw new InvalidArgumentError("unsupported keepAlive, use pipelining=0 instead");
        }
        if (socketTimeout !== void 0) {
          throw new InvalidArgumentError("unsupported socketTimeout, use headersTimeout & bodyTimeout instead");
        }
        if (requestTimeout !== void 0) {
          throw new InvalidArgumentError("unsupported requestTimeout, use headersTimeout & bodyTimeout instead");
        }
        if (idleTimeout !== void 0) {
          throw new InvalidArgumentError("unsupported idleTimeout, use keepAliveTimeout instead");
        }
        if (maxKeepAliveTimeout !== void 0) {
          throw new InvalidArgumentError("unsupported maxKeepAliveTimeout, use keepAliveMaxTimeout instead");
        }
        if (maxHeaderSize != null && !Number.isFinite(maxHeaderSize)) {
          throw new InvalidArgumentError("invalid maxHeaderSize");
        }
        if (socketPath != null && typeof socketPath !== "string") {
          throw new InvalidArgumentError("invalid socketPath");
        }
        if (connectTimeout != null && (!Number.isFinite(connectTimeout) || connectTimeout < 0)) {
          throw new InvalidArgumentError("invalid connectTimeout");
        }
        if (keepAliveTimeout != null && (!Number.isFinite(keepAliveTimeout) || keepAliveTimeout <= 0)) {
          throw new InvalidArgumentError("invalid keepAliveTimeout");
        }
        if (keepAliveMaxTimeout != null && (!Number.isFinite(keepAliveMaxTimeout) || keepAliveMaxTimeout <= 0)) {
          throw new InvalidArgumentError("invalid keepAliveMaxTimeout");
        }
        if (keepAliveTimeoutThreshold != null && !Number.isFinite(keepAliveTimeoutThreshold)) {
          throw new InvalidArgumentError("invalid keepAliveTimeoutThreshold");
        }
        if (headersTimeout != null && (!Number.isInteger(headersTimeout) || headersTimeout < 0)) {
          throw new InvalidArgumentError("headersTimeout must be a positive integer or zero");
        }
        if (bodyTimeout != null && (!Number.isInteger(bodyTimeout) || bodyTimeout < 0)) {
          throw new InvalidArgumentError("bodyTimeout must be a positive integer or zero");
        }
        if (connect2 != null && typeof connect2 !== "function" && typeof connect2 !== "object") {
          throw new InvalidArgumentError("connect must be a function or an object");
        }
        if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {
          throw new InvalidArgumentError("maxRedirections must be a positive number");
        }
        if (maxRequestsPerClient != null && (!Number.isInteger(maxRequestsPerClient) || maxRequestsPerClient < 0)) {
          throw new InvalidArgumentError("maxRequestsPerClient must be a positive number");
        }
        if (localAddress != null && (typeof localAddress !== "string" || net.isIP(localAddress) === 0)) {
          throw new InvalidArgumentError("localAddress must be valid string IP address");
        }
        if (maxResponseSize != null && (!Number.isInteger(maxResponseSize) || maxResponseSize < -1)) {
          throw new InvalidArgumentError("maxResponseSize must be a positive number");
        }
        if (autoSelectFamilyAttemptTimeout != null && (!Number.isInteger(autoSelectFamilyAttemptTimeout) || autoSelectFamilyAttemptTimeout < -1)) {
          throw new InvalidArgumentError("autoSelectFamilyAttemptTimeout must be a positive number");
        }
        if (allowH2 != null && typeof allowH2 !== "boolean") {
          throw new InvalidArgumentError("allowH2 must be a valid boolean value");
        }
        if (maxConcurrentStreams != null && (typeof maxConcurrentStreams !== "number" || maxConcurrentStreams < 1)) {
          throw new InvalidArgumentError("maxConcurrentStreams must be a possitive integer, greater than 0");
        }
        if (typeof connect2 !== "function") {
          connect2 = buildConnector({
            ...tls,
            maxCachedSessions,
            allowH2,
            socketPath,
            timeout: connectTimeout,
            ...util.nodeHasAutoSelectFamily && autoSelectFamily ? { autoSelectFamily, autoSelectFamilyAttemptTimeout } : void 0,
            ...connect2
          });
        }
        this[kInterceptors] = interceptors && interceptors.Client && Array.isArray(interceptors.Client) ? interceptors.Client : [createRedirectInterceptor({ maxRedirections })];
        this[kUrl] = util.parseOrigin(url2);
        this[kConnector] = connect2;
        this[kSocket] = null;
        this[kPipelining] = pipelining != null ? pipelining : 1;
        this[kMaxHeadersSize] = maxHeaderSize || http.maxHeaderSize;
        this[kKeepAliveDefaultTimeout] = keepAliveTimeout == null ? 4e3 : keepAliveTimeout;
        this[kKeepAliveMaxTimeout] = keepAliveMaxTimeout == null ? 6e5 : keepAliveMaxTimeout;
        this[kKeepAliveTimeoutThreshold] = keepAliveTimeoutThreshold == null ? 1e3 : keepAliveTimeoutThreshold;
        this[kKeepAliveTimeoutValue] = this[kKeepAliveDefaultTimeout];
        this[kServerName] = null;
        this[kLocalAddress] = localAddress != null ? localAddress : null;
        this[kResuming] = 0;
        this[kNeedDrain] = 0;
        this[kHostHeader] = `host: ${this[kUrl].hostname}${this[kUrl].port ? `:${this[kUrl].port}` : ""}\r
`;
        this[kBodyTimeout] = bodyTimeout != null ? bodyTimeout : 3e5;
        this[kHeadersTimeout] = headersTimeout != null ? headersTimeout : 3e5;
        this[kStrictContentLength] = strictContentLength == null ? true : strictContentLength;
        this[kMaxRedirections] = maxRedirections;
        this[kMaxRequests] = maxRequestsPerClient;
        this[kClosedResolve] = null;
        this[kMaxResponseSize] = maxResponseSize > -1 ? maxResponseSize : -1;
        this[kHTTPConnVersion] = "h1";
        this[kHTTP2Session] = null;
        this[kHTTP2SessionState] = !allowH2 ? null : {
          // streams: null, // Fixed queue of streams - For future support of `push`
          openStreams: 0,
          // Keep track of them to decide wether or not unref the session
          maxConcurrentStreams: maxConcurrentStreams != null ? maxConcurrentStreams : 100
          // Max peerConcurrentStreams for a Node h2 server
        };
        this[kHost] = `${this[kUrl].hostname}${this[kUrl].port ? `:${this[kUrl].port}` : ""}`;
        this[kQueue] = [];
        this[kRunningIdx] = 0;
        this[kPendingIdx] = 0;
      }
      get pipelining() {
        return this[kPipelining];
      }
      set pipelining(value) {
        this[kPipelining] = value;
        resume(this, true);
      }
      get [kPending]() {
        return this[kQueue].length - this[kPendingIdx];
      }
      get [kRunning]() {
        return this[kPendingIdx] - this[kRunningIdx];
      }
      get [kSize]() {
        return this[kQueue].length - this[kRunningIdx];
      }
      get [kConnected]() {
        return !!this[kSocket] && !this[kConnecting] && !this[kSocket].destroyed;
      }
      get [kBusy]() {
        const socket = this[kSocket];
        return socket && (socket[kReset] || socket[kWriting] || socket[kBlocking]) || this[kSize] >= (this[kPipelining] || 1) || this[kPending] > 0;
      }
      /* istanbul ignore: only used for test */
      [kConnect](cb) {
        connect(this);
        this.once("connect", cb);
      }
      [kDispatch](opts, handler) {
        const origin = opts.origin || this[kUrl].origin;
        const request = this[kHTTPConnVersion] === "h2" ? Request[kHTTP2BuildRequest](origin, opts, handler) : Request[kHTTP1BuildRequest](origin, opts, handler);
        this[kQueue].push(request);
        if (this[kResuming]) {
        } else if (util.bodyLength(request.body) == null && util.isIterable(request.body)) {
          this[kResuming] = 1;
          process.nextTick(resume, this);
        } else {
          resume(this, true);
        }
        if (this[kResuming] && this[kNeedDrain] !== 2 && this[kBusy]) {
          this[kNeedDrain] = 2;
        }
        return this[kNeedDrain] < 2;
      }
      async [kClose]() {
        return new Promise((resolve) => {
          if (!this[kSize]) {
            resolve(null);
          } else {
            this[kClosedResolve] = resolve;
          }
        });
      }
      async [kDestroy](err) {
        return new Promise((resolve) => {
          const requests = this[kQueue].splice(this[kPendingIdx]);
          for (let i = 0; i < requests.length; i++) {
            const request = requests[i];
            errorRequest(this, request, err);
          }
          const callback = /* @__PURE__ */ __name(() => {
            if (this[kClosedResolve]) {
              this[kClosedResolve]();
              this[kClosedResolve] = null;
            }
            resolve();
          }, "callback");
          if (this[kHTTP2Session] != null) {
            util.destroy(this[kHTTP2Session], err);
            this[kHTTP2Session] = null;
            this[kHTTP2SessionState] = null;
          }
          if (!this[kSocket]) {
            queueMicrotask(callback);
          } else {
            util.destroy(this[kSocket].on("close", callback), err);
          }
          resume(this);
        });
      }
    };
    function onHttp2SessionError(err) {
      assert(err.code !== "ERR_TLS_CERT_ALTNAME_INVALID");
      this[kSocket][kError] = err;
      onError(this[kClient], err);
    }
    __name(onHttp2SessionError, "onHttp2SessionError");
    function onHttp2FrameError(type, code, id) {
      const err = new InformationalError(`HTTP/2: "frameError" received - type ${type}, code ${code}`);
      if (id === 0) {
        this[kSocket][kError] = err;
        onError(this[kClient], err);
      }
    }
    __name(onHttp2FrameError, "onHttp2FrameError");
    function onHttp2SessionEnd() {
      util.destroy(this, new SocketError("other side closed"));
      util.destroy(this[kSocket], new SocketError("other side closed"));
    }
    __name(onHttp2SessionEnd, "onHttp2SessionEnd");
    function onHTTP2GoAway(code) {
      const client = this[kClient];
      const err = new InformationalError(`HTTP/2: "GOAWAY" frame received with code ${code}`);
      client[kSocket] = null;
      client[kHTTP2Session] = null;
      if (client.destroyed) {
        assert(this[kPending] === 0);
        const requests = client[kQueue].splice(client[kRunningIdx]);
        for (let i = 0; i < requests.length; i++) {
          const request = requests[i];
          errorRequest(this, request, err);
        }
      } else if (client[kRunning] > 0) {
        const request = client[kQueue][client[kRunningIdx]];
        client[kQueue][client[kRunningIdx]++] = null;
        errorRequest(client, request, err);
      }
      client[kPendingIdx] = client[kRunningIdx];
      assert(client[kRunning] === 0);
      client.emit(
        "disconnect",
        client[kUrl],
        [client],
        err
      );
      resume(client);
    }
    __name(onHTTP2GoAway, "onHTTP2GoAway");
    var constants = require_constants3();
    var createRedirectInterceptor = require_redirectInterceptor();
    var EMPTY_BUF = Buffer.alloc(0);
    async function lazyllhttp() {
      const llhttpWasmData = process.env.JEST_WORKER_ID ? require_llhttp_wasm() : void 0;
      let mod;
      try {
        mod = await WebAssembly.compile(Buffer.from(require_llhttp_simd_wasm(), "base64"));
      } catch (e) {
        mod = await WebAssembly.compile(Buffer.from(llhttpWasmData || require_llhttp_wasm(), "base64"));
      }
      return await WebAssembly.instantiate(mod, {
        env: {
          /* eslint-disable camelcase */
          wasm_on_url: /* @__PURE__ */ __name((p, at, len) => {
            return 0;
          }, "wasm_on_url"),
          wasm_on_status: /* @__PURE__ */ __name((p, at, len) => {
            assert.strictEqual(currentParser.ptr, p);
            const start = at - currentBufferPtr + currentBufferRef.byteOffset;
            return currentParser.onStatus(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;
          }, "wasm_on_status"),
          wasm_on_message_begin: /* @__PURE__ */ __name((p) => {
            assert.strictEqual(currentParser.ptr, p);
            return currentParser.onMessageBegin() || 0;
          }, "wasm_on_message_begin"),
          wasm_on_header_field: /* @__PURE__ */ __name((p, at, len) => {
            assert.strictEqual(currentParser.ptr, p);
            const start = at - currentBufferPtr + currentBufferRef.byteOffset;
            return currentParser.onHeaderField(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;
          }, "wasm_on_header_field"),
          wasm_on_header_value: /* @__PURE__ */ __name((p, at, len) => {
            assert.strictEqual(currentParser.ptr, p);
            const start = at - currentBufferPtr + currentBufferRef.byteOffset;
            return currentParser.onHeaderValue(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;
          }, "wasm_on_header_value"),
          wasm_on_headers_complete: /* @__PURE__ */ __name((p, statusCode, upgrade, shouldKeepAlive) => {
            assert.strictEqual(currentParser.ptr, p);
            return currentParser.onHeadersComplete(statusCode, Boolean(upgrade), Boolean(shouldKeepAlive)) || 0;
          }, "wasm_on_headers_complete"),
          wasm_on_body: /* @__PURE__ */ __name((p, at, len) => {
            assert.strictEqual(currentParser.ptr, p);
            const start = at - currentBufferPtr + currentBufferRef.byteOffset;
            return currentParser.onBody(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;
          }, "wasm_on_body"),
          wasm_on_message_complete: /* @__PURE__ */ __name((p) => {
            assert.strictEqual(currentParser.ptr, p);
            return currentParser.onMessageComplete() || 0;
          }, "wasm_on_message_complete")
          /* eslint-enable camelcase */
        }
      });
    }
    __name(lazyllhttp, "lazyllhttp");
    var llhttpInstance = null;
    var llhttpPromise = lazyllhttp();
    llhttpPromise.catch();
    var currentParser = null;
    var currentBufferRef = null;
    var currentBufferSize = 0;
    var currentBufferPtr = null;
    var TIMEOUT_HEADERS = 1;
    var TIMEOUT_BODY = 2;
    var TIMEOUT_IDLE = 3;
    var Parser = class {
      static {
        __name(this, "Parser");
      }
      constructor(client, socket, { exports: exports2 }) {
        assert(Number.isFinite(client[kMaxHeadersSize]) && client[kMaxHeadersSize] > 0);
        this.llhttp = exports2;
        this.ptr = this.llhttp.llhttp_alloc(constants.TYPE.RESPONSE);
        this.client = client;
        this.socket = socket;
        this.timeout = null;
        this.timeoutValue = null;
        this.timeoutType = null;
        this.statusCode = null;
        this.statusText = "";
        this.upgrade = false;
        this.headers = [];
        this.headersSize = 0;
        this.headersMaxSize = client[kMaxHeadersSize];
        this.shouldKeepAlive = false;
        this.paused = false;
        this.resume = this.resume.bind(this);
        this.bytesRead = 0;
        this.keepAlive = "";
        this.contentLength = "";
        this.connection = "";
        this.maxResponseSize = client[kMaxResponseSize];
      }
      setTimeout(value, type) {
        this.timeoutType = type;
        if (value !== this.timeoutValue) {
          timers.clearTimeout(this.timeout);
          if (value) {
            this.timeout = timers.setTimeout(onParserTimeout, value, this);
            if (this.timeout.unref) {
              this.timeout.unref();
            }
          } else {
            this.timeout = null;
          }
          this.timeoutValue = value;
        } else if (this.timeout) {
          if (this.timeout.refresh) {
            this.timeout.refresh();
          }
        }
      }
      resume() {
        if (this.socket.destroyed || !this.paused) {
          return;
        }
        assert(this.ptr != null);
        assert(currentParser == null);
        this.llhttp.llhttp_resume(this.ptr);
        assert(this.timeoutType === TIMEOUT_BODY);
        if (this.timeout) {
          if (this.timeout.refresh) {
            this.timeout.refresh();
          }
        }
        this.paused = false;
        this.execute(this.socket.read() || EMPTY_BUF);
        this.readMore();
      }
      readMore() {
        while (!this.paused && this.ptr) {
          const chunk = this.socket.read();
          if (chunk === null) {
            break;
          }
          this.execute(chunk);
        }
      }
      execute(data) {
        assert(this.ptr != null);
        assert(currentParser == null);
        assert(!this.paused);
        const { socket, llhttp } = this;
        if (data.length > currentBufferSize) {
          if (currentBufferPtr) {
            llhttp.free(currentBufferPtr);
          }
          currentBufferSize = Math.ceil(data.length / 4096) * 4096;
          currentBufferPtr = llhttp.malloc(currentBufferSize);
        }
        new Uint8Array(llhttp.memory.buffer, currentBufferPtr, currentBufferSize).set(data);
        try {
          let ret;
          try {
            currentBufferRef = data;
            currentParser = this;
            ret = llhttp.llhttp_execute(this.ptr, currentBufferPtr, data.length);
          } catch (err) {
            throw err;
          } finally {
            currentParser = null;
            currentBufferRef = null;
          }
          const offset = llhttp.llhttp_get_error_pos(this.ptr) - currentBufferPtr;
          if (ret === constants.ERROR.PAUSED_UPGRADE) {
            this.onUpgrade(data.slice(offset));
          } else if (ret === constants.ERROR.PAUSED) {
            this.paused = true;
            socket.unshift(data.slice(offset));
          } else if (ret !== constants.ERROR.OK) {
            const ptr = llhttp.llhttp_get_error_reason(this.ptr);
            let message = "";
            if (ptr) {
              const len = new Uint8Array(llhttp.memory.buffer, ptr).indexOf(0);
              message = "Response does not match the HTTP/1.1 protocol (" + Buffer.from(llhttp.memory.buffer, ptr, len).toString() + ")";
            }
            throw new HTTPParserError(message, constants.ERROR[ret], data.slice(offset));
          }
        } catch (err) {
          util.destroy(socket, err);
        }
      }
      destroy() {
        assert(this.ptr != null);
        assert(currentParser == null);
        this.llhttp.llhttp_free(this.ptr);
        this.ptr = null;
        timers.clearTimeout(this.timeout);
        this.timeout = null;
        this.timeoutValue = null;
        this.timeoutType = null;
        this.paused = false;
      }
      onStatus(buf) {
        this.statusText = buf.toString();
      }
      onMessageBegin() {
        const { socket, client } = this;
        if (socket.destroyed) {
          return -1;
        }
        const request = client[kQueue][client[kRunningIdx]];
        if (!request) {
          return -1;
        }
      }
      onHeaderField(buf) {
        const len = this.headers.length;
        if ((len & 1) === 0) {
          this.headers.push(buf);
        } else {
          this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf]);
        }
        this.trackHeader(buf.length);
      }
      onHeaderValue(buf) {
        let len = this.headers.length;
        if ((len & 1) === 1) {
          this.headers.push(buf);
          len += 1;
        } else {
          this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf]);
        }
        const key = this.headers[len - 2];
        if (key.length === 10 && key.toString().toLowerCase() === "keep-alive") {
          this.keepAlive += buf.toString();
        } else if (key.length === 10 && key.toString().toLowerCase() === "connection") {
          this.connection += buf.toString();
        } else if (key.length === 14 && key.toString().toLowerCase() === "content-length") {
          this.contentLength += buf.toString();
        }
        this.trackHeader(buf.length);
      }
      trackHeader(len) {
        this.headersSize += len;
        if (this.headersSize >= this.headersMaxSize) {
          util.destroy(this.socket, new HeadersOverflowError());
        }
      }
      onUpgrade(head) {
        const { upgrade, client, socket, headers, statusCode } = this;
        assert(upgrade);
        const request = client[kQueue][client[kRunningIdx]];
        assert(request);
        assert(!socket.destroyed);
        assert(socket === client[kSocket]);
        assert(!this.paused);
        assert(request.upgrade || request.method === "CONNECT");
        this.statusCode = null;
        this.statusText = "";
        this.shouldKeepAlive = null;
        assert(this.headers.length % 2 === 0);
        this.headers = [];
        this.headersSize = 0;
        socket.unshift(head);
        socket[kParser].destroy();
        socket[kParser] = null;
        socket[kClient] = null;
        socket[kError] = null;
        socket.removeListener("error", onSocketError).removeListener("readable", onSocketReadable).removeListener("end", onSocketEnd).removeListener("close", onSocketClose);
        client[kSocket] = null;
        client[kQueue][client[kRunningIdx]++] = null;
        client.emit("disconnect", client[kUrl], [client], new InformationalError("upgrade"));
        try {
          request.onUpgrade(statusCode, headers, socket);
        } catch (err) {
          util.destroy(socket, err);
        }
        resume(client);
      }
      onHeadersComplete(statusCode, upgrade, shouldKeepAlive) {
        const { client, socket, headers, statusText } = this;
        if (socket.destroyed) {
          return -1;
        }
        const request = client[kQueue][client[kRunningIdx]];
        if (!request) {
          return -1;
        }
        assert(!this.upgrade);
        assert(this.statusCode < 200);
        if (statusCode === 100) {
          util.destroy(socket, new SocketError("bad response", util.getSocketInfo(socket)));
          return -1;
        }
        if (upgrade && !request.upgrade) {
          util.destroy(socket, new SocketError("bad upgrade", util.getSocketInfo(socket)));
          return -1;
        }
        assert.strictEqual(this.timeoutType, TIMEOUT_HEADERS);
        this.statusCode = statusCode;
        this.shouldKeepAlive = shouldKeepAlive || // Override llhttp value which does not allow keepAlive for HEAD.
        request.method === "HEAD" && !socket[kReset] && this.connection.toLowerCase() === "keep-alive";
        if (this.statusCode >= 200) {
          const bodyTimeout = request.bodyTimeout != null ? request.bodyTimeout : client[kBodyTimeout];
          this.setTimeout(bodyTimeout, TIMEOUT_BODY);
        } else if (this.timeout) {
          if (this.timeout.refresh) {
            this.timeout.refresh();
          }
        }
        if (request.method === "CONNECT") {
          assert(client[kRunning] === 1);
          this.upgrade = true;
          return 2;
        }
        if (upgrade) {
          assert(client[kRunning] === 1);
          this.upgrade = true;
          return 2;
        }
        assert(this.headers.length % 2 === 0);
        this.headers = [];
        this.headersSize = 0;
        if (this.shouldKeepAlive && client[kPipelining]) {
          const keepAliveTimeout = this.keepAlive ? util.parseKeepAliveTimeout(this.keepAlive) : null;
          if (keepAliveTimeout != null) {
            const timeout = Math.min(
              keepAliveTimeout - client[kKeepAliveTimeoutThreshold],
              client[kKeepAliveMaxTimeout]
            );
            if (timeout <= 0) {
              socket[kReset] = true;
            } else {
              client[kKeepAliveTimeoutValue] = timeout;
            }
          } else {
            client[kKeepAliveTimeoutValue] = client[kKeepAliveDefaultTimeout];
          }
        } else {
          socket[kReset] = true;
        }
        const pause = request.onHeaders(statusCode, headers, this.resume, statusText) === false;
        if (request.aborted) {
          return -1;
        }
        if (request.method === "HEAD") {
          return 1;
        }
        if (statusCode < 200) {
          return 1;
        }
        if (socket[kBlocking]) {
          socket[kBlocking] = false;
          resume(client);
        }
        return pause ? constants.ERROR.PAUSED : 0;
      }
      onBody(buf) {
        const { client, socket, statusCode, maxResponseSize } = this;
        if (socket.destroyed) {
          return -1;
        }
        const request = client[kQueue][client[kRunningIdx]];
        assert(request);
        assert.strictEqual(this.timeoutType, TIMEOUT_BODY);
        if (this.timeout) {
          if (this.timeout.refresh) {
            this.timeout.refresh();
          }
        }
        assert(statusCode >= 200);
        if (maxResponseSize > -1 && this.bytesRead + buf.length > maxResponseSize) {
          util.destroy(socket, new ResponseExceededMaxSizeError());
          return -1;
        }
        this.bytesRead += buf.length;
        if (request.onData(buf) === false) {
          return constants.ERROR.PAUSED;
        }
      }
      onMessageComplete() {
        const { client, socket, statusCode, upgrade, headers, contentLength, bytesRead, shouldKeepAlive } = this;
        if (socket.destroyed && (!statusCode || shouldKeepAlive)) {
          return -1;
        }
        if (upgrade) {
          return;
        }
        const request = client[kQueue][client[kRunningIdx]];
        assert(request);
        assert(statusCode >= 100);
        this.statusCode = null;
        this.statusText = "";
        this.bytesRead = 0;
        this.contentLength = "";
        this.keepAlive = "";
        this.connection = "";
        assert(this.headers.length % 2 === 0);
        this.headers = [];
        this.headersSize = 0;
        if (statusCode < 200) {
          return;
        }
        if (request.method !== "HEAD" && contentLength && bytesRead !== parseInt(contentLength, 10)) {
          util.destroy(socket, new ResponseContentLengthMismatchError());
          return -1;
        }
        request.onComplete(headers);
        client[kQueue][client[kRunningIdx]++] = null;
        if (socket[kWriting]) {
          assert.strictEqual(client[kRunning], 0);
          util.destroy(socket, new InformationalError("reset"));
          return constants.ERROR.PAUSED;
        } else if (!shouldKeepAlive) {
          util.destroy(socket, new InformationalError("reset"));
          return constants.ERROR.PAUSED;
        } else if (socket[kReset] && client[kRunning] === 0) {
          util.destroy(socket, new InformationalError("reset"));
          return constants.ERROR.PAUSED;
        } else if (client[kPipelining] === 1) {
          setImmediate(resume, client);
        } else {
          resume(client);
        }
      }
    };
    function onParserTimeout(parser) {
      const { socket, timeoutType, client } = parser;
      if (timeoutType === TIMEOUT_HEADERS) {
        if (!socket[kWriting] || socket.writableNeedDrain || client[kRunning] > 1) {
          assert(!parser.paused, "cannot be paused while waiting for headers");
          util.destroy(socket, new HeadersTimeoutError());
        }
      } else if (timeoutType === TIMEOUT_BODY) {
        if (!parser.paused) {
          util.destroy(socket, new BodyTimeoutError());
        }
      } else if (timeoutType === TIMEOUT_IDLE) {
        assert(client[kRunning] === 0 && client[kKeepAliveTimeoutValue]);
        util.destroy(socket, new InformationalError("socket idle timeout"));
      }
    }
    __name(onParserTimeout, "onParserTimeout");
    function onSocketReadable() {
      const { [kParser]: parser } = this;
      if (parser) {
        parser.readMore();
      }
    }
    __name(onSocketReadable, "onSocketReadable");
    function onSocketError(err) {
      const { [kClient]: client, [kParser]: parser } = this;
      assert(err.code !== "ERR_TLS_CERT_ALTNAME_INVALID");
      if (client[kHTTPConnVersion] !== "h2") {
        if (err.code === "ECONNRESET" && parser.statusCode && !parser.shouldKeepAlive) {
          parser.onMessageComplete();
          return;
        }
      }
      this[kError] = err;
      onError(this[kClient], err);
    }
    __name(onSocketError, "onSocketError");
    function onError(client, err) {
      if (client[kRunning] === 0 && err.code !== "UND_ERR_INFO" && err.code !== "UND_ERR_SOCKET") {
        assert(client[kPendingIdx] === client[kRunningIdx]);
        const requests = client[kQueue].splice(client[kRunningIdx]);
        for (let i = 0; i < requests.length; i++) {
          const request = requests[i];
          errorRequest(client, request, err);
        }
        assert(client[kSize] === 0);
      }
    }
    __name(onError, "onError");
    function onSocketEnd() {
      const { [kParser]: parser, [kClient]: client } = this;
      if (client[kHTTPConnVersion] !== "h2") {
        if (parser.statusCode && !parser.shouldKeepAlive) {
          parser.onMessageComplete();
          return;
        }
      }
      util.destroy(this, new SocketError("other side closed", util.getSocketInfo(this)));
    }
    __name(onSocketEnd, "onSocketEnd");
    function onSocketClose() {
      const { [kClient]: client, [kParser]: parser } = this;
      if (client[kHTTPConnVersion] === "h1" && parser) {
        if (!this[kError] && parser.statusCode && !parser.shouldKeepAlive) {
          parser.onMessageComplete();
        }
        this[kParser].destroy();
        this[kParser] = null;
      }
      const err = this[kError] || new SocketError("closed", util.getSocketInfo(this));
      client[kSocket] = null;
      if (client.destroyed) {
        assert(client[kPending] === 0);
        const requests = client[kQueue].splice(client[kRunningIdx]);
        for (let i = 0; i < requests.length; i++) {
          const request = requests[i];
          errorRequest(client, request, err);
        }
      } else if (client[kRunning] > 0 && err.code !== "UND_ERR_INFO") {
        const request = client[kQueue][client[kRunningIdx]];
        client[kQueue][client[kRunningIdx]++] = null;
        errorRequest(client, request, err);
      }
      client[kPendingIdx] = client[kRunningIdx];
      assert(client[kRunning] === 0);
      client.emit("disconnect", client[kUrl], [client], err);
      resume(client);
    }
    __name(onSocketClose, "onSocketClose");
    async function connect(client) {
      assert(!client[kConnecting]);
      assert(!client[kSocket]);
      let { host, hostname, protocol, port } = client[kUrl];
      if (hostname[0] === "[") {
        const idx = hostname.indexOf("]");
        assert(idx !== -1);
        const ip = hostname.substring(1, idx);
        assert(net.isIP(ip));
        hostname = ip;
      }
      client[kConnecting] = true;
      if (channels.beforeConnect.hasSubscribers) {
        channels.beforeConnect.publish({
          connectParams: {
            host,
            hostname,
            protocol,
            port,
            servername: client[kServerName],
            localAddress: client[kLocalAddress]
          },
          connector: client[kConnector]
        });
      }
      try {
        const socket = await new Promise((resolve, reject) => {
          client[kConnector]({
            host,
            hostname,
            protocol,
            port,
            servername: client[kServerName],
            localAddress: client[kLocalAddress]
          }, (err, socket2) => {
            if (err) {
              reject(err);
            } else {
              resolve(socket2);
            }
          });
        });
        if (client.destroyed) {
          util.destroy(socket.on("error", () => {
          }), new ClientDestroyedError());
          return;
        }
        client[kConnecting] = false;
        assert(socket);
        const isH2 = socket.alpnProtocol === "h2";
        if (isH2) {
          if (!h2ExperimentalWarned) {
            h2ExperimentalWarned = true;
            process.emitWarning("H2 support is experimental, expect them to change at any time.", {
              code: "UNDICI-H2"
            });
          }
          const session = http2.connect(client[kUrl], {
            createConnection: /* @__PURE__ */ __name(() => socket, "createConnection"),
            peerMaxConcurrentStreams: client[kHTTP2SessionState].maxConcurrentStreams
          });
          client[kHTTPConnVersion] = "h2";
          session[kClient] = client;
          session[kSocket] = socket;
          session.on("error", onHttp2SessionError);
          session.on("frameError", onHttp2FrameError);
          session.on("end", onHttp2SessionEnd);
          session.on("goaway", onHTTP2GoAway);
          session.on("close", onSocketClose);
          session.unref();
          client[kHTTP2Session] = session;
          socket[kHTTP2Session] = session;
        } else {
          if (!llhttpInstance) {
            llhttpInstance = await llhttpPromise;
            llhttpPromise = null;
          }
          socket[kNoRef] = false;
          socket[kWriting] = false;
          socket[kReset] = false;
          socket[kBlocking] = false;
          socket[kParser] = new Parser(client, socket, llhttpInstance);
        }
        socket[kCounter] = 0;
        socket[kMaxRequests] = client[kMaxRequests];
        socket[kClient] = client;
        socket[kError] = null;
        socket.on("error", onSocketError).on("readable", onSocketReadable).on("end", onSocketEnd).on("close", onSocketClose);
        client[kSocket] = socket;
        if (channels.connected.hasSubscribers) {
          channels.connected.publish({
            connectParams: {
              host,
              hostname,
              protocol,
              port,
              servername: client[kServerName],
              localAddress: client[kLocalAddress]
            },
            connector: client[kConnector],
            socket
          });
        }
        client.emit("connect", client[kUrl], [client]);
      } catch (err) {
        if (client.destroyed) {
          return;
        }
        client[kConnecting] = false;
        if (channels.connectError.hasSubscribers) {
          channels.connectError.publish({
            connectParams: {
              host,
              hostname,
              protocol,
              port,
              servername: client[kServerName],
              localAddress: client[kLocalAddress]
            },
            connector: client[kConnector],
            error: err
          });
        }
        if (err.code === "ERR_TLS_CERT_ALTNAME_INVALID") {
          assert(client[kRunning] === 0);
          while (client[kPending] > 0 && client[kQueue][client[kPendingIdx]].servername === client[kServerName]) {
            const request = client[kQueue][client[kPendingIdx]++];
            errorRequest(client, request, err);
          }
        } else {
          onError(client, err);
        }
        client.emit("connectionError", client[kUrl], [client], err);
      }
      resume(client);
    }
    __name(connect, "connect");
    function emitDrain(client) {
      client[kNeedDrain] = 0;
      client.emit("drain", client[kUrl], [client]);
    }
    __name(emitDrain, "emitDrain");
    function resume(client, sync) {
      if (client[kResuming] === 2) {
        return;
      }
      client[kResuming] = 2;
      _resume(client, sync);
      client[kResuming] = 0;
      if (client[kRunningIdx] > 256) {
        client[kQueue].splice(0, client[kRunningIdx]);
        client[kPendingIdx] -= client[kRunningIdx];
        client[kRunningIdx] = 0;
      }
    }
    __name(resume, "resume");
    function _resume(client, sync) {
      while (true) {
        if (client.destroyed) {
          assert(client[kPending] === 0);
          return;
        }
        if (client[kClosedResolve] && !client[kSize]) {
          client[kClosedResolve]();
          client[kClosedResolve] = null;
          return;
        }
        const socket = client[kSocket];
        if (socket && !socket.destroyed && socket.alpnProtocol !== "h2") {
          if (client[kSize] === 0) {
            if (!socket[kNoRef] && socket.unref) {
              socket.unref();
              socket[kNoRef] = true;
            }
          } else if (socket[kNoRef] && socket.ref) {
            socket.ref();
            socket[kNoRef] = false;
          }
          if (client[kSize] === 0) {
            if (socket[kParser].timeoutType !== TIMEOUT_IDLE) {
              socket[kParser].setTimeout(client[kKeepAliveTimeoutValue], TIMEOUT_IDLE);
            }
          } else if (client[kRunning] > 0 && socket[kParser].statusCode < 200) {
            if (socket[kParser].timeoutType !== TIMEOUT_HEADERS) {
              const request2 = client[kQueue][client[kRunningIdx]];
              const headersTimeout = request2.headersTimeout != null ? request2.headersTimeout : client[kHeadersTimeout];
              socket[kParser].setTimeout(headersTimeout, TIMEOUT_HEADERS);
            }
          }
        }
        if (client[kBusy]) {
          client[kNeedDrain] = 2;
        } else if (client[kNeedDrain] === 2) {
          if (sync) {
            client[kNeedDrain] = 1;
            process.nextTick(emitDrain, client);
          } else {
            emitDrain(client);
          }
          continue;
        }
        if (client[kPending] === 0) {
          return;
        }
        if (client[kRunning] >= (client[kPipelining] || 1)) {
          return;
        }
        const request = client[kQueue][client[kPendingIdx]];
        if (client[kUrl].protocol === "https:" && client[kServerName] !== request.servername) {
          if (client[kRunning] > 0) {
            return;
          }
          client[kServerName] = request.servername;
          if (socket && socket.servername !== request.servername) {
            util.destroy(socket, new InformationalError("servername changed"));
            return;
          }
        }
        if (client[kConnecting]) {
          return;
        }
        if (!socket && !client[kHTTP2Session]) {
          connect(client);
          return;
        }
        if (socket.destroyed || socket[kWriting] || socket[kReset] || socket[kBlocking]) {
          return;
        }
        if (client[kRunning] > 0 && !request.idempotent) {
          return;
        }
        if (client[kRunning] > 0 && (request.upgrade || request.method === "CONNECT")) {
          return;
        }
        if (client[kRunning] > 0 && util.bodyLength(request.body) !== 0 && (util.isStream(request.body) || util.isAsyncIterable(request.body))) {
          return;
        }
        if (!request.aborted && write(client, request)) {
          client[kPendingIdx]++;
        } else {
          client[kQueue].splice(client[kPendingIdx], 1);
        }
      }
    }
    __name(_resume, "_resume");
    function shouldSendContentLength(method) {
      return method !== "GET" && method !== "HEAD" && method !== "OPTIONS" && method !== "TRACE" && method !== "CONNECT";
    }
    __name(shouldSendContentLength, "shouldSendContentLength");
    function write(client, request) {
      if (client[kHTTPConnVersion] === "h2") {
        writeH2(client, client[kHTTP2Session], request);
        return;
      }
      const { body, method, path: path5, host, upgrade, headers, blocking, reset } = request;
      const expectsPayload = method === "PUT" || method === "POST" || method === "PATCH";
      if (body && typeof body.read === "function") {
        body.read(0);
      }
      const bodyLength = util.bodyLength(body);
      let contentLength = bodyLength;
      if (contentLength === null) {
        contentLength = request.contentLength;
      }
      if (contentLength === 0 && !expectsPayload) {
        contentLength = null;
      }
      if (shouldSendContentLength(method) && contentLength > 0 && request.contentLength !== null && request.contentLength !== contentLength) {
        if (client[kStrictContentLength]) {
          errorRequest(client, request, new RequestContentLengthMismatchError());
          return false;
        }
        process.emitWarning(new RequestContentLengthMismatchError());
      }
      const socket = client[kSocket];
      try {
        request.onConnect((err) => {
          if (request.aborted || request.completed) {
            return;
          }
          errorRequest(client, request, err || new RequestAbortedError());
          util.destroy(socket, new InformationalError("aborted"));
        });
      } catch (err) {
        errorRequest(client, request, err);
      }
      if (request.aborted) {
        return false;
      }
      if (method === "HEAD") {
        socket[kReset] = true;
      }
      if (upgrade || method === "CONNECT") {
        socket[kReset] = true;
      }
      if (reset != null) {
        socket[kReset] = reset;
      }
      if (client[kMaxRequests] && socket[kCounter]++ >= client[kMaxRequests]) {
        socket[kReset] = true;
      }
      if (blocking) {
        socket[kBlocking] = true;
      }
      let header = `${method} ${path5} HTTP/1.1\r
`;
      if (typeof host === "string") {
        header += `host: ${host}\r
`;
      } else {
        header += client[kHostHeader];
      }
      if (upgrade) {
        header += `connection: upgrade\r
upgrade: ${upgrade}\r
`;
      } else if (client[kPipelining] && !socket[kReset]) {
        header += "connection: keep-alive\r\n";
      } else {
        header += "connection: close\r\n";
      }
      if (headers) {
        header += headers;
      }
      if (channels.sendHeaders.hasSubscribers) {
        channels.sendHeaders.publish({ request, headers: header, socket });
      }
      if (!body || bodyLength === 0) {
        if (contentLength === 0) {
          socket.write(`${header}content-length: 0\r
\r
`, "latin1");
        } else {
          assert(contentLength === null, "no body must not have content length");
          socket.write(`${header}\r
`, "latin1");
        }
        request.onRequestSent();
      } else if (util.isBuffer(body)) {
        assert(contentLength === body.byteLength, "buffer body must have content length");
        socket.cork();
        socket.write(`${header}content-length: ${contentLength}\r
\r
`, "latin1");
        socket.write(body);
        socket.uncork();
        request.onBodySent(body);
        request.onRequestSent();
        if (!expectsPayload) {
          socket[kReset] = true;
        }
      } else if (util.isBlobLike(body)) {
        if (typeof body.stream === "function") {
          writeIterable({ body: body.stream(), client, request, socket, contentLength, header, expectsPayload });
        } else {
          writeBlob({ body, client, request, socket, contentLength, header, expectsPayload });
        }
      } else if (util.isStream(body)) {
        writeStream({ body, client, request, socket, contentLength, header, expectsPayload });
      } else if (util.isIterable(body)) {
        writeIterable({ body, client, request, socket, contentLength, header, expectsPayload });
      } else {
        assert(false);
      }
      return true;
    }
    __name(write, "write");
    function writeH2(client, session, request) {
      const { body, method, path: path5, host, upgrade, expectContinue, signal, headers: reqHeaders } = request;
      let headers;
      if (typeof reqHeaders === "string") headers = Request[kHTTP2CopyHeaders](reqHeaders.trim());
      else headers = reqHeaders;
      if (upgrade) {
        errorRequest(client, request, new Error("Upgrade not supported for H2"));
        return false;
      }
      try {
        request.onConnect((err) => {
          if (request.aborted || request.completed) {
            return;
          }
          errorRequest(client, request, err || new RequestAbortedError());
        });
      } catch (err) {
        errorRequest(client, request, err);
      }
      if (request.aborted) {
        return false;
      }
      let stream;
      const h2State = client[kHTTP2SessionState];
      headers[HTTP2_HEADER_AUTHORITY] = host || client[kHost];
      headers[HTTP2_HEADER_METHOD] = method;
      if (method === "CONNECT") {
        session.ref();
        stream = session.request(headers, { endStream: false, signal });
        if (stream.id && !stream.pending) {
          request.onUpgrade(null, null, stream);
          ++h2State.openStreams;
        } else {
          stream.once("ready", () => {
            request.onUpgrade(null, null, stream);
            ++h2State.openStreams;
          });
        }
        stream.once("close", () => {
          h2State.openStreams -= 1;
          if (h2State.openStreams === 0) session.unref();
        });
        return true;
      }
      headers[HTTP2_HEADER_PATH] = path5;
      headers[HTTP2_HEADER_SCHEME] = "https";
      const expectsPayload = method === "PUT" || method === "POST" || method === "PATCH";
      if (body && typeof body.read === "function") {
        body.read(0);
      }
      let contentLength = util.bodyLength(body);
      if (contentLength == null) {
        contentLength = request.contentLength;
      }
      if (contentLength === 0 || !expectsPayload) {
        contentLength = null;
      }
      if (shouldSendContentLength(method) && contentLength > 0 && request.contentLength != null && request.contentLength !== contentLength) {
        if (client[kStrictContentLength]) {
          errorRequest(client, request, new RequestContentLengthMismatchError());
          return false;
        }
        process.emitWarning(new RequestContentLengthMismatchError());
      }
      if (contentLength != null) {
        assert(body, "no body must not have content length");
        headers[HTTP2_HEADER_CONTENT_LENGTH] = `${contentLength}`;
      }
      session.ref();
      const shouldEndStream = method === "GET" || method === "HEAD";
      if (expectContinue) {
        headers[HTTP2_HEADER_EXPECT] = "100-continue";
        stream = session.request(headers, { endStream: shouldEndStream, signal });
        stream.once("continue", writeBodyH2);
      } else {
        stream = session.request(headers, {
          endStream: shouldEndStream,
          signal
        });
        writeBodyH2();
      }
      ++h2State.openStreams;
      stream.once("response", (headers2) => {
        const { [HTTP2_HEADER_STATUS]: statusCode, ...realHeaders } = headers2;
        if (request.onHeaders(Number(statusCode), realHeaders, stream.resume.bind(stream), "") === false) {
          stream.pause();
        }
      });
      stream.once("end", () => {
        request.onComplete([]);
      });
      stream.on("data", (chunk) => {
        if (request.onData(chunk) === false) {
          stream.pause();
        }
      });
      stream.once("close", () => {
        h2State.openStreams -= 1;
        if (h2State.openStreams === 0) {
          session.unref();
        }
      });
      stream.once("error", function(err) {
        if (client[kHTTP2Session] && !client[kHTTP2Session].destroyed && !this.closed && !this.destroyed) {
          h2State.streams -= 1;
          util.destroy(stream, err);
        }
      });
      stream.once("frameError", (type, code) => {
        const err = new InformationalError(`HTTP/2: "frameError" received - type ${type}, code ${code}`);
        errorRequest(client, request, err);
        if (client[kHTTP2Session] && !client[kHTTP2Session].destroyed && !this.closed && !this.destroyed) {
          h2State.streams -= 1;
          util.destroy(stream, err);
        }
      });
      return true;
      function writeBodyH2() {
        if (!body) {
          request.onRequestSent();
        } else if (util.isBuffer(body)) {
          assert(contentLength === body.byteLength, "buffer body must have content length");
          stream.cork();
          stream.write(body);
          stream.uncork();
          stream.end();
          request.onBodySent(body);
          request.onRequestSent();
        } else if (util.isBlobLike(body)) {
          if (typeof body.stream === "function") {
            writeIterable({
              client,
              request,
              contentLength,
              h2stream: stream,
              expectsPayload,
              body: body.stream(),
              socket: client[kSocket],
              header: ""
            });
          } else {
            writeBlob({
              body,
              client,
              request,
              contentLength,
              expectsPayload,
              h2stream: stream,
              header: "",
              socket: client[kSocket]
            });
          }
        } else if (util.isStream(body)) {
          writeStream({
            body,
            client,
            request,
            contentLength,
            expectsPayload,
            socket: client[kSocket],
            h2stream: stream,
            header: ""
          });
        } else if (util.isIterable(body)) {
          writeIterable({
            body,
            client,
            request,
            contentLength,
            expectsPayload,
            header: "",
            h2stream: stream,
            socket: client[kSocket]
          });
        } else {
          assert(false);
        }
      }
      __name(writeBodyH2, "writeBodyH2");
    }
    __name(writeH2, "writeH2");
    function writeStream({ h2stream, body, client, request, socket, contentLength, header, expectsPayload }) {
      assert(contentLength !== 0 || client[kRunning] === 0, "stream body cannot be pipelined");
      if (client[kHTTPConnVersion] === "h2") {
        let onPipeData = function(chunk) {
          request.onBodySent(chunk);
        };
        __name(onPipeData, "onPipeData");
        const pipe = pipeline(
          body,
          h2stream,
          (err) => {
            if (err) {
              util.destroy(body, err);
              util.destroy(h2stream, err);
            } else {
              request.onRequestSent();
            }
          }
        );
        pipe.on("data", onPipeData);
        pipe.once("end", () => {
          pipe.removeListener("data", onPipeData);
          util.destroy(pipe);
        });
        return;
      }
      let finished = false;
      const writer = new AsyncWriter({ socket, request, contentLength, client, expectsPayload, header });
      const onData = /* @__PURE__ */ __name(function(chunk) {
        if (finished) {
          return;
        }
        try {
          if (!writer.write(chunk) && this.pause) {
            this.pause();
          }
        } catch (err) {
          util.destroy(this, err);
        }
      }, "onData");
      const onDrain = /* @__PURE__ */ __name(function() {
        if (finished) {
          return;
        }
        if (body.resume) {
          body.resume();
        }
      }, "onDrain");
      const onAbort = /* @__PURE__ */ __name(function() {
        if (finished) {
          return;
        }
        const err = new RequestAbortedError();
        queueMicrotask(() => onFinished(err));
      }, "onAbort");
      const onFinished = /* @__PURE__ */ __name(function(err) {
        if (finished) {
          return;
        }
        finished = true;
        assert(socket.destroyed || socket[kWriting] && client[kRunning] <= 1);
        socket.off("drain", onDrain).off("error", onFinished);
        body.removeListener("data", onData).removeListener("end", onFinished).removeListener("error", onFinished).removeListener("close", onAbort);
        if (!err) {
          try {
            writer.end();
          } catch (er) {
            err = er;
          }
        }
        writer.destroy(err);
        if (err && (err.code !== "UND_ERR_INFO" || err.message !== "reset")) {
          util.destroy(body, err);
        } else {
          util.destroy(body);
        }
      }, "onFinished");
      body.on("data", onData).on("end", onFinished).on("error", onFinished).on("close", onAbort);
      if (body.resume) {
        body.resume();
      }
      socket.on("drain", onDrain).on("error", onFinished);
    }
    __name(writeStream, "writeStream");
    async function writeBlob({ h2stream, body, client, request, socket, contentLength, header, expectsPayload }) {
      assert(contentLength === body.size, "blob body must have content length");
      const isH2 = client[kHTTPConnVersion] === "h2";
      try {
        if (contentLength != null && contentLength !== body.size) {
          throw new RequestContentLengthMismatchError();
        }
        const buffer = Buffer.from(await body.arrayBuffer());
        if (isH2) {
          h2stream.cork();
          h2stream.write(buffer);
          h2stream.uncork();
        } else {
          socket.cork();
          socket.write(`${header}content-length: ${contentLength}\r
\r
`, "latin1");
          socket.write(buffer);
          socket.uncork();
        }
        request.onBodySent(buffer);
        request.onRequestSent();
        if (!expectsPayload) {
          socket[kReset] = true;
        }
        resume(client);
      } catch (err) {
        util.destroy(isH2 ? h2stream : socket, err);
      }
    }
    __name(writeBlob, "writeBlob");
    async function writeIterable({ h2stream, body, client, request, socket, contentLength, header, expectsPayload }) {
      assert(contentLength !== 0 || client[kRunning] === 0, "iterator body cannot be pipelined");
      let callback = null;
      function onDrain() {
        if (callback) {
          const cb = callback;
          callback = null;
          cb();
        }
      }
      __name(onDrain, "onDrain");
      const waitForDrain = /* @__PURE__ */ __name(() => new Promise((resolve, reject) => {
        assert(callback === null);
        if (socket[kError]) {
          reject(socket[kError]);
        } else {
          callback = resolve;
        }
      }), "waitForDrain");
      if (client[kHTTPConnVersion] === "h2") {
        h2stream.on("close", onDrain).on("drain", onDrain);
        try {
          for await (const chunk of body) {
            if (socket[kError]) {
              throw socket[kError];
            }
            const res = h2stream.write(chunk);
            request.onBodySent(chunk);
            if (!res) {
              await waitForDrain();
            }
          }
        } catch (err) {
          h2stream.destroy(err);
        } finally {
          request.onRequestSent();
          h2stream.end();
          h2stream.off("close", onDrain).off("drain", onDrain);
        }
        return;
      }
      socket.on("close", onDrain).on("drain", onDrain);
      const writer = new AsyncWriter({ socket, request, contentLength, client, expectsPayload, header });
      try {
        for await (const chunk of body) {
          if (socket[kError]) {
            throw socket[kError];
          }
          if (!writer.write(chunk)) {
            await waitForDrain();
          }
        }
        writer.end();
      } catch (err) {
        writer.destroy(err);
      } finally {
        socket.off("close", onDrain).off("drain", onDrain);
      }
    }
    __name(writeIterable, "writeIterable");
    var AsyncWriter = class {
      static {
        __name(this, "AsyncWriter");
      }
      constructor({ socket, request, contentLength, client, expectsPayload, header }) {
        this.socket = socket;
        this.request = request;
        this.contentLength = contentLength;
        this.client = client;
        this.bytesWritten = 0;
        this.expectsPayload = expectsPayload;
        this.header = header;
        socket[kWriting] = true;
      }
      write(chunk) {
        const { socket, request, contentLength, client, bytesWritten, expectsPayload, header } = this;
        if (socket[kError]) {
          throw socket[kError];
        }
        if (socket.destroyed) {
          return false;
        }
        const len = Buffer.byteLength(chunk);
        if (!len) {
          return true;
        }
        if (contentLength !== null && bytesWritten + len > contentLength) {
          if (client[kStrictContentLength]) {
            throw new RequestContentLengthMismatchError();
          }
          process.emitWarning(new RequestContentLengthMismatchError());
        }
        socket.cork();
        if (bytesWritten === 0) {
          if (!expectsPayload) {
            socket[kReset] = true;
          }
          if (contentLength === null) {
            socket.write(`${header}transfer-encoding: chunked\r
`, "latin1");
          } else {
            socket.write(`${header}content-length: ${contentLength}\r
\r
`, "latin1");
          }
        }
        if (contentLength === null) {
          socket.write(`\r
${len.toString(16)}\r
`, "latin1");
        }
        this.bytesWritten += len;
        const ret = socket.write(chunk);
        socket.uncork();
        request.onBodySent(chunk);
        if (!ret) {
          if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {
            if (socket[kParser].timeout.refresh) {
              socket[kParser].timeout.refresh();
            }
          }
        }
        return ret;
      }
      end() {
        const { socket, contentLength, client, bytesWritten, expectsPayload, header, request } = this;
        request.onRequestSent();
        socket[kWriting] = false;
        if (socket[kError]) {
          throw socket[kError];
        }
        if (socket.destroyed) {
          return;
        }
        if (bytesWritten === 0) {
          if (expectsPayload) {
            socket.write(`${header}content-length: 0\r
\r
`, "latin1");
          } else {
            socket.write(`${header}\r
`, "latin1");
          }
        } else if (contentLength === null) {
          socket.write("\r\n0\r\n\r\n", "latin1");
        }
        if (contentLength !== null && bytesWritten !== contentLength) {
          if (client[kStrictContentLength]) {
            throw new RequestContentLengthMismatchError();
          } else {
            process.emitWarning(new RequestContentLengthMismatchError());
          }
        }
        if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {
          if (socket[kParser].timeout.refresh) {
            socket[kParser].timeout.refresh();
          }
        }
        resume(client);
      }
      destroy(err) {
        const { socket, client } = this;
        socket[kWriting] = false;
        if (err) {
          assert(client[kRunning] <= 1, "pipeline should only contain this request");
          util.destroy(socket, err);
        }
      }
    };
    function errorRequest(client, request, err) {
      try {
        request.onError(err);
        assert(request.aborted);
      } catch (err2) {
        client.emit("error", err2);
      }
    }
    __name(errorRequest, "errorRequest");
    module.exports = Client;
  }
});

// node_modules/undici/lib/node/fixed-queue.js
var require_fixed_queue = __commonJS({
  "node_modules/undici/lib/node/fixed-queue.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var kSize = 2048;
    var kMask = kSize - 1;
    var FixedCircularBuffer = class {
      static {
        __name(this, "FixedCircularBuffer");
      }
      constructor() {
        this.bottom = 0;
        this.top = 0;
        this.list = new Array(kSize);
        this.next = null;
      }
      isEmpty() {
        return this.top === this.bottom;
      }
      isFull() {
        return (this.top + 1 & kMask) === this.bottom;
      }
      push(data) {
        this.list[this.top] = data;
        this.top = this.top + 1 & kMask;
      }
      shift() {
        const nextItem = this.list[this.bottom];
        if (nextItem === void 0)
          return null;
        this.list[this.bottom] = void 0;
        this.bottom = this.bottom + 1 & kMask;
        return nextItem;
      }
    };
    module.exports = class FixedQueue {
      static {
        __name(this, "FixedQueue");
      }
      constructor() {
        this.head = this.tail = new FixedCircularBuffer();
      }
      isEmpty() {
        return this.head.isEmpty();
      }
      push(data) {
        if (this.head.isFull()) {
          this.head = this.head.next = new FixedCircularBuffer();
        }
        this.head.push(data);
      }
      shift() {
        const tail = this.tail;
        const next = tail.shift();
        if (tail.isEmpty() && tail.next !== null) {
          this.tail = tail.next;
        }
        return next;
      }
    };
  }
});

// node_modules/undici/lib/pool-stats.js
var require_pool_stats = __commonJS({
  "node_modules/undici/lib/pool-stats.js"(exports, module) {
    init_cjs_shim();
    var { kFree, kConnected, kPending, kQueued, kRunning, kSize } = require_symbols();
    var kPool = Symbol("pool");
    var PoolStats = class {
      static {
        __name(this, "PoolStats");
      }
      constructor(pool) {
        this[kPool] = pool;
      }
      get connected() {
        return this[kPool][kConnected];
      }
      get free() {
        return this[kPool][kFree];
      }
      get pending() {
        return this[kPool][kPending];
      }
      get queued() {
        return this[kPool][kQueued];
      }
      get running() {
        return this[kPool][kRunning];
      }
      get size() {
        return this[kPool][kSize];
      }
    };
    module.exports = PoolStats;
  }
});

// node_modules/undici/lib/pool-base.js
var require_pool_base = __commonJS({
  "node_modules/undici/lib/pool-base.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var DispatcherBase = require_dispatcher_base();
    var FixedQueue = require_fixed_queue();
    var { kConnected, kSize, kRunning, kPending, kQueued, kBusy, kFree, kUrl, kClose, kDestroy, kDispatch } = require_symbols();
    var PoolStats = require_pool_stats();
    var kClients = Symbol("clients");
    var kNeedDrain = Symbol("needDrain");
    var kQueue = Symbol("queue");
    var kClosedResolve = Symbol("closed resolve");
    var kOnDrain = Symbol("onDrain");
    var kOnConnect = Symbol("onConnect");
    var kOnDisconnect = Symbol("onDisconnect");
    var kOnConnectionError = Symbol("onConnectionError");
    var kGetDispatcher = Symbol("get dispatcher");
    var kAddClient = Symbol("add client");
    var kRemoveClient = Symbol("remove client");
    var kStats = Symbol("stats");
    var PoolBase = class extends DispatcherBase {
      static {
        __name(this, "PoolBase");
      }
      constructor() {
        super();
        this[kQueue] = new FixedQueue();
        this[kClients] = [];
        this[kQueued] = 0;
        const pool = this;
        this[kOnDrain] = /* @__PURE__ */ __name(function onDrain(origin, targets) {
          const queue = pool[kQueue];
          let needDrain = false;
          while (!needDrain) {
            const item = queue.shift();
            if (!item) {
              break;
            }
            pool[kQueued]--;
            needDrain = !this.dispatch(item.opts, item.handler);
          }
          this[kNeedDrain] = needDrain;
          if (!this[kNeedDrain] && pool[kNeedDrain]) {
            pool[kNeedDrain] = false;
            pool.emit("drain", origin, [pool, ...targets]);
          }
          if (pool[kClosedResolve] && queue.isEmpty()) {
            Promise.all(pool[kClients].map((c) => c.close())).then(pool[kClosedResolve]);
          }
        }, "onDrain");
        this[kOnConnect] = (origin, targets) => {
          pool.emit("connect", origin, [pool, ...targets]);
        };
        this[kOnDisconnect] = (origin, targets, err) => {
          pool.emit("disconnect", origin, [pool, ...targets], err);
        };
        this[kOnConnectionError] = (origin, targets, err) => {
          pool.emit("connectionError", origin, [pool, ...targets], err);
        };
        this[kStats] = new PoolStats(this);
      }
      get [kBusy]() {
        return this[kNeedDrain];
      }
      get [kConnected]() {
        return this[kClients].filter((client) => client[kConnected]).length;
      }
      get [kFree]() {
        return this[kClients].filter((client) => client[kConnected] && !client[kNeedDrain]).length;
      }
      get [kPending]() {
        let ret = this[kQueued];
        for (const { [kPending]: pending } of this[kClients]) {
          ret += pending;
        }
        return ret;
      }
      get [kRunning]() {
        let ret = 0;
        for (const { [kRunning]: running } of this[kClients]) {
          ret += running;
        }
        return ret;
      }
      get [kSize]() {
        let ret = this[kQueued];
        for (const { [kSize]: size } of this[kClients]) {
          ret += size;
        }
        return ret;
      }
      get stats() {
        return this[kStats];
      }
      async [kClose]() {
        if (this[kQueue].isEmpty()) {
          return Promise.all(this[kClients].map((c) => c.close()));
        } else {
          return new Promise((resolve) => {
            this[kClosedResolve] = resolve;
          });
        }
      }
      async [kDestroy](err) {
        while (true) {
          const item = this[kQueue].shift();
          if (!item) {
            break;
          }
          item.handler.onError(err);
        }
        return Promise.all(this[kClients].map((c) => c.destroy(err)));
      }
      [kDispatch](opts, handler) {
        const dispatcher = this[kGetDispatcher]();
        if (!dispatcher) {
          this[kNeedDrain] = true;
          this[kQueue].push({ opts, handler });
          this[kQueued]++;
        } else if (!dispatcher.dispatch(opts, handler)) {
          dispatcher[kNeedDrain] = true;
          this[kNeedDrain] = !this[kGetDispatcher]();
        }
        return !this[kNeedDrain];
      }
      [kAddClient](client) {
        client.on("drain", this[kOnDrain]).on("connect", this[kOnConnect]).on("disconnect", this[kOnDisconnect]).on("connectionError", this[kOnConnectionError]);
        this[kClients].push(client);
        if (this[kNeedDrain]) {
          process.nextTick(() => {
            if (this[kNeedDrain]) {
              this[kOnDrain](client[kUrl], [this, client]);
            }
          });
        }
        return this;
      }
      [kRemoveClient](client) {
        client.close(() => {
          const idx = this[kClients].indexOf(client);
          if (idx !== -1) {
            this[kClients].splice(idx, 1);
          }
        });
        this[kNeedDrain] = this[kClients].some((dispatcher) => !dispatcher[kNeedDrain] && dispatcher.closed !== true && dispatcher.destroyed !== true);
      }
    };
    module.exports = {
      PoolBase,
      kClients,
      kNeedDrain,
      kAddClient,
      kRemoveClient,
      kGetDispatcher
    };
  }
});

// node_modules/undici/lib/pool.js
var require_pool = __commonJS({
  "node_modules/undici/lib/pool.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var {
      PoolBase,
      kClients,
      kNeedDrain,
      kAddClient,
      kGetDispatcher
    } = require_pool_base();
    var Client = require_client();
    var {
      InvalidArgumentError
    } = require_errors();
    var util = require_util2();
    var { kUrl, kInterceptors } = require_symbols();
    var buildConnector = require_connect();
    var kOptions = Symbol("options");
    var kConnections = Symbol("connections");
    var kFactory = Symbol("factory");
    function defaultFactory(origin, opts) {
      return new Client(origin, opts);
    }
    __name(defaultFactory, "defaultFactory");
    var Pool = class extends PoolBase {
      static {
        __name(this, "Pool");
      }
      constructor(origin, {
        connections,
        factory = defaultFactory,
        connect,
        connectTimeout,
        tls,
        maxCachedSessions,
        socketPath,
        autoSelectFamily,
        autoSelectFamilyAttemptTimeout,
        allowH2,
        ...options
      } = {}) {
        super();
        if (connections != null && (!Number.isFinite(connections) || connections < 0)) {
          throw new InvalidArgumentError("invalid connections");
        }
        if (typeof factory !== "function") {
          throw new InvalidArgumentError("factory must be a function.");
        }
        if (connect != null && typeof connect !== "function" && typeof connect !== "object") {
          throw new InvalidArgumentError("connect must be a function or an object");
        }
        if (typeof connect !== "function") {
          connect = buildConnector({
            ...tls,
            maxCachedSessions,
            allowH2,
            socketPath,
            timeout: connectTimeout,
            ...util.nodeHasAutoSelectFamily && autoSelectFamily ? { autoSelectFamily, autoSelectFamilyAttemptTimeout } : void 0,
            ...connect
          });
        }
        this[kInterceptors] = options.interceptors && options.interceptors.Pool && Array.isArray(options.interceptors.Pool) ? options.interceptors.Pool : [];
        this[kConnections] = connections || null;
        this[kUrl] = util.parseOrigin(origin);
        this[kOptions] = { ...util.deepClone(options), connect, allowH2 };
        this[kOptions].interceptors = options.interceptors ? { ...options.interceptors } : void 0;
        this[kFactory] = factory;
      }
      [kGetDispatcher]() {
        let dispatcher = this[kClients].find((dispatcher2) => !dispatcher2[kNeedDrain]);
        if (dispatcher) {
          return dispatcher;
        }
        if (!this[kConnections] || this[kClients].length < this[kConnections]) {
          dispatcher = this[kFactory](this[kUrl], this[kOptions]);
          this[kAddClient](dispatcher);
        }
        return dispatcher;
      }
    };
    module.exports = Pool;
  }
});

// node_modules/undici/lib/balanced-pool.js
var require_balanced_pool = __commonJS({
  "node_modules/undici/lib/balanced-pool.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var {
      BalancedPoolMissingUpstreamError,
      InvalidArgumentError
    } = require_errors();
    var {
      PoolBase,
      kClients,
      kNeedDrain,
      kAddClient,
      kRemoveClient,
      kGetDispatcher
    } = require_pool_base();
    var Pool = require_pool();
    var { kUrl, kInterceptors } = require_symbols();
    var { parseOrigin } = require_util2();
    var kFactory = Symbol("factory");
    var kOptions = Symbol("options");
    var kGreatestCommonDivisor = Symbol("kGreatestCommonDivisor");
    var kCurrentWeight = Symbol("kCurrentWeight");
    var kIndex = Symbol("kIndex");
    var kWeight = Symbol("kWeight");
    var kMaxWeightPerServer = Symbol("kMaxWeightPerServer");
    var kErrorPenalty = Symbol("kErrorPenalty");
    function getGreatestCommonDivisor(a, b) {
      if (b === 0) return a;
      return getGreatestCommonDivisor(b, a % b);
    }
    __name(getGreatestCommonDivisor, "getGreatestCommonDivisor");
    function defaultFactory(origin, opts) {
      return new Pool(origin, opts);
    }
    __name(defaultFactory, "defaultFactory");
    var BalancedPool = class extends PoolBase {
      static {
        __name(this, "BalancedPool");
      }
      constructor(upstreams = [], { factory = defaultFactory, ...opts } = {}) {
        super();
        this[kOptions] = opts;
        this[kIndex] = -1;
        this[kCurrentWeight] = 0;
        this[kMaxWeightPerServer] = this[kOptions].maxWeightPerServer || 100;
        this[kErrorPenalty] = this[kOptions].errorPenalty || 15;
        if (!Array.isArray(upstreams)) {
          upstreams = [upstreams];
        }
        if (typeof factory !== "function") {
          throw new InvalidArgumentError("factory must be a function.");
        }
        this[kInterceptors] = opts.interceptors && opts.interceptors.BalancedPool && Array.isArray(opts.interceptors.BalancedPool) ? opts.interceptors.BalancedPool : [];
        this[kFactory] = factory;
        for (const upstream of upstreams) {
          this.addUpstream(upstream);
        }
        this._updateBalancedPoolStats();
      }
      addUpstream(upstream) {
        const upstreamOrigin = parseOrigin(upstream).origin;
        if (this[kClients].find((pool2) => pool2[kUrl].origin === upstreamOrigin && pool2.closed !== true && pool2.destroyed !== true)) {
          return this;
        }
        const pool = this[kFactory](upstreamOrigin, Object.assign({}, this[kOptions]));
        this[kAddClient](pool);
        pool.on("connect", () => {
          pool[kWeight] = Math.min(this[kMaxWeightPerServer], pool[kWeight] + this[kErrorPenalty]);
        });
        pool.on("connectionError", () => {
          pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty]);
          this._updateBalancedPoolStats();
        });
        pool.on("disconnect", (...args) => {
          const err = args[2];
          if (err && err.code === "UND_ERR_SOCKET") {
            pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty]);
            this._updateBalancedPoolStats();
          }
        });
        for (const client of this[kClients]) {
          client[kWeight] = this[kMaxWeightPerServer];
        }
        this._updateBalancedPoolStats();
        return this;
      }
      _updateBalancedPoolStats() {
        this[kGreatestCommonDivisor] = this[kClients].map((p) => p[kWeight]).reduce(getGreatestCommonDivisor, 0);
      }
      removeUpstream(upstream) {
        const upstreamOrigin = parseOrigin(upstream).origin;
        const pool = this[kClients].find((pool2) => pool2[kUrl].origin === upstreamOrigin && pool2.closed !== true && pool2.destroyed !== true);
        if (pool) {
          this[kRemoveClient](pool);
        }
        return this;
      }
      get upstreams() {
        return this[kClients].filter((dispatcher) => dispatcher.closed !== true && dispatcher.destroyed !== true).map((p) => p[kUrl].origin);
      }
      [kGetDispatcher]() {
        if (this[kClients].length === 0) {
          throw new BalancedPoolMissingUpstreamError();
        }
        const dispatcher = this[kClients].find((dispatcher2) => !dispatcher2[kNeedDrain] && dispatcher2.closed !== true && dispatcher2.destroyed !== true);
        if (!dispatcher) {
          return;
        }
        const allClientsBusy = this[kClients].map((pool) => pool[kNeedDrain]).reduce((a, b) => a && b, true);
        if (allClientsBusy) {
          return;
        }
        let counter = 0;
        let maxWeightIndex = this[kClients].findIndex((pool) => !pool[kNeedDrain]);
        while (counter++ < this[kClients].length) {
          this[kIndex] = (this[kIndex] + 1) % this[kClients].length;
          const pool = this[kClients][this[kIndex]];
          if (pool[kWeight] > this[kClients][maxWeightIndex][kWeight] && !pool[kNeedDrain]) {
            maxWeightIndex = this[kIndex];
          }
          if (this[kIndex] === 0) {
            this[kCurrentWeight] = this[kCurrentWeight] - this[kGreatestCommonDivisor];
            if (this[kCurrentWeight] <= 0) {
              this[kCurrentWeight] = this[kMaxWeightPerServer];
            }
          }
          if (pool[kWeight] >= this[kCurrentWeight] && !pool[kNeedDrain]) {
            return pool;
          }
        }
        this[kCurrentWeight] = this[kClients][maxWeightIndex][kWeight];
        this[kIndex] = maxWeightIndex;
        return this[kClients][maxWeightIndex];
      }
    };
    module.exports = BalancedPool;
  }
});

// node_modules/undici/lib/compat/dispatcher-weakref.js
var require_dispatcher_weakref = __commonJS({
  "node_modules/undici/lib/compat/dispatcher-weakref.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var { kConnected, kSize } = require_symbols();
    var CompatWeakRef = class {
      static {
        __name(this, "CompatWeakRef");
      }
      constructor(value) {
        this.value = value;
      }
      deref() {
        return this.value[kConnected] === 0 && this.value[kSize] === 0 ? void 0 : this.value;
      }
    };
    var CompatFinalizer = class {
      static {
        __name(this, "CompatFinalizer");
      }
      constructor(finalizer) {
        this.finalizer = finalizer;
      }
      register(dispatcher, key) {
        if (dispatcher.on) {
          dispatcher.on("disconnect", () => {
            if (dispatcher[kConnected] === 0 && dispatcher[kSize] === 0) {
              this.finalizer(key);
            }
          });
        }
      }
    };
    module.exports = function() {
      if (process.env.NODE_V8_COVERAGE) {
        return {
          WeakRef: CompatWeakRef,
          FinalizationRegistry: CompatFinalizer
        };
      }
      return {
        WeakRef: global.WeakRef || CompatWeakRef,
        FinalizationRegistry: global.FinalizationRegistry || CompatFinalizer
      };
    };
  }
});

// node_modules/undici/lib/agent.js
var require_agent = __commonJS({
  "node_modules/undici/lib/agent.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var { InvalidArgumentError } = require_errors();
    var { kClients, kRunning, kClose, kDestroy, kDispatch, kInterceptors } = require_symbols();
    var DispatcherBase = require_dispatcher_base();
    var Pool = require_pool();
    var Client = require_client();
    var util = require_util2();
    var createRedirectInterceptor = require_redirectInterceptor();
    var { WeakRef: WeakRef2, FinalizationRegistry } = require_dispatcher_weakref()();
    var kOnConnect = Symbol("onConnect");
    var kOnDisconnect = Symbol("onDisconnect");
    var kOnConnectionError = Symbol("onConnectionError");
    var kMaxRedirections = Symbol("maxRedirections");
    var kOnDrain = Symbol("onDrain");
    var kFactory = Symbol("factory");
    var kFinalizer = Symbol("finalizer");
    var kOptions = Symbol("options");
    function defaultFactory(origin, opts) {
      return opts && opts.connections === 1 ? new Client(origin, opts) : new Pool(origin, opts);
    }
    __name(defaultFactory, "defaultFactory");
    var Agent = class extends DispatcherBase {
      static {
        __name(this, "Agent");
      }
      constructor({ factory = defaultFactory, maxRedirections = 0, connect, ...options } = {}) {
        super();
        if (typeof factory !== "function") {
          throw new InvalidArgumentError("factory must be a function.");
        }
        if (connect != null && typeof connect !== "function" && typeof connect !== "object") {
          throw new InvalidArgumentError("connect must be a function or an object");
        }
        if (!Number.isInteger(maxRedirections) || maxRedirections < 0) {
          throw new InvalidArgumentError("maxRedirections must be a positive number");
        }
        if (connect && typeof connect !== "function") {
          connect = { ...connect };
        }
        this[kInterceptors] = options.interceptors && options.interceptors.Agent && Array.isArray(options.interceptors.Agent) ? options.interceptors.Agent : [createRedirectInterceptor({ maxRedirections })];
        this[kOptions] = { ...util.deepClone(options), connect };
        this[kOptions].interceptors = options.interceptors ? { ...options.interceptors } : void 0;
        this[kMaxRedirections] = maxRedirections;
        this[kFactory] = factory;
        this[kClients] = /* @__PURE__ */ new Map();
        this[kFinalizer] = new FinalizationRegistry(
          /* istanbul ignore next: gc is undeterministic */
          (key) => {
            const ref = this[kClients].get(key);
            if (ref !== void 0 && ref.deref() === void 0) {
              this[kClients].delete(key);
            }
          }
        );
        const agent = this;
        this[kOnDrain] = (origin, targets) => {
          agent.emit("drain", origin, [agent, ...targets]);
        };
        this[kOnConnect] = (origin, targets) => {
          agent.emit("connect", origin, [agent, ...targets]);
        };
        this[kOnDisconnect] = (origin, targets, err) => {
          agent.emit("disconnect", origin, [agent, ...targets], err);
        };
        this[kOnConnectionError] = (origin, targets, err) => {
          agent.emit("connectionError", origin, [agent, ...targets], err);
        };
      }
      get [kRunning]() {
        let ret = 0;
        for (const ref of this[kClients].values()) {
          const client = ref.deref();
          if (client) {
            ret += client[kRunning];
          }
        }
        return ret;
      }
      [kDispatch](opts, handler) {
        let key;
        if (opts.origin && (typeof opts.origin === "string" || opts.origin instanceof URL)) {
          key = String(opts.origin);
        } else {
          throw new InvalidArgumentError("opts.origin must be a non-empty string or URL.");
        }
        const ref = this[kClients].get(key);
        let dispatcher = ref ? ref.deref() : null;
        if (!dispatcher) {
          dispatcher = this[kFactory](opts.origin, this[kOptions]).on("drain", this[kOnDrain]).on("connect", this[kOnConnect]).on("disconnect", this[kOnDisconnect]).on("connectionError", this[kOnConnectionError]);
          this[kClients].set(key, new WeakRef2(dispatcher));
          this[kFinalizer].register(dispatcher, key);
        }
        return dispatcher.dispatch(opts, handler);
      }
      async [kClose]() {
        const closePromises = [];
        for (const ref of this[kClients].values()) {
          const client = ref.deref();
          if (client) {
            closePromises.push(client.close());
          }
        }
        await Promise.all(closePromises);
      }
      async [kDestroy](err) {
        const destroyPromises = [];
        for (const ref of this[kClients].values()) {
          const client = ref.deref();
          if (client) {
            destroyPromises.push(client.destroy(err));
          }
        }
        await Promise.all(destroyPromises);
      }
    };
    module.exports = Agent;
  }
});

// node_modules/undici/lib/api/readable.js
var require_readable = __commonJS({
  "node_modules/undici/lib/api/readable.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var assert = __require("assert");
    var { Readable } = __require("stream");
    var { RequestAbortedError, NotSupportedError, InvalidArgumentError } = require_errors();
    var util = require_util2();
    var { ReadableStreamFrom, toUSVString } = require_util2();
    var Blob2;
    var kConsume = Symbol("kConsume");
    var kReading = Symbol("kReading");
    var kBody = Symbol("kBody");
    var kAbort = Symbol("abort");
    var kContentType = Symbol("kContentType");
    var noop = /* @__PURE__ */ __name(() => {
    }, "noop");
    module.exports = class BodyReadable extends Readable {
      static {
        __name(this, "BodyReadable");
      }
      constructor({
        resume,
        abort,
        contentType = "",
        highWaterMark = 64 * 1024
        // Same as nodejs fs streams.
      }) {
        super({
          autoDestroy: true,
          read: resume,
          highWaterMark
        });
        this._readableState.dataEmitted = false;
        this[kAbort] = abort;
        this[kConsume] = null;
        this[kBody] = null;
        this[kContentType] = contentType;
        this[kReading] = false;
      }
      destroy(err) {
        if (this.destroyed) {
          return this;
        }
        if (!err && !this._readableState.endEmitted) {
          err = new RequestAbortedError();
        }
        if (err) {
          this[kAbort]();
        }
        return super.destroy(err);
      }
      emit(ev, ...args) {
        if (ev === "data") {
          this._readableState.dataEmitted = true;
        } else if (ev === "error") {
          this._readableState.errorEmitted = true;
        }
        return super.emit(ev, ...args);
      }
      on(ev, ...args) {
        if (ev === "data" || ev === "readable") {
          this[kReading] = true;
        }
        return super.on(ev, ...args);
      }
      addListener(ev, ...args) {
        return this.on(ev, ...args);
      }
      off(ev, ...args) {
        const ret = super.off(ev, ...args);
        if (ev === "data" || ev === "readable") {
          this[kReading] = this.listenerCount("data") > 0 || this.listenerCount("readable") > 0;
        }
        return ret;
      }
      removeListener(ev, ...args) {
        return this.off(ev, ...args);
      }
      push(chunk) {
        if (this[kConsume] && chunk !== null && this.readableLength === 0) {
          consumePush(this[kConsume], chunk);
          return this[kReading] ? super.push(chunk) : true;
        }
        return super.push(chunk);
      }
      // https://fetch.spec.whatwg.org/#dom-body-text
      async text() {
        return consume(this, "text");
      }
      // https://fetch.spec.whatwg.org/#dom-body-json
      async json() {
        return consume(this, "json");
      }
      // https://fetch.spec.whatwg.org/#dom-body-blob
      async blob() {
        return consume(this, "blob");
      }
      // https://fetch.spec.whatwg.org/#dom-body-arraybuffer
      async arrayBuffer() {
        return consume(this, "arrayBuffer");
      }
      // https://fetch.spec.whatwg.org/#dom-body-formdata
      async formData() {
        throw new NotSupportedError();
      }
      // https://fetch.spec.whatwg.org/#dom-body-bodyused
      get bodyUsed() {
        return util.isDisturbed(this);
      }
      // https://fetch.spec.whatwg.org/#dom-body-body
      get body() {
        if (!this[kBody]) {
          this[kBody] = ReadableStreamFrom(this);
          if (this[kConsume]) {
            this[kBody].getReader();
            assert(this[kBody].locked);
          }
        }
        return this[kBody];
      }
      dump(opts) {
        let limit = opts && Number.isFinite(opts.limit) ? opts.limit : 262144;
        const signal = opts && opts.signal;
        if (signal) {
          try {
            if (typeof signal !== "object" || !("aborted" in signal)) {
              throw new InvalidArgumentError("signal must be an AbortSignal");
            }
            util.throwIfAborted(signal);
          } catch (err) {
            return Promise.reject(err);
          }
        }
        if (this.closed) {
          return Promise.resolve(null);
        }
        return new Promise((resolve, reject) => {
          const signalListenerCleanup = signal ? util.addAbortListener(signal, () => {
            this.destroy();
          }) : noop;
          this.on("close", function() {
            signalListenerCleanup();
            if (signal && signal.aborted) {
              reject(signal.reason || Object.assign(new Error("The operation was aborted"), { name: "AbortError" }));
            } else {
              resolve(null);
            }
          }).on("error", noop).on("data", function(chunk) {
            limit -= chunk.length;
            if (limit <= 0) {
              this.destroy();
            }
          }).resume();
        });
      }
    };
    function isLocked(self2) {
      return self2[kBody] && self2[kBody].locked === true || self2[kConsume];
    }
    __name(isLocked, "isLocked");
    function isUnusable(self2) {
      return util.isDisturbed(self2) || isLocked(self2);
    }
    __name(isUnusable, "isUnusable");
    async function consume(stream, type) {
      if (isUnusable(stream)) {
        throw new TypeError("unusable");
      }
      assert(!stream[kConsume]);
      return new Promise((resolve, reject) => {
        stream[kConsume] = {
          type,
          stream,
          resolve,
          reject,
          length: 0,
          body: []
        };
        stream.on("error", function(err) {
          consumeFinish(this[kConsume], err);
        }).on("close", function() {
          if (this[kConsume].body !== null) {
            consumeFinish(this[kConsume], new RequestAbortedError());
          }
        });
        process.nextTick(consumeStart, stream[kConsume]);
      });
    }
    __name(consume, "consume");
    function consumeStart(consume2) {
      if (consume2.body === null) {
        return;
      }
      const { _readableState: state } = consume2.stream;
      for (const chunk of state.buffer) {
        consumePush(consume2, chunk);
      }
      if (state.endEmitted) {
        consumeEnd(this[kConsume]);
      } else {
        consume2.stream.on("end", function() {
          consumeEnd(this[kConsume]);
        });
      }
      consume2.stream.resume();
      while (consume2.stream.read() != null) {
      }
    }
    __name(consumeStart, "consumeStart");
    function consumeEnd(consume2) {
      const { type, body, resolve, stream, length } = consume2;
      try {
        if (type === "text") {
          resolve(toUSVString(Buffer.concat(body)));
        } else if (type === "json") {
          resolve(JSON.parse(Buffer.concat(body)));
        } else if (type === "arrayBuffer") {
          const dst = new Uint8Array(length);
          let pos = 0;
          for (const buf of body) {
            dst.set(buf, pos);
            pos += buf.byteLength;
          }
          resolve(dst.buffer);
        } else if (type === "blob") {
          if (!Blob2) {
            Blob2 = __require("buffer").Blob;
          }
          resolve(new Blob2(body, { type: stream[kContentType] }));
        }
        consumeFinish(consume2);
      } catch (err) {
        stream.destroy(err);
      }
    }
    __name(consumeEnd, "consumeEnd");
    function consumePush(consume2, chunk) {
      consume2.length += chunk.length;
      consume2.body.push(chunk);
    }
    __name(consumePush, "consumePush");
    function consumeFinish(consume2, err) {
      if (consume2.body === null) {
        return;
      }
      if (err) {
        consume2.reject(err);
      } else {
        consume2.resolve();
      }
      consume2.type = null;
      consume2.stream = null;
      consume2.resolve = null;
      consume2.reject = null;
      consume2.length = 0;
      consume2.body = null;
    }
    __name(consumeFinish, "consumeFinish");
  }
});

// node_modules/undici/lib/api/util.js
var require_util4 = __commonJS({
  "node_modules/undici/lib/api/util.js"(exports, module) {
    init_cjs_shim();
    var assert = __require("assert");
    var {
      ResponseStatusCodeError
    } = require_errors();
    var { toUSVString } = require_util2();
    async function getResolveErrorBodyCallback({ callback, body, contentType, statusCode, statusMessage, headers }) {
      assert(body);
      let chunks = [];
      let limit = 0;
      for await (const chunk of body) {
        chunks.push(chunk);
        limit += chunk.length;
        if (limit > 128 * 1024) {
          chunks = null;
          break;
        }
      }
      if (statusCode === 204 || !contentType || !chunks) {
        process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers));
        return;
      }
      try {
        if (contentType.startsWith("application/json")) {
          const payload = JSON.parse(toUSVString(Buffer.concat(chunks)));
          process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers, payload));
          return;
        }
        if (contentType.startsWith("text/")) {
          const payload = toUSVString(Buffer.concat(chunks));
          process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers, payload));
          return;
        }
      } catch (err) {
      }
      process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers));
    }
    __name(getResolveErrorBodyCallback, "getResolveErrorBodyCallback");
    module.exports = { getResolveErrorBodyCallback };
  }
});

// node_modules/undici/lib/api/abort-signal.js
var require_abort_signal = __commonJS({
  "node_modules/undici/lib/api/abort-signal.js"(exports, module) {
    init_cjs_shim();
    var { addAbortListener } = require_util2();
    var { RequestAbortedError } = require_errors();
    var kListener = Symbol("kListener");
    var kSignal = Symbol("kSignal");
    function abort(self2) {
      if (self2.abort) {
        self2.abort();
      } else {
        self2.onError(new RequestAbortedError());
      }
    }
    __name(abort, "abort");
    function addSignal(self2, signal) {
      self2[kSignal] = null;
      self2[kListener] = null;
      if (!signal) {
        return;
      }
      if (signal.aborted) {
        abort(self2);
        return;
      }
      self2[kSignal] = signal;
      self2[kListener] = () => {
        abort(self2);
      };
      addAbortListener(self2[kSignal], self2[kListener]);
    }
    __name(addSignal, "addSignal");
    function removeSignal(self2) {
      if (!self2[kSignal]) {
        return;
      }
      if ("removeEventListener" in self2[kSignal]) {
        self2[kSignal].removeEventListener("abort", self2[kListener]);
      } else {
        self2[kSignal].removeListener("abort", self2[kListener]);
      }
      self2[kSignal] = null;
      self2[kListener] = null;
    }
    __name(removeSignal, "removeSignal");
    module.exports = {
      addSignal,
      removeSignal
    };
  }
});

// node_modules/undici/lib/api/api-request.js
var require_api_request = __commonJS({
  "node_modules/undici/lib/api/api-request.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var Readable = require_readable();
    var {
      InvalidArgumentError,
      RequestAbortedError
    } = require_errors();
    var util = require_util2();
    var { getResolveErrorBodyCallback } = require_util4();
    var { AsyncResource } = __require("async_hooks");
    var { addSignal, removeSignal } = require_abort_signal();
    var RequestHandler = class extends AsyncResource {
      static {
        __name(this, "RequestHandler");
      }
      constructor(opts, callback) {
        if (!opts || typeof opts !== "object") {
          throw new InvalidArgumentError("invalid opts");
        }
        const { signal, method, opaque, body, onInfo, responseHeaders, throwOnError, highWaterMark } = opts;
        try {
          if (typeof callback !== "function") {
            throw new InvalidArgumentError("invalid callback");
          }
          if (highWaterMark && (typeof highWaterMark !== "number" || highWaterMark < 0)) {
            throw new InvalidArgumentError("invalid highWaterMark");
          }
          if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
            throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
          }
          if (method === "CONNECT") {
            throw new InvalidArgumentError("invalid method");
          }
          if (onInfo && typeof onInfo !== "function") {
            throw new InvalidArgumentError("invalid onInfo callback");
          }
          super("UNDICI_REQUEST");
        } catch (err) {
          if (util.isStream(body)) {
            util.destroy(body.on("error", util.nop), err);
          }
          throw err;
        }
        this.responseHeaders = responseHeaders || null;
        this.opaque = opaque || null;
        this.callback = callback;
        this.res = null;
        this.abort = null;
        this.body = body;
        this.trailers = {};
        this.context = null;
        this.onInfo = onInfo || null;
        this.throwOnError = throwOnError;
        this.highWaterMark = highWaterMark;
        if (util.isStream(body)) {
          body.on("error", (err) => {
            this.onError(err);
          });
        }
        addSignal(this, signal);
      }
      onConnect(abort, context) {
        if (!this.callback) {
          throw new RequestAbortedError();
        }
        this.abort = abort;
        this.context = context;
      }
      onHeaders(statusCode, rawHeaders, resume, statusMessage) {
        const { callback, opaque, abort, context, responseHeaders, highWaterMark } = this;
        const headers = responseHeaders === "raw" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
        if (statusCode < 200) {
          if (this.onInfo) {
            this.onInfo({ statusCode, headers });
          }
          return;
        }
        const parsedHeaders = responseHeaders === "raw" ? util.parseHeaders(rawHeaders) : headers;
        const contentType = parsedHeaders["content-type"];
        const body = new Readable({ resume, abort, contentType, highWaterMark });
        this.callback = null;
        this.res = body;
        if (callback !== null) {
          if (this.throwOnError && statusCode >= 400) {
            this.runInAsyncScope(
              getResolveErrorBodyCallback,
              null,
              { callback, body, contentType, statusCode, statusMessage, headers }
            );
          } else {
            this.runInAsyncScope(callback, null, null, {
              statusCode,
              headers,
              trailers: this.trailers,
              opaque,
              body,
              context
            });
          }
        }
      }
      onData(chunk) {
        const { res } = this;
        return res.push(chunk);
      }
      onComplete(trailers) {
        const { res } = this;
        removeSignal(this);
        util.parseHeaders(trailers, this.trailers);
        res.push(null);
      }
      onError(err) {
        const { res, callback, body, opaque } = this;
        removeSignal(this);
        if (callback) {
          this.callback = null;
          queueMicrotask(() => {
            this.runInAsyncScope(callback, null, err, { opaque });
          });
        }
        if (res) {
          this.res = null;
          queueMicrotask(() => {
            util.destroy(res, err);
          });
        }
        if (body) {
          this.body = null;
          util.destroy(body, err);
        }
      }
    };
    function request(opts, callback) {
      if (callback === void 0) {
        return new Promise((resolve, reject) => {
          request.call(this, opts, (err, data) => {
            return err ? reject(err) : resolve(data);
          });
        });
      }
      try {
        this.dispatch(opts, new RequestHandler(opts, callback));
      } catch (err) {
        if (typeof callback !== "function") {
          throw err;
        }
        const opaque = opts && opts.opaque;
        queueMicrotask(() => callback(err, { opaque }));
      }
    }
    __name(request, "request");
    module.exports = request;
    module.exports.RequestHandler = RequestHandler;
  }
});

// node_modules/undici/lib/api/api-stream.js
var require_api_stream = __commonJS({
  "node_modules/undici/lib/api/api-stream.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var { finished, PassThrough } = __require("stream");
    var {
      InvalidArgumentError,
      InvalidReturnValueError,
      RequestAbortedError
    } = require_errors();
    var util = require_util2();
    var { getResolveErrorBodyCallback } = require_util4();
    var { AsyncResource } = __require("async_hooks");
    var { addSignal, removeSignal } = require_abort_signal();
    var StreamHandler = class extends AsyncResource {
      static {
        __name(this, "StreamHandler");
      }
      constructor(opts, factory, callback) {
        if (!opts || typeof opts !== "object") {
          throw new InvalidArgumentError("invalid opts");
        }
        const { signal, method, opaque, body, onInfo, responseHeaders, throwOnError } = opts;
        try {
          if (typeof callback !== "function") {
            throw new InvalidArgumentError("invalid callback");
          }
          if (typeof factory !== "function") {
            throw new InvalidArgumentError("invalid factory");
          }
          if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
            throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
          }
          if (method === "CONNECT") {
            throw new InvalidArgumentError("invalid method");
          }
          if (onInfo && typeof onInfo !== "function") {
            throw new InvalidArgumentError("invalid onInfo callback");
          }
          super("UNDICI_STREAM");
        } catch (err) {
          if (util.isStream(body)) {
            util.destroy(body.on("error", util.nop), err);
          }
          throw err;
        }
        this.responseHeaders = responseHeaders || null;
        this.opaque = opaque || null;
        this.factory = factory;
        this.callback = callback;
        this.res = null;
        this.abort = null;
        this.context = null;
        this.trailers = null;
        this.body = body;
        this.onInfo = onInfo || null;
        this.throwOnError = throwOnError || false;
        if (util.isStream(body)) {
          body.on("error", (err) => {
            this.onError(err);
          });
        }
        addSignal(this, signal);
      }
      onConnect(abort, context) {
        if (!this.callback) {
          throw new RequestAbortedError();
        }
        this.abort = abort;
        this.context = context;
      }
      onHeaders(statusCode, rawHeaders, resume, statusMessage) {
        const { factory, opaque, context, callback, responseHeaders } = this;
        const headers = responseHeaders === "raw" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
        if (statusCode < 200) {
          if (this.onInfo) {
            this.onInfo({ statusCode, headers });
          }
          return;
        }
        this.factory = null;
        let res;
        if (this.throwOnError && statusCode >= 400) {
          const parsedHeaders = responseHeaders === "raw" ? util.parseHeaders(rawHeaders) : headers;
          const contentType = parsedHeaders["content-type"];
          res = new PassThrough();
          this.callback = null;
          this.runInAsyncScope(
            getResolveErrorBodyCallback,
            null,
            { callback, body: res, contentType, statusCode, statusMessage, headers }
          );
        } else {
          if (factory === null) {
            return;
          }
          res = this.runInAsyncScope(factory, null, {
            statusCode,
            headers,
            opaque,
            context
          });
          if (!res || typeof res.write !== "function" || typeof res.end !== "function" || typeof res.on !== "function") {
            throw new InvalidReturnValueError("expected Writable");
          }
          finished(res, { readable: false }, (err) => {
            const { callback: callback2, res: res2, opaque: opaque2, trailers, abort } = this;
            this.res = null;
            if (err || !res2.readable) {
              util.destroy(res2, err);
            }
            this.callback = null;
            this.runInAsyncScope(callback2, null, err || null, { opaque: opaque2, trailers });
            if (err) {
              abort();
            }
          });
        }
        res.on("drain", resume);
        this.res = res;
        const needDrain = res.writableNeedDrain !== void 0 ? res.writableNeedDrain : res._writableState && res._writableState.needDrain;
        return needDrain !== true;
      }
      onData(chunk) {
        const { res } = this;
        return res ? res.write(chunk) : true;
      }
      onComplete(trailers) {
        const { res } = this;
        removeSignal(this);
        if (!res) {
          return;
        }
        this.trailers = util.parseHeaders(trailers);
        res.end();
      }
      onError(err) {
        const { res, callback, opaque, body } = this;
        removeSignal(this);
        this.factory = null;
        if (res) {
          this.res = null;
          util.destroy(res, err);
        } else if (callback) {
          this.callback = null;
          queueMicrotask(() => {
            this.runInAsyncScope(callback, null, err, { opaque });
          });
        }
        if (body) {
          this.body = null;
          util.destroy(body, err);
        }
      }
    };
    function stream(opts, factory, callback) {
      if (callback === void 0) {
        return new Promise((resolve, reject) => {
          stream.call(this, opts, factory, (err, data) => {
            return err ? reject(err) : resolve(data);
          });
        });
      }
      try {
        this.dispatch(opts, new StreamHandler(opts, factory, callback));
      } catch (err) {
        if (typeof callback !== "function") {
          throw err;
        }
        const opaque = opts && opts.opaque;
        queueMicrotask(() => callback(err, { opaque }));
      }
    }
    __name(stream, "stream");
    module.exports = stream;
  }
});

// node_modules/undici/lib/api/api-pipeline.js
var require_api_pipeline = __commonJS({
  "node_modules/undici/lib/api/api-pipeline.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var {
      Readable,
      Duplex,
      PassThrough
    } = __require("stream");
    var {
      InvalidArgumentError,
      InvalidReturnValueError,
      RequestAbortedError
    } = require_errors();
    var util = require_util2();
    var { AsyncResource } = __require("async_hooks");
    var { addSignal, removeSignal } = require_abort_signal();
    var assert = __require("assert");
    var kResume = Symbol("resume");
    var PipelineRequest = class extends Readable {
      static {
        __name(this, "PipelineRequest");
      }
      constructor() {
        super({ autoDestroy: true });
        this[kResume] = null;
      }
      _read() {
        const { [kResume]: resume } = this;
        if (resume) {
          this[kResume] = null;
          resume();
        }
      }
      _destroy(err, callback) {
        this._read();
        callback(err);
      }
    };
    var PipelineResponse = class extends Readable {
      static {
        __name(this, "PipelineResponse");
      }
      constructor(resume) {
        super({ autoDestroy: true });
        this[kResume] = resume;
      }
      _read() {
        this[kResume]();
      }
      _destroy(err, callback) {
        if (!err && !this._readableState.endEmitted) {
          err = new RequestAbortedError();
        }
        callback(err);
      }
    };
    var PipelineHandler = class extends AsyncResource {
      static {
        __name(this, "PipelineHandler");
      }
      constructor(opts, handler) {
        if (!opts || typeof opts !== "object") {
          throw new InvalidArgumentError("invalid opts");
        }
        if (typeof handler !== "function") {
          throw new InvalidArgumentError("invalid handler");
        }
        const { signal, method, opaque, onInfo, responseHeaders } = opts;
        if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
          throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
        }
        if (method === "CONNECT") {
          throw new InvalidArgumentError("invalid method");
        }
        if (onInfo && typeof onInfo !== "function") {
          throw new InvalidArgumentError("invalid onInfo callback");
        }
        super("UNDICI_PIPELINE");
        this.opaque = opaque || null;
        this.responseHeaders = responseHeaders || null;
        this.handler = handler;
        this.abort = null;
        this.context = null;
        this.onInfo = onInfo || null;
        this.req = new PipelineRequest().on("error", util.nop);
        this.ret = new Duplex({
          readableObjectMode: opts.objectMode,
          autoDestroy: true,
          read: /* @__PURE__ */ __name(() => {
            const { body } = this;
            if (body && body.resume) {
              body.resume();
            }
          }, "read"),
          write: /* @__PURE__ */ __name((chunk, encoding, callback) => {
            const { req } = this;
            if (req.push(chunk, encoding) || req._readableState.destroyed) {
              callback();
            } else {
              req[kResume] = callback;
            }
          }, "write"),
          destroy: /* @__PURE__ */ __name((err, callback) => {
            const { body, req, res, ret, abort } = this;
            if (!err && !ret._readableState.endEmitted) {
              err = new RequestAbortedError();
            }
            if (abort && err) {
              abort();
            }
            util.destroy(body, err);
            util.destroy(req, err);
            util.destroy(res, err);
            removeSignal(this);
            callback(err);
          }, "destroy")
        }).on("prefinish", () => {
          const { req } = this;
          req.push(null);
        });
        this.res = null;
        addSignal(this, signal);
      }
      onConnect(abort, context) {
        const { ret, res } = this;
        assert(!res, "pipeline cannot be retried");
        if (ret.destroyed) {
          throw new RequestAbortedError();
        }
        this.abort = abort;
        this.context = context;
      }
      onHeaders(statusCode, rawHeaders, resume) {
        const { opaque, handler, context } = this;
        if (statusCode < 200) {
          if (this.onInfo) {
            const headers = this.responseHeaders === "raw" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
            this.onInfo({ statusCode, headers });
          }
          return;
        }
        this.res = new PipelineResponse(resume);
        let body;
        try {
          this.handler = null;
          const headers = this.responseHeaders === "raw" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
          body = this.runInAsyncScope(handler, null, {
            statusCode,
            headers,
            opaque,
            body: this.res,
            context
          });
        } catch (err) {
          this.res.on("error", util.nop);
          throw err;
        }
        if (!body || typeof body.on !== "function") {
          throw new InvalidReturnValueError("expected Readable");
        }
        body.on("data", (chunk) => {
          const { ret, body: body2 } = this;
          if (!ret.push(chunk) && body2.pause) {
            body2.pause();
          }
        }).on("error", (err) => {
          const { ret } = this;
          util.destroy(ret, err);
        }).on("end", () => {
          const { ret } = this;
          ret.push(null);
        }).on("close", () => {
          const { ret } = this;
          if (!ret._readableState.ended) {
            util.destroy(ret, new RequestAbortedError());
          }
        });
        this.body = body;
      }
      onData(chunk) {
        const { res } = this;
        return res.push(chunk);
      }
      onComplete(trailers) {
        const { res } = this;
        res.push(null);
      }
      onError(err) {
        const { ret } = this;
        this.handler = null;
        util.destroy(ret, err);
      }
    };
    function pipeline(opts, handler) {
      try {
        const pipelineHandler = new PipelineHandler(opts, handler);
        this.dispatch({ ...opts, body: pipelineHandler.req }, pipelineHandler);
        return pipelineHandler.ret;
      } catch (err) {
        return new PassThrough().destroy(err);
      }
    }
    __name(pipeline, "pipeline");
    module.exports = pipeline;
  }
});

// node_modules/undici/lib/api/api-upgrade.js
var require_api_upgrade = __commonJS({
  "node_modules/undici/lib/api/api-upgrade.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var { InvalidArgumentError, RequestAbortedError, SocketError } = require_errors();
    var { AsyncResource } = __require("async_hooks");
    var util = require_util2();
    var { addSignal, removeSignal } = require_abort_signal();
    var assert = __require("assert");
    var UpgradeHandler = class extends AsyncResource {
      static {
        __name(this, "UpgradeHandler");
      }
      constructor(opts, callback) {
        if (!opts || typeof opts !== "object") {
          throw new InvalidArgumentError("invalid opts");
        }
        if (typeof callback !== "function") {
          throw new InvalidArgumentError("invalid callback");
        }
        const { signal, opaque, responseHeaders } = opts;
        if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
          throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
        }
        super("UNDICI_UPGRADE");
        this.responseHeaders = responseHeaders || null;
        this.opaque = opaque || null;
        this.callback = callback;
        this.abort = null;
        this.context = null;
        addSignal(this, signal);
      }
      onConnect(abort, context) {
        if (!this.callback) {
          throw new RequestAbortedError();
        }
        this.abort = abort;
        this.context = null;
      }
      onHeaders() {
        throw new SocketError("bad upgrade", null);
      }
      onUpgrade(statusCode, rawHeaders, socket) {
        const { callback, opaque, context } = this;
        assert.strictEqual(statusCode, 101);
        removeSignal(this);
        this.callback = null;
        const headers = this.responseHeaders === "raw" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
        this.runInAsyncScope(callback, null, null, {
          headers,
          socket,
          opaque,
          context
        });
      }
      onError(err) {
        const { callback, opaque } = this;
        removeSignal(this);
        if (callback) {
          this.callback = null;
          queueMicrotask(() => {
            this.runInAsyncScope(callback, null, err, { opaque });
          });
        }
      }
    };
    function upgrade(opts, callback) {
      if (callback === void 0) {
        return new Promise((resolve, reject) => {
          upgrade.call(this, opts, (err, data) => {
            return err ? reject(err) : resolve(data);
          });
        });
      }
      try {
        const upgradeHandler = new UpgradeHandler(opts, callback);
        this.dispatch({
          ...opts,
          method: opts.method || "GET",
          upgrade: opts.protocol || "Websocket"
        }, upgradeHandler);
      } catch (err) {
        if (typeof callback !== "function") {
          throw err;
        }
        const opaque = opts && opts.opaque;
        queueMicrotask(() => callback(err, { opaque }));
      }
    }
    __name(upgrade, "upgrade");
    module.exports = upgrade;
  }
});

// node_modules/undici/lib/api/api-connect.js
var require_api_connect = __commonJS({
  "node_modules/undici/lib/api/api-connect.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var { AsyncResource } = __require("async_hooks");
    var { InvalidArgumentError, RequestAbortedError, SocketError } = require_errors();
    var util = require_util2();
    var { addSignal, removeSignal } = require_abort_signal();
    var ConnectHandler = class extends AsyncResource {
      static {
        __name(this, "ConnectHandler");
      }
      constructor(opts, callback) {
        if (!opts || typeof opts !== "object") {
          throw new InvalidArgumentError("invalid opts");
        }
        if (typeof callback !== "function") {
          throw new InvalidArgumentError("invalid callback");
        }
        const { signal, opaque, responseHeaders } = opts;
        if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
          throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
        }
        super("UNDICI_CONNECT");
        this.opaque = opaque || null;
        this.responseHeaders = responseHeaders || null;
        this.callback = callback;
        this.abort = null;
        addSignal(this, signal);
      }
      onConnect(abort, context) {
        if (!this.callback) {
          throw new RequestAbortedError();
        }
        this.abort = abort;
        this.context = context;
      }
      onHeaders() {
        throw new SocketError("bad connect", null);
      }
      onUpgrade(statusCode, rawHeaders, socket) {
        const { callback, opaque, context } = this;
        removeSignal(this);
        this.callback = null;
        let headers = rawHeaders;
        if (headers != null) {
          headers = this.responseHeaders === "raw" ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders);
        }
        this.runInAsyncScope(callback, null, null, {
          statusCode,
          headers,
          socket,
          opaque,
          context
        });
      }
      onError(err) {
        const { callback, opaque } = this;
        removeSignal(this);
        if (callback) {
          this.callback = null;
          queueMicrotask(() => {
            this.runInAsyncScope(callback, null, err, { opaque });
          });
        }
      }
    };
    function connect(opts, callback) {
      if (callback === void 0) {
        return new Promise((resolve, reject) => {
          connect.call(this, opts, (err, data) => {
            return err ? reject(err) : resolve(data);
          });
        });
      }
      try {
        const connectHandler = new ConnectHandler(opts, callback);
        this.dispatch({ ...opts, method: "CONNECT" }, connectHandler);
      } catch (err) {
        if (typeof callback !== "function") {
          throw err;
        }
        const opaque = opts && opts.opaque;
        queueMicrotask(() => callback(err, { opaque }));
      }
    }
    __name(connect, "connect");
    module.exports = connect;
  }
});

// node_modules/undici/lib/api/index.js
var require_api = __commonJS({
  "node_modules/undici/lib/api/index.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    module.exports.request = require_api_request();
    module.exports.stream = require_api_stream();
    module.exports.pipeline = require_api_pipeline();
    module.exports.upgrade = require_api_upgrade();
    module.exports.connect = require_api_connect();
  }
});

// node_modules/undici/lib/mock/mock-errors.js
var require_mock_errors = __commonJS({
  "node_modules/undici/lib/mock/mock-errors.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var { UndiciError } = require_errors();
    var MockNotMatchedError = class _MockNotMatchedError extends UndiciError {
      static {
        __name(this, "MockNotMatchedError");
      }
      constructor(message) {
        super(message);
        Error.captureStackTrace(this, _MockNotMatchedError);
        this.name = "MockNotMatchedError";
        this.message = message || "The request does not match any registered mock dispatches";
        this.code = "UND_MOCK_ERR_MOCK_NOT_MATCHED";
      }
    };
    module.exports = {
      MockNotMatchedError
    };
  }
});

// node_modules/undici/lib/mock/mock-symbols.js
var require_mock_symbols = __commonJS({
  "node_modules/undici/lib/mock/mock-symbols.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    module.exports = {
      kAgent: Symbol("agent"),
      kOptions: Symbol("options"),
      kFactory: Symbol("factory"),
      kDispatches: Symbol("dispatches"),
      kDispatchKey: Symbol("dispatch key"),
      kDefaultHeaders: Symbol("default headers"),
      kDefaultTrailers: Symbol("default trailers"),
      kContentLength: Symbol("content length"),
      kMockAgent: Symbol("mock agent"),
      kMockAgentSet: Symbol("mock agent set"),
      kMockAgentGet: Symbol("mock agent get"),
      kMockDispatch: Symbol("mock dispatch"),
      kClose: Symbol("close"),
      kOriginalClose: Symbol("original agent close"),
      kOrigin: Symbol("origin"),
      kIsMockActive: Symbol("is mock active"),
      kNetConnect: Symbol("net connect"),
      kGetNetConnect: Symbol("get net connect"),
      kConnected: Symbol("connected")
    };
  }
});

// node_modules/undici/lib/mock/mock-utils.js
var require_mock_utils = __commonJS({
  "node_modules/undici/lib/mock/mock-utils.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var { MockNotMatchedError } = require_mock_errors();
    var {
      kDispatches,
      kMockAgent,
      kOriginalDispatch,
      kOrigin,
      kGetNetConnect
    } = require_mock_symbols();
    var { buildURL, nop } = require_util2();
    var { STATUS_CODES } = __require("http");
    var {
      types: {
        isPromise
      }
    } = __require("util");
    function matchValue(match, value) {
      if (typeof match === "string") {
        return match === value;
      }
      if (match instanceof RegExp) {
        return match.test(value);
      }
      if (typeof match === "function") {
        return match(value) === true;
      }
      return false;
    }
    __name(matchValue, "matchValue");
    function lowerCaseEntries(headers) {
      return Object.fromEntries(
        Object.entries(headers).map(([headerName, headerValue]) => {
          return [headerName.toLocaleLowerCase(), headerValue];
        })
      );
    }
    __name(lowerCaseEntries, "lowerCaseEntries");
    function getHeaderByName(headers, key) {
      if (Array.isArray(headers)) {
        for (let i = 0; i < headers.length; i += 2) {
          if (headers[i].toLocaleLowerCase() === key.toLocaleLowerCase()) {
            return headers[i + 1];
          }
        }
        return void 0;
      } else if (typeof headers.get === "function") {
        return headers.get(key);
      } else {
        return lowerCaseEntries(headers)[key.toLocaleLowerCase()];
      }
    }
    __name(getHeaderByName, "getHeaderByName");
    function buildHeadersFromArray(headers) {
      const clone = headers.slice();
      const entries = [];
      for (let index = 0; index < clone.length; index += 2) {
        entries.push([clone[index], clone[index + 1]]);
      }
      return Object.fromEntries(entries);
    }
    __name(buildHeadersFromArray, "buildHeadersFromArray");
    function matchHeaders(mockDispatch2, headers) {
      if (typeof mockDispatch2.headers === "function") {
        if (Array.isArray(headers)) {
          headers = buildHeadersFromArray(headers);
        }
        return mockDispatch2.headers(headers ? lowerCaseEntries(headers) : {});
      }
      if (typeof mockDispatch2.headers === "undefined") {
        return true;
      }
      if (typeof headers !== "object" || typeof mockDispatch2.headers !== "object") {
        return false;
      }
      for (const [matchHeaderName, matchHeaderValue] of Object.entries(mockDispatch2.headers)) {
        const headerValue = getHeaderByName(headers, matchHeaderName);
        if (!matchValue(matchHeaderValue, headerValue)) {
          return false;
        }
      }
      return true;
    }
    __name(matchHeaders, "matchHeaders");
    function safeUrl(path5) {
      if (typeof path5 !== "string") {
        return path5;
      }
      const pathSegments = path5.split("?");
      if (pathSegments.length !== 2) {
        return path5;
      }
      const qp = new URLSearchParams(pathSegments.pop());
      qp.sort();
      return [...pathSegments, qp.toString()].join("?");
    }
    __name(safeUrl, "safeUrl");
    function matchKey(mockDispatch2, { path: path5, method, body, headers }) {
      const pathMatch = matchValue(mockDispatch2.path, path5);
      const methodMatch = matchValue(mockDispatch2.method, method);
      const bodyMatch = typeof mockDispatch2.body !== "undefined" ? matchValue(mockDispatch2.body, body) : true;
      const headersMatch = matchHeaders(mockDispatch2, headers);
      return pathMatch && methodMatch && bodyMatch && headersMatch;
    }
    __name(matchKey, "matchKey");
    function getResponseData(data) {
      if (Buffer.isBuffer(data)) {
        return data;
      } else if (typeof data === "object") {
        return JSON.stringify(data);
      } else {
        return data.toString();
      }
    }
    __name(getResponseData, "getResponseData");
    function getMockDispatch(mockDispatches, key) {
      const basePath = key.query ? buildURL(key.path, key.query) : key.path;
      const resolvedPath = typeof basePath === "string" ? safeUrl(basePath) : basePath;
      let matchedMockDispatches = mockDispatches.filter(({ consumed }) => !consumed).filter(({ path: path5 }) => matchValue(safeUrl(path5), resolvedPath));
      if (matchedMockDispatches.length === 0) {
        throw new MockNotMatchedError(`Mock dispatch not matched for path '${resolvedPath}'`);
      }
      matchedMockDispatches = matchedMockDispatches.filter(({ method }) => matchValue(method, key.method));
      if (matchedMockDispatches.length === 0) {
        throw new MockNotMatchedError(`Mock dispatch not matched for method '${key.method}'`);
      }
      matchedMockDispatches = matchedMockDispatches.filter(({ body }) => typeof body !== "undefined" ? matchValue(body, key.body) : true);
      if (matchedMockDispatches.length === 0) {
        throw new MockNotMatchedError(`Mock dispatch not matched for body '${key.body}'`);
      }
      matchedMockDispatches = matchedMockDispatches.filter((mockDispatch2) => matchHeaders(mockDispatch2, key.headers));
      if (matchedMockDispatches.length === 0) {
        throw new MockNotMatchedError(`Mock dispatch not matched for headers '${typeof key.headers === "object" ? JSON.stringify(key.headers) : key.headers}'`);
      }
      return matchedMockDispatches[0];
    }
    __name(getMockDispatch, "getMockDispatch");
    function addMockDispatch(mockDispatches, key, data) {
      const baseData = { timesInvoked: 0, times: 1, persist: false, consumed: false };
      const replyData = typeof data === "function" ? { callback: data } : { ...data };
      const newMockDispatch = { ...baseData, ...key, pending: true, data: { error: null, ...replyData } };
      mockDispatches.push(newMockDispatch);
      return newMockDispatch;
    }
    __name(addMockDispatch, "addMockDispatch");
    function deleteMockDispatch(mockDispatches, key) {
      const index = mockDispatches.findIndex((dispatch) => {
        if (!dispatch.consumed) {
          return false;
        }
        return matchKey(dispatch, key);
      });
      if (index !== -1) {
        mockDispatches.splice(index, 1);
      }
    }
    __name(deleteMockDispatch, "deleteMockDispatch");
    function buildKey(opts) {
      const { path: path5, method, body, headers, query } = opts;
      return {
        path: path5,
        method,
        body,
        headers,
        query
      };
    }
    __name(buildKey, "buildKey");
    function generateKeyValues(data) {
      return Object.entries(data).reduce((keyValuePairs, [key, value]) => [
        ...keyValuePairs,
        Buffer.from(`${key}`),
        Array.isArray(value) ? value.map((x) => Buffer.from(`${x}`)) : Buffer.from(`${value}`)
      ], []);
    }
    __name(generateKeyValues, "generateKeyValues");
    function getStatusText(statusCode) {
      return STATUS_CODES[statusCode] || "unknown";
    }
    __name(getStatusText, "getStatusText");
    async function getResponse(body) {
      const buffers = [];
      for await (const data of body) {
        buffers.push(data);
      }
      return Buffer.concat(buffers).toString("utf8");
    }
    __name(getResponse, "getResponse");
    function mockDispatch(opts, handler) {
      const key = buildKey(opts);
      const mockDispatch2 = getMockDispatch(this[kDispatches], key);
      mockDispatch2.timesInvoked++;
      if (mockDispatch2.data.callback) {
        mockDispatch2.data = { ...mockDispatch2.data, ...mockDispatch2.data.callback(opts) };
      }
      const { data: { statusCode, data, headers, trailers, error }, delay, persist } = mockDispatch2;
      const { timesInvoked, times } = mockDispatch2;
      mockDispatch2.consumed = !persist && timesInvoked >= times;
      mockDispatch2.pending = timesInvoked < times;
      if (error !== null) {
        deleteMockDispatch(this[kDispatches], key);
        handler.onError(error);
        return true;
      }
      if (typeof delay === "number" && delay > 0) {
        setTimeout(() => {
          handleReply(this[kDispatches]);
        }, delay);
      } else {
        handleReply(this[kDispatches]);
      }
      function handleReply(mockDispatches, _data = data) {
        const optsHeaders = Array.isArray(opts.headers) ? buildHeadersFromArray(opts.headers) : opts.headers;
        const body = typeof _data === "function" ? _data({ ...opts, headers: optsHeaders }) : _data;
        if (isPromise(body)) {
          body.then((newData) => handleReply(mockDispatches, newData));
          return;
        }
        const responseData = getResponseData(body);
        const responseHeaders = generateKeyValues(headers);
        const responseTrailers = generateKeyValues(trailers);
        handler.abort = nop;
        handler.onHeaders(statusCode, responseHeaders, resume, getStatusText(statusCode));
        handler.onData(Buffer.from(responseData));
        handler.onComplete(responseTrailers);
        deleteMockDispatch(mockDispatches, key);
      }
      __name(handleReply, "handleReply");
      function resume() {
      }
      __name(resume, "resume");
      return true;
    }
    __name(mockDispatch, "mockDispatch");
    function buildMockDispatch() {
      const agent = this[kMockAgent];
      const origin = this[kOrigin];
      const originalDispatch = this[kOriginalDispatch];
      return /* @__PURE__ */ __name(function dispatch(opts, handler) {
        if (agent.isMockActive) {
          try {
            mockDispatch.call(this, opts, handler);
          } catch (error) {
            if (error instanceof MockNotMatchedError) {
              const netConnect = agent[kGetNetConnect]();
              if (netConnect === false) {
                throw new MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect disabled)`);
              }
              if (checkNetConnect(netConnect, origin)) {
                originalDispatch.call(this, opts, handler);
              } else {
                throw new MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect is not enabled for this origin)`);
              }
            } else {
              throw error;
            }
          }
        } else {
          originalDispatch.call(this, opts, handler);
        }
      }, "dispatch");
    }
    __name(buildMockDispatch, "buildMockDispatch");
    function checkNetConnect(netConnect, origin) {
      const url2 = new URL(origin);
      if (netConnect === true) {
        return true;
      } else if (Array.isArray(netConnect) && netConnect.some((matcher) => matchValue(matcher, url2.host))) {
        return true;
      }
      return false;
    }
    __name(checkNetConnect, "checkNetConnect");
    function buildMockOptions(opts) {
      if (opts) {
        const { agent, ...mockOptions } = opts;
        return mockOptions;
      }
    }
    __name(buildMockOptions, "buildMockOptions");
    module.exports = {
      getResponseData,
      getMockDispatch,
      addMockDispatch,
      deleteMockDispatch,
      buildKey,
      generateKeyValues,
      matchValue,
      getResponse,
      getStatusText,
      mockDispatch,
      buildMockDispatch,
      checkNetConnect,
      buildMockOptions,
      getHeaderByName
    };
  }
});

// node_modules/undici/lib/mock/mock-interceptor.js
var require_mock_interceptor = __commonJS({
  "node_modules/undici/lib/mock/mock-interceptor.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var { getResponseData, buildKey, addMockDispatch } = require_mock_utils();
    var {
      kDispatches,
      kDispatchKey,
      kDefaultHeaders,
      kDefaultTrailers,
      kContentLength,
      kMockDispatch
    } = require_mock_symbols();
    var { InvalidArgumentError } = require_errors();
    var { buildURL } = require_util2();
    var MockScope = class {
      static {
        __name(this, "MockScope");
      }
      constructor(mockDispatch) {
        this[kMockDispatch] = mockDispatch;
      }
      /**
       * Delay a reply by a set amount in ms.
       */
      delay(waitInMs) {
        if (typeof waitInMs !== "number" || !Number.isInteger(waitInMs) || waitInMs <= 0) {
          throw new InvalidArgumentError("waitInMs must be a valid integer > 0");
        }
        this[kMockDispatch].delay = waitInMs;
        return this;
      }
      /**
       * For a defined reply, never mark as consumed.
       */
      persist() {
        this[kMockDispatch].persist = true;
        return this;
      }
      /**
       * Allow one to define a reply for a set amount of matching requests.
       */
      times(repeatTimes) {
        if (typeof repeatTimes !== "number" || !Number.isInteger(repeatTimes) || repeatTimes <= 0) {
          throw new InvalidArgumentError("repeatTimes must be a valid integer > 0");
        }
        this[kMockDispatch].times = repeatTimes;
        return this;
      }
    };
    var MockInterceptor = class {
      static {
        __name(this, "MockInterceptor");
      }
      constructor(opts, mockDispatches) {
        if (typeof opts !== "object") {
          throw new InvalidArgumentError("opts must be an object");
        }
        if (typeof opts.path === "undefined") {
          throw new InvalidArgumentError("opts.path must be defined");
        }
        if (typeof opts.method === "undefined") {
          opts.method = "GET";
        }
        if (typeof opts.path === "string") {
          if (opts.query) {
            opts.path = buildURL(opts.path, opts.query);
          } else {
            const parsedURL = new URL(opts.path, "data://");
            opts.path = parsedURL.pathname + parsedURL.search;
          }
        }
        if (typeof opts.method === "string") {
          opts.method = opts.method.toUpperCase();
        }
        this[kDispatchKey] = buildKey(opts);
        this[kDispatches] = mockDispatches;
        this[kDefaultHeaders] = {};
        this[kDefaultTrailers] = {};
        this[kContentLength] = false;
      }
      createMockScopeDispatchData(statusCode, data, responseOptions = {}) {
        const responseData = getResponseData(data);
        const contentLength = this[kContentLength] ? { "content-length": responseData.length } : {};
        const headers = { ...this[kDefaultHeaders], ...contentLength, ...responseOptions.headers };
        const trailers = { ...this[kDefaultTrailers], ...responseOptions.trailers };
        return { statusCode, data, headers, trailers };
      }
      validateReplyParameters(statusCode, data, responseOptions) {
        if (typeof statusCode === "undefined") {
          throw new InvalidArgumentError("statusCode must be defined");
        }
        if (typeof data === "undefined") {
          throw new InvalidArgumentError("data must be defined");
        }
        if (typeof responseOptions !== "object") {
          throw new InvalidArgumentError("responseOptions must be an object");
        }
      }
      /**
       * Mock an undici request with a defined reply.
       */
      reply(replyData) {
        if (typeof replyData === "function") {
          const wrappedDefaultsCallback = /* @__PURE__ */ __name((opts) => {
            const resolvedData = replyData(opts);
            if (typeof resolvedData !== "object") {
              throw new InvalidArgumentError("reply options callback must return an object");
            }
            const { statusCode: statusCode2, data: data2 = "", responseOptions: responseOptions2 = {} } = resolvedData;
            this.validateReplyParameters(statusCode2, data2, responseOptions2);
            return {
              ...this.createMockScopeDispatchData(statusCode2, data2, responseOptions2)
            };
          }, "wrappedDefaultsCallback");
          const newMockDispatch2 = addMockDispatch(this[kDispatches], this[kDispatchKey], wrappedDefaultsCallback);
          return new MockScope(newMockDispatch2);
        }
        const [statusCode, data = "", responseOptions = {}] = [...arguments];
        this.validateReplyParameters(statusCode, data, responseOptions);
        const dispatchData = this.createMockScopeDispatchData(statusCode, data, responseOptions);
        const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], dispatchData);
        return new MockScope(newMockDispatch);
      }
      /**
       * Mock an undici request with a defined error.
       */
      replyWithError(error) {
        if (typeof error === "undefined") {
          throw new InvalidArgumentError("error must be defined");
        }
        const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], { error });
        return new MockScope(newMockDispatch);
      }
      /**
       * Set default reply headers on the interceptor for subsequent replies
       */
      defaultReplyHeaders(headers) {
        if (typeof headers === "undefined") {
          throw new InvalidArgumentError("headers must be defined");
        }
        this[kDefaultHeaders] = headers;
        return this;
      }
      /**
       * Set default reply trailers on the interceptor for subsequent replies
       */
      defaultReplyTrailers(trailers) {
        if (typeof trailers === "undefined") {
          throw new InvalidArgumentError("trailers must be defined");
        }
        this[kDefaultTrailers] = trailers;
        return this;
      }
      /**
       * Set reply content length header for replies on the interceptor
       */
      replyContentLength() {
        this[kContentLength] = true;
        return this;
      }
    };
    module.exports.MockInterceptor = MockInterceptor;
    module.exports.MockScope = MockScope;
  }
});

// node_modules/undici/lib/mock/mock-client.js
var require_mock_client = __commonJS({
  "node_modules/undici/lib/mock/mock-client.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var { promisify } = __require("util");
    var Client = require_client();
    var { buildMockDispatch } = require_mock_utils();
    var {
      kDispatches,
      kMockAgent,
      kClose,
      kOriginalClose,
      kOrigin,
      kOriginalDispatch,
      kConnected
    } = require_mock_symbols();
    var { MockInterceptor } = require_mock_interceptor();
    var Symbols = require_symbols();
    var { InvalidArgumentError } = require_errors();
    var MockClient = class extends Client {
      static {
        __name(this, "MockClient");
      }
      constructor(origin, opts) {
        super(origin, opts);
        if (!opts || !opts.agent || typeof opts.agent.dispatch !== "function") {
          throw new InvalidArgumentError("Argument opts.agent must implement Agent");
        }
        this[kMockAgent] = opts.agent;
        this[kOrigin] = origin;
        this[kDispatches] = [];
        this[kConnected] = 1;
        this[kOriginalDispatch] = this.dispatch;
        this[kOriginalClose] = this.close.bind(this);
        this.dispatch = buildMockDispatch.call(this);
        this.close = this[kClose];
      }
      get [Symbols.kConnected]() {
        return this[kConnected];
      }
      /**
       * Sets up the base interceptor for mocking replies from undici.
       */
      intercept(opts) {
        return new MockInterceptor(opts, this[kDispatches]);
      }
      async [kClose]() {
        await promisify(this[kOriginalClose])();
        this[kConnected] = 0;
        this[kMockAgent][Symbols.kClients].delete(this[kOrigin]);
      }
    };
    module.exports = MockClient;
  }
});

// node_modules/undici/lib/mock/mock-pool.js
var require_mock_pool = __commonJS({
  "node_modules/undici/lib/mock/mock-pool.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var { promisify } = __require("util");
    var Pool = require_pool();
    var { buildMockDispatch } = require_mock_utils();
    var {
      kDispatches,
      kMockAgent,
      kClose,
      kOriginalClose,
      kOrigin,
      kOriginalDispatch,
      kConnected
    } = require_mock_symbols();
    var { MockInterceptor } = require_mock_interceptor();
    var Symbols = require_symbols();
    var { InvalidArgumentError } = require_errors();
    var MockPool = class extends Pool {
      static {
        __name(this, "MockPool");
      }
      constructor(origin, opts) {
        super(origin, opts);
        if (!opts || !opts.agent || typeof opts.agent.dispatch !== "function") {
          throw new InvalidArgumentError("Argument opts.agent must implement Agent");
        }
        this[kMockAgent] = opts.agent;
        this[kOrigin] = origin;
        this[kDispatches] = [];
        this[kConnected] = 1;
        this[kOriginalDispatch] = this.dispatch;
        this[kOriginalClose] = this.close.bind(this);
        this.dispatch = buildMockDispatch.call(this);
        this.close = this[kClose];
      }
      get [Symbols.kConnected]() {
        return this[kConnected];
      }
      /**
       * Sets up the base interceptor for mocking replies from undici.
       */
      intercept(opts) {
        return new MockInterceptor(opts, this[kDispatches]);
      }
      async [kClose]() {
        await promisify(this[kOriginalClose])();
        this[kConnected] = 0;
        this[kMockAgent][Symbols.kClients].delete(this[kOrigin]);
      }
    };
    module.exports = MockPool;
  }
});

// node_modules/undici/lib/mock/pluralizer.js
var require_pluralizer = __commonJS({
  "node_modules/undici/lib/mock/pluralizer.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var singulars = {
      pronoun: "it",
      is: "is",
      was: "was",
      this: "this"
    };
    var plurals = {
      pronoun: "they",
      is: "are",
      was: "were",
      this: "these"
    };
    module.exports = class Pluralizer {
      static {
        __name(this, "Pluralizer");
      }
      constructor(singular, plural) {
        this.singular = singular;
        this.plural = plural;
      }
      pluralize(count) {
        const one = count === 1;
        const keys = one ? singulars : plurals;
        const noun = one ? this.singular : this.plural;
        return { ...keys, count, noun };
      }
    };
  }
});

// node_modules/undici/lib/mock/pending-interceptors-formatter.js
var require_pending_interceptors_formatter = __commonJS({
  "node_modules/undici/lib/mock/pending-interceptors-formatter.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var { Transform } = __require("stream");
    var { Console } = __require("console");
    module.exports = class PendingInterceptorsFormatter {
      static {
        __name(this, "PendingInterceptorsFormatter");
      }
      constructor({ disableColors } = {}) {
        this.transform = new Transform({
          transform(chunk, _enc, cb) {
            cb(null, chunk);
          }
        });
        this.logger = new Console({
          stdout: this.transform,
          inspectOptions: {
            colors: !disableColors && !process.env.CI
          }
        });
      }
      format(pendingInterceptors) {
        const withPrettyHeaders = pendingInterceptors.map(
          ({ method, path: path5, data: { statusCode }, persist, times, timesInvoked, origin }) => ({
            Method: method,
            Origin: origin,
            Path: path5,
            "Status code": statusCode,
            Persistent: persist ? "\u2705" : "\u274C",
            Invocations: timesInvoked,
            Remaining: persist ? Infinity : times - timesInvoked
          })
        );
        this.logger.table(withPrettyHeaders);
        return this.transform.read().toString();
      }
    };
  }
});

// node_modules/undici/lib/mock/mock-agent.js
var require_mock_agent = __commonJS({
  "node_modules/undici/lib/mock/mock-agent.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var { kClients } = require_symbols();
    var Agent = require_agent();
    var {
      kAgent,
      kMockAgentSet,
      kMockAgentGet,
      kDispatches,
      kIsMockActive,
      kNetConnect,
      kGetNetConnect,
      kOptions,
      kFactory
    } = require_mock_symbols();
    var MockClient = require_mock_client();
    var MockPool = require_mock_pool();
    var { matchValue, buildMockOptions } = require_mock_utils();
    var { InvalidArgumentError, UndiciError } = require_errors();
    var Dispatcher = require_dispatcher();
    var Pluralizer = require_pluralizer();
    var PendingInterceptorsFormatter = require_pending_interceptors_formatter();
    var FakeWeakRef = class {
      static {
        __name(this, "FakeWeakRef");
      }
      constructor(value) {
        this.value = value;
      }
      deref() {
        return this.value;
      }
    };
    var MockAgent = class extends Dispatcher {
      static {
        __name(this, "MockAgent");
      }
      constructor(opts) {
        super(opts);
        this[kNetConnect] = true;
        this[kIsMockActive] = true;
        if (opts && opts.agent && typeof opts.agent.dispatch !== "function") {
          throw new InvalidArgumentError("Argument opts.agent must implement Agent");
        }
        const agent = opts && opts.agent ? opts.agent : new Agent(opts);
        this[kAgent] = agent;
        this[kClients] = agent[kClients];
        this[kOptions] = buildMockOptions(opts);
      }
      get(origin) {
        let dispatcher = this[kMockAgentGet](origin);
        if (!dispatcher) {
          dispatcher = this[kFactory](origin);
          this[kMockAgentSet](origin, dispatcher);
        }
        return dispatcher;
      }
      dispatch(opts, handler) {
        this.get(opts.origin);
        return this[kAgent].dispatch(opts, handler);
      }
      async close() {
        await this[kAgent].close();
        this[kClients].clear();
      }
      deactivate() {
        this[kIsMockActive] = false;
      }
      activate() {
        this[kIsMockActive] = true;
      }
      enableNetConnect(matcher) {
        if (typeof matcher === "string" || typeof matcher === "function" || matcher instanceof RegExp) {
          if (Array.isArray(this[kNetConnect])) {
            this[kNetConnect].push(matcher);
          } else {
            this[kNetConnect] = [matcher];
          }
        } else if (typeof matcher === "undefined") {
          this[kNetConnect] = true;
        } else {
          throw new InvalidArgumentError("Unsupported matcher. Must be one of String|Function|RegExp.");
        }
      }
      disableNetConnect() {
        this[kNetConnect] = false;
      }
      // This is required to bypass issues caused by using global symbols - see:
      // https://github.com/nodejs/undici/issues/1447
      get isMockActive() {
        return this[kIsMockActive];
      }
      [kMockAgentSet](origin, dispatcher) {
        this[kClients].set(origin, new FakeWeakRef(dispatcher));
      }
      [kFactory](origin) {
        const mockOptions = Object.assign({ agent: this }, this[kOptions]);
        return this[kOptions] && this[kOptions].connections === 1 ? new MockClient(origin, mockOptions) : new MockPool(origin, mockOptions);
      }
      [kMockAgentGet](origin) {
        const ref = this[kClients].get(origin);
        if (ref) {
          return ref.deref();
        }
        if (typeof origin !== "string") {
          const dispatcher = this[kFactory]("http://localhost:9999");
          this[kMockAgentSet](origin, dispatcher);
          return dispatcher;
        }
        for (const [keyMatcher, nonExplicitRef] of Array.from(this[kClients])) {
          const nonExplicitDispatcher = nonExplicitRef.deref();
          if (nonExplicitDispatcher && typeof keyMatcher !== "string" && matchValue(keyMatcher, origin)) {
            const dispatcher = this[kFactory](origin);
            this[kMockAgentSet](origin, dispatcher);
            dispatcher[kDispatches] = nonExplicitDispatcher[kDispatches];
            return dispatcher;
          }
        }
      }
      [kGetNetConnect]() {
        return this[kNetConnect];
      }
      pendingInterceptors() {
        const mockAgentClients = this[kClients];
        return Array.from(mockAgentClients.entries()).flatMap(([origin, scope]) => scope.deref()[kDispatches].map((dispatch) => ({ ...dispatch, origin }))).filter(({ pending }) => pending);
      }
      assertNoPendingInterceptors({ pendingInterceptorsFormatter = new PendingInterceptorsFormatter() } = {}) {
        const pending = this.pendingInterceptors();
        if (pending.length === 0) {
          return;
        }
        const pluralizer = new Pluralizer("interceptor", "interceptors").pluralize(pending.length);
        throw new UndiciError(`
${pluralizer.count} ${pluralizer.noun} ${pluralizer.is} pending:

${pendingInterceptorsFormatter.format(pending)}
`.trim());
      }
    };
    module.exports = MockAgent;
  }
});

// node_modules/undici/lib/proxy-agent.js
var require_proxy_agent = __commonJS({
  "node_modules/undici/lib/proxy-agent.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var { kProxy, kClose, kDestroy, kInterceptors } = require_symbols();
    var { URL: URL3 } = __require("url");
    var Agent = require_agent();
    var Pool = require_pool();
    var DispatcherBase = require_dispatcher_base();
    var { InvalidArgumentError, RequestAbortedError } = require_errors();
    var buildConnector = require_connect();
    var kAgent = Symbol("proxy agent");
    var kClient = Symbol("proxy client");
    var kProxyHeaders = Symbol("proxy headers");
    var kRequestTls = Symbol("request tls settings");
    var kProxyTls = Symbol("proxy tls settings");
    var kConnectEndpoint = Symbol("connect endpoint function");
    function defaultProtocolPort(protocol) {
      return protocol === "https:" ? 443 : 80;
    }
    __name(defaultProtocolPort, "defaultProtocolPort");
    function buildProxyOptions(opts) {
      if (typeof opts === "string") {
        opts = { uri: opts };
      }
      if (!opts || !opts.uri) {
        throw new InvalidArgumentError("Proxy opts.uri is mandatory");
      }
      return {
        uri: opts.uri,
        protocol: opts.protocol || "https"
      };
    }
    __name(buildProxyOptions, "buildProxyOptions");
    function defaultFactory(origin, opts) {
      return new Pool(origin, opts);
    }
    __name(defaultFactory, "defaultFactory");
    var ProxyAgent = class extends DispatcherBase {
      static {
        __name(this, "ProxyAgent");
      }
      constructor(opts) {
        super(opts);
        this[kProxy] = buildProxyOptions(opts);
        this[kAgent] = new Agent(opts);
        this[kInterceptors] = opts.interceptors && opts.interceptors.ProxyAgent && Array.isArray(opts.interceptors.ProxyAgent) ? opts.interceptors.ProxyAgent : [];
        if (typeof opts === "string") {
          opts = { uri: opts };
        }
        if (!opts || !opts.uri) {
          throw new InvalidArgumentError("Proxy opts.uri is mandatory");
        }
        const { clientFactory = defaultFactory } = opts;
        if (typeof clientFactory !== "function") {
          throw new InvalidArgumentError("Proxy opts.clientFactory must be a function.");
        }
        this[kRequestTls] = opts.requestTls;
        this[kProxyTls] = opts.proxyTls;
        this[kProxyHeaders] = opts.headers || {};
        const resolvedUrl = new URL3(opts.uri);
        const { origin, port, host, username, password } = resolvedUrl;
        if (opts.auth && opts.token) {
          throw new InvalidArgumentError("opts.auth cannot be used in combination with opts.token");
        } else if (opts.auth) {
          this[kProxyHeaders]["proxy-authorization"] = `Basic ${opts.auth}`;
        } else if (opts.token) {
          this[kProxyHeaders]["proxy-authorization"] = opts.token;
        } else if (username && password) {
          this[kProxyHeaders]["proxy-authorization"] = `Basic ${Buffer.from(`${decodeURIComponent(username)}:${decodeURIComponent(password)}`).toString("base64")}`;
        }
        const connect = buildConnector({ ...opts.proxyTls });
        this[kConnectEndpoint] = buildConnector({ ...opts.requestTls });
        this[kClient] = clientFactory(resolvedUrl, { connect });
        this[kAgent] = new Agent({
          ...opts,
          connect: /* @__PURE__ */ __name(async (opts2, callback) => {
            let requestedHost = opts2.host;
            if (!opts2.port) {
              requestedHost += `:${defaultProtocolPort(opts2.protocol)}`;
            }
            try {
              const { socket, statusCode } = await this[kClient].connect({
                origin,
                port,
                path: requestedHost,
                signal: opts2.signal,
                headers: {
                  ...this[kProxyHeaders],
                  host
                }
              });
              if (statusCode !== 200) {
                socket.on("error", () => {
                }).destroy();
                callback(new RequestAbortedError(`Proxy response (${statusCode}) !== 200 when HTTP Tunneling`));
              }
              if (opts2.protocol !== "https:") {
                callback(null, socket);
                return;
              }
              let servername;
              if (this[kRequestTls]) {
                servername = this[kRequestTls].servername;
              } else {
                servername = opts2.servername;
              }
              this[kConnectEndpoint]({ ...opts2, servername, httpSocket: socket }, callback);
            } catch (err) {
              callback(err);
            }
          }, "connect")
        });
      }
      dispatch(opts, handler) {
        const { host } = new URL3(opts.origin);
        const headers = buildHeaders(opts.headers);
        throwIfProxyAuthIsSent(headers);
        return this[kAgent].dispatch(
          {
            ...opts,
            headers: {
              ...headers,
              host
            }
          },
          handler
        );
      }
      async [kClose]() {
        await this[kAgent].close();
        await this[kClient].close();
      }
      async [kDestroy]() {
        await this[kAgent].destroy();
        await this[kClient].destroy();
      }
    };
    function buildHeaders(headers) {
      if (Array.isArray(headers)) {
        const headersPair = {};
        for (let i = 0; i < headers.length; i += 2) {
          headersPair[headers[i]] = headers[i + 1];
        }
        return headersPair;
      }
      return headers;
    }
    __name(buildHeaders, "buildHeaders");
    function throwIfProxyAuthIsSent(headers) {
      const existProxyAuth = headers && Object.keys(headers).find((key) => key.toLowerCase() === "proxy-authorization");
      if (existProxyAuth) {
        throw new InvalidArgumentError("Proxy-Authorization should be sent in ProxyAgent constructor");
      }
    }
    __name(throwIfProxyAuthIsSent, "throwIfProxyAuthIsSent");
    module.exports = ProxyAgent;
  }
});

// node_modules/undici/lib/handler/RetryHandler.js
var require_RetryHandler = __commonJS({
  "node_modules/undici/lib/handler/RetryHandler.js"(exports, module) {
    init_cjs_shim();
    var assert = __require("assert");
    var { kRetryHandlerDefaultRetry } = require_symbols();
    var { RequestRetryError } = require_errors();
    var { isDisturbed, parseHeaders, parseRangeHeader } = require_util2();
    function calculateRetryAfterHeader(retryAfter) {
      const current = Date.now();
      const diff = new Date(retryAfter).getTime() - current;
      return diff;
    }
    __name(calculateRetryAfterHeader, "calculateRetryAfterHeader");
    var RetryHandler = class _RetryHandler {
      static {
        __name(this, "RetryHandler");
      }
      constructor(opts, handlers) {
        const { retryOptions, ...dispatchOpts } = opts;
        const {
          // Retry scoped
          retry: retryFn,
          maxRetries,
          maxTimeout,
          minTimeout,
          timeoutFactor,
          // Response scoped
          methods,
          errorCodes,
          retryAfter,
          statusCodes
        } = retryOptions ?? {};
        this.dispatch = handlers.dispatch;
        this.handler = handlers.handler;
        this.opts = dispatchOpts;
        this.abort = null;
        this.aborted = false;
        this.retryOpts = {
          retry: retryFn ?? _RetryHandler[kRetryHandlerDefaultRetry],
          retryAfter: retryAfter ?? true,
          maxTimeout: maxTimeout ?? 30 * 1e3,
          // 30s,
          timeout: minTimeout ?? 500,
          // .5s
          timeoutFactor: timeoutFactor ?? 2,
          maxRetries: maxRetries ?? 5,
          // What errors we should retry
          methods: methods ?? ["GET", "HEAD", "OPTIONS", "PUT", "DELETE", "TRACE"],
          // Indicates which errors to retry
          statusCodes: statusCodes ?? [500, 502, 503, 504, 429],
          // List of errors to retry
          errorCodes: errorCodes ?? [
            "ECONNRESET",
            "ECONNREFUSED",
            "ENOTFOUND",
            "ENETDOWN",
            "ENETUNREACH",
            "EHOSTDOWN",
            "EHOSTUNREACH",
            "EPIPE"
          ]
        };
        this.retryCount = 0;
        this.start = 0;
        this.end = null;
        this.etag = null;
        this.resume = null;
        this.handler.onConnect((reason) => {
          this.aborted = true;
          if (this.abort) {
            this.abort(reason);
          } else {
            this.reason = reason;
          }
        });
      }
      onRequestSent() {
        if (this.handler.onRequestSent) {
          this.handler.onRequestSent();
        }
      }
      onUpgrade(statusCode, headers, socket) {
        if (this.handler.onUpgrade) {
          this.handler.onUpgrade(statusCode, headers, socket);
        }
      }
      onConnect(abort) {
        if (this.aborted) {
          abort(this.reason);
        } else {
          this.abort = abort;
        }
      }
      onBodySent(chunk) {
        if (this.handler.onBodySent) return this.handler.onBodySent(chunk);
      }
      static [kRetryHandlerDefaultRetry](err, { state, opts }, cb) {
        const { statusCode, code, headers } = err;
        const { method, retryOptions } = opts;
        const {
          maxRetries,
          timeout,
          maxTimeout,
          timeoutFactor,
          statusCodes,
          errorCodes,
          methods
        } = retryOptions;
        let { counter, currentTimeout } = state;
        currentTimeout = currentTimeout != null && currentTimeout > 0 ? currentTimeout : timeout;
        if (code && code !== "UND_ERR_REQ_RETRY" && code !== "UND_ERR_SOCKET" && !errorCodes.includes(code)) {
          cb(err);
          return;
        }
        if (Array.isArray(methods) && !methods.includes(method)) {
          cb(err);
          return;
        }
        if (statusCode != null && Array.isArray(statusCodes) && !statusCodes.includes(statusCode)) {
          cb(err);
          return;
        }
        if (counter > maxRetries) {
          cb(err);
          return;
        }
        let retryAfterHeader = headers != null && headers["retry-after"];
        if (retryAfterHeader) {
          retryAfterHeader = Number(retryAfterHeader);
          retryAfterHeader = isNaN(retryAfterHeader) ? calculateRetryAfterHeader(retryAfterHeader) : retryAfterHeader * 1e3;
        }
        const retryTimeout = retryAfterHeader > 0 ? Math.min(retryAfterHeader, maxTimeout) : Math.min(currentTimeout * timeoutFactor ** counter, maxTimeout);
        state.currentTimeout = retryTimeout;
        setTimeout(() => cb(null), retryTimeout);
      }
      onHeaders(statusCode, rawHeaders, resume, statusMessage) {
        const headers = parseHeaders(rawHeaders);
        this.retryCount += 1;
        if (statusCode >= 300) {
          this.abort(
            new RequestRetryError("Request failed", statusCode, {
              headers,
              count: this.retryCount
            })
          );
          return false;
        }
        if (this.resume != null) {
          this.resume = null;
          if (statusCode !== 206) {
            return true;
          }
          const contentRange = parseRangeHeader(headers["content-range"]);
          if (!contentRange) {
            this.abort(
              new RequestRetryError("Content-Range mismatch", statusCode, {
                headers,
                count: this.retryCount
              })
            );
            return false;
          }
          if (this.etag != null && this.etag !== headers.etag) {
            this.abort(
              new RequestRetryError("ETag mismatch", statusCode, {
                headers,
                count: this.retryCount
              })
            );
            return false;
          }
          const { start, size, end = size } = contentRange;
          assert(this.start === start, "content-range mismatch");
          assert(this.end == null || this.end === end, "content-range mismatch");
          this.resume = resume;
          return true;
        }
        if (this.end == null) {
          if (statusCode === 206) {
            const range = parseRangeHeader(headers["content-range"]);
            if (range == null) {
              return this.handler.onHeaders(
                statusCode,
                rawHeaders,
                resume,
                statusMessage
              );
            }
            const { start, size, end = size } = range;
            assert(
              start != null && Number.isFinite(start) && this.start !== start,
              "content-range mismatch"
            );
            assert(Number.isFinite(start));
            assert(
              end != null && Number.isFinite(end) && this.end !== end,
              "invalid content-length"
            );
            this.start = start;
            this.end = end;
          }
          if (this.end == null) {
            const contentLength = headers["content-length"];
            this.end = contentLength != null ? Number(contentLength) : null;
          }
          assert(Number.isFinite(this.start));
          assert(
            this.end == null || Number.isFinite(this.end),
            "invalid content-length"
          );
          this.resume = resume;
          this.etag = headers.etag != null ? headers.etag : null;
          return this.handler.onHeaders(
            statusCode,
            rawHeaders,
            resume,
            statusMessage
          );
        }
        const err = new RequestRetryError("Request failed", statusCode, {
          headers,
          count: this.retryCount
        });
        this.abort(err);
        return false;
      }
      onData(chunk) {
        this.start += chunk.length;
        return this.handler.onData(chunk);
      }
      onComplete(rawTrailers) {
        this.retryCount = 0;
        return this.handler.onComplete(rawTrailers);
      }
      onError(err) {
        if (this.aborted || isDisturbed(this.opts.body)) {
          return this.handler.onError(err);
        }
        this.retryOpts.retry(
          err,
          {
            state: { counter: this.retryCount++, currentTimeout: this.retryAfter },
            opts: { retryOptions: this.retryOpts, ...this.opts }
          },
          onRetry.bind(this)
        );
        function onRetry(err2) {
          if (err2 != null || this.aborted || isDisturbed(this.opts.body)) {
            return this.handler.onError(err2);
          }
          if (this.start !== 0) {
            this.opts = {
              ...this.opts,
              headers: {
                ...this.opts.headers,
                range: `bytes=${this.start}-${this.end ?? ""}`
              }
            };
          }
          try {
            this.dispatch(this.opts, this);
          } catch (err3) {
            this.handler.onError(err3);
          }
        }
        __name(onRetry, "onRetry");
      }
    };
    module.exports = RetryHandler;
  }
});

// node_modules/undici/lib/global.js
var require_global2 = __commonJS({
  "node_modules/undici/lib/global.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var globalDispatcher = Symbol.for("undici.globalDispatcher.1");
    var { InvalidArgumentError } = require_errors();
    var Agent = require_agent();
    if (getGlobalDispatcher() === void 0) {
      setGlobalDispatcher(new Agent());
    }
    function setGlobalDispatcher(agent) {
      if (!agent || typeof agent.dispatch !== "function") {
        throw new InvalidArgumentError("Argument agent must implement Agent");
      }
      Object.defineProperty(globalThis, globalDispatcher, {
        value: agent,
        writable: true,
        enumerable: false,
        configurable: false
      });
    }
    __name(setGlobalDispatcher, "setGlobalDispatcher");
    function getGlobalDispatcher() {
      return globalThis[globalDispatcher];
    }
    __name(getGlobalDispatcher, "getGlobalDispatcher");
    module.exports = {
      setGlobalDispatcher,
      getGlobalDispatcher
    };
  }
});

// node_modules/undici/lib/handler/DecoratorHandler.js
var require_DecoratorHandler = __commonJS({
  "node_modules/undici/lib/handler/DecoratorHandler.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    module.exports = class DecoratorHandler {
      static {
        __name(this, "DecoratorHandler");
      }
      constructor(handler) {
        this.handler = handler;
      }
      onConnect(...args) {
        return this.handler.onConnect(...args);
      }
      onError(...args) {
        return this.handler.onError(...args);
      }
      onUpgrade(...args) {
        return this.handler.onUpgrade(...args);
      }
      onHeaders(...args) {
        return this.handler.onHeaders(...args);
      }
      onData(...args) {
        return this.handler.onData(...args);
      }
      onComplete(...args) {
        return this.handler.onComplete(...args);
      }
      onBodySent(...args) {
        return this.handler.onBodySent(...args);
      }
    };
  }
});

// node_modules/undici/lib/fetch/headers.js
var require_headers = __commonJS({
  "node_modules/undici/lib/fetch/headers.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var { kHeadersList, kConstruct } = require_symbols();
    var { kGuard } = require_symbols2();
    var { kEnumerableProperty } = require_util2();
    var {
      makeIterator,
      isValidHeaderName,
      isValidHeaderValue
    } = require_util3();
    var { webidl } = require_webidl();
    var assert = __require("assert");
    var kHeadersMap = Symbol("headers map");
    var kHeadersSortedMap = Symbol("headers map sorted");
    function isHTTPWhiteSpaceCharCode(code) {
      return code === 10 || code === 13 || code === 9 || code === 32;
    }
    __name(isHTTPWhiteSpaceCharCode, "isHTTPWhiteSpaceCharCode");
    function headerValueNormalize(potentialValue) {
      let i = 0;
      let j = potentialValue.length;
      while (j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(j - 1))) --j;
      while (j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(i))) ++i;
      return i === 0 && j === potentialValue.length ? potentialValue : potentialValue.substring(i, j);
    }
    __name(headerValueNormalize, "headerValueNormalize");
    function fill(headers, object) {
      if (Array.isArray(object)) {
        for (let i = 0; i < object.length; ++i) {
          const header = object[i];
          if (header.length !== 2) {
            throw webidl.errors.exception({
              header: "Headers constructor",
              message: `expected name/value pair to be length 2, found ${header.length}.`
            });
          }
          appendHeader(headers, header[0], header[1]);
        }
      } else if (typeof object === "object" && object !== null) {
        const keys = Object.keys(object);
        for (let i = 0; i < keys.length; ++i) {
          appendHeader(headers, keys[i], object[keys[i]]);
        }
      } else {
        throw webidl.errors.conversionFailed({
          prefix: "Headers constructor",
          argument: "Argument 1",
          types: ["sequence<sequence<ByteString>>", "record<ByteString, ByteString>"]
        });
      }
    }
    __name(fill, "fill");
    function appendHeader(headers, name, value) {
      value = headerValueNormalize(value);
      if (!isValidHeaderName(name)) {
        throw webidl.errors.invalidArgument({
          prefix: "Headers.append",
          value: name,
          type: "header name"
        });
      } else if (!isValidHeaderValue(value)) {
        throw webidl.errors.invalidArgument({
          prefix: "Headers.append",
          value,
          type: "header value"
        });
      }
      if (headers[kGuard] === "immutable") {
        throw new TypeError("immutable");
      } else if (headers[kGuard] === "request-no-cors") {
      }
      return headers[kHeadersList].append(name, value);
    }
    __name(appendHeader, "appendHeader");
    var HeadersList = class _HeadersList {
      static {
        __name(this, "HeadersList");
      }
      /** @type {[string, string][]|null} */
      cookies = null;
      constructor(init) {
        if (init instanceof _HeadersList) {
          this[kHeadersMap] = new Map(init[kHeadersMap]);
          this[kHeadersSortedMap] = init[kHeadersSortedMap];
          this.cookies = init.cookies === null ? null : [...init.cookies];
        } else {
          this[kHeadersMap] = new Map(init);
          this[kHeadersSortedMap] = null;
        }
      }
      // https://fetch.spec.whatwg.org/#header-list-contains
      contains(name) {
        name = name.toLowerCase();
        return this[kHeadersMap].has(name);
      }
      clear() {
        this[kHeadersMap].clear();
        this[kHeadersSortedMap] = null;
        this.cookies = null;
      }
      // https://fetch.spec.whatwg.org/#concept-header-list-append
      append(name, value) {
        this[kHeadersSortedMap] = null;
        const lowercaseName = name.toLowerCase();
        const exists = this[kHeadersMap].get(lowercaseName);
        if (exists) {
          const delimiter = lowercaseName === "cookie" ? "; " : ", ";
          this[kHeadersMap].set(lowercaseName, {
            name: exists.name,
            value: `${exists.value}${delimiter}${value}`
          });
        } else {
          this[kHeadersMap].set(lowercaseName, { name, value });
        }
        if (lowercaseName === "set-cookie") {
          this.cookies ??= [];
          this.cookies.push(value);
        }
      }
      // https://fetch.spec.whatwg.org/#concept-header-list-set
      set(name, value) {
        this[kHeadersSortedMap] = null;
        const lowercaseName = name.toLowerCase();
        if (lowercaseName === "set-cookie") {
          this.cookies = [value];
        }
        this[kHeadersMap].set(lowercaseName, { name, value });
      }
      // https://fetch.spec.whatwg.org/#concept-header-list-delete
      delete(name) {
        this[kHeadersSortedMap] = null;
        name = name.toLowerCase();
        if (name === "set-cookie") {
          this.cookies = null;
        }
        this[kHeadersMap].delete(name);
      }
      // https://fetch.spec.whatwg.org/#concept-header-list-get
      get(name) {
        const value = this[kHeadersMap].get(name.toLowerCase());
        return value === void 0 ? null : value.value;
      }
      *[Symbol.iterator]() {
        for (const [name, { value }] of this[kHeadersMap]) {
          yield [name, value];
        }
      }
      get entries() {
        const headers = {};
        if (this[kHeadersMap].size) {
          for (const { name, value } of this[kHeadersMap].values()) {
            headers[name] = value;
          }
        }
        return headers;
      }
    };
    var Headers = class _Headers {
      static {
        __name(this, "Headers");
      }
      constructor(init = void 0) {
        if (init === kConstruct) {
          return;
        }
        this[kHeadersList] = new HeadersList();
        this[kGuard] = "none";
        if (init !== void 0) {
          init = webidl.converters.HeadersInit(init);
          fill(this, init);
        }
      }
      // https://fetch.spec.whatwg.org/#dom-headers-append
      append(name, value) {
        webidl.brandCheck(this, _Headers);
        webidl.argumentLengthCheck(arguments, 2, { header: "Headers.append" });
        name = webidl.converters.ByteString(name);
        value = webidl.converters.ByteString(value);
        return appendHeader(this, name, value);
      }
      // https://fetch.spec.whatwg.org/#dom-headers-delete
      delete(name) {
        webidl.brandCheck(this, _Headers);
        webidl.argumentLengthCheck(arguments, 1, { header: "Headers.delete" });
        name = webidl.converters.ByteString(name);
        if (!isValidHeaderName(name)) {
          throw webidl.errors.invalidArgument({
            prefix: "Headers.delete",
            value: name,
            type: "header name"
          });
        }
        if (this[kGuard] === "immutable") {
          throw new TypeError("immutable");
        } else if (this[kGuard] === "request-no-cors") {
        }
        if (!this[kHeadersList].contains(name)) {
          return;
        }
        this[kHeadersList].delete(name);
      }
      // https://fetch.spec.whatwg.org/#dom-headers-get
      get(name) {
        webidl.brandCheck(this, _Headers);
        webidl.argumentLengthCheck(arguments, 1, { header: "Headers.get" });
        name = webidl.converters.ByteString(name);
        if (!isValidHeaderName(name)) {
          throw webidl.errors.invalidArgument({
            prefix: "Headers.get",
            value: name,
            type: "header name"
          });
        }
        return this[kHeadersList].get(name);
      }
      // https://fetch.spec.whatwg.org/#dom-headers-has
      has(name) {
        webidl.brandCheck(this, _Headers);
        webidl.argumentLengthCheck(arguments, 1, { header: "Headers.has" });
        name = webidl.converters.ByteString(name);
        if (!isValidHeaderName(name)) {
          throw webidl.errors.invalidArgument({
            prefix: "Headers.has",
            value: name,
            type: "header name"
          });
        }
        return this[kHeadersList].contains(name);
      }
      // https://fetch.spec.whatwg.org/#dom-headers-set
      set(name, value) {
        webidl.brandCheck(this, _Headers);
        webidl.argumentLengthCheck(arguments, 2, { header: "Headers.set" });
        name = webidl.converters.ByteString(name);
        value = webidl.converters.ByteString(value);
        value = headerValueNormalize(value);
        if (!isValidHeaderName(name)) {
          throw webidl.errors.invalidArgument({
            prefix: "Headers.set",
            value: name,
            type: "header name"
          });
        } else if (!isValidHeaderValue(value)) {
          throw webidl.errors.invalidArgument({
            prefix: "Headers.set",
            value,
            type: "header value"
          });
        }
        if (this[kGuard] === "immutable") {
          throw new TypeError("immutable");
        } else if (this[kGuard] === "request-no-cors") {
        }
        this[kHeadersList].set(name, value);
      }
      // https://fetch.spec.whatwg.org/#dom-headers-getsetcookie
      getSetCookie() {
        webidl.brandCheck(this, _Headers);
        const list = this[kHeadersList].cookies;
        if (list) {
          return [...list];
        }
        return [];
      }
      // https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine
      get [kHeadersSortedMap]() {
        if (this[kHeadersList][kHeadersSortedMap]) {
          return this[kHeadersList][kHeadersSortedMap];
        }
        const headers = [];
        const names = [...this[kHeadersList]].sort((a, b) => a[0] < b[0] ? -1 : 1);
        const cookies = this[kHeadersList].cookies;
        for (let i = 0; i < names.length; ++i) {
          const [name, value] = names[i];
          if (name === "set-cookie") {
            for (let j = 0; j < cookies.length; ++j) {
              headers.push([name, cookies[j]]);
            }
          } else {
            assert(value !== null);
            headers.push([name, value]);
          }
        }
        this[kHeadersList][kHeadersSortedMap] = headers;
        return headers;
      }
      keys() {
        webidl.brandCheck(this, _Headers);
        if (this[kGuard] === "immutable") {
          const value = this[kHeadersSortedMap];
          return makeIterator(
            () => value,
            "Headers",
            "key"
          );
        }
        return makeIterator(
          () => [...this[kHeadersSortedMap].values()],
          "Headers",
          "key"
        );
      }
      values() {
        webidl.brandCheck(this, _Headers);
        if (this[kGuard] === "immutable") {
          const value = this[kHeadersSortedMap];
          return makeIterator(
            () => value,
            "Headers",
            "value"
          );
        }
        return makeIterator(
          () => [...this[kHeadersSortedMap].values()],
          "Headers",
          "value"
        );
      }
      entries() {
        webidl.brandCheck(this, _Headers);
        if (this[kGuard] === "immutable") {
          const value = this[kHeadersSortedMap];
          return makeIterator(
            () => value,
            "Headers",
            "key+value"
          );
        }
        return makeIterator(
          () => [...this[kHeadersSortedMap].values()],
          "Headers",
          "key+value"
        );
      }
      /**
       * @param {(value: string, key: string, self: Headers) => void} callbackFn
       * @param {unknown} thisArg
       */
      forEach(callbackFn, thisArg = globalThis) {
        webidl.brandCheck(this, _Headers);
        webidl.argumentLengthCheck(arguments, 1, { header: "Headers.forEach" });
        if (typeof callbackFn !== "function") {
          throw new TypeError(
            "Failed to execute 'forEach' on 'Headers': parameter 1 is not of type 'Function'."
          );
        }
        for (const [key, value] of this) {
          callbackFn.apply(thisArg, [value, key, this]);
        }
      }
      [Symbol.for("nodejs.util.inspect.custom")]() {
        webidl.brandCheck(this, _Headers);
        return this[kHeadersList];
      }
    };
    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
    Object.defineProperties(Headers.prototype, {
      append: kEnumerableProperty,
      delete: kEnumerableProperty,
      get: kEnumerableProperty,
      has: kEnumerableProperty,
      set: kEnumerableProperty,
      getSetCookie: kEnumerableProperty,
      keys: kEnumerableProperty,
      values: kEnumerableProperty,
      entries: kEnumerableProperty,
      forEach: kEnumerableProperty,
      [Symbol.iterator]: { enumerable: false },
      [Symbol.toStringTag]: {
        value: "Headers",
        configurable: true
      }
    });
    webidl.converters.HeadersInit = function(V) {
      if (webidl.util.Type(V) === "Object") {
        if (V[Symbol.iterator]) {
          return webidl.converters["sequence<sequence<ByteString>>"](V);
        }
        return webidl.converters["record<ByteString, ByteString>"](V);
      }
      throw webidl.errors.conversionFailed({
        prefix: "Headers constructor",
        argument: "Argument 1",
        types: ["sequence<sequence<ByteString>>", "record<ByteString, ByteString>"]
      });
    };
    module.exports = {
      fill,
      Headers,
      HeadersList
    };
  }
});

// node_modules/undici/lib/fetch/response.js
var require_response = __commonJS({
  "node_modules/undici/lib/fetch/response.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var { Headers, HeadersList, fill } = require_headers();
    var { extractBody, cloneBody, mixinBody } = require_body();
    var util = require_util2();
    var { kEnumerableProperty } = util;
    var {
      isValidReasonPhrase,
      isCancelled,
      isAborted,
      isBlobLike,
      serializeJavascriptValueToJSONString,
      isErrorLike,
      isomorphicEncode
    } = require_util3();
    var {
      redirectStatusSet,
      nullBodyStatus,
      DOMException: DOMException2
    } = require_constants2();
    var { kState, kHeaders, kGuard, kRealm } = require_symbols2();
    var { webidl } = require_webidl();
    var { FormData } = require_formdata();
    var { getGlobalOrigin } = require_global();
    var { URLSerializer } = require_dataURL();
    var { kHeadersList, kConstruct } = require_symbols();
    var assert = __require("assert");
    var { types } = __require("util");
    var ReadableStream2 = globalThis.ReadableStream || __require("stream/web").ReadableStream;
    var textEncoder = new TextEncoder("utf-8");
    var Response = class _Response {
      static {
        __name(this, "Response");
      }
      // Creates network error Response.
      static error() {
        const relevantRealm = { settingsObject: {} };
        const responseObject = new _Response();
        responseObject[kState] = makeNetworkError();
        responseObject[kRealm] = relevantRealm;
        responseObject[kHeaders][kHeadersList] = responseObject[kState].headersList;
        responseObject[kHeaders][kGuard] = "immutable";
        responseObject[kHeaders][kRealm] = relevantRealm;
        return responseObject;
      }
      // https://fetch.spec.whatwg.org/#dom-response-json
      static json(data, init = {}) {
        webidl.argumentLengthCheck(arguments, 1, { header: "Response.json" });
        if (init !== null) {
          init = webidl.converters.ResponseInit(init);
        }
        const bytes = textEncoder.encode(
          serializeJavascriptValueToJSONString(data)
        );
        const body = extractBody(bytes);
        const relevantRealm = { settingsObject: {} };
        const responseObject = new _Response();
        responseObject[kRealm] = relevantRealm;
        responseObject[kHeaders][kGuard] = "response";
        responseObject[kHeaders][kRealm] = relevantRealm;
        initializeResponse(responseObject, init, { body: body[0], type: "application/json" });
        return responseObject;
      }
      // Creates a redirect Response that redirects to url with status status.
      static redirect(url2, status = 302) {
        const relevantRealm = { settingsObject: {} };
        webidl.argumentLengthCheck(arguments, 1, { header: "Response.redirect" });
        url2 = webidl.converters.USVString(url2);
        status = webidl.converters["unsigned short"](status);
        let parsedURL;
        try {
          parsedURL = new URL(url2, getGlobalOrigin());
        } catch (err) {
          throw Object.assign(new TypeError("Failed to parse URL from " + url2), {
            cause: err
          });
        }
        if (!redirectStatusSet.has(status)) {
          throw new RangeError("Invalid status code " + status);
        }
        const responseObject = new _Response();
        responseObject[kRealm] = relevantRealm;
        responseObject[kHeaders][kGuard] = "immutable";
        responseObject[kHeaders][kRealm] = relevantRealm;
        responseObject[kState].status = status;
        const value = isomorphicEncode(URLSerializer(parsedURL));
        responseObject[kState].headersList.append("location", value);
        return responseObject;
      }
      // https://fetch.spec.whatwg.org/#dom-response
      constructor(body = null, init = {}) {
        if (body !== null) {
          body = webidl.converters.BodyInit(body);
        }
        init = webidl.converters.ResponseInit(init);
        this[kRealm] = { settingsObject: {} };
        this[kState] = makeResponse({});
        this[kHeaders] = new Headers(kConstruct);
        this[kHeaders][kGuard] = "response";
        this[kHeaders][kHeadersList] = this[kState].headersList;
        this[kHeaders][kRealm] = this[kRealm];
        let bodyWithType = null;
        if (body != null) {
          const [extractedBody, type] = extractBody(body);
          bodyWithType = { body: extractedBody, type };
        }
        initializeResponse(this, init, bodyWithType);
      }
      // Returns response’s type, e.g., "cors".
      get type() {
        webidl.brandCheck(this, _Response);
        return this[kState].type;
      }
      // Returns response’s URL, if it has one; otherwise the empty string.
      get url() {
        webidl.brandCheck(this, _Response);
        const urlList = this[kState].urlList;
        const url2 = urlList[urlList.length - 1] ?? null;
        if (url2 === null) {
          return "";
        }
        return URLSerializer(url2, true);
      }
      // Returns whether response was obtained through a redirect.
      get redirected() {
        webidl.brandCheck(this, _Response);
        return this[kState].urlList.length > 1;
      }
      // Returns response’s status.
      get status() {
        webidl.brandCheck(this, _Response);
        return this[kState].status;
      }
      // Returns whether response’s status is an ok status.
      get ok() {
        webidl.brandCheck(this, _Response);
        return this[kState].status >= 200 && this[kState].status <= 299;
      }
      // Returns response’s status message.
      get statusText() {
        webidl.brandCheck(this, _Response);
        return this[kState].statusText;
      }
      // Returns response’s headers as Headers.
      get headers() {
        webidl.brandCheck(this, _Response);
        return this[kHeaders];
      }
      get body() {
        webidl.brandCheck(this, _Response);
        return this[kState].body ? this[kState].body.stream : null;
      }
      get bodyUsed() {
        webidl.brandCheck(this, _Response);
        return !!this[kState].body && util.isDisturbed(this[kState].body.stream);
      }
      // Returns a clone of response.
      clone() {
        webidl.brandCheck(this, _Response);
        if (this.bodyUsed || this.body && this.body.locked) {
          throw webidl.errors.exception({
            header: "Response.clone",
            message: "Body has already been consumed."
          });
        }
        const clonedResponse = cloneResponse(this[kState]);
        const clonedResponseObject = new _Response();
        clonedResponseObject[kState] = clonedResponse;
        clonedResponseObject[kRealm] = this[kRealm];
        clonedResponseObject[kHeaders][kHeadersList] = clonedResponse.headersList;
        clonedResponseObject[kHeaders][kGuard] = this[kHeaders][kGuard];
        clonedResponseObject[kHeaders][kRealm] = this[kHeaders][kRealm];
        return clonedResponseObject;
      }
    };
    mixinBody(Response);
    Object.defineProperties(Response.prototype, {
      type: kEnumerableProperty,
      url: kEnumerableProperty,
      status: kEnumerableProperty,
      ok: kEnumerableProperty,
      redirected: kEnumerableProperty,
      statusText: kEnumerableProperty,
      headers: kEnumerableProperty,
      clone: kEnumerableProperty,
      body: kEnumerableProperty,
      bodyUsed: kEnumerableProperty,
      [Symbol.toStringTag]: {
        value: "Response",
        configurable: true
      }
    });
    Object.defineProperties(Response, {
      json: kEnumerableProperty,
      redirect: kEnumerableProperty,
      error: kEnumerableProperty
    });
    function cloneResponse(response) {
      if (response.internalResponse) {
        return filterResponse(
          cloneResponse(response.internalResponse),
          response.type
        );
      }
      const newResponse = makeResponse({ ...response, body: null });
      if (response.body != null) {
        newResponse.body = cloneBody(response.body);
      }
      return newResponse;
    }
    __name(cloneResponse, "cloneResponse");
    function makeResponse(init) {
      return {
        aborted: false,
        rangeRequested: false,
        timingAllowPassed: false,
        requestIncludesCredentials: false,
        type: "default",
        status: 200,
        timingInfo: null,
        cacheState: "",
        statusText: "",
        ...init,
        headersList: init.headersList ? new HeadersList(init.headersList) : new HeadersList(),
        urlList: init.urlList ? [...init.urlList] : []
      };
    }
    __name(makeResponse, "makeResponse");
    function makeNetworkError(reason) {
      const isError = isErrorLike(reason);
      return makeResponse({
        type: "error",
        status: 0,
        error: isError ? reason : new Error(reason ? String(reason) : reason),
        aborted: reason && reason.name === "AbortError"
      });
    }
    __name(makeNetworkError, "makeNetworkError");
    function makeFilteredResponse(response, state) {
      state = {
        internalResponse: response,
        ...state
      };
      return new Proxy(response, {
        get(target, p) {
          return p in state ? state[p] : target[p];
        },
        set(target, p, value) {
          assert(!(p in state));
          target[p] = value;
          return true;
        }
      });
    }
    __name(makeFilteredResponse, "makeFilteredResponse");
    function filterResponse(response, type) {
      if (type === "basic") {
        return makeFilteredResponse(response, {
          type: "basic",
          headersList: response.headersList
        });
      } else if (type === "cors") {
        return makeFilteredResponse(response, {
          type: "cors",
          headersList: response.headersList
        });
      } else if (type === "opaque") {
        return makeFilteredResponse(response, {
          type: "opaque",
          urlList: Object.freeze([]),
          status: 0,
          statusText: "",
          body: null
        });
      } else if (type === "opaqueredirect") {
        return makeFilteredResponse(response, {
          type: "opaqueredirect",
          status: 0,
          statusText: "",
          headersList: [],
          body: null
        });
      } else {
        assert(false);
      }
    }
    __name(filterResponse, "filterResponse");
    function makeAppropriateNetworkError(fetchParams, err = null) {
      assert(isCancelled(fetchParams));
      return isAborted(fetchParams) ? makeNetworkError(Object.assign(new DOMException2("The operation was aborted.", "AbortError"), { cause: err })) : makeNetworkError(Object.assign(new DOMException2("Request was cancelled."), { cause: err }));
    }
    __name(makeAppropriateNetworkError, "makeAppropriateNetworkError");
    function initializeResponse(response, init, body) {
      if (init.status !== null && (init.status < 200 || init.status > 599)) {
        throw new RangeError('init["status"] must be in the range of 200 to 599, inclusive.');
      }
      if ("statusText" in init && init.statusText != null) {
        if (!isValidReasonPhrase(String(init.statusText))) {
          throw new TypeError("Invalid statusText");
        }
      }
      if ("status" in init && init.status != null) {
        response[kState].status = init.status;
      }
      if ("statusText" in init && init.statusText != null) {
        response[kState].statusText = init.statusText;
      }
      if ("headers" in init && init.headers != null) {
        fill(response[kHeaders], init.headers);
      }
      if (body) {
        if (nullBodyStatus.includes(response.status)) {
          throw webidl.errors.exception({
            header: "Response constructor",
            message: "Invalid response status code " + response.status
          });
        }
        response[kState].body = body.body;
        if (body.type != null && !response[kState].headersList.contains("Content-Type")) {
          response[kState].headersList.append("content-type", body.type);
        }
      }
    }
    __name(initializeResponse, "initializeResponse");
    webidl.converters.ReadableStream = webidl.interfaceConverter(
      ReadableStream2
    );
    webidl.converters.FormData = webidl.interfaceConverter(
      FormData
    );
    webidl.converters.URLSearchParams = webidl.interfaceConverter(
      URLSearchParams
    );
    webidl.converters.XMLHttpRequestBodyInit = function(V) {
      if (typeof V === "string") {
        return webidl.converters.USVString(V);
      }
      if (isBlobLike(V)) {
        return webidl.converters.Blob(V, { strict: false });
      }
      if (types.isArrayBuffer(V) || types.isTypedArray(V) || types.isDataView(V)) {
        return webidl.converters.BufferSource(V);
      }
      if (util.isFormDataLike(V)) {
        return webidl.converters.FormData(V, { strict: false });
      }
      if (V instanceof URLSearchParams) {
        return webidl.converters.URLSearchParams(V);
      }
      return webidl.converters.DOMString(V);
    };
    webidl.converters.BodyInit = function(V) {
      if (V instanceof ReadableStream2) {
        return webidl.converters.ReadableStream(V);
      }
      if (V?.[Symbol.asyncIterator]) {
        return V;
      }
      return webidl.converters.XMLHttpRequestBodyInit(V);
    };
    webidl.converters.ResponseInit = webidl.dictionaryConverter([
      {
        key: "status",
        converter: webidl.converters["unsigned short"],
        defaultValue: 200
      },
      {
        key: "statusText",
        converter: webidl.converters.ByteString,
        defaultValue: ""
      },
      {
        key: "headers",
        converter: webidl.converters.HeadersInit
      }
    ]);
    module.exports = {
      makeNetworkError,
      makeResponse,
      makeAppropriateNetworkError,
      filterResponse,
      Response,
      cloneResponse
    };
  }
});

// node_modules/undici/lib/fetch/request.js
var require_request2 = __commonJS({
  "node_modules/undici/lib/fetch/request.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var { extractBody, mixinBody, cloneBody } = require_body();
    var { Headers, fill: fillHeaders, HeadersList } = require_headers();
    var { FinalizationRegistry } = require_dispatcher_weakref()();
    var util = require_util2();
    var {
      isValidHTTPToken,
      sameOrigin,
      normalizeMethod,
      makePolicyContainer,
      normalizeMethodRecord
    } = require_util3();
    var {
      forbiddenMethodsSet,
      corsSafeListedMethodsSet,
      referrerPolicy,
      requestRedirect,
      requestMode,
      requestCredentials,
      requestCache,
      requestDuplex
    } = require_constants2();
    var { kEnumerableProperty } = util;
    var { kHeaders, kSignal, kState, kGuard, kRealm } = require_symbols2();
    var { webidl } = require_webidl();
    var { getGlobalOrigin } = require_global();
    var { URLSerializer } = require_dataURL();
    var { kHeadersList, kConstruct } = require_symbols();
    var assert = __require("assert");
    var { getMaxListeners, setMaxListeners, getEventListeners, defaultMaxListeners } = __require("events");
    var TransformStream = globalThis.TransformStream;
    var kAbortController = Symbol("abortController");
    var requestFinalizer = new FinalizationRegistry(({ signal, abort }) => {
      signal.removeEventListener("abort", abort);
    });
    var Request = class _Request {
      static {
        __name(this, "Request");
      }
      // https://fetch.spec.whatwg.org/#dom-request
      constructor(input, init = {}) {
        if (input === kConstruct) {
          return;
        }
        webidl.argumentLengthCheck(arguments, 1, { header: "Request constructor" });
        input = webidl.converters.RequestInfo(input);
        init = webidl.converters.RequestInit(init);
        this[kRealm] = {
          settingsObject: {
            baseUrl: getGlobalOrigin(),
            get origin() {
              return this.baseUrl?.origin;
            },
            policyContainer: makePolicyContainer()
          }
        };
        let request = null;
        let fallbackMode = null;
        const baseUrl = this[kRealm].settingsObject.baseUrl;
        let signal = null;
        if (typeof input === "string") {
          let parsedURL;
          try {
            parsedURL = new URL(input, baseUrl);
          } catch (err) {
            throw new TypeError("Failed to parse URL from " + input, { cause: err });
          }
          if (parsedURL.username || parsedURL.password) {
            throw new TypeError(
              "Request cannot be constructed from a URL that includes credentials: " + input
            );
          }
          request = makeRequest({ urlList: [parsedURL] });
          fallbackMode = "cors";
        } else {
          assert(input instanceof _Request);
          request = input[kState];
          signal = input[kSignal];
        }
        const origin = this[kRealm].settingsObject.origin;
        let window2 = "client";
        if (request.window?.constructor?.name === "EnvironmentSettingsObject" && sameOrigin(request.window, origin)) {
          window2 = request.window;
        }
        if (init.window != null) {
          throw new TypeError(`'window' option '${window2}' must be null`);
        }
        if ("window" in init) {
          window2 = "no-window";
        }
        request = makeRequest({
          // URL request’s URL.
          // undici implementation note: this is set as the first item in request's urlList in makeRequest
          // method request’s method.
          method: request.method,
          // header list A copy of request’s header list.
          // undici implementation note: headersList is cloned in makeRequest
          headersList: request.headersList,
          // unsafe-request flag Set.
          unsafeRequest: request.unsafeRequest,
          // client This’s relevant settings object.
          client: this[kRealm].settingsObject,
          // window window.
          window: window2,
          // priority request’s priority.
          priority: request.priority,
          // origin request’s origin. The propagation of the origin is only significant for navigation requests
          // being handled by a service worker. In this scenario a request can have an origin that is different
          // from the current client.
          origin: request.origin,
          // referrer request’s referrer.
          referrer: request.referrer,
          // referrer policy request’s referrer policy.
          referrerPolicy: request.referrerPolicy,
          // mode request’s mode.
          mode: request.mode,
          // credentials mode request’s credentials mode.
          credentials: request.credentials,
          // cache mode request’s cache mode.
          cache: request.cache,
          // redirect mode request’s redirect mode.
          redirect: request.redirect,
          // integrity metadata request’s integrity metadata.
          integrity: request.integrity,
          // keepalive request’s keepalive.
          keepalive: request.keepalive,
          // reload-navigation flag request’s reload-navigation flag.
          reloadNavigation: request.reloadNavigation,
          // history-navigation flag request’s history-navigation flag.
          historyNavigation: request.historyNavigation,
          // URL list A clone of request’s URL list.
          urlList: [...request.urlList]
        });
        const initHasKey = Object.keys(init).length !== 0;
        if (initHasKey) {
          if (request.mode === "navigate") {
            request.mode = "same-origin";
          }
          request.reloadNavigation = false;
          request.historyNavigation = false;
          request.origin = "client";
          request.referrer = "client";
          request.referrerPolicy = "";
          request.url = request.urlList[request.urlList.length - 1];
          request.urlList = [request.url];
        }
        if (init.referrer !== void 0) {
          const referrer = init.referrer;
          if (referrer === "") {
            request.referrer = "no-referrer";
          } else {
            let parsedReferrer;
            try {
              parsedReferrer = new URL(referrer, baseUrl);
            } catch (err) {
              throw new TypeError(`Referrer "${referrer}" is not a valid URL.`, { cause: err });
            }
            if (parsedReferrer.protocol === "about:" && parsedReferrer.hostname === "client" || origin && !sameOrigin(parsedReferrer, this[kRealm].settingsObject.baseUrl)) {
              request.referrer = "client";
            } else {
              request.referrer = parsedReferrer;
            }
          }
        }
        if (init.referrerPolicy !== void 0) {
          request.referrerPolicy = init.referrerPolicy;
        }
        let mode;
        if (init.mode !== void 0) {
          mode = init.mode;
        } else {
          mode = fallbackMode;
        }
        if (mode === "navigate") {
          throw webidl.errors.exception({
            header: "Request constructor",
            message: "invalid request mode navigate."
          });
        }
        if (mode != null) {
          request.mode = mode;
        }
        if (init.credentials !== void 0) {
          request.credentials = init.credentials;
        }
        if (init.cache !== void 0) {
          request.cache = init.cache;
        }
        if (request.cache === "only-if-cached" && request.mode !== "same-origin") {
          throw new TypeError(
            "'only-if-cached' can be set only with 'same-origin' mode"
          );
        }
        if (init.redirect !== void 0) {
          request.redirect = init.redirect;
        }
        if (init.integrity != null) {
          request.integrity = String(init.integrity);
        }
        if (init.keepalive !== void 0) {
          request.keepalive = Boolean(init.keepalive);
        }
        if (init.method !== void 0) {
          let method = init.method;
          if (!isValidHTTPToken(method)) {
            throw new TypeError(`'${method}' is not a valid HTTP method.`);
          }
          if (forbiddenMethodsSet.has(method.toUpperCase())) {
            throw new TypeError(`'${method}' HTTP method is unsupported.`);
          }
          method = normalizeMethodRecord[method] ?? normalizeMethod(method);
          request.method = method;
        }
        if (init.signal !== void 0) {
          signal = init.signal;
        }
        this[kState] = request;
        const ac = new AbortController();
        this[kSignal] = ac.signal;
        this[kSignal][kRealm] = this[kRealm];
        if (signal != null) {
          if (!signal || typeof signal.aborted !== "boolean" || typeof signal.addEventListener !== "function") {
            throw new TypeError(
              "Failed to construct 'Request': member signal is not of type AbortSignal."
            );
          }
          if (signal.aborted) {
            ac.abort(signal.reason);
          } else {
            this[kAbortController] = ac;
            const acRef = new WeakRef(ac);
            const abort = /* @__PURE__ */ __name(function() {
              const ac2 = acRef.deref();
              if (ac2 !== void 0) {
                ac2.abort(this.reason);
              }
            }, "abort");
            try {
              if (typeof getMaxListeners === "function" && getMaxListeners(signal) === defaultMaxListeners) {
                setMaxListeners(100, signal);
              } else if (getEventListeners(signal, "abort").length >= defaultMaxListeners) {
                setMaxListeners(100, signal);
              }
            } catch {
            }
            util.addAbortListener(signal, abort);
            requestFinalizer.register(ac, { signal, abort });
          }
        }
        this[kHeaders] = new Headers(kConstruct);
        this[kHeaders][kHeadersList] = request.headersList;
        this[kHeaders][kGuard] = "request";
        this[kHeaders][kRealm] = this[kRealm];
        if (mode === "no-cors") {
          if (!corsSafeListedMethodsSet.has(request.method)) {
            throw new TypeError(
              `'${request.method} is unsupported in no-cors mode.`
            );
          }
          this[kHeaders][kGuard] = "request-no-cors";
        }
        if (initHasKey) {
          const headersList = this[kHeaders][kHeadersList];
          const headers = init.headers !== void 0 ? init.headers : new HeadersList(headersList);
          headersList.clear();
          if (headers instanceof HeadersList) {
            for (const [key, val] of headers) {
              headersList.append(key, val);
            }
            headersList.cookies = headers.cookies;
          } else {
            fillHeaders(this[kHeaders], headers);
          }
        }
        const inputBody = input instanceof _Request ? input[kState].body : null;
        if ((init.body != null || inputBody != null) && (request.method === "GET" || request.method === "HEAD")) {
          throw new TypeError("Request with GET/HEAD method cannot have body.");
        }
        let initBody = null;
        if (init.body != null) {
          const [extractedBody, contentType] = extractBody(
            init.body,
            request.keepalive
          );
          initBody = extractedBody;
          if (contentType && !this[kHeaders][kHeadersList].contains("content-type")) {
            this[kHeaders].append("content-type", contentType);
          }
        }
        const inputOrInitBody = initBody ?? inputBody;
        if (inputOrInitBody != null && inputOrInitBody.source == null) {
          if (initBody != null && init.duplex == null) {
            throw new TypeError("RequestInit: duplex option is required when sending a body.");
          }
          if (request.mode !== "same-origin" && request.mode !== "cors") {
            throw new TypeError(
              'If request is made from ReadableStream, mode should be "same-origin" or "cors"'
            );
          }
          request.useCORSPreflightFlag = true;
        }
        let finalBody = inputOrInitBody;
        if (initBody == null && inputBody != null) {
          if (util.isDisturbed(inputBody.stream) || inputBody.stream.locked) {
            throw new TypeError(
              "Cannot construct a Request with a Request object that has already been used."
            );
          }
          if (!TransformStream) {
            TransformStream = __require("stream/web").TransformStream;
          }
          const identityTransform = new TransformStream();
          inputBody.stream.pipeThrough(identityTransform);
          finalBody = {
            source: inputBody.source,
            length: inputBody.length,
            stream: identityTransform.readable
          };
        }
        this[kState].body = finalBody;
      }
      // Returns request’s HTTP method, which is "GET" by default.
      get method() {
        webidl.brandCheck(this, _Request);
        return this[kState].method;
      }
      // Returns the URL of request as a string.
      get url() {
        webidl.brandCheck(this, _Request);
        return URLSerializer(this[kState].url);
      }
      // Returns a Headers object consisting of the headers associated with request.
      // Note that headers added in the network layer by the user agent will not
      // be accounted for in this object, e.g., the "Host" header.
      get headers() {
        webidl.brandCheck(this, _Request);
        return this[kHeaders];
      }
      // Returns the kind of resource requested by request, e.g., "document"
      // or "script".
      get destination() {
        webidl.brandCheck(this, _Request);
        return this[kState].destination;
      }
      // Returns the referrer of request. Its value can be a same-origin URL if
      // explicitly set in init, the empty string to indicate no referrer, and
      // "about:client" when defaulting to the global’s default. This is used
      // during fetching to determine the value of the `Referer` header of the
      // request being made.
      get referrer() {
        webidl.brandCheck(this, _Request);
        if (this[kState].referrer === "no-referrer") {
          return "";
        }
        if (this[kState].referrer === "client") {
          return "about:client";
        }
        return this[kState].referrer.toString();
      }
      // Returns the referrer policy associated with request.
      // This is used during fetching to compute the value of the request’s
      // referrer.
      get referrerPolicy() {
        webidl.brandCheck(this, _Request);
        return this[kState].referrerPolicy;
      }
      // Returns the mode associated with request, which is a string indicating
      // whether the request will use CORS, or will be restricted to same-origin
      // URLs.
      get mode() {
        webidl.brandCheck(this, _Request);
        return this[kState].mode;
      }
      // Returns the credentials mode associated with request,
      // which is a string indicating whether credentials will be sent with the
      // request always, never, or only when sent to a same-origin URL.
      get credentials() {
        return this[kState].credentials;
      }
      // Returns the cache mode associated with request,
      // which is a string indicating how the request will
      // interact with the browser’s cache when fetching.
      get cache() {
        webidl.brandCheck(this, _Request);
        return this[kState].cache;
      }
      // Returns the redirect mode associated with request,
      // which is a string indicating how redirects for the
      // request will be handled during fetching. A request
      // will follow redirects by default.
      get redirect() {
        webidl.brandCheck(this, _Request);
        return this[kState].redirect;
      }
      // Returns request’s subresource integrity metadata, which is a
      // cryptographic hash of the resource being fetched. Its value
      // consists of multiple hashes separated by whitespace. [SRI]
      get integrity() {
        webidl.brandCheck(this, _Request);
        return this[kState].integrity;
      }
      // Returns a boolean indicating whether or not request can outlive the
      // global in which it was created.
      get keepalive() {
        webidl.brandCheck(this, _Request);
        return this[kState].keepalive;
      }
      // Returns a boolean indicating whether or not request is for a reload
      // navigation.
      get isReloadNavigation() {
        webidl.brandCheck(this, _Request);
        return this[kState].reloadNavigation;
      }
      // Returns a boolean indicating whether or not request is for a history
      // navigation (a.k.a. back-foward navigation).
      get isHistoryNavigation() {
        webidl.brandCheck(this, _Request);
        return this[kState].historyNavigation;
      }
      // Returns the signal associated with request, which is an AbortSignal
      // object indicating whether or not request has been aborted, and its
      // abort event handler.
      get signal() {
        webidl.brandCheck(this, _Request);
        return this[kSignal];
      }
      get body() {
        webidl.brandCheck(this, _Request);
        return this[kState].body ? this[kState].body.stream : null;
      }
      get bodyUsed() {
        webidl.brandCheck(this, _Request);
        return !!this[kState].body && util.isDisturbed(this[kState].body.stream);
      }
      get duplex() {
        webidl.brandCheck(this, _Request);
        return "half";
      }
      // Returns a clone of request.
      clone() {
        webidl.brandCheck(this, _Request);
        if (this.bodyUsed || this.body?.locked) {
          throw new TypeError("unusable");
        }
        const clonedRequest = cloneRequest(this[kState]);
        const clonedRequestObject = new _Request(kConstruct);
        clonedRequestObject[kState] = clonedRequest;
        clonedRequestObject[kRealm] = this[kRealm];
        clonedRequestObject[kHeaders] = new Headers(kConstruct);
        clonedRequestObject[kHeaders][kHeadersList] = clonedRequest.headersList;
        clonedRequestObject[kHeaders][kGuard] = this[kHeaders][kGuard];
        clonedRequestObject[kHeaders][kRealm] = this[kHeaders][kRealm];
        const ac = new AbortController();
        if (this.signal.aborted) {
          ac.abort(this.signal.reason);
        } else {
          util.addAbortListener(
            this.signal,
            () => {
              ac.abort(this.signal.reason);
            }
          );
        }
        clonedRequestObject[kSignal] = ac.signal;
        return clonedRequestObject;
      }
    };
    mixinBody(Request);
    function makeRequest(init) {
      const request = {
        method: "GET",
        localURLsOnly: false,
        unsafeRequest: false,
        body: null,
        client: null,
        reservedClient: null,
        replacesClientId: "",
        window: "client",
        keepalive: false,
        serviceWorkers: "all",
        initiator: "",
        destination: "",
        priority: null,
        origin: "client",
        policyContainer: "client",
        referrer: "client",
        referrerPolicy: "",
        mode: "no-cors",
        useCORSPreflightFlag: false,
        credentials: "same-origin",
        useCredentials: false,
        cache: "default",
        redirect: "follow",
        integrity: "",
        cryptoGraphicsNonceMetadata: "",
        parserMetadata: "",
        reloadNavigation: false,
        historyNavigation: false,
        userActivation: false,
        taintedOrigin: false,
        redirectCount: 0,
        responseTainting: "basic",
        preventNoCacheCacheControlHeaderModification: false,
        done: false,
        timingAllowFailed: false,
        ...init,
        headersList: init.headersList ? new HeadersList(init.headersList) : new HeadersList()
      };
      request.url = request.urlList[0];
      return request;
    }
    __name(makeRequest, "makeRequest");
    function cloneRequest(request) {
      const newRequest = makeRequest({ ...request, body: null });
      if (request.body != null) {
        newRequest.body = cloneBody(request.body);
      }
      return newRequest;
    }
    __name(cloneRequest, "cloneRequest");
    Object.defineProperties(Request.prototype, {
      method: kEnumerableProperty,
      url: kEnumerableProperty,
      headers: kEnumerableProperty,
      redirect: kEnumerableProperty,
      clone: kEnumerableProperty,
      signal: kEnumerableProperty,
      duplex: kEnumerableProperty,
      destination: kEnumerableProperty,
      body: kEnumerableProperty,
      bodyUsed: kEnumerableProperty,
      isHistoryNavigation: kEnumerableProperty,
      isReloadNavigation: kEnumerableProperty,
      keepalive: kEnumerableProperty,
      integrity: kEnumerableProperty,
      cache: kEnumerableProperty,
      credentials: kEnumerableProperty,
      attribute: kEnumerableProperty,
      referrerPolicy: kEnumerableProperty,
      referrer: kEnumerableProperty,
      mode: kEnumerableProperty,
      [Symbol.toStringTag]: {
        value: "Request",
        configurable: true
      }
    });
    webidl.converters.Request = webidl.interfaceConverter(
      Request
    );
    webidl.converters.RequestInfo = function(V) {
      if (typeof V === "string") {
        return webidl.converters.USVString(V);
      }
      if (V instanceof Request) {
        return webidl.converters.Request(V);
      }
      return webidl.converters.USVString(V);
    };
    webidl.converters.AbortSignal = webidl.interfaceConverter(
      AbortSignal
    );
    webidl.converters.RequestInit = webidl.dictionaryConverter([
      {
        key: "method",
        converter: webidl.converters.ByteString
      },
      {
        key: "headers",
        converter: webidl.converters.HeadersInit
      },
      {
        key: "body",
        converter: webidl.nullableConverter(
          webidl.converters.BodyInit
        )
      },
      {
        key: "referrer",
        converter: webidl.converters.USVString
      },
      {
        key: "referrerPolicy",
        converter: webidl.converters.DOMString,
        // https://w3c.github.io/webappsec-referrer-policy/#referrer-policy
        allowedValues: referrerPolicy
      },
      {
        key: "mode",
        converter: webidl.converters.DOMString,
        // https://fetch.spec.whatwg.org/#concept-request-mode
        allowedValues: requestMode
      },
      {
        key: "credentials",
        converter: webidl.converters.DOMString,
        // https://fetch.spec.whatwg.org/#requestcredentials
        allowedValues: requestCredentials
      },
      {
        key: "cache",
        converter: webidl.converters.DOMString,
        // https://fetch.spec.whatwg.org/#requestcache
        allowedValues: requestCache
      },
      {
        key: "redirect",
        converter: webidl.converters.DOMString,
        // https://fetch.spec.whatwg.org/#requestredirect
        allowedValues: requestRedirect
      },
      {
        key: "integrity",
        converter: webidl.converters.DOMString
      },
      {
        key: "keepalive",
        converter: webidl.converters.boolean
      },
      {
        key: "signal",
        converter: webidl.nullableConverter(
          (signal) => webidl.converters.AbortSignal(
            signal,
            { strict: false }
          )
        )
      },
      {
        key: "window",
        converter: webidl.converters.any
      },
      {
        key: "duplex",
        converter: webidl.converters.DOMString,
        allowedValues: requestDuplex
      }
    ]);
    module.exports = { Request, makeRequest };
  }
});

// node_modules/undici/lib/fetch/index.js
var require_fetch = __commonJS({
  "node_modules/undici/lib/fetch/index.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var {
      Response,
      makeNetworkError,
      makeAppropriateNetworkError,
      filterResponse,
      makeResponse
    } = require_response();
    var { Headers } = require_headers();
    var { Request, makeRequest } = require_request2();
    var zlib = __require("zlib");
    var {
      bytesMatch,
      makePolicyContainer,
      clonePolicyContainer,
      requestBadPort,
      TAOCheck,
      appendRequestOriginHeader,
      responseLocationURL,
      requestCurrentURL,
      setRequestReferrerPolicyOnRedirect,
      tryUpgradeRequestToAPotentiallyTrustworthyURL,
      createOpaqueTimingInfo,
      appendFetchMetadata,
      corsCheck,
      crossOriginResourcePolicyCheck,
      determineRequestsReferrer,
      coarsenedSharedCurrentTime,
      createDeferredPromise,
      isBlobLike,
      sameOrigin,
      isCancelled,
      isAborted,
      isErrorLike,
      fullyReadBody,
      readableStreamClose,
      isomorphicEncode,
      urlIsLocal,
      urlIsHttpHttpsScheme,
      urlHasHttpsScheme
    } = require_util3();
    var { kState, kHeaders, kGuard, kRealm } = require_symbols2();
    var assert = __require("assert");
    var { safelyExtractBody } = require_body();
    var {
      redirectStatusSet,
      nullBodyStatus,
      safeMethodsSet,
      requestBodyHeader,
      subresourceSet,
      DOMException: DOMException2
    } = require_constants2();
    var { kHeadersList } = require_symbols();
    var EE = __require("events");
    var { Readable, pipeline } = __require("stream");
    var { addAbortListener, isErrored, isReadable, nodeMajor, nodeMinor } = require_util2();
    var { dataURLProcessor, serializeAMimeType } = require_dataURL();
    var { TransformStream } = __require("stream/web");
    var { getGlobalDispatcher } = require_global2();
    var { webidl } = require_webidl();
    var { STATUS_CODES } = __require("http");
    var GET_OR_HEAD = ["GET", "HEAD"];
    var resolveObjectURL;
    var ReadableStream2 = globalThis.ReadableStream;
    var Fetch = class extends EE {
      static {
        __name(this, "Fetch");
      }
      constructor(dispatcher) {
        super();
        this.dispatcher = dispatcher;
        this.connection = null;
        this.dump = false;
        this.state = "ongoing";
        this.setMaxListeners(21);
      }
      terminate(reason) {
        if (this.state !== "ongoing") {
          return;
        }
        this.state = "terminated";
        this.connection?.destroy(reason);
        this.emit("terminated", reason);
      }
      // https://fetch.spec.whatwg.org/#fetch-controller-abort
      abort(error) {
        if (this.state !== "ongoing") {
          return;
        }
        this.state = "aborted";
        if (!error) {
          error = new DOMException2("The operation was aborted.", "AbortError");
        }
        this.serializedAbortReason = error;
        this.connection?.destroy(error);
        this.emit("terminated", error);
      }
    };
    function fetch(input, init = {}) {
      webidl.argumentLengthCheck(arguments, 1, { header: "globalThis.fetch" });
      const p = createDeferredPromise();
      let requestObject;
      try {
        requestObject = new Request(input, init);
      } catch (e) {
        p.reject(e);
        return p.promise;
      }
      const request = requestObject[kState];
      if (requestObject.signal.aborted) {
        abortFetch(p, request, null, requestObject.signal.reason);
        return p.promise;
      }
      const globalObject = request.client.globalObject;
      if (globalObject?.constructor?.name === "ServiceWorkerGlobalScope") {
        request.serviceWorkers = "none";
      }
      let responseObject = null;
      const relevantRealm = null;
      let locallyAborted = false;
      let controller = null;
      addAbortListener(
        requestObject.signal,
        () => {
          locallyAborted = true;
          assert(controller != null);
          controller.abort(requestObject.signal.reason);
          abortFetch(p, request, responseObject, requestObject.signal.reason);
        }
      );
      const handleFetchDone = /* @__PURE__ */ __name((response) => finalizeAndReportTiming(response, "fetch"), "handleFetchDone");
      const processResponse = /* @__PURE__ */ __name((response) => {
        if (locallyAborted) {
          return Promise.resolve();
        }
        if (response.aborted) {
          abortFetch(p, request, responseObject, controller.serializedAbortReason);
          return Promise.resolve();
        }
        if (response.type === "error") {
          p.reject(
            Object.assign(new TypeError("fetch failed"), { cause: response.error })
          );
          return Promise.resolve();
        }
        responseObject = new Response();
        responseObject[kState] = response;
        responseObject[kRealm] = relevantRealm;
        responseObject[kHeaders][kHeadersList] = response.headersList;
        responseObject[kHeaders][kGuard] = "immutable";
        responseObject[kHeaders][kRealm] = relevantRealm;
        p.resolve(responseObject);
      }, "processResponse");
      controller = fetching({
        request,
        processResponseEndOfBody: handleFetchDone,
        processResponse,
        dispatcher: init.dispatcher ?? getGlobalDispatcher()
        // undici
      });
      return p.promise;
    }
    __name(fetch, "fetch");
    function finalizeAndReportTiming(response, initiatorType = "other") {
      if (response.type === "error" && response.aborted) {
        return;
      }
      if (!response.urlList?.length) {
        return;
      }
      const originalURL = response.urlList[0];
      let timingInfo = response.timingInfo;
      let cacheState = response.cacheState;
      if (!urlIsHttpHttpsScheme(originalURL)) {
        return;
      }
      if (timingInfo === null) {
        return;
      }
      if (!response.timingAllowPassed) {
        timingInfo = createOpaqueTimingInfo({
          startTime: timingInfo.startTime
        });
        cacheState = "";
      }
      timingInfo.endTime = coarsenedSharedCurrentTime();
      response.timingInfo = timingInfo;
      markResourceTiming(
        timingInfo,
        originalURL,
        initiatorType,
        globalThis,
        cacheState
      );
    }
    __name(finalizeAndReportTiming, "finalizeAndReportTiming");
    function markResourceTiming(timingInfo, originalURL, initiatorType, globalThis2, cacheState) {
      if (nodeMajor > 18 || nodeMajor === 18 && nodeMinor >= 2) {
        performance.markResourceTiming(timingInfo, originalURL.href, initiatorType, globalThis2, cacheState);
      }
    }
    __name(markResourceTiming, "markResourceTiming");
    function abortFetch(p, request, responseObject, error) {
      if (!error) {
        error = new DOMException2("The operation was aborted.", "AbortError");
      }
      p.reject(error);
      if (request.body != null && isReadable(request.body?.stream)) {
        request.body.stream.cancel(error).catch((err) => {
          if (err.code === "ERR_INVALID_STATE") {
            return;
          }
          throw err;
        });
      }
      if (responseObject == null) {
        return;
      }
      const response = responseObject[kState];
      if (response.body != null && isReadable(response.body?.stream)) {
        response.body.stream.cancel(error).catch((err) => {
          if (err.code === "ERR_INVALID_STATE") {
            return;
          }
          throw err;
        });
      }
    }
    __name(abortFetch, "abortFetch");
    function fetching({
      request,
      processRequestBodyChunkLength,
      processRequestEndOfBody,
      processResponse,
      processResponseEndOfBody,
      processResponseConsumeBody,
      useParallelQueue = false,
      dispatcher
      // undici
    }) {
      let taskDestination = null;
      let crossOriginIsolatedCapability = false;
      if (request.client != null) {
        taskDestination = request.client.globalObject;
        crossOriginIsolatedCapability = request.client.crossOriginIsolatedCapability;
      }
      const currenTime = coarsenedSharedCurrentTime(crossOriginIsolatedCapability);
      const timingInfo = createOpaqueTimingInfo({
        startTime: currenTime
      });
      const fetchParams = {
        controller: new Fetch(dispatcher),
        request,
        timingInfo,
        processRequestBodyChunkLength,
        processRequestEndOfBody,
        processResponse,
        processResponseConsumeBody,
        processResponseEndOfBody,
        taskDestination,
        crossOriginIsolatedCapability
      };
      assert(!request.body || request.body.stream);
      if (request.window === "client") {
        request.window = request.client?.globalObject?.constructor?.name === "Window" ? request.client : "no-window";
      }
      if (request.origin === "client") {
        request.origin = request.client?.origin;
      }
      if (request.policyContainer === "client") {
        if (request.client != null) {
          request.policyContainer = clonePolicyContainer(
            request.client.policyContainer
          );
        } else {
          request.policyContainer = makePolicyContainer();
        }
      }
      if (!request.headersList.contains("accept")) {
        const value = "*/*";
        request.headersList.append("accept", value);
      }
      if (!request.headersList.contains("accept-language")) {
        request.headersList.append("accept-language", "*");
      }
      if (request.priority === null) {
      }
      if (subresourceSet.has(request.destination)) {
      }
      mainFetch(fetchParams).catch((err) => {
        fetchParams.controller.terminate(err);
      });
      return fetchParams.controller;
    }
    __name(fetching, "fetching");
    async function mainFetch(fetchParams, recursive = false) {
      const request = fetchParams.request;
      let response = null;
      if (request.localURLsOnly && !urlIsLocal(requestCurrentURL(request))) {
        response = makeNetworkError("local URLs only");
      }
      tryUpgradeRequestToAPotentiallyTrustworthyURL(request);
      if (requestBadPort(request) === "blocked") {
        response = makeNetworkError("bad port");
      }
      if (request.referrerPolicy === "") {
        request.referrerPolicy = request.policyContainer.referrerPolicy;
      }
      if (request.referrer !== "no-referrer") {
        request.referrer = determineRequestsReferrer(request);
      }
      if (response === null) {
        response = await (async () => {
          const currentURL = requestCurrentURL(request);
          if (
            // - request’s current URL’s origin is same origin with request’s origin,
            //   and request’s response tainting is "basic"
            sameOrigin(currentURL, request.url) && request.responseTainting === "basic" || // request’s current URL’s scheme is "data"
            currentURL.protocol === "data:" || // - request’s mode is "navigate" or "websocket"
            (request.mode === "navigate" || request.mode === "websocket")
          ) {
            request.responseTainting = "basic";
            return await schemeFetch(fetchParams);
          }
          if (request.mode === "same-origin") {
            return makeNetworkError('request mode cannot be "same-origin"');
          }
          if (request.mode === "no-cors") {
            if (request.redirect !== "follow") {
              return makeNetworkError(
                'redirect mode cannot be "follow" for "no-cors" request'
              );
            }
            request.responseTainting = "opaque";
            return await schemeFetch(fetchParams);
          }
          if (!urlIsHttpHttpsScheme(requestCurrentURL(request))) {
            return makeNetworkError("URL scheme must be a HTTP(S) scheme");
          }
          request.responseTainting = "cors";
          return await httpFetch(fetchParams);
        })();
      }
      if (recursive) {
        return response;
      }
      if (response.status !== 0 && !response.internalResponse) {
        if (request.responseTainting === "cors") {
        }
        if (request.responseTainting === "basic") {
          response = filterResponse(response, "basic");
        } else if (request.responseTainting === "cors") {
          response = filterResponse(response, "cors");
        } else if (request.responseTainting === "opaque") {
          response = filterResponse(response, "opaque");
        } else {
          assert(false);
        }
      }
      let internalResponse = response.status === 0 ? response : response.internalResponse;
      if (internalResponse.urlList.length === 0) {
        internalResponse.urlList.push(...request.urlList);
      }
      if (!request.timingAllowFailed) {
        response.timingAllowPassed = true;
      }
      if (response.type === "opaque" && internalResponse.status === 206 && internalResponse.rangeRequested && !request.headers.contains("range")) {
        response = internalResponse = makeNetworkError();
      }
      if (response.status !== 0 && (request.method === "HEAD" || request.method === "CONNECT" || nullBodyStatus.includes(internalResponse.status))) {
        internalResponse.body = null;
        fetchParams.controller.dump = true;
      }
      if (request.integrity) {
        const processBodyError = /* @__PURE__ */ __name((reason) => fetchFinale(fetchParams, makeNetworkError(reason)), "processBodyError");
        if (request.responseTainting === "opaque" || response.body == null) {
          processBodyError(response.error);
          return;
        }
        const processBody = /* @__PURE__ */ __name((bytes) => {
          if (!bytesMatch(bytes, request.integrity)) {
            processBodyError("integrity mismatch");
            return;
          }
          response.body = safelyExtractBody(bytes)[0];
          fetchFinale(fetchParams, response);
        }, "processBody");
        await fullyReadBody(response.body, processBody, processBodyError);
      } else {
        fetchFinale(fetchParams, response);
      }
    }
    __name(mainFetch, "mainFetch");
    function schemeFetch(fetchParams) {
      if (isCancelled(fetchParams) && fetchParams.request.redirectCount === 0) {
        return Promise.resolve(makeAppropriateNetworkError(fetchParams));
      }
      const { request } = fetchParams;
      const { protocol: scheme } = requestCurrentURL(request);
      switch (scheme) {
        case "about:": {
          return Promise.resolve(makeNetworkError("about scheme is not supported"));
        }
        case "blob:": {
          if (!resolveObjectURL) {
            resolveObjectURL = __require("buffer").resolveObjectURL;
          }
          const blobURLEntry = requestCurrentURL(request);
          if (blobURLEntry.search.length !== 0) {
            return Promise.resolve(makeNetworkError("NetworkError when attempting to fetch resource."));
          }
          const blobURLEntryObject = resolveObjectURL(blobURLEntry.toString());
          if (request.method !== "GET" || !isBlobLike(blobURLEntryObject)) {
            return Promise.resolve(makeNetworkError("invalid method"));
          }
          const bodyWithType = safelyExtractBody(blobURLEntryObject);
          const body = bodyWithType[0];
          const length = isomorphicEncode(`${body.length}`);
          const type = bodyWithType[1] ?? "";
          const response = makeResponse({
            statusText: "OK",
            headersList: [
              ["content-length", { name: "Content-Length", value: length }],
              ["content-type", { name: "Content-Type", value: type }]
            ]
          });
          response.body = body;
          return Promise.resolve(response);
        }
        case "data:": {
          const currentURL = requestCurrentURL(request);
          const dataURLStruct = dataURLProcessor(currentURL);
          if (dataURLStruct === "failure") {
            return Promise.resolve(makeNetworkError("failed to fetch the data URL"));
          }
          const mimeType = serializeAMimeType(dataURLStruct.mimeType);
          return Promise.resolve(makeResponse({
            statusText: "OK",
            headersList: [
              ["content-type", { name: "Content-Type", value: mimeType }]
            ],
            body: safelyExtractBody(dataURLStruct.body)[0]
          }));
        }
        case "file:": {
          return Promise.resolve(makeNetworkError("not implemented... yet..."));
        }
        case "http:":
        case "https:": {
          return httpFetch(fetchParams).catch((err) => makeNetworkError(err));
        }
        default: {
          return Promise.resolve(makeNetworkError("unknown scheme"));
        }
      }
    }
    __name(schemeFetch, "schemeFetch");
    function finalizeResponse(fetchParams, response) {
      fetchParams.request.done = true;
      if (fetchParams.processResponseDone != null) {
        queueMicrotask(() => fetchParams.processResponseDone(response));
      }
    }
    __name(finalizeResponse, "finalizeResponse");
    function fetchFinale(fetchParams, response) {
      if (response.type === "error") {
        response.urlList = [fetchParams.request.urlList[0]];
        response.timingInfo = createOpaqueTimingInfo({
          startTime: fetchParams.timingInfo.startTime
        });
      }
      const processResponseEndOfBody = /* @__PURE__ */ __name(() => {
        fetchParams.request.done = true;
        if (fetchParams.processResponseEndOfBody != null) {
          queueMicrotask(() => fetchParams.processResponseEndOfBody(response));
        }
      }, "processResponseEndOfBody");
      if (fetchParams.processResponse != null) {
        queueMicrotask(() => fetchParams.processResponse(response));
      }
      if (response.body == null) {
        processResponseEndOfBody();
      } else {
        const identityTransformAlgorithm = /* @__PURE__ */ __name((chunk, controller) => {
          controller.enqueue(chunk);
        }, "identityTransformAlgorithm");
        const transformStream = new TransformStream({
          start() {
          },
          transform: identityTransformAlgorithm,
          flush: processResponseEndOfBody
        }, {
          size() {
            return 1;
          }
        }, {
          size() {
            return 1;
          }
        });
        response.body = { stream: response.body.stream.pipeThrough(transformStream) };
      }
      if (fetchParams.processResponseConsumeBody != null) {
        const processBody = /* @__PURE__ */ __name((nullOrBytes) => fetchParams.processResponseConsumeBody(response, nullOrBytes), "processBody");
        const processBodyError = /* @__PURE__ */ __name((failure) => fetchParams.processResponseConsumeBody(response, failure), "processBodyError");
        if (response.body == null) {
          queueMicrotask(() => processBody(null));
        } else {
          return fullyReadBody(response.body, processBody, processBodyError);
        }
        return Promise.resolve();
      }
    }
    __name(fetchFinale, "fetchFinale");
    async function httpFetch(fetchParams) {
      const request = fetchParams.request;
      let response = null;
      let actualResponse = null;
      const timingInfo = fetchParams.timingInfo;
      if (request.serviceWorkers === "all") {
      }
      if (response === null) {
        if (request.redirect === "follow") {
          request.serviceWorkers = "none";
        }
        actualResponse = response = await httpNetworkOrCacheFetch(fetchParams);
        if (request.responseTainting === "cors" && corsCheck(request, response) === "failure") {
          return makeNetworkError("cors failure");
        }
        if (TAOCheck(request, response) === "failure") {
          request.timingAllowFailed = true;
        }
      }
      if ((request.responseTainting === "opaque" || response.type === "opaque") && crossOriginResourcePolicyCheck(
        request.origin,
        request.client,
        request.destination,
        actualResponse
      ) === "blocked") {
        return makeNetworkError("blocked");
      }
      if (redirectStatusSet.has(actualResponse.status)) {
        if (request.redirect !== "manual") {
          fetchParams.controller.connection.destroy();
        }
        if (request.redirect === "error") {
          response = makeNetworkError("unexpected redirect");
        } else if (request.redirect === "manual") {
          response = actualResponse;
        } else if (request.redirect === "follow") {
          response = await httpRedirectFetch(fetchParams, response);
        } else {
          assert(false);
        }
      }
      response.timingInfo = timingInfo;
      return response;
    }
    __name(httpFetch, "httpFetch");
    function httpRedirectFetch(fetchParams, response) {
      const request = fetchParams.request;
      const actualResponse = response.internalResponse ? response.internalResponse : response;
      let locationURL;
      try {
        locationURL = responseLocationURL(
          actualResponse,
          requestCurrentURL(request).hash
        );
        if (locationURL == null) {
          return response;
        }
      } catch (err) {
        return Promise.resolve(makeNetworkError(err));
      }
      if (!urlIsHttpHttpsScheme(locationURL)) {
        return Promise.resolve(makeNetworkError("URL scheme must be a HTTP(S) scheme"));
      }
      if (request.redirectCount === 20) {
        return Promise.resolve(makeNetworkError("redirect count exceeded"));
      }
      request.redirectCount += 1;
      if (request.mode === "cors" && (locationURL.username || locationURL.password) && !sameOrigin(request, locationURL)) {
        return Promise.resolve(makeNetworkError('cross origin not allowed for request mode "cors"'));
      }
      if (request.responseTainting === "cors" && (locationURL.username || locationURL.password)) {
        return Promise.resolve(makeNetworkError(
          'URL cannot contain credentials for request mode "cors"'
        ));
      }
      if (actualResponse.status !== 303 && request.body != null && request.body.source == null) {
        return Promise.resolve(makeNetworkError());
      }
      if ([301, 302].includes(actualResponse.status) && request.method === "POST" || actualResponse.status === 303 && !GET_OR_HEAD.includes(request.method)) {
        request.method = "GET";
        request.body = null;
        for (const headerName of requestBodyHeader) {
          request.headersList.delete(headerName);
        }
      }
      if (!sameOrigin(requestCurrentURL(request), locationURL)) {
        request.headersList.delete("authorization");
        request.headersList.delete("proxy-authorization", true);
        request.headersList.delete("cookie");
        request.headersList.delete("host");
      }
      if (request.body != null) {
        assert(request.body.source != null);
        request.body = safelyExtractBody(request.body.source)[0];
      }
      const timingInfo = fetchParams.timingInfo;
      timingInfo.redirectEndTime = timingInfo.postRedirectStartTime = coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability);
      if (timingInfo.redirectStartTime === 0) {
        timingInfo.redirectStartTime = timingInfo.startTime;
      }
      request.urlList.push(locationURL);
      setRequestReferrerPolicyOnRedirect(request, actualResponse);
      return mainFetch(fetchParams, true);
    }
    __name(httpRedirectFetch, "httpRedirectFetch");
    async function httpNetworkOrCacheFetch(fetchParams, isAuthenticationFetch = false, isNewConnectionFetch = false) {
      const request = fetchParams.request;
      let httpFetchParams = null;
      let httpRequest = null;
      let response = null;
      const httpCache = null;
      const revalidatingFlag = false;
      if (request.window === "no-window" && request.redirect === "error") {
        httpFetchParams = fetchParams;
        httpRequest = request;
      } else {
        httpRequest = makeRequest(request);
        httpFetchParams = { ...fetchParams };
        httpFetchParams.request = httpRequest;
      }
      const includeCredentials = request.credentials === "include" || request.credentials === "same-origin" && request.responseTainting === "basic";
      const contentLength = httpRequest.body ? httpRequest.body.length : null;
      let contentLengthHeaderValue = null;
      if (httpRequest.body == null && ["POST", "PUT"].includes(httpRequest.method)) {
        contentLengthHeaderValue = "0";
      }
      if (contentLength != null) {
        contentLengthHeaderValue = isomorphicEncode(`${contentLength}`);
      }
      if (contentLengthHeaderValue != null) {
        httpRequest.headersList.append("content-length", contentLengthHeaderValue);
      }
      if (contentLength != null && httpRequest.keepalive) {
      }
      if (httpRequest.referrer instanceof URL) {
        httpRequest.headersList.append("referer", isomorphicEncode(httpRequest.referrer.href));
      }
      appendRequestOriginHeader(httpRequest);
      appendFetchMetadata(httpRequest);
      if (!httpRequest.headersList.contains("user-agent")) {
        httpRequest.headersList.append("user-agent", typeof esbuildDetection === "undefined" ? "undici" : "node");
      }
      if (httpRequest.cache === "default" && (httpRequest.headersList.contains("if-modified-since") || httpRequest.headersList.contains("if-none-match") || httpRequest.headersList.contains("if-unmodified-since") || httpRequest.headersList.contains("if-match") || httpRequest.headersList.contains("if-range"))) {
        httpRequest.cache = "no-store";
      }
      if (httpRequest.cache === "no-cache" && !httpRequest.preventNoCacheCacheControlHeaderModification && !httpRequest.headersList.contains("cache-control")) {
        httpRequest.headersList.append("cache-control", "max-age=0");
      }
      if (httpRequest.cache === "no-store" || httpRequest.cache === "reload") {
        if (!httpRequest.headersList.contains("pragma")) {
          httpRequest.headersList.append("pragma", "no-cache");
        }
        if (!httpRequest.headersList.contains("cache-control")) {
          httpRequest.headersList.append("cache-control", "no-cache");
        }
      }
      if (httpRequest.headersList.contains("range")) {
        httpRequest.headersList.append("accept-encoding", "identity");
      }
      if (!httpRequest.headersList.contains("accept-encoding")) {
        if (urlHasHttpsScheme(requestCurrentURL(httpRequest))) {
          httpRequest.headersList.append("accept-encoding", "br, gzip, deflate");
        } else {
          httpRequest.headersList.append("accept-encoding", "gzip, deflate");
        }
      }
      httpRequest.headersList.delete("host");
      if (includeCredentials) {
      }
      if (httpCache == null) {
        httpRequest.cache = "no-store";
      }
      if (httpRequest.mode !== "no-store" && httpRequest.mode !== "reload") {
      }
      if (response == null) {
        if (httpRequest.mode === "only-if-cached") {
          return makeNetworkError("only if cached");
        }
        const forwardResponse = await httpNetworkFetch(
          httpFetchParams,
          includeCredentials,
          isNewConnectionFetch
        );
        if (!safeMethodsSet.has(httpRequest.method) && forwardResponse.status >= 200 && forwardResponse.status <= 399) {
        }
        if (revalidatingFlag && forwardResponse.status === 304) {
        }
        if (response == null) {
          response = forwardResponse;
        }
      }
      response.urlList = [...httpRequest.urlList];
      if (httpRequest.headersList.contains("range")) {
        response.rangeRequested = true;
      }
      response.requestIncludesCredentials = includeCredentials;
      if (response.status === 407) {
        if (request.window === "no-window") {
          return makeNetworkError();
        }
        if (isCancelled(fetchParams)) {
          return makeAppropriateNetworkError(fetchParams);
        }
        return makeNetworkError("proxy authentication required");
      }
      if (
        // response’s status is 421
        response.status === 421 && // isNewConnectionFetch is false
        !isNewConnectionFetch && // request’s body is null, or request’s body is non-null and request’s body’s source is non-null
        (request.body == null || request.body.source != null)
      ) {
        if (isCancelled(fetchParams)) {
          return makeAppropriateNetworkError(fetchParams);
        }
        fetchParams.controller.connection.destroy();
        response = await httpNetworkOrCacheFetch(
          fetchParams,
          isAuthenticationFetch,
          true
        );
      }
      if (isAuthenticationFetch) {
      }
      return response;
    }
    __name(httpNetworkOrCacheFetch, "httpNetworkOrCacheFetch");
    async function httpNetworkFetch(fetchParams, includeCredentials = false, forceNewConnection = false) {
      assert(!fetchParams.controller.connection || fetchParams.controller.connection.destroyed);
      fetchParams.controller.connection = {
        abort: null,
        destroyed: false,
        destroy(err) {
          if (!this.destroyed) {
            this.destroyed = true;
            this.abort?.(err ?? new DOMException2("The operation was aborted.", "AbortError"));
          }
        }
      };
      const request = fetchParams.request;
      let response = null;
      const timingInfo = fetchParams.timingInfo;
      const httpCache = null;
      if (httpCache == null) {
        request.cache = "no-store";
      }
      const newConnection = forceNewConnection ? "yes" : "no";
      if (request.mode === "websocket") {
      } else {
      }
      let requestBody = null;
      if (request.body == null && fetchParams.processRequestEndOfBody) {
        queueMicrotask(() => fetchParams.processRequestEndOfBody());
      } else if (request.body != null) {
        const processBodyChunk = /* @__PURE__ */ __name(async function* (bytes) {
          if (isCancelled(fetchParams)) {
            return;
          }
          yield bytes;
          fetchParams.processRequestBodyChunkLength?.(bytes.byteLength);
        }, "processBodyChunk");
        const processEndOfBody = /* @__PURE__ */ __name(() => {
          if (isCancelled(fetchParams)) {
            return;
          }
          if (fetchParams.processRequestEndOfBody) {
            fetchParams.processRequestEndOfBody();
          }
        }, "processEndOfBody");
        const processBodyError = /* @__PURE__ */ __name((e) => {
          if (isCancelled(fetchParams)) {
            return;
          }
          if (e.name === "AbortError") {
            fetchParams.controller.abort();
          } else {
            fetchParams.controller.terminate(e);
          }
        }, "processBodyError");
        requestBody = async function* () {
          try {
            for await (const bytes of request.body.stream) {
              yield* processBodyChunk(bytes);
            }
            processEndOfBody();
          } catch (err) {
            processBodyError(err);
          }
        }();
      }
      try {
        const { body, status, statusText, headersList, socket } = await dispatch({ body: requestBody });
        if (socket) {
          response = makeResponse({ status, statusText, headersList, socket });
        } else {
          const iterator = body[Symbol.asyncIterator]();
          fetchParams.controller.next = () => iterator.next();
          response = makeResponse({ status, statusText, headersList });
        }
      } catch (err) {
        if (err.name === "AbortError") {
          fetchParams.controller.connection.destroy();
          return makeAppropriateNetworkError(fetchParams, err);
        }
        return makeNetworkError(err);
      }
      const pullAlgorithm = /* @__PURE__ */ __name(() => {
        fetchParams.controller.resume();
      }, "pullAlgorithm");
      const cancelAlgorithm = /* @__PURE__ */ __name((reason) => {
        fetchParams.controller.abort(reason);
      }, "cancelAlgorithm");
      if (!ReadableStream2) {
        ReadableStream2 = __require("stream/web").ReadableStream;
      }
      const stream = new ReadableStream2(
        {
          async start(controller) {
            fetchParams.controller.controller = controller;
          },
          async pull(controller) {
            await pullAlgorithm(controller);
          },
          async cancel(reason) {
            await cancelAlgorithm(reason);
          }
        },
        {
          highWaterMark: 0,
          size() {
            return 1;
          }
        }
      );
      response.body = { stream };
      fetchParams.controller.on("terminated", onAborted);
      fetchParams.controller.resume = async () => {
        while (true) {
          let bytes;
          let isFailure;
          try {
            const { done, value } = await fetchParams.controller.next();
            if (isAborted(fetchParams)) {
              break;
            }
            bytes = done ? void 0 : value;
          } catch (err) {
            if (fetchParams.controller.ended && !timingInfo.encodedBodySize) {
              bytes = void 0;
            } else {
              bytes = err;
              isFailure = true;
            }
          }
          if (bytes === void 0) {
            readableStreamClose(fetchParams.controller.controller);
            finalizeResponse(fetchParams, response);
            return;
          }
          timingInfo.decodedBodySize += bytes?.byteLength ?? 0;
          if (isFailure) {
            fetchParams.controller.terminate(bytes);
            return;
          }
          fetchParams.controller.controller.enqueue(new Uint8Array(bytes));
          if (isErrored(stream)) {
            fetchParams.controller.terminate();
            return;
          }
          if (!fetchParams.controller.controller.desiredSize) {
            return;
          }
        }
      };
      function onAborted(reason) {
        if (isAborted(fetchParams)) {
          response.aborted = true;
          if (isReadable(stream)) {
            fetchParams.controller.controller.error(
              fetchParams.controller.serializedAbortReason
            );
          }
        } else {
          if (isReadable(stream)) {
            fetchParams.controller.controller.error(new TypeError("terminated", {
              cause: isErrorLike(reason) ? reason : void 0
            }));
          }
        }
        fetchParams.controller.connection.destroy();
      }
      __name(onAborted, "onAborted");
      return response;
      async function dispatch({ body }) {
        const url2 = requestCurrentURL(request);
        const agent = fetchParams.controller.dispatcher;
        return new Promise((resolve, reject) => agent.dispatch(
          {
            path: url2.pathname + url2.search,
            origin: url2.origin,
            method: request.method,
            body: fetchParams.controller.dispatcher.isMockActive ? request.body && (request.body.source || request.body.stream) : body,
            headers: request.headersList.entries,
            maxRedirections: 0,
            upgrade: request.mode === "websocket" ? "websocket" : void 0
          },
          {
            body: null,
            abort: null,
            onConnect(abort) {
              const { connection } = fetchParams.controller;
              if (connection.destroyed) {
                abort(new DOMException2("The operation was aborted.", "AbortError"));
              } else {
                fetchParams.controller.on("terminated", abort);
                this.abort = connection.abort = abort;
              }
            },
            onHeaders(status, headersList, resume, statusText) {
              if (status < 200) {
                return;
              }
              let codings = [];
              let location = "";
              const headers = new Headers();
              if (Array.isArray(headersList)) {
                for (let n = 0; n < headersList.length; n += 2) {
                  const key = headersList[n + 0].toString("latin1");
                  const val = headersList[n + 1].toString("latin1");
                  if (key.toLowerCase() === "content-encoding") {
                    codings = val.toLowerCase().split(",").map((x) => x.trim());
                  } else if (key.toLowerCase() === "location") {
                    location = val;
                  }
                  headers[kHeadersList].append(key, val);
                }
              } else {
                const keys = Object.keys(headersList);
                for (const key of keys) {
                  const val = headersList[key];
                  if (key.toLowerCase() === "content-encoding") {
                    codings = val.toLowerCase().split(",").map((x) => x.trim()).reverse();
                  } else if (key.toLowerCase() === "location") {
                    location = val;
                  }
                  headers[kHeadersList].append(key, val);
                }
              }
              this.body = new Readable({ read: resume });
              const decoders = [];
              const willFollow = request.redirect === "follow" && location && redirectStatusSet.has(status);
              if (request.method !== "HEAD" && request.method !== "CONNECT" && !nullBodyStatus.includes(status) && !willFollow) {
                for (const coding of codings) {
                  if (coding === "x-gzip" || coding === "gzip") {
                    decoders.push(zlib.createGunzip({
                      // Be less strict when decoding compressed responses, since sometimes
                      // servers send slightly invalid responses that are still accepted
                      // by common browsers.
                      // Always using Z_SYNC_FLUSH is what cURL does.
                      flush: zlib.constants.Z_SYNC_FLUSH,
                      finishFlush: zlib.constants.Z_SYNC_FLUSH
                    }));
                  } else if (coding === "deflate") {
                    decoders.push(zlib.createInflate());
                  } else if (coding === "br") {
                    decoders.push(zlib.createBrotliDecompress());
                  } else {
                    decoders.length = 0;
                    break;
                  }
                }
              }
              resolve({
                status,
                statusText,
                headersList: headers[kHeadersList],
                body: decoders.length ? pipeline(this.body, ...decoders, () => {
                }) : this.body.on("error", () => {
                })
              });
              return true;
            },
            onData(chunk) {
              if (fetchParams.controller.dump) {
                return;
              }
              const bytes = chunk;
              timingInfo.encodedBodySize += bytes.byteLength;
              return this.body.push(bytes);
            },
            onComplete() {
              if (this.abort) {
                fetchParams.controller.off("terminated", this.abort);
              }
              fetchParams.controller.ended = true;
              this.body.push(null);
            },
            onError(error) {
              if (this.abort) {
                fetchParams.controller.off("terminated", this.abort);
              }
              this.body?.destroy(error);
              fetchParams.controller.terminate(error);
              reject(error);
            },
            onUpgrade(status, headersList, socket) {
              if (status !== 101) {
                return;
              }
              const headers = new Headers();
              for (let n = 0; n < headersList.length; n += 2) {
                const key = headersList[n + 0].toString("latin1");
                const val = headersList[n + 1].toString("latin1");
                headers[kHeadersList].append(key, val);
              }
              resolve({
                status,
                statusText: STATUS_CODES[status],
                headersList: headers[kHeadersList],
                socket
              });
              return true;
            }
          }
        ));
      }
      __name(dispatch, "dispatch");
    }
    __name(httpNetworkFetch, "httpNetworkFetch");
    module.exports = {
      fetch,
      Fetch,
      fetching,
      finalizeAndReportTiming
    };
  }
});

// node_modules/undici/lib/fileapi/symbols.js
var require_symbols3 = __commonJS({
  "node_modules/undici/lib/fileapi/symbols.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    module.exports = {
      kState: Symbol("FileReader state"),
      kResult: Symbol("FileReader result"),
      kError: Symbol("FileReader error"),
      kLastProgressEventFired: Symbol("FileReader last progress event fired timestamp"),
      kEvents: Symbol("FileReader events"),
      kAborted: Symbol("FileReader aborted")
    };
  }
});

// node_modules/undici/lib/fileapi/progressevent.js
var require_progressevent = __commonJS({
  "node_modules/undici/lib/fileapi/progressevent.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var { webidl } = require_webidl();
    var kState = Symbol("ProgressEvent state");
    var ProgressEvent = class _ProgressEvent extends Event {
      static {
        __name(this, "ProgressEvent");
      }
      constructor(type, eventInitDict = {}) {
        type = webidl.converters.DOMString(type);
        eventInitDict = webidl.converters.ProgressEventInit(eventInitDict ?? {});
        super(type, eventInitDict);
        this[kState] = {
          lengthComputable: eventInitDict.lengthComputable,
          loaded: eventInitDict.loaded,
          total: eventInitDict.total
        };
      }
      get lengthComputable() {
        webidl.brandCheck(this, _ProgressEvent);
        return this[kState].lengthComputable;
      }
      get loaded() {
        webidl.brandCheck(this, _ProgressEvent);
        return this[kState].loaded;
      }
      get total() {
        webidl.brandCheck(this, _ProgressEvent);
        return this[kState].total;
      }
    };
    webidl.converters.ProgressEventInit = webidl.dictionaryConverter([
      {
        key: "lengthComputable",
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: "loaded",
        converter: webidl.converters["unsigned long long"],
        defaultValue: 0
      },
      {
        key: "total",
        converter: webidl.converters["unsigned long long"],
        defaultValue: 0
      },
      {
        key: "bubbles",
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: "cancelable",
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: "composed",
        converter: webidl.converters.boolean,
        defaultValue: false
      }
    ]);
    module.exports = {
      ProgressEvent
    };
  }
});

// node_modules/undici/lib/fileapi/encoding.js
var require_encoding = __commonJS({
  "node_modules/undici/lib/fileapi/encoding.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    function getEncoding(label) {
      if (!label) {
        return "failure";
      }
      switch (label.trim().toLowerCase()) {
        case "unicode-1-1-utf-8":
        case "unicode11utf8":
        case "unicode20utf8":
        case "utf-8":
        case "utf8":
        case "x-unicode20utf8":
          return "UTF-8";
        case "866":
        case "cp866":
        case "csibm866":
        case "ibm866":
          return "IBM866";
        case "csisolatin2":
        case "iso-8859-2":
        case "iso-ir-101":
        case "iso8859-2":
        case "iso88592":
        case "iso_8859-2":
        case "iso_8859-2:1987":
        case "l2":
        case "latin2":
          return "ISO-8859-2";
        case "csisolatin3":
        case "iso-8859-3":
        case "iso-ir-109":
        case "iso8859-3":
        case "iso88593":
        case "iso_8859-3":
        case "iso_8859-3:1988":
        case "l3":
        case "latin3":
          return "ISO-8859-3";
        case "csisolatin4":
        case "iso-8859-4":
        case "iso-ir-110":
        case "iso8859-4":
        case "iso88594":
        case "iso_8859-4":
        case "iso_8859-4:1988":
        case "l4":
        case "latin4":
          return "ISO-8859-4";
        case "csisolatincyrillic":
        case "cyrillic":
        case "iso-8859-5":
        case "iso-ir-144":
        case "iso8859-5":
        case "iso88595":
        case "iso_8859-5":
        case "iso_8859-5:1988":
          return "ISO-8859-5";
        case "arabic":
        case "asmo-708":
        case "csiso88596e":
        case "csiso88596i":
        case "csisolatinarabic":
        case "ecma-114":
        case "iso-8859-6":
        case "iso-8859-6-e":
        case "iso-8859-6-i":
        case "iso-ir-127":
        case "iso8859-6":
        case "iso88596":
        case "iso_8859-6":
        case "iso_8859-6:1987":
          return "ISO-8859-6";
        case "csisolatingreek":
        case "ecma-118":
        case "elot_928":
        case "greek":
        case "greek8":
        case "iso-8859-7":
        case "iso-ir-126":
        case "iso8859-7":
        case "iso88597":
        case "iso_8859-7":
        case "iso_8859-7:1987":
        case "sun_eu_greek":
          return "ISO-8859-7";
        case "csiso88598e":
        case "csisolatinhebrew":
        case "hebrew":
        case "iso-8859-8":
        case "iso-8859-8-e":
        case "iso-ir-138":
        case "iso8859-8":
        case "iso88598":
        case "iso_8859-8":
        case "iso_8859-8:1988":
        case "visual":
          return "ISO-8859-8";
        case "csiso88598i":
        case "iso-8859-8-i":
        case "logical":
          return "ISO-8859-8-I";
        case "csisolatin6":
        case "iso-8859-10":
        case "iso-ir-157":
        case "iso8859-10":
        case "iso885910":
        case "l6":
        case "latin6":
          return "ISO-8859-10";
        case "iso-8859-13":
        case "iso8859-13":
        case "iso885913":
          return "ISO-8859-13";
        case "iso-8859-14":
        case "iso8859-14":
        case "iso885914":
          return "ISO-8859-14";
        case "csisolatin9":
        case "iso-8859-15":
        case "iso8859-15":
        case "iso885915":
        case "iso_8859-15":
        case "l9":
          return "ISO-8859-15";
        case "iso-8859-16":
          return "ISO-8859-16";
        case "cskoi8r":
        case "koi":
        case "koi8":
        case "koi8-r":
        case "koi8_r":
          return "KOI8-R";
        case "koi8-ru":
        case "koi8-u":
          return "KOI8-U";
        case "csmacintosh":
        case "mac":
        case "macintosh":
        case "x-mac-roman":
          return "macintosh";
        case "iso-8859-11":
        case "iso8859-11":
        case "iso885911":
        case "tis-620":
        case "windows-874":
          return "windows-874";
        case "cp1250":
        case "windows-1250":
        case "x-cp1250":
          return "windows-1250";
        case "cp1251":
        case "windows-1251":
        case "x-cp1251":
          return "windows-1251";
        case "ansi_x3.4-1968":
        case "ascii":
        case "cp1252":
        case "cp819":
        case "csisolatin1":
        case "ibm819":
        case "iso-8859-1":
        case "iso-ir-100":
        case "iso8859-1":
        case "iso88591":
        case "iso_8859-1":
        case "iso_8859-1:1987":
        case "l1":
        case "latin1":
        case "us-ascii":
        case "windows-1252":
        case "x-cp1252":
          return "windows-1252";
        case "cp1253":
        case "windows-1253":
        case "x-cp1253":
          return "windows-1253";
        case "cp1254":
        case "csisolatin5":
        case "iso-8859-9":
        case "iso-ir-148":
        case "iso8859-9":
        case "iso88599":
        case "iso_8859-9":
        case "iso_8859-9:1989":
        case "l5":
        case "latin5":
        case "windows-1254":
        case "x-cp1254":
          return "windows-1254";
        case "cp1255":
        case "windows-1255":
        case "x-cp1255":
          return "windows-1255";
        case "cp1256":
        case "windows-1256":
        case "x-cp1256":
          return "windows-1256";
        case "cp1257":
        case "windows-1257":
        case "x-cp1257":
          return "windows-1257";
        case "cp1258":
        case "windows-1258":
        case "x-cp1258":
          return "windows-1258";
        case "x-mac-cyrillic":
        case "x-mac-ukrainian":
          return "x-mac-cyrillic";
        case "chinese":
        case "csgb2312":
        case "csiso58gb231280":
        case "gb2312":
        case "gb_2312":
        case "gb_2312-80":
        case "gbk":
        case "iso-ir-58":
        case "x-gbk":
          return "GBK";
        case "gb18030":
          return "gb18030";
        case "big5":
        case "big5-hkscs":
        case "cn-big5":
        case "csbig5":
        case "x-x-big5":
          return "Big5";
        case "cseucpkdfmtjapanese":
        case "euc-jp":
        case "x-euc-jp":
          return "EUC-JP";
        case "csiso2022jp":
        case "iso-2022-jp":
          return "ISO-2022-JP";
        case "csshiftjis":
        case "ms932":
        case "ms_kanji":
        case "shift-jis":
        case "shift_jis":
        case "sjis":
        case "windows-31j":
        case "x-sjis":
          return "Shift_JIS";
        case "cseuckr":
        case "csksc56011987":
        case "euc-kr":
        case "iso-ir-149":
        case "korean":
        case "ks_c_5601-1987":
        case "ks_c_5601-1989":
        case "ksc5601":
        case "ksc_5601":
        case "windows-949":
          return "EUC-KR";
        case "csiso2022kr":
        case "hz-gb-2312":
        case "iso-2022-cn":
        case "iso-2022-cn-ext":
        case "iso-2022-kr":
        case "replacement":
          return "replacement";
        case "unicodefffe":
        case "utf-16be":
          return "UTF-16BE";
        case "csunicode":
        case "iso-10646-ucs-2":
        case "ucs-2":
        case "unicode":
        case "unicodefeff":
        case "utf-16":
        case "utf-16le":
          return "UTF-16LE";
        case "x-user-defined":
          return "x-user-defined";
        default:
          return "failure";
      }
    }
    __name(getEncoding, "getEncoding");
    module.exports = {
      getEncoding
    };
  }
});

// node_modules/undici/lib/fileapi/util.js
var require_util5 = __commonJS({
  "node_modules/undici/lib/fileapi/util.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var {
      kState,
      kError,
      kResult,
      kAborted,
      kLastProgressEventFired
    } = require_symbols3();
    var { ProgressEvent } = require_progressevent();
    var { getEncoding } = require_encoding();
    var { DOMException: DOMException2 } = require_constants2();
    var { serializeAMimeType, parseMIMEType } = require_dataURL();
    var { types } = __require("util");
    var { StringDecoder } = __require("string_decoder");
    var { btoa: btoa2 } = __require("buffer");
    var staticPropertyDescriptors = {
      enumerable: true,
      writable: false,
      configurable: false
    };
    function readOperation(fr, blob, type, encodingName) {
      if (fr[kState] === "loading") {
        throw new DOMException2("Invalid state", "InvalidStateError");
      }
      fr[kState] = "loading";
      fr[kResult] = null;
      fr[kError] = null;
      const stream = blob.stream();
      const reader = stream.getReader();
      const bytes = [];
      let chunkPromise = reader.read();
      let isFirstChunk = true;
      (async () => {
        while (!fr[kAborted]) {
          try {
            const { done, value } = await chunkPromise;
            if (isFirstChunk && !fr[kAborted]) {
              queueMicrotask(() => {
                fireAProgressEvent("loadstart", fr);
              });
            }
            isFirstChunk = false;
            if (!done && types.isUint8Array(value)) {
              bytes.push(value);
              if ((fr[kLastProgressEventFired] === void 0 || Date.now() - fr[kLastProgressEventFired] >= 50) && !fr[kAborted]) {
                fr[kLastProgressEventFired] = Date.now();
                queueMicrotask(() => {
                  fireAProgressEvent("progress", fr);
                });
              }
              chunkPromise = reader.read();
            } else if (done) {
              queueMicrotask(() => {
                fr[kState] = "done";
                try {
                  const result = packageData(bytes, type, blob.type, encodingName);
                  if (fr[kAborted]) {
                    return;
                  }
                  fr[kResult] = result;
                  fireAProgressEvent("load", fr);
                } catch (error) {
                  fr[kError] = error;
                  fireAProgressEvent("error", fr);
                }
                if (fr[kState] !== "loading") {
                  fireAProgressEvent("loadend", fr);
                }
              });
              break;
            }
          } catch (error) {
            if (fr[kAborted]) {
              return;
            }
            queueMicrotask(() => {
              fr[kState] = "done";
              fr[kError] = error;
              fireAProgressEvent("error", fr);
              if (fr[kState] !== "loading") {
                fireAProgressEvent("loadend", fr);
              }
            });
            break;
          }
        }
      })();
    }
    __name(readOperation, "readOperation");
    function fireAProgressEvent(e, reader) {
      const event = new ProgressEvent(e, {
        bubbles: false,
        cancelable: false
      });
      reader.dispatchEvent(event);
    }
    __name(fireAProgressEvent, "fireAProgressEvent");
    function packageData(bytes, type, mimeType, encodingName) {
      switch (type) {
        case "DataURL": {
          let dataURL = "data:";
          const parsed = parseMIMEType(mimeType || "application/octet-stream");
          if (parsed !== "failure") {
            dataURL += serializeAMimeType(parsed);
          }
          dataURL += ";base64,";
          const decoder = new StringDecoder("latin1");
          for (const chunk of bytes) {
            dataURL += btoa2(decoder.write(chunk));
          }
          dataURL += btoa2(decoder.end());
          return dataURL;
        }
        case "Text": {
          let encoding = "failure";
          if (encodingName) {
            encoding = getEncoding(encodingName);
          }
          if (encoding === "failure" && mimeType) {
            const type2 = parseMIMEType(mimeType);
            if (type2 !== "failure") {
              encoding = getEncoding(type2.parameters.get("charset"));
            }
          }
          if (encoding === "failure") {
            encoding = "UTF-8";
          }
          return decode(bytes, encoding);
        }
        case "ArrayBuffer": {
          const sequence = combineByteSequences(bytes);
          return sequence.buffer;
        }
        case "BinaryString": {
          let binaryString = "";
          const decoder = new StringDecoder("latin1");
          for (const chunk of bytes) {
            binaryString += decoder.write(chunk);
          }
          binaryString += decoder.end();
          return binaryString;
        }
      }
    }
    __name(packageData, "packageData");
    function decode(ioQueue, encoding) {
      const bytes = combineByteSequences(ioQueue);
      const BOMEncoding = BOMSniffing(bytes);
      let slice = 0;
      if (BOMEncoding !== null) {
        encoding = BOMEncoding;
        slice = BOMEncoding === "UTF-8" ? 3 : 2;
      }
      const sliced = bytes.slice(slice);
      return new TextDecoder(encoding).decode(sliced);
    }
    __name(decode, "decode");
    function BOMSniffing(ioQueue) {
      const [a, b, c] = ioQueue;
      if (a === 239 && b === 187 && c === 191) {
        return "UTF-8";
      } else if (a === 254 && b === 255) {
        return "UTF-16BE";
      } else if (a === 255 && b === 254) {
        return "UTF-16LE";
      }
      return null;
    }
    __name(BOMSniffing, "BOMSniffing");
    function combineByteSequences(sequences) {
      const size = sequences.reduce((a, b) => {
        return a + b.byteLength;
      }, 0);
      let offset = 0;
      return sequences.reduce((a, b) => {
        a.set(b, offset);
        offset += b.byteLength;
        return a;
      }, new Uint8Array(size));
    }
    __name(combineByteSequences, "combineByteSequences");
    module.exports = {
      staticPropertyDescriptors,
      readOperation,
      fireAProgressEvent
    };
  }
});

// node_modules/undici/lib/fileapi/filereader.js
var require_filereader = __commonJS({
  "node_modules/undici/lib/fileapi/filereader.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var {
      staticPropertyDescriptors,
      readOperation,
      fireAProgressEvent
    } = require_util5();
    var {
      kState,
      kError,
      kResult,
      kEvents,
      kAborted
    } = require_symbols3();
    var { webidl } = require_webidl();
    var { kEnumerableProperty } = require_util2();
    var FileReader = class _FileReader extends EventTarget {
      static {
        __name(this, "FileReader");
      }
      constructor() {
        super();
        this[kState] = "empty";
        this[kResult] = null;
        this[kError] = null;
        this[kEvents] = {
          loadend: null,
          error: null,
          abort: null,
          load: null,
          progress: null,
          loadstart: null
        };
      }
      /**
       * @see https://w3c.github.io/FileAPI/#dfn-readAsArrayBuffer
       * @param {import('buffer').Blob} blob
       */
      readAsArrayBuffer(blob) {
        webidl.brandCheck(this, _FileReader);
        webidl.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsArrayBuffer" });
        blob = webidl.converters.Blob(blob, { strict: false });
        readOperation(this, blob, "ArrayBuffer");
      }
      /**
       * @see https://w3c.github.io/FileAPI/#readAsBinaryString
       * @param {import('buffer').Blob} blob
       */
      readAsBinaryString(blob) {
        webidl.brandCheck(this, _FileReader);
        webidl.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsBinaryString" });
        blob = webidl.converters.Blob(blob, { strict: false });
        readOperation(this, blob, "BinaryString");
      }
      /**
       * @see https://w3c.github.io/FileAPI/#readAsDataText
       * @param {import('buffer').Blob} blob
       * @param {string?} encoding
       */
      readAsText(blob, encoding = void 0) {
        webidl.brandCheck(this, _FileReader);
        webidl.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsText" });
        blob = webidl.converters.Blob(blob, { strict: false });
        if (encoding !== void 0) {
          encoding = webidl.converters.DOMString(encoding);
        }
        readOperation(this, blob, "Text", encoding);
      }
      /**
       * @see https://w3c.github.io/FileAPI/#dfn-readAsDataURL
       * @param {import('buffer').Blob} blob
       */
      readAsDataURL(blob) {
        webidl.brandCheck(this, _FileReader);
        webidl.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsDataURL" });
        blob = webidl.converters.Blob(blob, { strict: false });
        readOperation(this, blob, "DataURL");
      }
      /**
       * @see https://w3c.github.io/FileAPI/#dfn-abort
       */
      abort() {
        if (this[kState] === "empty" || this[kState] === "done") {
          this[kResult] = null;
          return;
        }
        if (this[kState] === "loading") {
          this[kState] = "done";
          this[kResult] = null;
        }
        this[kAborted] = true;
        fireAProgressEvent("abort", this);
        if (this[kState] !== "loading") {
          fireAProgressEvent("loadend", this);
        }
      }
      /**
       * @see https://w3c.github.io/FileAPI/#dom-filereader-readystate
       */
      get readyState() {
        webidl.brandCheck(this, _FileReader);
        switch (this[kState]) {
          case "empty":
            return this.EMPTY;
          case "loading":
            return this.LOADING;
          case "done":
            return this.DONE;
        }
      }
      /**
       * @see https://w3c.github.io/FileAPI/#dom-filereader-result
       */
      get result() {
        webidl.brandCheck(this, _FileReader);
        return this[kResult];
      }
      /**
       * @see https://w3c.github.io/FileAPI/#dom-filereader-error
       */
      get error() {
        webidl.brandCheck(this, _FileReader);
        return this[kError];
      }
      get onloadend() {
        webidl.brandCheck(this, _FileReader);
        return this[kEvents].loadend;
      }
      set onloadend(fn) {
        webidl.brandCheck(this, _FileReader);
        if (this[kEvents].loadend) {
          this.removeEventListener("loadend", this[kEvents].loadend);
        }
        if (typeof fn === "function") {
          this[kEvents].loadend = fn;
          this.addEventListener("loadend", fn);
        } else {
          this[kEvents].loadend = null;
        }
      }
      get onerror() {
        webidl.brandCheck(this, _FileReader);
        return this[kEvents].error;
      }
      set onerror(fn) {
        webidl.brandCheck(this, _FileReader);
        if (this[kEvents].error) {
          this.removeEventListener("error", this[kEvents].error);
        }
        if (typeof fn === "function") {
          this[kEvents].error = fn;
          this.addEventListener("error", fn);
        } else {
          this[kEvents].error = null;
        }
      }
      get onloadstart() {
        webidl.brandCheck(this, _FileReader);
        return this[kEvents].loadstart;
      }
      set onloadstart(fn) {
        webidl.brandCheck(this, _FileReader);
        if (this[kEvents].loadstart) {
          this.removeEventListener("loadstart", this[kEvents].loadstart);
        }
        if (typeof fn === "function") {
          this[kEvents].loadstart = fn;
          this.addEventListener("loadstart", fn);
        } else {
          this[kEvents].loadstart = null;
        }
      }
      get onprogress() {
        webidl.brandCheck(this, _FileReader);
        return this[kEvents].progress;
      }
      set onprogress(fn) {
        webidl.brandCheck(this, _FileReader);
        if (this[kEvents].progress) {
          this.removeEventListener("progress", this[kEvents].progress);
        }
        if (typeof fn === "function") {
          this[kEvents].progress = fn;
          this.addEventListener("progress", fn);
        } else {
          this[kEvents].progress = null;
        }
      }
      get onload() {
        webidl.brandCheck(this, _FileReader);
        return this[kEvents].load;
      }
      set onload(fn) {
        webidl.brandCheck(this, _FileReader);
        if (this[kEvents].load) {
          this.removeEventListener("load", this[kEvents].load);
        }
        if (typeof fn === "function") {
          this[kEvents].load = fn;
          this.addEventListener("load", fn);
        } else {
          this[kEvents].load = null;
        }
      }
      get onabort() {
        webidl.brandCheck(this, _FileReader);
        return this[kEvents].abort;
      }
      set onabort(fn) {
        webidl.brandCheck(this, _FileReader);
        if (this[kEvents].abort) {
          this.removeEventListener("abort", this[kEvents].abort);
        }
        if (typeof fn === "function") {
          this[kEvents].abort = fn;
          this.addEventListener("abort", fn);
        } else {
          this[kEvents].abort = null;
        }
      }
    };
    FileReader.EMPTY = FileReader.prototype.EMPTY = 0;
    FileReader.LOADING = FileReader.prototype.LOADING = 1;
    FileReader.DONE = FileReader.prototype.DONE = 2;
    Object.defineProperties(FileReader.prototype, {
      EMPTY: staticPropertyDescriptors,
      LOADING: staticPropertyDescriptors,
      DONE: staticPropertyDescriptors,
      readAsArrayBuffer: kEnumerableProperty,
      readAsBinaryString: kEnumerableProperty,
      readAsText: kEnumerableProperty,
      readAsDataURL: kEnumerableProperty,
      abort: kEnumerableProperty,
      readyState: kEnumerableProperty,
      result: kEnumerableProperty,
      error: kEnumerableProperty,
      onloadstart: kEnumerableProperty,
      onprogress: kEnumerableProperty,
      onload: kEnumerableProperty,
      onabort: kEnumerableProperty,
      onerror: kEnumerableProperty,
      onloadend: kEnumerableProperty,
      [Symbol.toStringTag]: {
        value: "FileReader",
        writable: false,
        enumerable: false,
        configurable: true
      }
    });
    Object.defineProperties(FileReader, {
      EMPTY: staticPropertyDescriptors,
      LOADING: staticPropertyDescriptors,
      DONE: staticPropertyDescriptors
    });
    module.exports = {
      FileReader
    };
  }
});

// node_modules/undici/lib/cache/symbols.js
var require_symbols4 = __commonJS({
  "node_modules/undici/lib/cache/symbols.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    module.exports = {
      kConstruct: require_symbols().kConstruct
    };
  }
});

// node_modules/undici/lib/cache/util.js
var require_util6 = __commonJS({
  "node_modules/undici/lib/cache/util.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var assert = __require("assert");
    var { URLSerializer } = require_dataURL();
    var { isValidHeaderName } = require_util3();
    function urlEquals(A, B, excludeFragment = false) {
      const serializedA = URLSerializer(A, excludeFragment);
      const serializedB = URLSerializer(B, excludeFragment);
      return serializedA === serializedB;
    }
    __name(urlEquals, "urlEquals");
    function fieldValues(header) {
      assert(header !== null);
      const values = [];
      for (let value of header.split(",")) {
        value = value.trim();
        if (!value.length) {
          continue;
        } else if (!isValidHeaderName(value)) {
          continue;
        }
        values.push(value);
      }
      return values;
    }
    __name(fieldValues, "fieldValues");
    module.exports = {
      urlEquals,
      fieldValues
    };
  }
});

// node_modules/undici/lib/cache/cache.js
var require_cache = __commonJS({
  "node_modules/undici/lib/cache/cache.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var { kConstruct } = require_symbols4();
    var { urlEquals, fieldValues: getFieldValues } = require_util6();
    var { kEnumerableProperty, isDisturbed } = require_util2();
    var { kHeadersList } = require_symbols();
    var { webidl } = require_webidl();
    var { Response, cloneResponse } = require_response();
    var { Request } = require_request2();
    var { kState, kHeaders, kGuard, kRealm } = require_symbols2();
    var { fetching } = require_fetch();
    var { urlIsHttpHttpsScheme, createDeferredPromise, readAllBytes } = require_util3();
    var assert = __require("assert");
    var { getGlobalDispatcher } = require_global2();
    var Cache = class _Cache {
      static {
        __name(this, "Cache");
      }
      /**
       * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-request-response-list
       * @type {requestResponseList}
       */
      #relevantRequestResponseList;
      constructor() {
        if (arguments[0] !== kConstruct) {
          webidl.illegalConstructor();
        }
        this.#relevantRequestResponseList = arguments[1];
      }
      async match(request, options = {}) {
        webidl.brandCheck(this, _Cache);
        webidl.argumentLengthCheck(arguments, 1, { header: "Cache.match" });
        request = webidl.converters.RequestInfo(request);
        options = webidl.converters.CacheQueryOptions(options);
        const p = await this.matchAll(request, options);
        if (p.length === 0) {
          return;
        }
        return p[0];
      }
      async matchAll(request = void 0, options = {}) {
        webidl.brandCheck(this, _Cache);
        if (request !== void 0) request = webidl.converters.RequestInfo(request);
        options = webidl.converters.CacheQueryOptions(options);
        let r = null;
        if (request !== void 0) {
          if (request instanceof Request) {
            r = request[kState];
            if (r.method !== "GET" && !options.ignoreMethod) {
              return [];
            }
          } else if (typeof request === "string") {
            r = new Request(request)[kState];
          }
        }
        const responses = [];
        if (request === void 0) {
          for (const requestResponse of this.#relevantRequestResponseList) {
            responses.push(requestResponse[1]);
          }
        } else {
          const requestResponses = this.#queryCache(r, options);
          for (const requestResponse of requestResponses) {
            responses.push(requestResponse[1]);
          }
        }
        const responseList = [];
        for (const response of responses) {
          const responseObject = new Response(response.body?.source ?? null);
          const body = responseObject[kState].body;
          responseObject[kState] = response;
          responseObject[kState].body = body;
          responseObject[kHeaders][kHeadersList] = response.headersList;
          responseObject[kHeaders][kGuard] = "immutable";
          responseList.push(responseObject);
        }
        return Object.freeze(responseList);
      }
      async add(request) {
        webidl.brandCheck(this, _Cache);
        webidl.argumentLengthCheck(arguments, 1, { header: "Cache.add" });
        request = webidl.converters.RequestInfo(request);
        const requests = [request];
        const responseArrayPromise = this.addAll(requests);
        return await responseArrayPromise;
      }
      async addAll(requests) {
        webidl.brandCheck(this, _Cache);
        webidl.argumentLengthCheck(arguments, 1, { header: "Cache.addAll" });
        requests = webidl.converters["sequence<RequestInfo>"](requests);
        const responsePromises = [];
        const requestList = [];
        for (const request of requests) {
          if (typeof request === "string") {
            continue;
          }
          const r = request[kState];
          if (!urlIsHttpHttpsScheme(r.url) || r.method !== "GET") {
            throw webidl.errors.exception({
              header: "Cache.addAll",
              message: "Expected http/s scheme when method is not GET."
            });
          }
        }
        const fetchControllers = [];
        for (const request of requests) {
          const r = new Request(request)[kState];
          if (!urlIsHttpHttpsScheme(r.url)) {
            throw webidl.errors.exception({
              header: "Cache.addAll",
              message: "Expected http/s scheme."
            });
          }
          r.initiator = "fetch";
          r.destination = "subresource";
          requestList.push(r);
          const responsePromise = createDeferredPromise();
          fetchControllers.push(fetching({
            request: r,
            dispatcher: getGlobalDispatcher(),
            processResponse(response) {
              if (response.type === "error" || response.status === 206 || response.status < 200 || response.status > 299) {
                responsePromise.reject(webidl.errors.exception({
                  header: "Cache.addAll",
                  message: "Received an invalid status code or the request failed."
                }));
              } else if (response.headersList.contains("vary")) {
                const fieldValues = getFieldValues(response.headersList.get("vary"));
                for (const fieldValue of fieldValues) {
                  if (fieldValue === "*") {
                    responsePromise.reject(webidl.errors.exception({
                      header: "Cache.addAll",
                      message: "invalid vary field value"
                    }));
                    for (const controller of fetchControllers) {
                      controller.abort();
                    }
                    return;
                  }
                }
              }
            },
            processResponseEndOfBody(response) {
              if (response.aborted) {
                responsePromise.reject(new DOMException("aborted", "AbortError"));
                return;
              }
              responsePromise.resolve(response);
            }
          }));
          responsePromises.push(responsePromise.promise);
        }
        const p = Promise.all(responsePromises);
        const responses = await p;
        const operations = [];
        let index = 0;
        for (const response of responses) {
          const operation = {
            type: "put",
            // 7.3.2
            request: requestList[index],
            // 7.3.3
            response
            // 7.3.4
          };
          operations.push(operation);
          index++;
        }
        const cacheJobPromise = createDeferredPromise();
        let errorData = null;
        try {
          this.#batchCacheOperations(operations);
        } catch (e) {
          errorData = e;
        }
        queueMicrotask(() => {
          if (errorData === null) {
            cacheJobPromise.resolve(void 0);
          } else {
            cacheJobPromise.reject(errorData);
          }
        });
        return cacheJobPromise.promise;
      }
      async put(request, response) {
        webidl.brandCheck(this, _Cache);
        webidl.argumentLengthCheck(arguments, 2, { header: "Cache.put" });
        request = webidl.converters.RequestInfo(request);
        response = webidl.converters.Response(response);
        let innerRequest = null;
        if (request instanceof Request) {
          innerRequest = request[kState];
        } else {
          innerRequest = new Request(request)[kState];
        }
        if (!urlIsHttpHttpsScheme(innerRequest.url) || innerRequest.method !== "GET") {
          throw webidl.errors.exception({
            header: "Cache.put",
            message: "Expected an http/s scheme when method is not GET"
          });
        }
        const innerResponse = response[kState];
        if (innerResponse.status === 206) {
          throw webidl.errors.exception({
            header: "Cache.put",
            message: "Got 206 status"
          });
        }
        if (innerResponse.headersList.contains("vary")) {
          const fieldValues = getFieldValues(innerResponse.headersList.get("vary"));
          for (const fieldValue of fieldValues) {
            if (fieldValue === "*") {
              throw webidl.errors.exception({
                header: "Cache.put",
                message: "Got * vary field value"
              });
            }
          }
        }
        if (innerResponse.body && (isDisturbed(innerResponse.body.stream) || innerResponse.body.stream.locked)) {
          throw webidl.errors.exception({
            header: "Cache.put",
            message: "Response body is locked or disturbed"
          });
        }
        const clonedResponse = cloneResponse(innerResponse);
        const bodyReadPromise = createDeferredPromise();
        if (innerResponse.body != null) {
          const stream = innerResponse.body.stream;
          const reader = stream.getReader();
          readAllBytes(reader).then(bodyReadPromise.resolve, bodyReadPromise.reject);
        } else {
          bodyReadPromise.resolve(void 0);
        }
        const operations = [];
        const operation = {
          type: "put",
          // 14.
          request: innerRequest,
          // 15.
          response: clonedResponse
          // 16.
        };
        operations.push(operation);
        const bytes = await bodyReadPromise.promise;
        if (clonedResponse.body != null) {
          clonedResponse.body.source = bytes;
        }
        const cacheJobPromise = createDeferredPromise();
        let errorData = null;
        try {
          this.#batchCacheOperations(operations);
        } catch (e) {
          errorData = e;
        }
        queueMicrotask(() => {
          if (errorData === null) {
            cacheJobPromise.resolve();
          } else {
            cacheJobPromise.reject(errorData);
          }
        });
        return cacheJobPromise.promise;
      }
      async delete(request, options = {}) {
        webidl.brandCheck(this, _Cache);
        webidl.argumentLengthCheck(arguments, 1, { header: "Cache.delete" });
        request = webidl.converters.RequestInfo(request);
        options = webidl.converters.CacheQueryOptions(options);
        let r = null;
        if (request instanceof Request) {
          r = request[kState];
          if (r.method !== "GET" && !options.ignoreMethod) {
            return false;
          }
        } else {
          assert(typeof request === "string");
          r = new Request(request)[kState];
        }
        const operations = [];
        const operation = {
          type: "delete",
          request: r,
          options
        };
        operations.push(operation);
        const cacheJobPromise = createDeferredPromise();
        let errorData = null;
        let requestResponses;
        try {
          requestResponses = this.#batchCacheOperations(operations);
        } catch (e) {
          errorData = e;
        }
        queueMicrotask(() => {
          if (errorData === null) {
            cacheJobPromise.resolve(!!requestResponses?.length);
          } else {
            cacheJobPromise.reject(errorData);
          }
        });
        return cacheJobPromise.promise;
      }
      /**
       * @see https://w3c.github.io/ServiceWorker/#dom-cache-keys
       * @param {any} request
       * @param {import('../../types/cache').CacheQueryOptions} options
       * @returns {readonly Request[]}
       */
      async keys(request = void 0, options = {}) {
        webidl.brandCheck(this, _Cache);
        if (request !== void 0) request = webidl.converters.RequestInfo(request);
        options = webidl.converters.CacheQueryOptions(options);
        let r = null;
        if (request !== void 0) {
          if (request instanceof Request) {
            r = request[kState];
            if (r.method !== "GET" && !options.ignoreMethod) {
              return [];
            }
          } else if (typeof request === "string") {
            r = new Request(request)[kState];
          }
        }
        const promise = createDeferredPromise();
        const requests = [];
        if (request === void 0) {
          for (const requestResponse of this.#relevantRequestResponseList) {
            requests.push(requestResponse[0]);
          }
        } else {
          const requestResponses = this.#queryCache(r, options);
          for (const requestResponse of requestResponses) {
            requests.push(requestResponse[0]);
          }
        }
        queueMicrotask(() => {
          const requestList = [];
          for (const request2 of requests) {
            const requestObject = new Request("https://a");
            requestObject[kState] = request2;
            requestObject[kHeaders][kHeadersList] = request2.headersList;
            requestObject[kHeaders][kGuard] = "immutable";
            requestObject[kRealm] = request2.client;
            requestList.push(requestObject);
          }
          promise.resolve(Object.freeze(requestList));
        });
        return promise.promise;
      }
      /**
       * @see https://w3c.github.io/ServiceWorker/#batch-cache-operations-algorithm
       * @param {CacheBatchOperation[]} operations
       * @returns {requestResponseList}
       */
      #batchCacheOperations(operations) {
        const cache = this.#relevantRequestResponseList;
        const backupCache = [...cache];
        const addedItems = [];
        const resultList = [];
        try {
          for (const operation of operations) {
            if (operation.type !== "delete" && operation.type !== "put") {
              throw webidl.errors.exception({
                header: "Cache.#batchCacheOperations",
                message: 'operation type does not match "delete" or "put"'
              });
            }
            if (operation.type === "delete" && operation.response != null) {
              throw webidl.errors.exception({
                header: "Cache.#batchCacheOperations",
                message: "delete operation should not have an associated response"
              });
            }
            if (this.#queryCache(operation.request, operation.options, addedItems).length) {
              throw new DOMException("???", "InvalidStateError");
            }
            let requestResponses;
            if (operation.type === "delete") {
              requestResponses = this.#queryCache(operation.request, operation.options);
              if (requestResponses.length === 0) {
                return [];
              }
              for (const requestResponse of requestResponses) {
                const idx = cache.indexOf(requestResponse);
                assert(idx !== -1);
                cache.splice(idx, 1);
              }
            } else if (operation.type === "put") {
              if (operation.response == null) {
                throw webidl.errors.exception({
                  header: "Cache.#batchCacheOperations",
                  message: "put operation should have an associated response"
                });
              }
              const r = operation.request;
              if (!urlIsHttpHttpsScheme(r.url)) {
                throw webidl.errors.exception({
                  header: "Cache.#batchCacheOperations",
                  message: "expected http or https scheme"
                });
              }
              if (r.method !== "GET") {
                throw webidl.errors.exception({
                  header: "Cache.#batchCacheOperations",
                  message: "not get method"
                });
              }
              if (operation.options != null) {
                throw webidl.errors.exception({
                  header: "Cache.#batchCacheOperations",
                  message: "options must not be defined"
                });
              }
              requestResponses = this.#queryCache(operation.request);
              for (const requestResponse of requestResponses) {
                const idx = cache.indexOf(requestResponse);
                assert(idx !== -1);
                cache.splice(idx, 1);
              }
              cache.push([operation.request, operation.response]);
              addedItems.push([operation.request, operation.response]);
            }
            resultList.push([operation.request, operation.response]);
          }
          return resultList;
        } catch (e) {
          this.#relevantRequestResponseList.length = 0;
          this.#relevantRequestResponseList = backupCache;
          throw e;
        }
      }
      /**
       * @see https://w3c.github.io/ServiceWorker/#query-cache
       * @param {any} requestQuery
       * @param {import('../../types/cache').CacheQueryOptions} options
       * @param {requestResponseList} targetStorage
       * @returns {requestResponseList}
       */
      #queryCache(requestQuery, options, targetStorage) {
        const resultList = [];
        const storage = targetStorage ?? this.#relevantRequestResponseList;
        for (const requestResponse of storage) {
          const [cachedRequest, cachedResponse] = requestResponse;
          if (this.#requestMatchesCachedItem(requestQuery, cachedRequest, cachedResponse, options)) {
            resultList.push(requestResponse);
          }
        }
        return resultList;
      }
      /**
       * @see https://w3c.github.io/ServiceWorker/#request-matches-cached-item-algorithm
       * @param {any} requestQuery
       * @param {any} request
       * @param {any | null} response
       * @param {import('../../types/cache').CacheQueryOptions | undefined} options
       * @returns {boolean}
       */
      #requestMatchesCachedItem(requestQuery, request, response = null, options) {
        const queryURL = new URL(requestQuery.url);
        const cachedURL = new URL(request.url);
        if (options?.ignoreSearch) {
          cachedURL.search = "";
          queryURL.search = "";
        }
        if (!urlEquals(queryURL, cachedURL, true)) {
          return false;
        }
        if (response == null || options?.ignoreVary || !response.headersList.contains("vary")) {
          return true;
        }
        const fieldValues = getFieldValues(response.headersList.get("vary"));
        for (const fieldValue of fieldValues) {
          if (fieldValue === "*") {
            return false;
          }
          const requestValue = request.headersList.get(fieldValue);
          const queryValue = requestQuery.headersList.get(fieldValue);
          if (requestValue !== queryValue) {
            return false;
          }
        }
        return true;
      }
    };
    Object.defineProperties(Cache.prototype, {
      [Symbol.toStringTag]: {
        value: "Cache",
        configurable: true
      },
      match: kEnumerableProperty,
      matchAll: kEnumerableProperty,
      add: kEnumerableProperty,
      addAll: kEnumerableProperty,
      put: kEnumerableProperty,
      delete: kEnumerableProperty,
      keys: kEnumerableProperty
    });
    var cacheQueryOptionConverters = [
      {
        key: "ignoreSearch",
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: "ignoreMethod",
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: "ignoreVary",
        converter: webidl.converters.boolean,
        defaultValue: false
      }
    ];
    webidl.converters.CacheQueryOptions = webidl.dictionaryConverter(cacheQueryOptionConverters);
    webidl.converters.MultiCacheQueryOptions = webidl.dictionaryConverter([
      ...cacheQueryOptionConverters,
      {
        key: "cacheName",
        converter: webidl.converters.DOMString
      }
    ]);
    webidl.converters.Response = webidl.interfaceConverter(Response);
    webidl.converters["sequence<RequestInfo>"] = webidl.sequenceConverter(
      webidl.converters.RequestInfo
    );
    module.exports = {
      Cache
    };
  }
});

// node_modules/undici/lib/cache/cachestorage.js
var require_cachestorage = __commonJS({
  "node_modules/undici/lib/cache/cachestorage.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var { kConstruct } = require_symbols4();
    var { Cache } = require_cache();
    var { webidl } = require_webidl();
    var { kEnumerableProperty } = require_util2();
    var CacheStorage = class _CacheStorage {
      static {
        __name(this, "CacheStorage");
      }
      /**
       * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-name-to-cache-map
       * @type {Map<string, import('./cache').requestResponseList}
       */
      #caches = /* @__PURE__ */ new Map();
      constructor() {
        if (arguments[0] !== kConstruct) {
          webidl.illegalConstructor();
        }
      }
      async match(request, options = {}) {
        webidl.brandCheck(this, _CacheStorage);
        webidl.argumentLengthCheck(arguments, 1, { header: "CacheStorage.match" });
        request = webidl.converters.RequestInfo(request);
        options = webidl.converters.MultiCacheQueryOptions(options);
        if (options.cacheName != null) {
          if (this.#caches.has(options.cacheName)) {
            const cacheList = this.#caches.get(options.cacheName);
            const cache = new Cache(kConstruct, cacheList);
            return await cache.match(request, options);
          }
        } else {
          for (const cacheList of this.#caches.values()) {
            const cache = new Cache(kConstruct, cacheList);
            const response = await cache.match(request, options);
            if (response !== void 0) {
              return response;
            }
          }
        }
      }
      /**
       * @see https://w3c.github.io/ServiceWorker/#cache-storage-has
       * @param {string} cacheName
       * @returns {Promise<boolean>}
       */
      async has(cacheName) {
        webidl.brandCheck(this, _CacheStorage);
        webidl.argumentLengthCheck(arguments, 1, { header: "CacheStorage.has" });
        cacheName = webidl.converters.DOMString(cacheName);
        return this.#caches.has(cacheName);
      }
      /**
       * @see https://w3c.github.io/ServiceWorker/#dom-cachestorage-open
       * @param {string} cacheName
       * @returns {Promise<Cache>}
       */
      async open(cacheName) {
        webidl.brandCheck(this, _CacheStorage);
        webidl.argumentLengthCheck(arguments, 1, { header: "CacheStorage.open" });
        cacheName = webidl.converters.DOMString(cacheName);
        if (this.#caches.has(cacheName)) {
          const cache2 = this.#caches.get(cacheName);
          return new Cache(kConstruct, cache2);
        }
        const cache = [];
        this.#caches.set(cacheName, cache);
        return new Cache(kConstruct, cache);
      }
      /**
       * @see https://w3c.github.io/ServiceWorker/#cache-storage-delete
       * @param {string} cacheName
       * @returns {Promise<boolean>}
       */
      async delete(cacheName) {
        webidl.brandCheck(this, _CacheStorage);
        webidl.argumentLengthCheck(arguments, 1, { header: "CacheStorage.delete" });
        cacheName = webidl.converters.DOMString(cacheName);
        return this.#caches.delete(cacheName);
      }
      /**
       * @see https://w3c.github.io/ServiceWorker/#cache-storage-keys
       * @returns {string[]}
       */
      async keys() {
        webidl.brandCheck(this, _CacheStorage);
        const keys = this.#caches.keys();
        return [...keys];
      }
    };
    Object.defineProperties(CacheStorage.prototype, {
      [Symbol.toStringTag]: {
        value: "CacheStorage",
        configurable: true
      },
      match: kEnumerableProperty,
      has: kEnumerableProperty,
      open: kEnumerableProperty,
      delete: kEnumerableProperty,
      keys: kEnumerableProperty
    });
    module.exports = {
      CacheStorage
    };
  }
});

// node_modules/undici/lib/cookies/constants.js
var require_constants4 = __commonJS({
  "node_modules/undici/lib/cookies/constants.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var maxAttributeValueSize = 1024;
    var maxNameValuePairSize = 4096;
    module.exports = {
      maxAttributeValueSize,
      maxNameValuePairSize
    };
  }
});

// node_modules/undici/lib/cookies/util.js
var require_util7 = __commonJS({
  "node_modules/undici/lib/cookies/util.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var assert = __require("assert");
    var { kHeadersList } = require_symbols();
    function isCTLExcludingHtab(value) {
      if (value.length === 0) {
        return false;
      }
      for (const char of value) {
        const code = char.charCodeAt(0);
        if (code >= 0 || code <= 8 || (code >= 10 || code <= 31) || code === 127) {
          return false;
        }
      }
    }
    __name(isCTLExcludingHtab, "isCTLExcludingHtab");
    function validateCookieName(name) {
      for (const char of name) {
        const code = char.charCodeAt(0);
        if (code <= 32 || code > 127 || char === "(" || char === ")" || char === ">" || char === "<" || char === "@" || char === "," || char === ";" || char === ":" || char === "\\" || char === '"' || char === "/" || char === "[" || char === "]" || char === "?" || char === "=" || char === "{" || char === "}") {
          throw new Error("Invalid cookie name");
        }
      }
    }
    __name(validateCookieName, "validateCookieName");
    function validateCookieValue(value) {
      for (const char of value) {
        const code = char.charCodeAt(0);
        if (code < 33 || // exclude CTLs (0-31)
        code === 34 || code === 44 || code === 59 || code === 92 || code > 126) {
          throw new Error("Invalid header value");
        }
      }
    }
    __name(validateCookieValue, "validateCookieValue");
    function validateCookiePath(path5) {
      for (const char of path5) {
        const code = char.charCodeAt(0);
        if (code < 33 || char === ";") {
          throw new Error("Invalid cookie path");
        }
      }
    }
    __name(validateCookiePath, "validateCookiePath");
    function validateCookieDomain(domain) {
      if (domain.startsWith("-") || domain.endsWith(".") || domain.endsWith("-")) {
        throw new Error("Invalid cookie domain");
      }
    }
    __name(validateCookieDomain, "validateCookieDomain");
    function toIMFDate(date) {
      if (typeof date === "number") {
        date = new Date(date);
      }
      const days = [
        "Sun",
        "Mon",
        "Tue",
        "Wed",
        "Thu",
        "Fri",
        "Sat"
      ];
      const months = [
        "Jan",
        "Feb",
        "Mar",
        "Apr",
        "May",
        "Jun",
        "Jul",
        "Aug",
        "Sep",
        "Oct",
        "Nov",
        "Dec"
      ];
      const dayName = days[date.getUTCDay()];
      const day = date.getUTCDate().toString().padStart(2, "0");
      const month = months[date.getUTCMonth()];
      const year = date.getUTCFullYear();
      const hour = date.getUTCHours().toString().padStart(2, "0");
      const minute = date.getUTCMinutes().toString().padStart(2, "0");
      const second = date.getUTCSeconds().toString().padStart(2, "0");
      return `${dayName}, ${day} ${month} ${year} ${hour}:${minute}:${second} GMT`;
    }
    __name(toIMFDate, "toIMFDate");
    function validateCookieMaxAge(maxAge) {
      if (maxAge < 0) {
        throw new Error("Invalid cookie max-age");
      }
    }
    __name(validateCookieMaxAge, "validateCookieMaxAge");
    function stringify2(cookie) {
      if (cookie.name.length === 0) {
        return null;
      }
      validateCookieName(cookie.name);
      validateCookieValue(cookie.value);
      const out = [`${cookie.name}=${cookie.value}`];
      if (cookie.name.startsWith("__Secure-")) {
        cookie.secure = true;
      }
      if (cookie.name.startsWith("__Host-")) {
        cookie.secure = true;
        cookie.domain = null;
        cookie.path = "/";
      }
      if (cookie.secure) {
        out.push("Secure");
      }
      if (cookie.httpOnly) {
        out.push("HttpOnly");
      }
      if (typeof cookie.maxAge === "number") {
        validateCookieMaxAge(cookie.maxAge);
        out.push(`Max-Age=${cookie.maxAge}`);
      }
      if (cookie.domain) {
        validateCookieDomain(cookie.domain);
        out.push(`Domain=${cookie.domain}`);
      }
      if (cookie.path) {
        validateCookiePath(cookie.path);
        out.push(`Path=${cookie.path}`);
      }
      if (cookie.expires && cookie.expires.toString() !== "Invalid Date") {
        out.push(`Expires=${toIMFDate(cookie.expires)}`);
      }
      if (cookie.sameSite) {
        out.push(`SameSite=${cookie.sameSite}`);
      }
      for (const part of cookie.unparsed) {
        if (!part.includes("=")) {
          throw new Error("Invalid unparsed");
        }
        const [key, ...value] = part.split("=");
        out.push(`${key.trim()}=${value.join("=")}`);
      }
      return out.join("; ");
    }
    __name(stringify2, "stringify");
    var kHeadersListNode;
    function getHeadersList(headers) {
      if (headers[kHeadersList]) {
        return headers[kHeadersList];
      }
      if (!kHeadersListNode) {
        kHeadersListNode = Object.getOwnPropertySymbols(headers).find(
          (symbol) => symbol.description === "headers list"
        );
        assert(kHeadersListNode, "Headers cannot be parsed");
      }
      const headersList = headers[kHeadersListNode];
      assert(headersList);
      return headersList;
    }
    __name(getHeadersList, "getHeadersList");
    module.exports = {
      isCTLExcludingHtab,
      stringify: stringify2,
      getHeadersList
    };
  }
});

// node_modules/undici/lib/cookies/parse.js
var require_parse = __commonJS({
  "node_modules/undici/lib/cookies/parse.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var { maxNameValuePairSize, maxAttributeValueSize } = require_constants4();
    var { isCTLExcludingHtab } = require_util7();
    var { collectASequenceOfCodePointsFast } = require_dataURL();
    var assert = __require("assert");
    function parseSetCookie(header) {
      if (isCTLExcludingHtab(header)) {
        return null;
      }
      let nameValuePair = "";
      let unparsedAttributes = "";
      let name = "";
      let value = "";
      if (header.includes(";")) {
        const position = { position: 0 };
        nameValuePair = collectASequenceOfCodePointsFast(";", header, position);
        unparsedAttributes = header.slice(position.position);
      } else {
        nameValuePair = header;
      }
      if (!nameValuePair.includes("=")) {
        value = nameValuePair;
      } else {
        const position = { position: 0 };
        name = collectASequenceOfCodePointsFast(
          "=",
          nameValuePair,
          position
        );
        value = nameValuePair.slice(position.position + 1);
      }
      name = name.trim();
      value = value.trim();
      if (name.length + value.length > maxNameValuePairSize) {
        return null;
      }
      return {
        name,
        value,
        ...parseUnparsedAttributes(unparsedAttributes)
      };
    }
    __name(parseSetCookie, "parseSetCookie");
    function parseUnparsedAttributes(unparsedAttributes, cookieAttributeList = {}) {
      if (unparsedAttributes.length === 0) {
        return cookieAttributeList;
      }
      assert(unparsedAttributes[0] === ";");
      unparsedAttributes = unparsedAttributes.slice(1);
      let cookieAv = "";
      if (unparsedAttributes.includes(";")) {
        cookieAv = collectASequenceOfCodePointsFast(
          ";",
          unparsedAttributes,
          { position: 0 }
        );
        unparsedAttributes = unparsedAttributes.slice(cookieAv.length);
      } else {
        cookieAv = unparsedAttributes;
        unparsedAttributes = "";
      }
      let attributeName = "";
      let attributeValue = "";
      if (cookieAv.includes("=")) {
        const position = { position: 0 };
        attributeName = collectASequenceOfCodePointsFast(
          "=",
          cookieAv,
          position
        );
        attributeValue = cookieAv.slice(position.position + 1);
      } else {
        attributeName = cookieAv;
      }
      attributeName = attributeName.trim();
      attributeValue = attributeValue.trim();
      if (attributeValue.length > maxAttributeValueSize) {
        return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
      }
      const attributeNameLowercase = attributeName.toLowerCase();
      if (attributeNameLowercase === "expires") {
        const expiryTime = new Date(attributeValue);
        cookieAttributeList.expires = expiryTime;
      } else if (attributeNameLowercase === "max-age") {
        const charCode = attributeValue.charCodeAt(0);
        if ((charCode < 48 || charCode > 57) && attributeValue[0] !== "-") {
          return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
        }
        if (!/^\d+$/.test(attributeValue)) {
          return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
        }
        const deltaSeconds = Number(attributeValue);
        cookieAttributeList.maxAge = deltaSeconds;
      } else if (attributeNameLowercase === "domain") {
        let cookieDomain = attributeValue;
        if (cookieDomain[0] === ".") {
          cookieDomain = cookieDomain.slice(1);
        }
        cookieDomain = cookieDomain.toLowerCase();
        cookieAttributeList.domain = cookieDomain;
      } else if (attributeNameLowercase === "path") {
        let cookiePath = "";
        if (attributeValue.length === 0 || attributeValue[0] !== "/") {
          cookiePath = "/";
        } else {
          cookiePath = attributeValue;
        }
        cookieAttributeList.path = cookiePath;
      } else if (attributeNameLowercase === "secure") {
        cookieAttributeList.secure = true;
      } else if (attributeNameLowercase === "httponly") {
        cookieAttributeList.httpOnly = true;
      } else if (attributeNameLowercase === "samesite") {
        let enforcement = "Default";
        const attributeValueLowercase = attributeValue.toLowerCase();
        if (attributeValueLowercase.includes("none")) {
          enforcement = "None";
        }
        if (attributeValueLowercase.includes("strict")) {
          enforcement = "Strict";
        }
        if (attributeValueLowercase.includes("lax")) {
          enforcement = "Lax";
        }
        cookieAttributeList.sameSite = enforcement;
      } else {
        cookieAttributeList.unparsed ??= [];
        cookieAttributeList.unparsed.push(`${attributeName}=${attributeValue}`);
      }
      return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
    }
    __name(parseUnparsedAttributes, "parseUnparsedAttributes");
    module.exports = {
      parseSetCookie,
      parseUnparsedAttributes
    };
  }
});

// node_modules/undici/lib/cookies/index.js
var require_cookies = __commonJS({
  "node_modules/undici/lib/cookies/index.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var { parseSetCookie } = require_parse();
    var { stringify: stringify2, getHeadersList } = require_util7();
    var { webidl } = require_webidl();
    var { Headers } = require_headers();
    function getCookies(headers) {
      webidl.argumentLengthCheck(arguments, 1, { header: "getCookies" });
      webidl.brandCheck(headers, Headers, { strict: false });
      const cookie = headers.get("cookie");
      const out = {};
      if (!cookie) {
        return out;
      }
      for (const piece of cookie.split(";")) {
        const [name, ...value] = piece.split("=");
        out[name.trim()] = value.join("=");
      }
      return out;
    }
    __name(getCookies, "getCookies");
    function deleteCookie(headers, name, attributes) {
      webidl.argumentLengthCheck(arguments, 2, { header: "deleteCookie" });
      webidl.brandCheck(headers, Headers, { strict: false });
      name = webidl.converters.DOMString(name);
      attributes = webidl.converters.DeleteCookieAttributes(attributes);
      setCookie(headers, {
        name,
        value: "",
        expires: /* @__PURE__ */ new Date(0),
        ...attributes
      });
    }
    __name(deleteCookie, "deleteCookie");
    function getSetCookies(headers) {
      webidl.argumentLengthCheck(arguments, 1, { header: "getSetCookies" });
      webidl.brandCheck(headers, Headers, { strict: false });
      const cookies = getHeadersList(headers).cookies;
      if (!cookies) {
        return [];
      }
      return cookies.map((pair) => parseSetCookie(Array.isArray(pair) ? pair[1] : pair));
    }
    __name(getSetCookies, "getSetCookies");
    function setCookie(headers, cookie) {
      webidl.argumentLengthCheck(arguments, 2, { header: "setCookie" });
      webidl.brandCheck(headers, Headers, { strict: false });
      cookie = webidl.converters.Cookie(cookie);
      const str = stringify2(cookie);
      if (str) {
        headers.append("Set-Cookie", stringify2(cookie));
      }
    }
    __name(setCookie, "setCookie");
    webidl.converters.DeleteCookieAttributes = webidl.dictionaryConverter([
      {
        converter: webidl.nullableConverter(webidl.converters.DOMString),
        key: "path",
        defaultValue: null
      },
      {
        converter: webidl.nullableConverter(webidl.converters.DOMString),
        key: "domain",
        defaultValue: null
      }
    ]);
    webidl.converters.Cookie = webidl.dictionaryConverter([
      {
        converter: webidl.converters.DOMString,
        key: "name"
      },
      {
        converter: webidl.converters.DOMString,
        key: "value"
      },
      {
        converter: webidl.nullableConverter((value) => {
          if (typeof value === "number") {
            return webidl.converters["unsigned long long"](value);
          }
          return new Date(value);
        }),
        key: "expires",
        defaultValue: null
      },
      {
        converter: webidl.nullableConverter(webidl.converters["long long"]),
        key: "maxAge",
        defaultValue: null
      },
      {
        converter: webidl.nullableConverter(webidl.converters.DOMString),
        key: "domain",
        defaultValue: null
      },
      {
        converter: webidl.nullableConverter(webidl.converters.DOMString),
        key: "path",
        defaultValue: null
      },
      {
        converter: webidl.nullableConverter(webidl.converters.boolean),
        key: "secure",
        defaultValue: null
      },
      {
        converter: webidl.nullableConverter(webidl.converters.boolean),
        key: "httpOnly",
        defaultValue: null
      },
      {
        converter: webidl.converters.USVString,
        key: "sameSite",
        allowedValues: ["Strict", "Lax", "None"]
      },
      {
        converter: webidl.sequenceConverter(webidl.converters.DOMString),
        key: "unparsed",
        defaultValue: []
      }
    ]);
    module.exports = {
      getCookies,
      deleteCookie,
      getSetCookies,
      setCookie
    };
  }
});

// node_modules/undici/lib/websocket/constants.js
var require_constants5 = __commonJS({
  "node_modules/undici/lib/websocket/constants.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var uid = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
    var staticPropertyDescriptors = {
      enumerable: true,
      writable: false,
      configurable: false
    };
    var states = {
      CONNECTING: 0,
      OPEN: 1,
      CLOSING: 2,
      CLOSED: 3
    };
    var opcodes = {
      CONTINUATION: 0,
      TEXT: 1,
      BINARY: 2,
      CLOSE: 8,
      PING: 9,
      PONG: 10
    };
    var maxUnsigned16Bit = 2 ** 16 - 1;
    var parserStates = {
      INFO: 0,
      PAYLOADLENGTH_16: 2,
      PAYLOADLENGTH_64: 3,
      READ_DATA: 4
    };
    var emptyBuffer = Buffer.allocUnsafe(0);
    module.exports = {
      uid,
      staticPropertyDescriptors,
      states,
      opcodes,
      maxUnsigned16Bit,
      parserStates,
      emptyBuffer
    };
  }
});

// node_modules/undici/lib/websocket/symbols.js
var require_symbols5 = __commonJS({
  "node_modules/undici/lib/websocket/symbols.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    module.exports = {
      kWebSocketURL: Symbol("url"),
      kReadyState: Symbol("ready state"),
      kController: Symbol("controller"),
      kResponse: Symbol("response"),
      kBinaryType: Symbol("binary type"),
      kSentClose: Symbol("sent close"),
      kReceivedClose: Symbol("received close"),
      kByteParser: Symbol("byte parser")
    };
  }
});

// node_modules/undici/lib/websocket/events.js
var require_events = __commonJS({
  "node_modules/undici/lib/websocket/events.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var { webidl } = require_webidl();
    var { kEnumerableProperty } = require_util2();
    var { MessagePort } = __require("worker_threads");
    var MessageEvent = class _MessageEvent extends Event {
      static {
        __name(this, "MessageEvent");
      }
      #eventInit;
      constructor(type, eventInitDict = {}) {
        webidl.argumentLengthCheck(arguments, 1, { header: "MessageEvent constructor" });
        type = webidl.converters.DOMString(type);
        eventInitDict = webidl.converters.MessageEventInit(eventInitDict);
        super(type, eventInitDict);
        this.#eventInit = eventInitDict;
      }
      get data() {
        webidl.brandCheck(this, _MessageEvent);
        return this.#eventInit.data;
      }
      get origin() {
        webidl.brandCheck(this, _MessageEvent);
        return this.#eventInit.origin;
      }
      get lastEventId() {
        webidl.brandCheck(this, _MessageEvent);
        return this.#eventInit.lastEventId;
      }
      get source() {
        webidl.brandCheck(this, _MessageEvent);
        return this.#eventInit.source;
      }
      get ports() {
        webidl.brandCheck(this, _MessageEvent);
        if (!Object.isFrozen(this.#eventInit.ports)) {
          Object.freeze(this.#eventInit.ports);
        }
        return this.#eventInit.ports;
      }
      initMessageEvent(type, bubbles = false, cancelable = false, data = null, origin = "", lastEventId = "", source = null, ports = []) {
        webidl.brandCheck(this, _MessageEvent);
        webidl.argumentLengthCheck(arguments, 1, { header: "MessageEvent.initMessageEvent" });
        return new _MessageEvent(type, {
          bubbles,
          cancelable,
          data,
          origin,
          lastEventId,
          source,
          ports
        });
      }
    };
    var CloseEvent = class _CloseEvent extends Event {
      static {
        __name(this, "CloseEvent");
      }
      #eventInit;
      constructor(type, eventInitDict = {}) {
        webidl.argumentLengthCheck(arguments, 1, { header: "CloseEvent constructor" });
        type = webidl.converters.DOMString(type);
        eventInitDict = webidl.converters.CloseEventInit(eventInitDict);
        super(type, eventInitDict);
        this.#eventInit = eventInitDict;
      }
      get wasClean() {
        webidl.brandCheck(this, _CloseEvent);
        return this.#eventInit.wasClean;
      }
      get code() {
        webidl.brandCheck(this, _CloseEvent);
        return this.#eventInit.code;
      }
      get reason() {
        webidl.brandCheck(this, _CloseEvent);
        return this.#eventInit.reason;
      }
    };
    var ErrorEvent = class _ErrorEvent extends Event {
      static {
        __name(this, "ErrorEvent");
      }
      #eventInit;
      constructor(type, eventInitDict) {
        webidl.argumentLengthCheck(arguments, 1, { header: "ErrorEvent constructor" });
        super(type, eventInitDict);
        type = webidl.converters.DOMString(type);
        eventInitDict = webidl.converters.ErrorEventInit(eventInitDict ?? {});
        this.#eventInit = eventInitDict;
      }
      get message() {
        webidl.brandCheck(this, _ErrorEvent);
        return this.#eventInit.message;
      }
      get filename() {
        webidl.brandCheck(this, _ErrorEvent);
        return this.#eventInit.filename;
      }
      get lineno() {
        webidl.brandCheck(this, _ErrorEvent);
        return this.#eventInit.lineno;
      }
      get colno() {
        webidl.brandCheck(this, _ErrorEvent);
        return this.#eventInit.colno;
      }
      get error() {
        webidl.brandCheck(this, _ErrorEvent);
        return this.#eventInit.error;
      }
    };
    Object.defineProperties(MessageEvent.prototype, {
      [Symbol.toStringTag]: {
        value: "MessageEvent",
        configurable: true
      },
      data: kEnumerableProperty,
      origin: kEnumerableProperty,
      lastEventId: kEnumerableProperty,
      source: kEnumerableProperty,
      ports: kEnumerableProperty,
      initMessageEvent: kEnumerableProperty
    });
    Object.defineProperties(CloseEvent.prototype, {
      [Symbol.toStringTag]: {
        value: "CloseEvent",
        configurable: true
      },
      reason: kEnumerableProperty,
      code: kEnumerableProperty,
      wasClean: kEnumerableProperty
    });
    Object.defineProperties(ErrorEvent.prototype, {
      [Symbol.toStringTag]: {
        value: "ErrorEvent",
        configurable: true
      },
      message: kEnumerableProperty,
      filename: kEnumerableProperty,
      lineno: kEnumerableProperty,
      colno: kEnumerableProperty,
      error: kEnumerableProperty
    });
    webidl.converters.MessagePort = webidl.interfaceConverter(MessagePort);
    webidl.converters["sequence<MessagePort>"] = webidl.sequenceConverter(
      webidl.converters.MessagePort
    );
    var eventInit = [
      {
        key: "bubbles",
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: "cancelable",
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: "composed",
        converter: webidl.converters.boolean,
        defaultValue: false
      }
    ];
    webidl.converters.MessageEventInit = webidl.dictionaryConverter([
      ...eventInit,
      {
        key: "data",
        converter: webidl.converters.any,
        defaultValue: null
      },
      {
        key: "origin",
        converter: webidl.converters.USVString,
        defaultValue: ""
      },
      {
        key: "lastEventId",
        converter: webidl.converters.DOMString,
        defaultValue: ""
      },
      {
        key: "source",
        // Node doesn't implement WindowProxy or ServiceWorker, so the only
        // valid value for source is a MessagePort.
        converter: webidl.nullableConverter(webidl.converters.MessagePort),
        defaultValue: null
      },
      {
        key: "ports",
        converter: webidl.converters["sequence<MessagePort>"],
        get defaultValue() {
          return [];
        }
      }
    ]);
    webidl.converters.CloseEventInit = webidl.dictionaryConverter([
      ...eventInit,
      {
        key: "wasClean",
        converter: webidl.converters.boolean,
        defaultValue: false
      },
      {
        key: "code",
        converter: webidl.converters["unsigned short"],
        defaultValue: 0
      },
      {
        key: "reason",
        converter: webidl.converters.USVString,
        defaultValue: ""
      }
    ]);
    webidl.converters.ErrorEventInit = webidl.dictionaryConverter([
      ...eventInit,
      {
        key: "message",
        converter: webidl.converters.DOMString,
        defaultValue: ""
      },
      {
        key: "filename",
        converter: webidl.converters.USVString,
        defaultValue: ""
      },
      {
        key: "lineno",
        converter: webidl.converters["unsigned long"],
        defaultValue: 0
      },
      {
        key: "colno",
        converter: webidl.converters["unsigned long"],
        defaultValue: 0
      },
      {
        key: "error",
        converter: webidl.converters.any
      }
    ]);
    module.exports = {
      MessageEvent,
      CloseEvent,
      ErrorEvent
    };
  }
});

// node_modules/undici/lib/websocket/util.js
var require_util8 = __commonJS({
  "node_modules/undici/lib/websocket/util.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var { kReadyState, kController, kResponse, kBinaryType, kWebSocketURL } = require_symbols5();
    var { states, opcodes } = require_constants5();
    var { MessageEvent, ErrorEvent } = require_events();
    function isEstablished(ws) {
      return ws[kReadyState] === states.OPEN;
    }
    __name(isEstablished, "isEstablished");
    function isClosing(ws) {
      return ws[kReadyState] === states.CLOSING;
    }
    __name(isClosing, "isClosing");
    function isClosed(ws) {
      return ws[kReadyState] === states.CLOSED;
    }
    __name(isClosed, "isClosed");
    function fireEvent(e, target, eventConstructor = Event, eventInitDict) {
      const event = new eventConstructor(e, eventInitDict);
      target.dispatchEvent(event);
    }
    __name(fireEvent, "fireEvent");
    function websocketMessageReceived(ws, type, data) {
      if (ws[kReadyState] !== states.OPEN) {
        return;
      }
      let dataForEvent;
      if (type === opcodes.TEXT) {
        try {
          dataForEvent = new TextDecoder("utf-8", { fatal: true }).decode(data);
        } catch {
          failWebsocketConnection(ws, "Received invalid UTF-8 in text frame.");
          return;
        }
      } else if (type === opcodes.BINARY) {
        if (ws[kBinaryType] === "blob") {
          dataForEvent = new Blob([data]);
        } else {
          dataForEvent = new Uint8Array(data).buffer;
        }
      }
      fireEvent("message", ws, MessageEvent, {
        origin: ws[kWebSocketURL].origin,
        data: dataForEvent
      });
    }
    __name(websocketMessageReceived, "websocketMessageReceived");
    function isValidSubprotocol(protocol) {
      if (protocol.length === 0) {
        return false;
      }
      for (const char of protocol) {
        const code = char.charCodeAt(0);
        if (code < 33 || code > 126 || char === "(" || char === ")" || char === "<" || char === ">" || char === "@" || char === "," || char === ";" || char === ":" || char === "\\" || char === '"' || char === "/" || char === "[" || char === "]" || char === "?" || char === "=" || char === "{" || char === "}" || code === 32 || // SP
        code === 9) {
          return false;
        }
      }
      return true;
    }
    __name(isValidSubprotocol, "isValidSubprotocol");
    function isValidStatusCode(code) {
      if (code >= 1e3 && code < 1015) {
        return code !== 1004 && // reserved
        code !== 1005 && // "MUST NOT be set as a status code"
        code !== 1006;
      }
      return code >= 3e3 && code <= 4999;
    }
    __name(isValidStatusCode, "isValidStatusCode");
    function failWebsocketConnection(ws, reason) {
      const { [kController]: controller, [kResponse]: response } = ws;
      controller.abort();
      if (response?.socket && !response.socket.destroyed) {
        response.socket.destroy();
      }
      if (reason) {
        fireEvent("error", ws, ErrorEvent, {
          error: new Error(reason)
        });
      }
    }
    __name(failWebsocketConnection, "failWebsocketConnection");
    module.exports = {
      isEstablished,
      isClosing,
      isClosed,
      fireEvent,
      isValidSubprotocol,
      isValidStatusCode,
      failWebsocketConnection,
      websocketMessageReceived
    };
  }
});

// node_modules/undici/lib/websocket/connection.js
var require_connection = __commonJS({
  "node_modules/undici/lib/websocket/connection.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var diagnosticsChannel = __require("diagnostics_channel");
    var { uid, states } = require_constants5();
    var {
      kReadyState,
      kSentClose,
      kByteParser,
      kReceivedClose
    } = require_symbols5();
    var { fireEvent, failWebsocketConnection } = require_util8();
    var { CloseEvent } = require_events();
    var { makeRequest } = require_request2();
    var { fetching } = require_fetch();
    var { Headers } = require_headers();
    var { getGlobalDispatcher } = require_global2();
    var { kHeadersList } = require_symbols();
    var channels = {};
    channels.open = diagnosticsChannel.channel("undici:websocket:open");
    channels.close = diagnosticsChannel.channel("undici:websocket:close");
    channels.socketError = diagnosticsChannel.channel("undici:websocket:socket_error");
    var crypto4;
    try {
      crypto4 = __require("crypto");
    } catch {
    }
    function establishWebSocketConnection(url2, protocols, ws, onEstablish, options) {
      const requestURL = url2;
      requestURL.protocol = url2.protocol === "ws:" ? "http:" : "https:";
      const request = makeRequest({
        urlList: [requestURL],
        serviceWorkers: "none",
        referrer: "no-referrer",
        mode: "websocket",
        credentials: "include",
        cache: "no-store",
        redirect: "error"
      });
      if (options.headers) {
        const headersList = new Headers(options.headers)[kHeadersList];
        request.headersList = headersList;
      }
      const keyValue = crypto4.randomBytes(16).toString("base64");
      request.headersList.append("sec-websocket-key", keyValue);
      request.headersList.append("sec-websocket-version", "13");
      for (const protocol of protocols) {
        request.headersList.append("sec-websocket-protocol", protocol);
      }
      const permessageDeflate = "";
      const controller = fetching({
        request,
        useParallelQueue: true,
        dispatcher: options.dispatcher ?? getGlobalDispatcher(),
        processResponse(response) {
          if (response.type === "error" || response.status !== 101) {
            failWebsocketConnection(ws, "Received network error or non-101 status code.");
            return;
          }
          if (protocols.length !== 0 && !response.headersList.get("Sec-WebSocket-Protocol")) {
            failWebsocketConnection(ws, "Server did not respond with sent protocols.");
            return;
          }
          if (response.headersList.get("Upgrade")?.toLowerCase() !== "websocket") {
            failWebsocketConnection(ws, 'Server did not set Upgrade header to "websocket".');
            return;
          }
          if (response.headersList.get("Connection")?.toLowerCase() !== "upgrade") {
            failWebsocketConnection(ws, 'Server did not set Connection header to "upgrade".');
            return;
          }
          const secWSAccept = response.headersList.get("Sec-WebSocket-Accept");
          const digest = crypto4.createHash("sha1").update(keyValue + uid).digest("base64");
          if (secWSAccept !== digest) {
            failWebsocketConnection(ws, "Incorrect hash received in Sec-WebSocket-Accept header.");
            return;
          }
          const secExtension = response.headersList.get("Sec-WebSocket-Extensions");
          if (secExtension !== null && secExtension !== permessageDeflate) {
            failWebsocketConnection(ws, "Received different permessage-deflate than the one set.");
            return;
          }
          const secProtocol = response.headersList.get("Sec-WebSocket-Protocol");
          if (secProtocol !== null && secProtocol !== request.headersList.get("Sec-WebSocket-Protocol")) {
            failWebsocketConnection(ws, "Protocol was not set in the opening handshake.");
            return;
          }
          response.socket.on("data", onSocketData);
          response.socket.on("close", onSocketClose);
          response.socket.on("error", onSocketError);
          if (channels.open.hasSubscribers) {
            channels.open.publish({
              address: response.socket.address(),
              protocol: secProtocol,
              extensions: secExtension
            });
          }
          onEstablish(response);
        }
      });
      return controller;
    }
    __name(establishWebSocketConnection, "establishWebSocketConnection");
    function onSocketData(chunk) {
      if (!this.ws[kByteParser].write(chunk)) {
        this.pause();
      }
    }
    __name(onSocketData, "onSocketData");
    function onSocketClose() {
      const { ws } = this;
      const wasClean = ws[kSentClose] && ws[kReceivedClose];
      let code = 1005;
      let reason = "";
      const result = ws[kByteParser].closingInfo;
      if (result) {
        code = result.code ?? 1005;
        reason = result.reason;
      } else if (!ws[kSentClose]) {
        code = 1006;
      }
      ws[kReadyState] = states.CLOSED;
      fireEvent("close", ws, CloseEvent, {
        wasClean,
        code,
        reason
      });
      if (channels.close.hasSubscribers) {
        channels.close.publish({
          websocket: ws,
          code,
          reason
        });
      }
    }
    __name(onSocketClose, "onSocketClose");
    function onSocketError(error) {
      const { ws } = this;
      ws[kReadyState] = states.CLOSING;
      if (channels.socketError.hasSubscribers) {
        channels.socketError.publish(error);
      }
      this.destroy();
    }
    __name(onSocketError, "onSocketError");
    module.exports = {
      establishWebSocketConnection
    };
  }
});

// node_modules/undici/lib/websocket/frame.js
var require_frame = __commonJS({
  "node_modules/undici/lib/websocket/frame.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var { maxUnsigned16Bit } = require_constants5();
    var crypto4;
    try {
      crypto4 = __require("crypto");
    } catch {
    }
    var WebsocketFrameSend = class {
      static {
        __name(this, "WebsocketFrameSend");
      }
      /**
       * @param {Buffer|undefined} data
       */
      constructor(data) {
        this.frameData = data;
        this.maskKey = crypto4.randomBytes(4);
      }
      createFrame(opcode) {
        const bodyLength = this.frameData?.byteLength ?? 0;
        let payloadLength = bodyLength;
        let offset = 6;
        if (bodyLength > maxUnsigned16Bit) {
          offset += 8;
          payloadLength = 127;
        } else if (bodyLength > 125) {
          offset += 2;
          payloadLength = 126;
        }
        const buffer = Buffer.allocUnsafe(bodyLength + offset);
        buffer[0] = buffer[1] = 0;
        buffer[0] |= 128;
        buffer[0] = (buffer[0] & 240) + opcode;
        buffer[offset - 4] = this.maskKey[0];
        buffer[offset - 3] = this.maskKey[1];
        buffer[offset - 2] = this.maskKey[2];
        buffer[offset - 1] = this.maskKey[3];
        buffer[1] = payloadLength;
        if (payloadLength === 126) {
          buffer.writeUInt16BE(bodyLength, 2);
        } else if (payloadLength === 127) {
          buffer[2] = buffer[3] = 0;
          buffer.writeUIntBE(bodyLength, 4, 6);
        }
        buffer[1] |= 128;
        for (let i = 0; i < bodyLength; i++) {
          buffer[offset + i] = this.frameData[i] ^ this.maskKey[i % 4];
        }
        return buffer;
      }
    };
    module.exports = {
      WebsocketFrameSend
    };
  }
});

// node_modules/undici/lib/websocket/receiver.js
var require_receiver = __commonJS({
  "node_modules/undici/lib/websocket/receiver.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var { Writable } = __require("stream");
    var diagnosticsChannel = __require("diagnostics_channel");
    var { parserStates, opcodes, states, emptyBuffer } = require_constants5();
    var { kReadyState, kSentClose, kResponse, kReceivedClose } = require_symbols5();
    var { isValidStatusCode, failWebsocketConnection, websocketMessageReceived } = require_util8();
    var { WebsocketFrameSend } = require_frame();
    var channels = {};
    channels.ping = diagnosticsChannel.channel("undici:websocket:ping");
    channels.pong = diagnosticsChannel.channel("undici:websocket:pong");
    var ByteParser = class extends Writable {
      static {
        __name(this, "ByteParser");
      }
      #buffers = [];
      #byteOffset = 0;
      #state = parserStates.INFO;
      #info = {};
      #fragments = [];
      constructor(ws) {
        super();
        this.ws = ws;
      }
      /**
       * @param {Buffer} chunk
       * @param {() => void} callback
       */
      _write(chunk, _, callback) {
        this.#buffers.push(chunk);
        this.#byteOffset += chunk.length;
        this.run(callback);
      }
      /**
       * Runs whenever a new chunk is received.
       * Callback is called whenever there are no more chunks buffering,
       * or not enough bytes are buffered to parse.
       */
      run(callback) {
        while (true) {
          if (this.#state === parserStates.INFO) {
            if (this.#byteOffset < 2) {
              return callback();
            }
            const buffer = this.consume(2);
            this.#info.fin = (buffer[0] & 128) !== 0;
            this.#info.opcode = buffer[0] & 15;
            this.#info.originalOpcode ??= this.#info.opcode;
            this.#info.fragmented = !this.#info.fin && this.#info.opcode !== opcodes.CONTINUATION;
            if (this.#info.fragmented && this.#info.opcode !== opcodes.BINARY && this.#info.opcode !== opcodes.TEXT) {
              failWebsocketConnection(this.ws, "Invalid frame type was fragmented.");
              return;
            }
            const payloadLength = buffer[1] & 127;
            if (payloadLength <= 125) {
              this.#info.payloadLength = payloadLength;
              this.#state = parserStates.READ_DATA;
            } else if (payloadLength === 126) {
              this.#state = parserStates.PAYLOADLENGTH_16;
            } else if (payloadLength === 127) {
              this.#state = parserStates.PAYLOADLENGTH_64;
            }
            if (this.#info.fragmented && payloadLength > 125) {
              failWebsocketConnection(this.ws, "Fragmented frame exceeded 125 bytes.");
              return;
            } else if ((this.#info.opcode === opcodes.PING || this.#info.opcode === opcodes.PONG || this.#info.opcode === opcodes.CLOSE) && payloadLength > 125) {
              failWebsocketConnection(this.ws, "Payload length for control frame exceeded 125 bytes.");
              return;
            } else if (this.#info.opcode === opcodes.CLOSE) {
              if (payloadLength === 1) {
                failWebsocketConnection(this.ws, "Received close frame with a 1-byte body.");
                return;
              }
              const body = this.consume(payloadLength);
              this.#info.closeInfo = this.parseCloseBody(false, body);
              if (!this.ws[kSentClose]) {
                const body2 = Buffer.allocUnsafe(2);
                body2.writeUInt16BE(this.#info.closeInfo.code, 0);
                const closeFrame = new WebsocketFrameSend(body2);
                this.ws[kResponse].socket.write(
                  closeFrame.createFrame(opcodes.CLOSE),
                  (err) => {
                    if (!err) {
                      this.ws[kSentClose] = true;
                    }
                  }
                );
              }
              this.ws[kReadyState] = states.CLOSING;
              this.ws[kReceivedClose] = true;
              this.end();
              return;
            } else if (this.#info.opcode === opcodes.PING) {
              const body = this.consume(payloadLength);
              if (!this.ws[kReceivedClose]) {
                const frame = new WebsocketFrameSend(body);
                this.ws[kResponse].socket.write(frame.createFrame(opcodes.PONG));
                if (channels.ping.hasSubscribers) {
                  channels.ping.publish({
                    payload: body
                  });
                }
              }
              this.#state = parserStates.INFO;
              if (this.#byteOffset > 0) {
                continue;
              } else {
                callback();
                return;
              }
            } else if (this.#info.opcode === opcodes.PONG) {
              const body = this.consume(payloadLength);
              if (channels.pong.hasSubscribers) {
                channels.pong.publish({
                  payload: body
                });
              }
              if (this.#byteOffset > 0) {
                continue;
              } else {
                callback();
                return;
              }
            }
          } else if (this.#state === parserStates.PAYLOADLENGTH_16) {
            if (this.#byteOffset < 2) {
              return callback();
            }
            const buffer = this.consume(2);
            this.#info.payloadLength = buffer.readUInt16BE(0);
            this.#state = parserStates.READ_DATA;
          } else if (this.#state === parserStates.PAYLOADLENGTH_64) {
            if (this.#byteOffset < 8) {
              return callback();
            }
            const buffer = this.consume(8);
            const upper = buffer.readUInt32BE(0);
            if (upper > 2 ** 31 - 1) {
              failWebsocketConnection(this.ws, "Received payload length > 2^31 bytes.");
              return;
            }
            const lower = buffer.readUInt32BE(4);
            this.#info.payloadLength = (upper << 8) + lower;
            this.#state = parserStates.READ_DATA;
          } else if (this.#state === parserStates.READ_DATA) {
            if (this.#byteOffset < this.#info.payloadLength) {
              return callback();
            } else if (this.#byteOffset >= this.#info.payloadLength) {
              const body = this.consume(this.#info.payloadLength);
              this.#fragments.push(body);
              if (!this.#info.fragmented || this.#info.fin && this.#info.opcode === opcodes.CONTINUATION) {
                const fullMessage = Buffer.concat(this.#fragments);
                websocketMessageReceived(this.ws, this.#info.originalOpcode, fullMessage);
                this.#info = {};
                this.#fragments.length = 0;
              }
              this.#state = parserStates.INFO;
            }
          }
          if (this.#byteOffset > 0) {
            continue;
          } else {
            callback();
            break;
          }
        }
      }
      /**
       * Take n bytes from the buffered Buffers
       * @param {number} n
       * @returns {Buffer|null}
       */
      consume(n) {
        if (n > this.#byteOffset) {
          return null;
        } else if (n === 0) {
          return emptyBuffer;
        }
        if (this.#buffers[0].length === n) {
          this.#byteOffset -= this.#buffers[0].length;
          return this.#buffers.shift();
        }
        const buffer = Buffer.allocUnsafe(n);
        let offset = 0;
        while (offset !== n) {
          const next = this.#buffers[0];
          const { length } = next;
          if (length + offset === n) {
            buffer.set(this.#buffers.shift(), offset);
            break;
          } else if (length + offset > n) {
            buffer.set(next.subarray(0, n - offset), offset);
            this.#buffers[0] = next.subarray(n - offset);
            break;
          } else {
            buffer.set(this.#buffers.shift(), offset);
            offset += next.length;
          }
        }
        this.#byteOffset -= n;
        return buffer;
      }
      parseCloseBody(onlyCode, data) {
        let code;
        if (data.length >= 2) {
          code = data.readUInt16BE(0);
        }
        if (onlyCode) {
          if (!isValidStatusCode(code)) {
            return null;
          }
          return { code };
        }
        let reason = data.subarray(2);
        if (reason[0] === 239 && reason[1] === 187 && reason[2] === 191) {
          reason = reason.subarray(3);
        }
        if (code !== void 0 && !isValidStatusCode(code)) {
          return null;
        }
        try {
          reason = new TextDecoder("utf-8", { fatal: true }).decode(reason);
        } catch {
          return null;
        }
        return { code, reason };
      }
      get closingInfo() {
        return this.#info.closeInfo;
      }
    };
    module.exports = {
      ByteParser
    };
  }
});

// node_modules/undici/lib/websocket/websocket.js
var require_websocket = __commonJS({
  "node_modules/undici/lib/websocket/websocket.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var { webidl } = require_webidl();
    var { DOMException: DOMException2 } = require_constants2();
    var { URLSerializer } = require_dataURL();
    var { getGlobalOrigin } = require_global();
    var { staticPropertyDescriptors, states, opcodes, emptyBuffer } = require_constants5();
    var {
      kWebSocketURL,
      kReadyState,
      kController,
      kBinaryType,
      kResponse,
      kSentClose,
      kByteParser
    } = require_symbols5();
    var { isEstablished, isClosing, isValidSubprotocol, failWebsocketConnection, fireEvent } = require_util8();
    var { establishWebSocketConnection } = require_connection();
    var { WebsocketFrameSend } = require_frame();
    var { ByteParser } = require_receiver();
    var { kEnumerableProperty, isBlobLike } = require_util2();
    var { getGlobalDispatcher } = require_global2();
    var { types } = __require("util");
    var experimentalWarned = false;
    var WebSocket = class _WebSocket extends EventTarget {
      static {
        __name(this, "WebSocket");
      }
      #events = {
        open: null,
        error: null,
        close: null,
        message: null
      };
      #bufferedAmount = 0;
      #protocol = "";
      #extensions = "";
      /**
       * @param {string} url
       * @param {string|string[]} protocols
       */
      constructor(url2, protocols = []) {
        super();
        webidl.argumentLengthCheck(arguments, 1, { header: "WebSocket constructor" });
        if (!experimentalWarned) {
          experimentalWarned = true;
          process.emitWarning("WebSockets are experimental, expect them to change at any time.", {
            code: "UNDICI-WS"
          });
        }
        const options = webidl.converters["DOMString or sequence<DOMString> or WebSocketInit"](protocols);
        url2 = webidl.converters.USVString(url2);
        protocols = options.protocols;
        const baseURL = getGlobalOrigin();
        let urlRecord;
        try {
          urlRecord = new URL(url2, baseURL);
        } catch (e) {
          throw new DOMException2(e, "SyntaxError");
        }
        if (urlRecord.protocol === "http:") {
          urlRecord.protocol = "ws:";
        } else if (urlRecord.protocol === "https:") {
          urlRecord.protocol = "wss:";
        }
        if (urlRecord.protocol !== "ws:" && urlRecord.protocol !== "wss:") {
          throw new DOMException2(
            `Expected a ws: or wss: protocol, got ${urlRecord.protocol}`,
            "SyntaxError"
          );
        }
        if (urlRecord.hash || urlRecord.href.endsWith("#")) {
          throw new DOMException2("Got fragment", "SyntaxError");
        }
        if (typeof protocols === "string") {
          protocols = [protocols];
        }
        if (protocols.length !== new Set(protocols.map((p) => p.toLowerCase())).size) {
          throw new DOMException2("Invalid Sec-WebSocket-Protocol value", "SyntaxError");
        }
        if (protocols.length > 0 && !protocols.every((p) => isValidSubprotocol(p))) {
          throw new DOMException2("Invalid Sec-WebSocket-Protocol value", "SyntaxError");
        }
        this[kWebSocketURL] = new URL(urlRecord.href);
        this[kController] = establishWebSocketConnection(
          urlRecord,
          protocols,
          this,
          (response) => this.#onConnectionEstablished(response),
          options
        );
        this[kReadyState] = _WebSocket.CONNECTING;
        this[kBinaryType] = "blob";
      }
      /**
       * @see https://websockets.spec.whatwg.org/#dom-websocket-close
       * @param {number|undefined} code
       * @param {string|undefined} reason
       */
      close(code = void 0, reason = void 0) {
        webidl.brandCheck(this, _WebSocket);
        if (code !== void 0) {
          code = webidl.converters["unsigned short"](code, { clamp: true });
        }
        if (reason !== void 0) {
          reason = webidl.converters.USVString(reason);
        }
        if (code !== void 0) {
          if (code !== 1e3 && (code < 3e3 || code > 4999)) {
            throw new DOMException2("invalid code", "InvalidAccessError");
          }
        }
        let reasonByteLength = 0;
        if (reason !== void 0) {
          reasonByteLength = Buffer.byteLength(reason);
          if (reasonByteLength > 123) {
            throw new DOMException2(
              `Reason must be less than 123 bytes; received ${reasonByteLength}`,
              "SyntaxError"
            );
          }
        }
        if (this[kReadyState] === _WebSocket.CLOSING || this[kReadyState] === _WebSocket.CLOSED) {
        } else if (!isEstablished(this)) {
          failWebsocketConnection(this, "Connection was closed before it was established.");
          this[kReadyState] = _WebSocket.CLOSING;
        } else if (!isClosing(this)) {
          const frame = new WebsocketFrameSend();
          if (code !== void 0 && reason === void 0) {
            frame.frameData = Buffer.allocUnsafe(2);
            frame.frameData.writeUInt16BE(code, 0);
          } else if (code !== void 0 && reason !== void 0) {
            frame.frameData = Buffer.allocUnsafe(2 + reasonByteLength);
            frame.frameData.writeUInt16BE(code, 0);
            frame.frameData.write(reason, 2, "utf-8");
          } else {
            frame.frameData = emptyBuffer;
          }
          const socket = this[kResponse].socket;
          socket.write(frame.createFrame(opcodes.CLOSE), (err) => {
            if (!err) {
              this[kSentClose] = true;
            }
          });
          this[kReadyState] = states.CLOSING;
        } else {
          this[kReadyState] = _WebSocket.CLOSING;
        }
      }
      /**
       * @see https://websockets.spec.whatwg.org/#dom-websocket-send
       * @param {NodeJS.TypedArray|ArrayBuffer|Blob|string} data
       */
      send(data) {
        webidl.brandCheck(this, _WebSocket);
        webidl.argumentLengthCheck(arguments, 1, { header: "WebSocket.send" });
        data = webidl.converters.WebSocketSendData(data);
        if (this[kReadyState] === _WebSocket.CONNECTING) {
          throw new DOMException2("Sent before connected.", "InvalidStateError");
        }
        if (!isEstablished(this) || isClosing(this)) {
          return;
        }
        const socket = this[kResponse].socket;
        if (typeof data === "string") {
          const value = Buffer.from(data);
          const frame = new WebsocketFrameSend(value);
          const buffer = frame.createFrame(opcodes.TEXT);
          this.#bufferedAmount += value.byteLength;
          socket.write(buffer, () => {
            this.#bufferedAmount -= value.byteLength;
          });
        } else if (types.isArrayBuffer(data)) {
          const value = Buffer.from(data);
          const frame = new WebsocketFrameSend(value);
          const buffer = frame.createFrame(opcodes.BINARY);
          this.#bufferedAmount += value.byteLength;
          socket.write(buffer, () => {
            this.#bufferedAmount -= value.byteLength;
          });
        } else if (ArrayBuffer.isView(data)) {
          const ab = Buffer.from(data, data.byteOffset, data.byteLength);
          const frame = new WebsocketFrameSend(ab);
          const buffer = frame.createFrame(opcodes.BINARY);
          this.#bufferedAmount += ab.byteLength;
          socket.write(buffer, () => {
            this.#bufferedAmount -= ab.byteLength;
          });
        } else if (isBlobLike(data)) {
          const frame = new WebsocketFrameSend();
          data.arrayBuffer().then((ab) => {
            const value = Buffer.from(ab);
            frame.frameData = value;
            const buffer = frame.createFrame(opcodes.BINARY);
            this.#bufferedAmount += value.byteLength;
            socket.write(buffer, () => {
              this.#bufferedAmount -= value.byteLength;
            });
          });
        }
      }
      get readyState() {
        webidl.brandCheck(this, _WebSocket);
        return this[kReadyState];
      }
      get bufferedAmount() {
        webidl.brandCheck(this, _WebSocket);
        return this.#bufferedAmount;
      }
      get url() {
        webidl.brandCheck(this, _WebSocket);
        return URLSerializer(this[kWebSocketURL]);
      }
      get extensions() {
        webidl.brandCheck(this, _WebSocket);
        return this.#extensions;
      }
      get protocol() {
        webidl.brandCheck(this, _WebSocket);
        return this.#protocol;
      }
      get onopen() {
        webidl.brandCheck(this, _WebSocket);
        return this.#events.open;
      }
      set onopen(fn) {
        webidl.brandCheck(this, _WebSocket);
        if (this.#events.open) {
          this.removeEventListener("open", this.#events.open);
        }
        if (typeof fn === "function") {
          this.#events.open = fn;
          this.addEventListener("open", fn);
        } else {
          this.#events.open = null;
        }
      }
      get onerror() {
        webidl.brandCheck(this, _WebSocket);
        return this.#events.error;
      }
      set onerror(fn) {
        webidl.brandCheck(this, _WebSocket);
        if (this.#events.error) {
          this.removeEventListener("error", this.#events.error);
        }
        if (typeof fn === "function") {
          this.#events.error = fn;
          this.addEventListener("error", fn);
        } else {
          this.#events.error = null;
        }
      }
      get onclose() {
        webidl.brandCheck(this, _WebSocket);
        return this.#events.close;
      }
      set onclose(fn) {
        webidl.brandCheck(this, _WebSocket);
        if (this.#events.close) {
          this.removeEventListener("close", this.#events.close);
        }
        if (typeof fn === "function") {
          this.#events.close = fn;
          this.addEventListener("close", fn);
        } else {
          this.#events.close = null;
        }
      }
      get onmessage() {
        webidl.brandCheck(this, _WebSocket);
        return this.#events.message;
      }
      set onmessage(fn) {
        webidl.brandCheck(this, _WebSocket);
        if (this.#events.message) {
          this.removeEventListener("message", this.#events.message);
        }
        if (typeof fn === "function") {
          this.#events.message = fn;
          this.addEventListener("message", fn);
        } else {
          this.#events.message = null;
        }
      }
      get binaryType() {
        webidl.brandCheck(this, _WebSocket);
        return this[kBinaryType];
      }
      set binaryType(type) {
        webidl.brandCheck(this, _WebSocket);
        if (type !== "blob" && type !== "arraybuffer") {
          this[kBinaryType] = "blob";
        } else {
          this[kBinaryType] = type;
        }
      }
      /**
       * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
       */
      #onConnectionEstablished(response) {
        this[kResponse] = response;
        const parser = new ByteParser(this);
        parser.on("drain", /* @__PURE__ */ __name(function onParserDrain() {
          this.ws[kResponse].socket.resume();
        }, "onParserDrain"));
        response.socket.ws = this;
        this[kByteParser] = parser;
        this[kReadyState] = states.OPEN;
        const extensions = response.headersList.get("sec-websocket-extensions");
        if (extensions !== null) {
          this.#extensions = extensions;
        }
        const protocol = response.headersList.get("sec-websocket-protocol");
        if (protocol !== null) {
          this.#protocol = protocol;
        }
        fireEvent("open", this);
      }
    };
    WebSocket.CONNECTING = WebSocket.prototype.CONNECTING = states.CONNECTING;
    WebSocket.OPEN = WebSocket.prototype.OPEN = states.OPEN;
    WebSocket.CLOSING = WebSocket.prototype.CLOSING = states.CLOSING;
    WebSocket.CLOSED = WebSocket.prototype.CLOSED = states.CLOSED;
    Object.defineProperties(WebSocket.prototype, {
      CONNECTING: staticPropertyDescriptors,
      OPEN: staticPropertyDescriptors,
      CLOSING: staticPropertyDescriptors,
      CLOSED: staticPropertyDescriptors,
      url: kEnumerableProperty,
      readyState: kEnumerableProperty,
      bufferedAmount: kEnumerableProperty,
      onopen: kEnumerableProperty,
      onerror: kEnumerableProperty,
      onclose: kEnumerableProperty,
      close: kEnumerableProperty,
      onmessage: kEnumerableProperty,
      binaryType: kEnumerableProperty,
      send: kEnumerableProperty,
      extensions: kEnumerableProperty,
      protocol: kEnumerableProperty,
      [Symbol.toStringTag]: {
        value: "WebSocket",
        writable: false,
        enumerable: false,
        configurable: true
      }
    });
    Object.defineProperties(WebSocket, {
      CONNECTING: staticPropertyDescriptors,
      OPEN: staticPropertyDescriptors,
      CLOSING: staticPropertyDescriptors,
      CLOSED: staticPropertyDescriptors
    });
    webidl.converters["sequence<DOMString>"] = webidl.sequenceConverter(
      webidl.converters.DOMString
    );
    webidl.converters["DOMString or sequence<DOMString>"] = function(V) {
      if (webidl.util.Type(V) === "Object" && Symbol.iterator in V) {
        return webidl.converters["sequence<DOMString>"](V);
      }
      return webidl.converters.DOMString(V);
    };
    webidl.converters.WebSocketInit = webidl.dictionaryConverter([
      {
        key: "protocols",
        converter: webidl.converters["DOMString or sequence<DOMString>"],
        get defaultValue() {
          return [];
        }
      },
      {
        key: "dispatcher",
        converter: /* @__PURE__ */ __name((V) => V, "converter"),
        get defaultValue() {
          return getGlobalDispatcher();
        }
      },
      {
        key: "headers",
        converter: webidl.nullableConverter(webidl.converters.HeadersInit)
      }
    ]);
    webidl.converters["DOMString or sequence<DOMString> or WebSocketInit"] = function(V) {
      if (webidl.util.Type(V) === "Object" && !(Symbol.iterator in V)) {
        return webidl.converters.WebSocketInit(V);
      }
      return { protocols: webidl.converters["DOMString or sequence<DOMString>"](V) };
    };
    webidl.converters.WebSocketSendData = function(V) {
      if (webidl.util.Type(V) === "Object") {
        if (isBlobLike(V)) {
          return webidl.converters.Blob(V, { strict: false });
        }
        if (ArrayBuffer.isView(V) || types.isAnyArrayBuffer(V)) {
          return webidl.converters.BufferSource(V);
        }
      }
      return webidl.converters.USVString(V);
    };
    module.exports = {
      WebSocket
    };
  }
});

// node_modules/undici/index.js
var require_undici = __commonJS({
  "node_modules/undici/index.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var Client = require_client();
    var Dispatcher = require_dispatcher();
    var errors = require_errors();
    var Pool = require_pool();
    var BalancedPool = require_balanced_pool();
    var Agent = require_agent();
    var util = require_util2();
    var { InvalidArgumentError } = errors;
    var api = require_api();
    var buildConnector = require_connect();
    var MockClient = require_mock_client();
    var MockAgent = require_mock_agent();
    var MockPool = require_mock_pool();
    var mockErrors = require_mock_errors();
    var ProxyAgent = require_proxy_agent();
    var RetryHandler = require_RetryHandler();
    var { getGlobalDispatcher, setGlobalDispatcher } = require_global2();
    var DecoratorHandler = require_DecoratorHandler();
    var RedirectHandler = require_RedirectHandler();
    var createRedirectInterceptor = require_redirectInterceptor();
    var hasCrypto;
    try {
      __require("crypto");
      hasCrypto = true;
    } catch {
      hasCrypto = false;
    }
    Object.assign(Dispatcher.prototype, api);
    module.exports.Dispatcher = Dispatcher;
    module.exports.Client = Client;
    module.exports.Pool = Pool;
    module.exports.BalancedPool = BalancedPool;
    module.exports.Agent = Agent;
    module.exports.ProxyAgent = ProxyAgent;
    module.exports.RetryHandler = RetryHandler;
    module.exports.DecoratorHandler = DecoratorHandler;
    module.exports.RedirectHandler = RedirectHandler;
    module.exports.createRedirectInterceptor = createRedirectInterceptor;
    module.exports.buildConnector = buildConnector;
    module.exports.errors = errors;
    function makeDispatcher(fn) {
      return (url2, opts, handler) => {
        if (typeof opts === "function") {
          handler = opts;
          opts = null;
        }
        if (!url2 || typeof url2 !== "string" && typeof url2 !== "object" && !(url2 instanceof URL)) {
          throw new InvalidArgumentError("invalid url");
        }
        if (opts != null && typeof opts !== "object") {
          throw new InvalidArgumentError("invalid opts");
        }
        if (opts && opts.path != null) {
          if (typeof opts.path !== "string") {
            throw new InvalidArgumentError("invalid opts.path");
          }
          let path5 = opts.path;
          if (!opts.path.startsWith("/")) {
            path5 = `/${path5}`;
          }
          url2 = new URL(util.parseOrigin(url2).origin + path5);
        } else {
          if (!opts) {
            opts = typeof url2 === "object" ? url2 : {};
          }
          url2 = util.parseURL(url2);
        }
        const { agent, dispatcher = getGlobalDispatcher() } = opts;
        if (agent) {
          throw new InvalidArgumentError("unsupported opts.agent. Did you mean opts.client?");
        }
        return fn.call(dispatcher, {
          ...opts,
          origin: url2.origin,
          path: url2.search ? `${url2.pathname}${url2.search}` : url2.pathname,
          method: opts.method || (opts.body ? "PUT" : "GET")
        }, handler);
      };
    }
    __name(makeDispatcher, "makeDispatcher");
    module.exports.setGlobalDispatcher = setGlobalDispatcher;
    module.exports.getGlobalDispatcher = getGlobalDispatcher;
    if (util.nodeMajor > 16 || util.nodeMajor === 16 && util.nodeMinor >= 8) {
      let fetchImpl = null;
      module.exports.fetch = /* @__PURE__ */ __name(async function fetch(resource) {
        if (!fetchImpl) {
          fetchImpl = require_fetch().fetch;
        }
        try {
          return await fetchImpl(...arguments);
        } catch (err) {
          if (typeof err === "object") {
            Error.captureStackTrace(err, this);
          }
          throw err;
        }
      }, "fetch");
      module.exports.Headers = require_headers().Headers;
      module.exports.Response = require_response().Response;
      module.exports.Request = require_request2().Request;
      module.exports.FormData = require_formdata().FormData;
      module.exports.File = require_file().File;
      module.exports.FileReader = require_filereader().FileReader;
      const { setGlobalOrigin, getGlobalOrigin } = require_global();
      module.exports.setGlobalOrigin = setGlobalOrigin;
      module.exports.getGlobalOrigin = getGlobalOrigin;
      const { CacheStorage } = require_cachestorage();
      const { kConstruct } = require_symbols4();
      module.exports.caches = new CacheStorage(kConstruct);
    }
    if (util.nodeMajor >= 16) {
      const { deleteCookie, getCookies, getSetCookies, setCookie } = require_cookies();
      module.exports.deleteCookie = deleteCookie;
      module.exports.getCookies = getCookies;
      module.exports.getSetCookies = getSetCookies;
      module.exports.setCookie = setCookie;
      const { parseMIMEType, serializeAMimeType } = require_dataURL();
      module.exports.parseMIMEType = parseMIMEType;
      module.exports.serializeAMimeType = serializeAMimeType;
    }
    if (util.nodeMajor >= 18 && hasCrypto) {
      const { WebSocket } = require_websocket();
      module.exports.WebSocket = WebSocket;
    }
    module.exports.request = makeDispatcher(api.request);
    module.exports.stream = makeDispatcher(api.stream);
    module.exports.pipeline = makeDispatcher(api.pipeline);
    module.exports.connect = makeDispatcher(api.connect);
    module.exports.upgrade = makeDispatcher(api.upgrade);
    module.exports.MockClient = MockClient;
    module.exports.MockPool = MockPool;
    module.exports.MockAgent = MockAgent;
    module.exports.mockErrors = mockErrors;
  }
});

// node_modules/@actions/http-client/lib/index.js
var require_lib = __commonJS({
  "node_modules/@actions/http-client/lib/index.js"(exports) {
    "use strict";
    init_cjs_shim();
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: /* @__PURE__ */ __name(function() {
          return m[k];
        }, "get") };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      __name(adopt, "adopt");
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HttpClient = exports.isHttps = exports.HttpClientResponse = exports.HttpClientError = exports.getProxyUrl = exports.MediaTypes = exports.Headers = exports.HttpCodes = void 0;
    var http = __importStar(__require("http"));
    var https = __importStar(__require("https"));
    var pm = __importStar(require_proxy());
    var tunnel = __importStar(require_tunnel2());
    var undici_1 = require_undici();
    var HttpCodes;
    (function(HttpCodes2) {
      HttpCodes2[HttpCodes2["OK"] = 200] = "OK";
      HttpCodes2[HttpCodes2["MultipleChoices"] = 300] = "MultipleChoices";
      HttpCodes2[HttpCodes2["MovedPermanently"] = 301] = "MovedPermanently";
      HttpCodes2[HttpCodes2["ResourceMoved"] = 302] = "ResourceMoved";
      HttpCodes2[HttpCodes2["SeeOther"] = 303] = "SeeOther";
      HttpCodes2[HttpCodes2["NotModified"] = 304] = "NotModified";
      HttpCodes2[HttpCodes2["UseProxy"] = 305] = "UseProxy";
      HttpCodes2[HttpCodes2["SwitchProxy"] = 306] = "SwitchProxy";
      HttpCodes2[HttpCodes2["TemporaryRedirect"] = 307] = "TemporaryRedirect";
      HttpCodes2[HttpCodes2["PermanentRedirect"] = 308] = "PermanentRedirect";
      HttpCodes2[HttpCodes2["BadRequest"] = 400] = "BadRequest";
      HttpCodes2[HttpCodes2["Unauthorized"] = 401] = "Unauthorized";
      HttpCodes2[HttpCodes2["PaymentRequired"] = 402] = "PaymentRequired";
      HttpCodes2[HttpCodes2["Forbidden"] = 403] = "Forbidden";
      HttpCodes2[HttpCodes2["NotFound"] = 404] = "NotFound";
      HttpCodes2[HttpCodes2["MethodNotAllowed"] = 405] = "MethodNotAllowed";
      HttpCodes2[HttpCodes2["NotAcceptable"] = 406] = "NotAcceptable";
      HttpCodes2[HttpCodes2["ProxyAuthenticationRequired"] = 407] = "ProxyAuthenticationRequired";
      HttpCodes2[HttpCodes2["RequestTimeout"] = 408] = "RequestTimeout";
      HttpCodes2[HttpCodes2["Conflict"] = 409] = "Conflict";
      HttpCodes2[HttpCodes2["Gone"] = 410] = "Gone";
      HttpCodes2[HttpCodes2["TooManyRequests"] = 429] = "TooManyRequests";
      HttpCodes2[HttpCodes2["InternalServerError"] = 500] = "InternalServerError";
      HttpCodes2[HttpCodes2["NotImplemented"] = 501] = "NotImplemented";
      HttpCodes2[HttpCodes2["BadGateway"] = 502] = "BadGateway";
      HttpCodes2[HttpCodes2["ServiceUnavailable"] = 503] = "ServiceUnavailable";
      HttpCodes2[HttpCodes2["GatewayTimeout"] = 504] = "GatewayTimeout";
    })(HttpCodes || (exports.HttpCodes = HttpCodes = {}));
    var Headers;
    (function(Headers2) {
      Headers2["Accept"] = "accept";
      Headers2["ContentType"] = "content-type";
    })(Headers || (exports.Headers = Headers = {}));
    var MediaTypes;
    (function(MediaTypes2) {
      MediaTypes2["ApplicationJson"] = "application/json";
    })(MediaTypes || (exports.MediaTypes = MediaTypes = {}));
    function getProxyUrl(serverUrl) {
      const proxyUrl = pm.getProxyUrl(new URL(serverUrl));
      return proxyUrl ? proxyUrl.href : "";
    }
    __name(getProxyUrl, "getProxyUrl");
    exports.getProxyUrl = getProxyUrl;
    var HttpRedirectCodes = [
      HttpCodes.MovedPermanently,
      HttpCodes.ResourceMoved,
      HttpCodes.SeeOther,
      HttpCodes.TemporaryRedirect,
      HttpCodes.PermanentRedirect
    ];
    var HttpResponseRetryCodes = [
      HttpCodes.BadGateway,
      HttpCodes.ServiceUnavailable,
      HttpCodes.GatewayTimeout
    ];
    var RetryableHttpVerbs = ["OPTIONS", "GET", "DELETE", "HEAD"];
    var ExponentialBackoffCeiling = 10;
    var ExponentialBackoffTimeSlice = 5;
    var HttpClientError = class _HttpClientError extends Error {
      static {
        __name(this, "HttpClientError");
      }
      constructor(message, statusCode) {
        super(message);
        this.name = "HttpClientError";
        this.statusCode = statusCode;
        Object.setPrototypeOf(this, _HttpClientError.prototype);
      }
    };
    exports.HttpClientError = HttpClientError;
    var HttpClientResponse = class {
      static {
        __name(this, "HttpClientResponse");
      }
      constructor(message) {
        this.message = message;
      }
      readBody() {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
            let output = Buffer.alloc(0);
            this.message.on("data", (chunk) => {
              output = Buffer.concat([output, chunk]);
            });
            this.message.on("end", () => {
              resolve(output.toString());
            });
          }));
        });
      }
      readBodyBuffer() {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
            const chunks = [];
            this.message.on("data", (chunk) => {
              chunks.push(chunk);
            });
            this.message.on("end", () => {
              resolve(Buffer.concat(chunks));
            });
          }));
        });
      }
    };
    exports.HttpClientResponse = HttpClientResponse;
    function isHttps(requestUrl) {
      const parsedUrl = new URL(requestUrl);
      return parsedUrl.protocol === "https:";
    }
    __name(isHttps, "isHttps");
    exports.isHttps = isHttps;
    var HttpClient = class {
      static {
        __name(this, "HttpClient");
      }
      constructor(userAgent, handlers, requestOptions) {
        this._ignoreSslError = false;
        this._allowRedirects = true;
        this._allowRedirectDowngrade = false;
        this._maxRedirects = 50;
        this._allowRetries = false;
        this._maxRetries = 1;
        this._keepAlive = false;
        this._disposed = false;
        this.userAgent = userAgent;
        this.handlers = handlers || [];
        this.requestOptions = requestOptions;
        if (requestOptions) {
          if (requestOptions.ignoreSslError != null) {
            this._ignoreSslError = requestOptions.ignoreSslError;
          }
          this._socketTimeout = requestOptions.socketTimeout;
          if (requestOptions.allowRedirects != null) {
            this._allowRedirects = requestOptions.allowRedirects;
          }
          if (requestOptions.allowRedirectDowngrade != null) {
            this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;
          }
          if (requestOptions.maxRedirects != null) {
            this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);
          }
          if (requestOptions.keepAlive != null) {
            this._keepAlive = requestOptions.keepAlive;
          }
          if (requestOptions.allowRetries != null) {
            this._allowRetries = requestOptions.allowRetries;
          }
          if (requestOptions.maxRetries != null) {
            this._maxRetries = requestOptions.maxRetries;
          }
        }
      }
      options(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request("OPTIONS", requestUrl, null, additionalHeaders || {});
        });
      }
      get(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request("GET", requestUrl, null, additionalHeaders || {});
        });
      }
      del(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request("DELETE", requestUrl, null, additionalHeaders || {});
        });
      }
      post(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request("POST", requestUrl, data, additionalHeaders || {});
        });
      }
      patch(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request("PATCH", requestUrl, data, additionalHeaders || {});
        });
      }
      put(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request("PUT", requestUrl, data, additionalHeaders || {});
        });
      }
      head(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request("HEAD", requestUrl, null, additionalHeaders || {});
        });
      }
      sendStream(verb, requestUrl, stream, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.request(verb, requestUrl, stream, additionalHeaders);
        });
      }
      /**
       * Gets a typed object from an endpoint
       * Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise
       */
      getJson(requestUrl, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
          additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
          const res = yield this.get(requestUrl, additionalHeaders);
          return this._processResponse(res, this.requestOptions);
        });
      }
      postJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
          const data = JSON.stringify(obj, null, 2);
          additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
          additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
          const res = yield this.post(requestUrl, data, additionalHeaders);
          return this._processResponse(res, this.requestOptions);
        });
      }
      putJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
          const data = JSON.stringify(obj, null, 2);
          additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
          additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
          const res = yield this.put(requestUrl, data, additionalHeaders);
          return this._processResponse(res, this.requestOptions);
        });
      }
      patchJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
          const data = JSON.stringify(obj, null, 2);
          additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
          additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
          const res = yield this.patch(requestUrl, data, additionalHeaders);
          return this._processResponse(res, this.requestOptions);
        });
      }
      /**
       * Makes a raw http request.
       * All other methods such as get, post, patch, and request ultimately call this.
       * Prefer get, del, post and patch
       */
      request(verb, requestUrl, data, headers) {
        return __awaiter(this, void 0, void 0, function* () {
          if (this._disposed) {
            throw new Error("Client has already been disposed.");
          }
          const parsedUrl = new URL(requestUrl);
          let info = this._prepareRequest(verb, parsedUrl, headers);
          const maxTries = this._allowRetries && RetryableHttpVerbs.includes(verb) ? this._maxRetries + 1 : 1;
          let numTries = 0;
          let response;
          do {
            response = yield this.requestRaw(info, data);
            if (response && response.message && response.message.statusCode === HttpCodes.Unauthorized) {
              let authenticationHandler;
              for (const handler of this.handlers) {
                if (handler.canHandleAuthentication(response)) {
                  authenticationHandler = handler;
                  break;
                }
              }
              if (authenticationHandler) {
                return authenticationHandler.handleAuthentication(this, info, data);
              } else {
                return response;
              }
            }
            let redirectsRemaining = this._maxRedirects;
            while (response.message.statusCode && HttpRedirectCodes.includes(response.message.statusCode) && this._allowRedirects && redirectsRemaining > 0) {
              const redirectUrl = response.message.headers["location"];
              if (!redirectUrl) {
                break;
              }
              const parsedRedirectUrl = new URL(redirectUrl);
              if (parsedUrl.protocol === "https:" && parsedUrl.protocol !== parsedRedirectUrl.protocol && !this._allowRedirectDowngrade) {
                throw new Error("Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.");
              }
              yield response.readBody();
              if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {
                for (const header in headers) {
                  if (header.toLowerCase() === "authorization") {
                    delete headers[header];
                  }
                }
              }
              info = this._prepareRequest(verb, parsedRedirectUrl, headers);
              response = yield this.requestRaw(info, data);
              redirectsRemaining--;
            }
            if (!response.message.statusCode || !HttpResponseRetryCodes.includes(response.message.statusCode)) {
              return response;
            }
            numTries += 1;
            if (numTries < maxTries) {
              yield response.readBody();
              yield this._performExponentialBackoff(numTries);
            }
          } while (numTries < maxTries);
          return response;
        });
      }
      /**
       * Needs to be called if keepAlive is set to true in request options.
       */
      dispose() {
        if (this._agent) {
          this._agent.destroy();
        }
        this._disposed = true;
      }
      /**
       * Raw request.
       * @param info
       * @param data
       */
      requestRaw(info, data) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => {
            function callbackForResult(err, res) {
              if (err) {
                reject(err);
              } else if (!res) {
                reject(new Error("Unknown error"));
              } else {
                resolve(res);
              }
            }
            __name(callbackForResult, "callbackForResult");
            this.requestRawWithCallback(info, data, callbackForResult);
          });
        });
      }
      /**
       * Raw request with callback.
       * @param info
       * @param data
       * @param onResult
       */
      requestRawWithCallback(info, data, onResult) {
        if (typeof data === "string") {
          if (!info.options.headers) {
            info.options.headers = {};
          }
          info.options.headers["Content-Length"] = Buffer.byteLength(data, "utf8");
        }
        let callbackCalled = false;
        function handleResult(err, res) {
          if (!callbackCalled) {
            callbackCalled = true;
            onResult(err, res);
          }
        }
        __name(handleResult, "handleResult");
        const req = info.httpModule.request(info.options, (msg) => {
          const res = new HttpClientResponse(msg);
          handleResult(void 0, res);
        });
        let socket;
        req.on("socket", (sock) => {
          socket = sock;
        });
        req.setTimeout(this._socketTimeout || 3 * 6e4, () => {
          if (socket) {
            socket.end();
          }
          handleResult(new Error(`Request timeout: ${info.options.path}`));
        });
        req.on("error", function(err) {
          handleResult(err);
        });
        if (data && typeof data === "string") {
          req.write(data, "utf8");
        }
        if (data && typeof data !== "string") {
          data.on("close", function() {
            req.end();
          });
          data.pipe(req);
        } else {
          req.end();
        }
      }
      /**
       * Gets an http agent. This function is useful when you need an http agent that handles
       * routing through a proxy server - depending upon the url and proxy environment variables.
       * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
       */
      getAgent(serverUrl) {
        const parsedUrl = new URL(serverUrl);
        return this._getAgent(parsedUrl);
      }
      getAgentDispatcher(serverUrl) {
        const parsedUrl = new URL(serverUrl);
        const proxyUrl = pm.getProxyUrl(parsedUrl);
        const useProxy = proxyUrl && proxyUrl.hostname;
        if (!useProxy) {
          return;
        }
        return this._getProxyAgentDispatcher(parsedUrl, proxyUrl);
      }
      _prepareRequest(method, requestUrl, headers) {
        const info = {};
        info.parsedUrl = requestUrl;
        const usingSsl = info.parsedUrl.protocol === "https:";
        info.httpModule = usingSsl ? https : http;
        const defaultPort = usingSsl ? 443 : 80;
        info.options = {};
        info.options.host = info.parsedUrl.hostname;
        info.options.port = info.parsedUrl.port ? parseInt(info.parsedUrl.port) : defaultPort;
        info.options.path = (info.parsedUrl.pathname || "") + (info.parsedUrl.search || "");
        info.options.method = method;
        info.options.headers = this._mergeHeaders(headers);
        if (this.userAgent != null) {
          info.options.headers["user-agent"] = this.userAgent;
        }
        info.options.agent = this._getAgent(info.parsedUrl);
        if (this.handlers) {
          for (const handler of this.handlers) {
            handler.prepareRequest(info.options);
          }
        }
        return info;
      }
      _mergeHeaders(headers) {
        if (this.requestOptions && this.requestOptions.headers) {
          return Object.assign({}, lowercaseKeys(this.requestOptions.headers), lowercaseKeys(headers || {}));
        }
        return lowercaseKeys(headers || {});
      }
      _getExistingOrDefaultHeader(additionalHeaders, header, _default) {
        let clientHeader;
        if (this.requestOptions && this.requestOptions.headers) {
          clientHeader = lowercaseKeys(this.requestOptions.headers)[header];
        }
        return additionalHeaders[header] || clientHeader || _default;
      }
      _getAgent(parsedUrl) {
        let agent;
        const proxyUrl = pm.getProxyUrl(parsedUrl);
        const useProxy = proxyUrl && proxyUrl.hostname;
        if (this._keepAlive && useProxy) {
          agent = this._proxyAgent;
        }
        if (!useProxy) {
          agent = this._agent;
        }
        if (agent) {
          return agent;
        }
        const usingSsl = parsedUrl.protocol === "https:";
        let maxSockets = 100;
        if (this.requestOptions) {
          maxSockets = this.requestOptions.maxSockets || http.globalAgent.maxSockets;
        }
        if (proxyUrl && proxyUrl.hostname) {
          const agentOptions = {
            maxSockets,
            keepAlive: this._keepAlive,
            proxy: Object.assign(Object.assign({}, (proxyUrl.username || proxyUrl.password) && {
              proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`
            }), { host: proxyUrl.hostname, port: proxyUrl.port })
          };
          let tunnelAgent;
          const overHttps = proxyUrl.protocol === "https:";
          if (usingSsl) {
            tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;
          } else {
            tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;
          }
          agent = tunnelAgent(agentOptions);
          this._proxyAgent = agent;
        }
        if (!agent) {
          const options = { keepAlive: this._keepAlive, maxSockets };
          agent = usingSsl ? new https.Agent(options) : new http.Agent(options);
          this._agent = agent;
        }
        if (usingSsl && this._ignoreSslError) {
          agent.options = Object.assign(agent.options || {}, {
            rejectUnauthorized: false
          });
        }
        return agent;
      }
      _getProxyAgentDispatcher(parsedUrl, proxyUrl) {
        let proxyAgent;
        if (this._keepAlive) {
          proxyAgent = this._proxyAgentDispatcher;
        }
        if (proxyAgent) {
          return proxyAgent;
        }
        const usingSsl = parsedUrl.protocol === "https:";
        proxyAgent = new undici_1.ProxyAgent(Object.assign({ uri: proxyUrl.href, pipelining: !this._keepAlive ? 0 : 1 }, (proxyUrl.username || proxyUrl.password) && {
          token: `${proxyUrl.username}:${proxyUrl.password}`
        }));
        this._proxyAgentDispatcher = proxyAgent;
        if (usingSsl && this._ignoreSslError) {
          proxyAgent.options = Object.assign(proxyAgent.options.requestTls || {}, {
            rejectUnauthorized: false
          });
        }
        return proxyAgent;
      }
      _performExponentialBackoff(retryNumber) {
        return __awaiter(this, void 0, void 0, function* () {
          retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);
          const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);
          return new Promise((resolve) => setTimeout(() => resolve(), ms));
        });
      }
      _processResponse(res, options) {
        return __awaiter(this, void 0, void 0, function* () {
          return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            const statusCode = res.message.statusCode || 0;
            const response = {
              statusCode,
              result: null,
              headers: {}
            };
            if (statusCode === HttpCodes.NotFound) {
              resolve(response);
            }
            function dateTimeDeserializer(key, value) {
              if (typeof value === "string") {
                const a = new Date(value);
                if (!isNaN(a.valueOf())) {
                  return a;
                }
              }
              return value;
            }
            __name(dateTimeDeserializer, "dateTimeDeserializer");
            let obj;
            let contents;
            try {
              contents = yield res.readBody();
              if (contents && contents.length > 0) {
                if (options && options.deserializeDates) {
                  obj = JSON.parse(contents, dateTimeDeserializer);
                } else {
                  obj = JSON.parse(contents);
                }
                response.result = obj;
              }
              response.headers = res.message.headers;
            } catch (err) {
            }
            if (statusCode > 299) {
              let msg;
              if (obj && obj.message) {
                msg = obj.message;
              } else if (contents && contents.length > 0) {
                msg = contents;
              } else {
                msg = `Failed request: (${statusCode})`;
              }
              const err = new HttpClientError(msg, statusCode);
              err.result = response.result;
              reject(err);
            } else {
              resolve(response);
            }
          }));
        });
      }
    };
    exports.HttpClient = HttpClient;
    var lowercaseKeys = /* @__PURE__ */ __name((obj) => Object.keys(obj).reduce((c, k) => (c[k.toLowerCase()] = obj[k], c), {}), "lowercaseKeys");
  }
});

// node_modules/@actions/http-client/lib/auth.js
var require_auth = __commonJS({
  "node_modules/@actions/http-client/lib/auth.js"(exports) {
    "use strict";
    init_cjs_shim();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      __name(adopt, "adopt");
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PersonalAccessTokenCredentialHandler = exports.BearerCredentialHandler = exports.BasicCredentialHandler = void 0;
    var BasicCredentialHandler = class {
      static {
        __name(this, "BasicCredentialHandler");
      }
      constructor(username, password) {
        this.username = username;
        this.password = password;
      }
      prepareRequest(options) {
        if (!options.headers) {
          throw Error("The request has no headers");
        }
        options.headers["Authorization"] = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString("base64")}`;
      }
      // This handler cannot handle 401
      canHandleAuthentication() {
        return false;
      }
      handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
          throw new Error("not implemented");
        });
      }
    };
    exports.BasicCredentialHandler = BasicCredentialHandler;
    var BearerCredentialHandler = class {
      static {
        __name(this, "BearerCredentialHandler");
      }
      constructor(token) {
        this.token = token;
      }
      // currently implements pre-authorization
      // TODO: support preAuth = false where it hooks on 401
      prepareRequest(options) {
        if (!options.headers) {
          throw Error("The request has no headers");
        }
        options.headers["Authorization"] = `Bearer ${this.token}`;
      }
      // This handler cannot handle 401
      canHandleAuthentication() {
        return false;
      }
      handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
          throw new Error("not implemented");
        });
      }
    };
    exports.BearerCredentialHandler = BearerCredentialHandler;
    var PersonalAccessTokenCredentialHandler = class {
      static {
        __name(this, "PersonalAccessTokenCredentialHandler");
      }
      constructor(token) {
        this.token = token;
      }
      // currently implements pre-authorization
      // TODO: support preAuth = false where it hooks on 401
      prepareRequest(options) {
        if (!options.headers) {
          throw Error("The request has no headers");
        }
        options.headers["Authorization"] = `Basic ${Buffer.from(`PAT:${this.token}`).toString("base64")}`;
      }
      // This handler cannot handle 401
      canHandleAuthentication() {
        return false;
      }
      handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
          throw new Error("not implemented");
        });
      }
    };
    exports.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;
  }
});

// node_modules/@actions/core/lib/oidc-utils.js
var require_oidc_utils = __commonJS({
  "node_modules/@actions/core/lib/oidc-utils.js"(exports) {
    "use strict";
    init_cjs_shim();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      __name(adopt, "adopt");
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OidcClient = void 0;
    var http_client_1 = require_lib();
    var auth_1 = require_auth();
    var core_1 = require_core2();
    var OidcClient = class _OidcClient {
      static {
        __name(this, "OidcClient");
      }
      static createHttpClient(allowRetry = true, maxRetry = 10) {
        const requestOptions = {
          allowRetries: allowRetry,
          maxRetries: maxRetry
        };
        return new http_client_1.HttpClient("actions/oidc-client", [new auth_1.BearerCredentialHandler(_OidcClient.getRequestToken())], requestOptions);
      }
      static getRequestToken() {
        const token = process.env["ACTIONS_ID_TOKEN_REQUEST_TOKEN"];
        if (!token) {
          throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable");
        }
        return token;
      }
      static getIDTokenUrl() {
        const runtimeUrl = process.env["ACTIONS_ID_TOKEN_REQUEST_URL"];
        if (!runtimeUrl) {
          throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable");
        }
        return runtimeUrl;
      }
      static getCall(id_token_url) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
          const httpclient = _OidcClient.createHttpClient();
          const res = yield httpclient.getJson(id_token_url).catch((error) => {
            throw new Error(`Failed to get ID Token. 
 
        Error Code : ${error.statusCode}
 
        Error Message: ${error.message}`);
          });
          const id_token = (_a = res.result) === null || _a === void 0 ? void 0 : _a.value;
          if (!id_token) {
            throw new Error("Response json body do not have ID Token field");
          }
          return id_token;
        });
      }
      static getIDToken(audience) {
        return __awaiter(this, void 0, void 0, function* () {
          try {
            let id_token_url = _OidcClient.getIDTokenUrl();
            if (audience) {
              const encodedAudience = encodeURIComponent(audience);
              id_token_url = `${id_token_url}&audience=${encodedAudience}`;
            }
            core_1.debug(`ID token url is ${id_token_url}`);
            const id_token = yield _OidcClient.getCall(id_token_url);
            core_1.setSecret(id_token);
            return id_token;
          } catch (error) {
            throw new Error(`Error message: ${error.message}`);
          }
        });
      }
    };
    exports.OidcClient = OidcClient;
  }
});

// node_modules/@actions/core/lib/summary.js
var require_summary = __commonJS({
  "node_modules/@actions/core/lib/summary.js"(exports) {
    "use strict";
    init_cjs_shim();
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      __name(adopt, "adopt");
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.summary = exports.markdownSummary = exports.SUMMARY_DOCS_URL = exports.SUMMARY_ENV_VAR = void 0;
    var os_1 = __require("os");
    var fs_1 = __require("fs");
    var { access, appendFile, writeFile } = fs_1.promises;
    exports.SUMMARY_ENV_VAR = "GITHUB_STEP_SUMMARY";
    exports.SUMMARY_DOCS_URL = "https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary";
    var Summary = class {
      static {
        __name(this, "Summary");
      }
      constructor() {
        this._buffer = "";
      }
      /**
       * Finds the summary file path from the environment, rejects if env var is not found or file does not exist
       * Also checks r/w permissions.
       *
       * @returns step summary file path
       */
      filePath() {
        return __awaiter(this, void 0, void 0, function* () {
          if (this._filePath) {
            return this._filePath;
          }
          const pathFromEnv = process.env[exports.SUMMARY_ENV_VAR];
          if (!pathFromEnv) {
            throw new Error(`Unable to find environment variable for $${exports.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`);
          }
          try {
            yield access(pathFromEnv, fs_1.constants.R_OK | fs_1.constants.W_OK);
          } catch (_a) {
            throw new Error(`Unable to access summary file: '${pathFromEnv}'. Check if the file has correct read/write permissions.`);
          }
          this._filePath = pathFromEnv;
          return this._filePath;
        });
      }
      /**
       * Wraps content in an HTML tag, adding any HTML attributes
       *
       * @param {string} tag HTML tag to wrap
       * @param {string | null} content content within the tag
       * @param {[attribute: string]: string} attrs key-value list of HTML attributes to add
       *
       * @returns {string} content wrapped in HTML element
       */
      wrap(tag, content, attrs = {}) {
        const htmlAttrs = Object.entries(attrs).map(([key, value]) => ` ${key}="${value}"`).join("");
        if (!content) {
          return `<${tag}${htmlAttrs}>`;
        }
        return `<${tag}${htmlAttrs}>${content}</${tag}>`;
      }
      /**
       * Writes text in the buffer to the summary buffer file and empties buffer. Will append by default.
       *
       * @param {SummaryWriteOptions} [options] (optional) options for write operation
       *
       * @returns {Promise<Summary>} summary instance
       */
      write(options) {
        return __awaiter(this, void 0, void 0, function* () {
          const overwrite = !!(options === null || options === void 0 ? void 0 : options.overwrite);
          const filePath = yield this.filePath();
          const writeFunc = overwrite ? writeFile : appendFile;
          yield writeFunc(filePath, this._buffer, { encoding: "utf8" });
          return this.emptyBuffer();
        });
      }
      /**
       * Clears the summary buffer and wipes the summary file
       *
       * @returns {Summary} summary instance
       */
      clear() {
        return __awaiter(this, void 0, void 0, function* () {
          return this.emptyBuffer().write({ overwrite: true });
        });
      }
      /**
       * Returns the current summary buffer as a string
       *
       * @returns {string} string of summary buffer
       */
      stringify() {
        return this._buffer;
      }
      /**
       * If the summary buffer is empty
       *
       * @returns {boolen} true if the buffer is empty
       */
      isEmptyBuffer() {
        return this._buffer.length === 0;
      }
      /**
       * Resets the summary buffer without writing to summary file
       *
       * @returns {Summary} summary instance
       */
      emptyBuffer() {
        this._buffer = "";
        return this;
      }
      /**
       * Adds raw text to the summary buffer
       *
       * @param {string} text content to add
       * @param {boolean} [addEOL=false] (optional) append an EOL to the raw text (default: false)
       *
       * @returns {Summary} summary instance
       */
      addRaw(text, addEOL = false) {
        this._buffer += text;
        return addEOL ? this.addEOL() : this;
      }
      /**
       * Adds the operating system-specific end-of-line marker to the buffer
       *
       * @returns {Summary} summary instance
       */
      addEOL() {
        return this.addRaw(os_1.EOL);
      }
      /**
       * Adds an HTML codeblock to the summary buffer
       *
       * @param {string} code content to render within fenced code block
       * @param {string} lang (optional) language to syntax highlight code
       *
       * @returns {Summary} summary instance
       */
      addCodeBlock(code, lang) {
        const attrs = Object.assign({}, lang && { lang });
        const element = this.wrap("pre", this.wrap("code", code), attrs);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML list to the summary buffer
       *
       * @param {string[]} items list of items to render
       * @param {boolean} [ordered=false] (optional) if the rendered list should be ordered or not (default: false)
       *
       * @returns {Summary} summary instance
       */
      addList(items, ordered = false) {
        const tag = ordered ? "ol" : "ul";
        const listItems = items.map((item) => this.wrap("li", item)).join("");
        const element = this.wrap(tag, listItems);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML table to the summary buffer
       *
       * @param {SummaryTableCell[]} rows table rows
       *
       * @returns {Summary} summary instance
       */
      addTable(rows) {
        const tableBody = rows.map((row) => {
          const cells = row.map((cell) => {
            if (typeof cell === "string") {
              return this.wrap("td", cell);
            }
            const { header, data, colspan, rowspan } = cell;
            const tag = header ? "th" : "td";
            const attrs = Object.assign(Object.assign({}, colspan && { colspan }), rowspan && { rowspan });
            return this.wrap(tag, data, attrs);
          }).join("");
          return this.wrap("tr", cells);
        }).join("");
        const element = this.wrap("table", tableBody);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds a collapsable HTML details element to the summary buffer
       *
       * @param {string} label text for the closed state
       * @param {string} content collapsable content
       *
       * @returns {Summary} summary instance
       */
      addDetails(label, content) {
        const element = this.wrap("details", this.wrap("summary", label) + content);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML image tag to the summary buffer
       *
       * @param {string} src path to the image you to embed
       * @param {string} alt text description of the image
       * @param {SummaryImageOptions} options (optional) addition image attributes
       *
       * @returns {Summary} summary instance
       */
      addImage(src, alt, options) {
        const { width, height } = options || {};
        const attrs = Object.assign(Object.assign({}, width && { width }), height && { height });
        const element = this.wrap("img", null, Object.assign({ src, alt }, attrs));
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML section heading element
       *
       * @param {string} text heading text
       * @param {number | string} [level=1] (optional) the heading level, default: 1
       *
       * @returns {Summary} summary instance
       */
      addHeading(text, level) {
        const tag = `h${level}`;
        const allowedTag = ["h1", "h2", "h3", "h4", "h5", "h6"].includes(tag) ? tag : "h1";
        const element = this.wrap(allowedTag, text);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML thematic break (<hr>) to the summary buffer
       *
       * @returns {Summary} summary instance
       */
      addSeparator() {
        const element = this.wrap("hr", null);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML line break (<br>) to the summary buffer
       *
       * @returns {Summary} summary instance
       */
      addBreak() {
        const element = this.wrap("br", null);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML blockquote to the summary buffer
       *
       * @param {string} text quote text
       * @param {string} cite (optional) citation url
       *
       * @returns {Summary} summary instance
       */
      addQuote(text, cite) {
        const attrs = Object.assign({}, cite && { cite });
        const element = this.wrap("blockquote", text, attrs);
        return this.addRaw(element).addEOL();
      }
      /**
       * Adds an HTML anchor tag to the summary buffer
       *
       * @param {string} text link text/content
       * @param {string} href hyperlink
       *
       * @returns {Summary} summary instance
       */
      addLink(text, href) {
        const element = this.wrap("a", text, { href });
        return this.addRaw(element).addEOL();
      }
    };
    var _summary = new Summary();
    exports.markdownSummary = _summary;
    exports.summary = _summary;
  }
});

// node_modules/@actions/core/lib/path-utils.js
var require_path_utils = __commonJS({
  "node_modules/@actions/core/lib/path-utils.js"(exports) {
    "use strict";
    init_cjs_shim();
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return m[k];
      }, "get") });
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toPlatformPath = exports.toWin32Path = exports.toPosixPath = void 0;
    var path5 = __importStar(__require("path"));
    function toPosixPath(pth) {
      return pth.replace(/[\\]/g, "/");
    }
    __name(toPosixPath, "toPosixPath");
    exports.toPosixPath = toPosixPath;
    function toWin32Path(pth) {
      return pth.replace(/[/]/g, "\\");
    }
    __name(toWin32Path, "toWin32Path");
    exports.toWin32Path = toWin32Path;
    function toPlatformPath(pth) {
      return pth.replace(/[/\\]/g, path5.sep);
    }
    __name(toPlatformPath, "toPlatformPath");
    exports.toPlatformPath = toPlatformPath;
  }
});

// node_modules/@actions/core/lib/core.js
var require_core2 = __commonJS({
  "node_modules/@actions/core/lib/core.js"(exports) {
    "use strict";
    init_cjs_shim();
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: /* @__PURE__ */ __name(function() {
        return m[k];
      }, "get") });
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      __name(adopt, "adopt");
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getIDToken = exports.getState = exports.saveState = exports.group = exports.endGroup = exports.startGroup = exports.info = exports.notice = exports.warning = exports.error = exports.debug = exports.isDebug = exports.setFailed = exports.setCommandEcho = exports.setOutput = exports.getBooleanInput = exports.getMultilineInput = exports.getInput = exports.addPath = exports.setSecret = exports.exportVariable = exports.ExitCode = void 0;
    var command_1 = require_command();
    var file_command_1 = require_file_command();
    var utils_1 = require_utils();
    var os = __importStar(__require("os"));
    var path5 = __importStar(__require("path"));
    var oidc_utils_1 = require_oidc_utils();
    var ExitCode;
    (function(ExitCode2) {
      ExitCode2[ExitCode2["Success"] = 0] = "Success";
      ExitCode2[ExitCode2["Failure"] = 1] = "Failure";
    })(ExitCode = exports.ExitCode || (exports.ExitCode = {}));
    function exportVariable(name, val) {
      const convertedVal = utils_1.toCommandValue(val);
      process.env[name] = convertedVal;
      const filePath = process.env["GITHUB_ENV"] || "";
      if (filePath) {
        return file_command_1.issueFileCommand("ENV", file_command_1.prepareKeyValueMessage(name, val));
      }
      command_1.issueCommand("set-env", { name }, convertedVal);
    }
    __name(exportVariable, "exportVariable");
    exports.exportVariable = exportVariable;
    function setSecret(secret) {
      command_1.issueCommand("add-mask", {}, secret);
    }
    __name(setSecret, "setSecret");
    exports.setSecret = setSecret;
    function addPath(inputPath) {
      const filePath = process.env["GITHUB_PATH"] || "";
      if (filePath) {
        file_command_1.issueFileCommand("PATH", inputPath);
      } else {
        command_1.issueCommand("add-path", {}, inputPath);
      }
      process.env["PATH"] = `${inputPath}${path5.delimiter}${process.env["PATH"]}`;
    }
    __name(addPath, "addPath");
    exports.addPath = addPath;
    function getInput2(name, options) {
      const val = process.env[`INPUT_${name.replace(/ /g, "_").toUpperCase()}`] || "";
      if (options && options.required && !val) {
        throw new Error(`Input required and not supplied: ${name}`);
      }
      if (options && options.trimWhitespace === false) {
        return val;
      }
      return val.trim();
    }
    __name(getInput2, "getInput");
    exports.getInput = getInput2;
    function getMultilineInput(name, options) {
      const inputs = getInput2(name, options).split("\n").filter((x) => x !== "");
      if (options && options.trimWhitespace === false) {
        return inputs;
      }
      return inputs.map((input) => input.trim());
    }
    __name(getMultilineInput, "getMultilineInput");
    exports.getMultilineInput = getMultilineInput;
    function getBooleanInput(name, options) {
      const trueValue = ["true", "True", "TRUE"];
      const falseValue = ["false", "False", "FALSE"];
      const val = getInput2(name, options);
      if (trueValue.includes(val))
        return true;
      if (falseValue.includes(val))
        return false;
      throw new TypeError(`Input does not meet YAML 1.2 "Core Schema" specification: ${name}
Support boolean input list: \`true | True | TRUE | false | False | FALSE\``);
    }
    __name(getBooleanInput, "getBooleanInput");
    exports.getBooleanInput = getBooleanInput;
    function setOutput2(name, value) {
      const filePath = process.env["GITHUB_OUTPUT"] || "";
      if (filePath) {
        return file_command_1.issueFileCommand("OUTPUT", file_command_1.prepareKeyValueMessage(name, value));
      }
      process.stdout.write(os.EOL);
      command_1.issueCommand("set-output", { name }, utils_1.toCommandValue(value));
    }
    __name(setOutput2, "setOutput");
    exports.setOutput = setOutput2;
    function setCommandEcho(enabled) {
      command_1.issue("echo", enabled ? "on" : "off");
    }
    __name(setCommandEcho, "setCommandEcho");
    exports.setCommandEcho = setCommandEcho;
    function setFailed(message) {
      process.exitCode = ExitCode.Failure;
      error(message);
    }
    __name(setFailed, "setFailed");
    exports.setFailed = setFailed;
    function isDebug() {
      return process.env["RUNNER_DEBUG"] === "1";
    }
    __name(isDebug, "isDebug");
    exports.isDebug = isDebug;
    function debug(message) {
      command_1.issueCommand("debug", {}, message);
    }
    __name(debug, "debug");
    exports.debug = debug;
    function error(message, properties = {}) {
      command_1.issueCommand("error", utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
    }
    __name(error, "error");
    exports.error = error;
    function warning(message, properties = {}) {
      command_1.issueCommand("warning", utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
    }
    __name(warning, "warning");
    exports.warning = warning;
    function notice(message, properties = {}) {
      command_1.issueCommand("notice", utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
    }
    __name(notice, "notice");
    exports.notice = notice;
    function info(message) {
      process.stdout.write(message + os.EOL);
    }
    __name(info, "info");
    exports.info = info;
    function startGroup(name) {
      command_1.issue("group", name);
    }
    __name(startGroup, "startGroup");
    exports.startGroup = startGroup;
    function endGroup() {
      command_1.issue("endgroup");
    }
    __name(endGroup, "endGroup");
    exports.endGroup = endGroup;
    function group(name, fn) {
      return __awaiter(this, void 0, void 0, function* () {
        startGroup(name);
        let result;
        try {
          result = yield fn();
        } finally {
          endGroup();
        }
        return result;
      });
    }
    __name(group, "group");
    exports.group = group;
    function saveState(name, value) {
      const filePath = process.env["GITHUB_STATE"] || "";
      if (filePath) {
        return file_command_1.issueFileCommand("STATE", file_command_1.prepareKeyValueMessage(name, value));
      }
      command_1.issueCommand("save-state", { name }, utils_1.toCommandValue(value));
    }
    __name(saveState, "saveState");
    exports.saveState = saveState;
    function getState(name) {
      return process.env[`STATE_${name}`] || "";
    }
    __name(getState, "getState");
    exports.getState = getState;
    function getIDToken(aud) {
      return __awaiter(this, void 0, void 0, function* () {
        return yield oidc_utils_1.OidcClient.getIDToken(aud);
      });
    }
    __name(getIDToken, "getIDToken");
    exports.getIDToken = getIDToken;
    var summary_1 = require_summary();
    Object.defineProperty(exports, "summary", { enumerable: true, get: /* @__PURE__ */ __name(function() {
      return summary_1.summary;
    }, "get") });
    var summary_2 = require_summary();
    Object.defineProperty(exports, "markdownSummary", { enumerable: true, get: /* @__PURE__ */ __name(function() {
      return summary_2.markdownSummary;
    }, "get") });
    var path_utils_1 = require_path_utils();
    Object.defineProperty(exports, "toPosixPath", { enumerable: true, get: /* @__PURE__ */ __name(function() {
      return path_utils_1.toPosixPath;
    }, "get") });
    Object.defineProperty(exports, "toWin32Path", { enumerable: true, get: /* @__PURE__ */ __name(function() {
      return path_utils_1.toWin32Path;
    }, "get") });
    Object.defineProperty(exports, "toPlatformPath", { enumerable: true, get: /* @__PURE__ */ __name(function() {
      return path_utils_1.toPlatformPath;
    }, "get") });
  }
});

// node_modules/@hapi/hoek/lib/stringify.js
var require_stringify = __commonJS({
  "node_modules/@hapi/hoek/lib/stringify.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    module.exports = function(...args) {
      try {
        return JSON.stringify(...args);
      } catch (err) {
        return "[Cannot display object: " + err.message + "]";
      }
    };
  }
});

// node_modules/@hapi/hoek/lib/error.js
var require_error = __commonJS({
  "node_modules/@hapi/hoek/lib/error.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var Stringify = require_stringify();
    module.exports = class extends Error {
      constructor(args) {
        const msgs = args.filter((arg) => arg !== "").map((arg) => {
          return typeof arg === "string" ? arg : arg instanceof Error ? arg.message : Stringify(arg);
        });
        super(msgs.join(" ") || "Unknown error");
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, exports.assert);
        }
      }
    };
  }
});

// node_modules/@hapi/hoek/lib/assert.js
var require_assert = __commonJS({
  "node_modules/@hapi/hoek/lib/assert.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var AssertError = require_error();
    module.exports = function(condition, ...args) {
      if (condition) {
        return;
      }
      if (args.length === 1 && args[0] instanceof Error) {
        throw args[0];
      }
      throw new AssertError(args);
    };
  }
});

// node_modules/@hapi/hoek/lib/reach.js
var require_reach = __commonJS({
  "node_modules/@hapi/hoek/lib/reach.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var Assert = require_assert();
    var internals = {};
    module.exports = function(obj, chain, options) {
      if (chain === false || chain === null || chain === void 0) {
        return obj;
      }
      options = options || {};
      if (typeof options === "string") {
        options = { separator: options };
      }
      const isChainArray = Array.isArray(chain);
      Assert(!isChainArray || !options.separator, "Separator option is not valid for array-based chain");
      const path5 = isChainArray ? chain : chain.split(options.separator || ".");
      let ref = obj;
      for (let i = 0; i < path5.length; ++i) {
        let key = path5[i];
        const type = options.iterables && internals.iterables(ref);
        if (Array.isArray(ref) || type === "set") {
          const number = Number(key);
          if (Number.isInteger(number)) {
            key = number < 0 ? ref.length + number : number;
          }
        }
        if (!ref || typeof ref === "function" && options.functions === false || // Defaults to true
        !type && ref[key] === void 0) {
          Assert(!options.strict || i + 1 === path5.length, "Missing segment", key, "in reach path ", chain);
          Assert(typeof ref === "object" || options.functions === true || typeof ref !== "function", "Invalid segment", key, "in reach path ", chain);
          ref = options.default;
          break;
        }
        if (!type) {
          ref = ref[key];
        } else if (type === "set") {
          ref = [...ref][key];
        } else {
          ref = ref.get(key);
        }
      }
      return ref;
    };
    internals.iterables = function(ref) {
      if (ref instanceof Set) {
        return "set";
      }
      if (ref instanceof Map) {
        return "map";
      }
    };
  }
});

// node_modules/@hapi/hoek/lib/types.js
var require_types = __commonJS({
  "node_modules/@hapi/hoek/lib/types.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var internals = {};
    exports = module.exports = {
      array: Array.prototype,
      buffer: Buffer && Buffer.prototype,
      // $lab:coverage:ignore$
      date: Date.prototype,
      error: Error.prototype,
      generic: Object.prototype,
      map: Map.prototype,
      promise: Promise.prototype,
      regex: RegExp.prototype,
      set: Set.prototype,
      weakMap: WeakMap.prototype,
      weakSet: WeakSet.prototype
    };
    internals.typeMap = /* @__PURE__ */ new Map([
      ["[object Error]", exports.error],
      ["[object Map]", exports.map],
      ["[object Promise]", exports.promise],
      ["[object Set]", exports.set],
      ["[object WeakMap]", exports.weakMap],
      ["[object WeakSet]", exports.weakSet]
    ]);
    exports.getInternalProto = function(obj) {
      if (Array.isArray(obj)) {
        return exports.array;
      }
      if (Buffer && obj instanceof Buffer) {
        return exports.buffer;
      }
      if (obj instanceof Date) {
        return exports.date;
      }
      if (obj instanceof RegExp) {
        return exports.regex;
      }
      if (obj instanceof Error) {
        return exports.error;
      }
      const objName = Object.prototype.toString.call(obj);
      return internals.typeMap.get(objName) || exports.generic;
    };
  }
});

// node_modules/@hapi/hoek/lib/utils.js
var require_utils3 = __commonJS({
  "node_modules/@hapi/hoek/lib/utils.js"(exports) {
    "use strict";
    init_cjs_shim();
    exports.keys = function(obj, options = {}) {
      return options.symbols !== false ? Reflect.ownKeys(obj) : Object.getOwnPropertyNames(obj);
    };
  }
});

// node_modules/@hapi/hoek/lib/clone.js
var require_clone = __commonJS({
  "node_modules/@hapi/hoek/lib/clone.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var Reach = require_reach();
    var Types = require_types();
    var Utils = require_utils3();
    var internals = {
      needsProtoHack: /* @__PURE__ */ new Set([Types.set, Types.map, Types.weakSet, Types.weakMap])
    };
    module.exports = internals.clone = function(obj, options = {}, _seen = null) {
      if (typeof obj !== "object" || obj === null) {
        return obj;
      }
      let clone = internals.clone;
      let seen = _seen;
      if (options.shallow) {
        if (options.shallow !== true) {
          return internals.cloneWithShallow(obj, options);
        }
        clone = /* @__PURE__ */ __name((value) => value, "clone");
      } else if (seen) {
        const lookup = seen.get(obj);
        if (lookup) {
          return lookup;
        }
      } else {
        seen = /* @__PURE__ */ new Map();
      }
      const baseProto = Types.getInternalProto(obj);
      if (baseProto === Types.buffer) {
        return Buffer && Buffer.from(obj);
      }
      if (baseProto === Types.date) {
        return new Date(obj.getTime());
      }
      if (baseProto === Types.regex) {
        return new RegExp(obj);
      }
      const newObj = internals.base(obj, baseProto, options);
      if (newObj === obj) {
        return obj;
      }
      if (seen) {
        seen.set(obj, newObj);
      }
      if (baseProto === Types.set) {
        for (const value of obj) {
          newObj.add(clone(value, options, seen));
        }
      } else if (baseProto === Types.map) {
        for (const [key, value] of obj) {
          newObj.set(key, clone(value, options, seen));
        }
      }
      const keys = Utils.keys(obj, options);
      for (const key of keys) {
        if (key === "__proto__") {
          continue;
        }
        if (baseProto === Types.array && key === "length") {
          newObj.length = obj.length;
          continue;
        }
        const descriptor = Object.getOwnPropertyDescriptor(obj, key);
        if (descriptor) {
          if (descriptor.get || descriptor.set) {
            Object.defineProperty(newObj, key, descriptor);
          } else if (descriptor.enumerable) {
            newObj[key] = clone(obj[key], options, seen);
          } else {
            Object.defineProperty(newObj, key, { enumerable: false, writable: true, configurable: true, value: clone(obj[key], options, seen) });
          }
        } else {
          Object.defineProperty(newObj, key, {
            enumerable: true,
            writable: true,
            configurable: true,
            value: clone(obj[key], options, seen)
          });
        }
      }
      return newObj;
    };
    internals.cloneWithShallow = function(source, options) {
      const keys = options.shallow;
      options = Object.assign({}, options);
      options.shallow = false;
      const seen = /* @__PURE__ */ new Map();
      for (const key of keys) {
        const ref = Reach(source, key);
        if (typeof ref === "object" || typeof ref === "function") {
          seen.set(ref, ref);
        }
      }
      return internals.clone(source, options, seen);
    };
    internals.base = function(obj, baseProto, options) {
      if (options.prototype === false) {
        if (internals.needsProtoHack.has(baseProto)) {
          return new baseProto.constructor();
        }
        return baseProto === Types.array ? [] : {};
      }
      const proto = Object.getPrototypeOf(obj);
      if (proto && proto.isImmutable) {
        return obj;
      }
      if (baseProto === Types.array) {
        const newObj = [];
        if (proto !== baseProto) {
          Object.setPrototypeOf(newObj, proto);
        }
        return newObj;
      }
      if (internals.needsProtoHack.has(baseProto)) {
        const newObj = new proto.constructor();
        if (proto !== baseProto) {
          Object.setPrototypeOf(newObj, proto);
        }
        return newObj;
      }
      return Object.create(proto);
    };
  }
});

// node_modules/joi/package.json
var require_package = __commonJS({
  "node_modules/joi/package.json"(exports, module) {
    module.exports = {
      name: "joi",
      description: "Object schema validation",
      version: "17.13.1",
      repository: "git://github.com/hapijs/joi",
      main: "lib/index.js",
      types: "lib/index.d.ts",
      browser: "dist/joi-browser.min.js",
      files: [
        "lib/**/*",
        "dist/*"
      ],
      keywords: [
        "schema",
        "validation"
      ],
      dependencies: {
        "@hapi/hoek": "^9.3.0",
        "@hapi/topo": "^5.1.0",
        "@sideway/address": "^4.1.5",
        "@sideway/formula": "^3.0.1",
        "@sideway/pinpoint": "^2.0.0"
      },
      devDependencies: {
        "@hapi/bourne": "2.x.x",
        "@hapi/code": "8.x.x",
        "@hapi/joi-legacy-test": "npm:@hapi/joi@15.x.x",
        "@hapi/lab": "^25.1.3",
        "@types/node": "^14.18.63",
        typescript: "4.3.x"
      },
      scripts: {
        prepublishOnly: "cd browser && npm install && npm run build",
        test: "lab -t 100 -a @hapi/code -L -Y",
        "test-cov-html": "lab -r html -o coverage.html -a @hapi/code"
      },
      license: "BSD-3-Clause"
    };
  }
});

// node_modules/joi/lib/schemas.js
var require_schemas = __commonJS({
  "node_modules/joi/lib/schemas.js"(exports) {
    "use strict";
    init_cjs_shim();
    var Joi2 = require_lib5();
    var internals = {};
    internals.wrap = Joi2.string().min(1).max(2).allow(false);
    exports.preferences = Joi2.object({
      allowUnknown: Joi2.boolean(),
      abortEarly: Joi2.boolean(),
      artifacts: Joi2.boolean(),
      cache: Joi2.boolean(),
      context: Joi2.object(),
      convert: Joi2.boolean(),
      dateFormat: Joi2.valid("date", "iso", "string", "time", "utc"),
      debug: Joi2.boolean(),
      errors: {
        escapeHtml: Joi2.boolean(),
        label: Joi2.valid("path", "key", false),
        language: [
          Joi2.string(),
          Joi2.object().ref()
        ],
        render: Joi2.boolean(),
        stack: Joi2.boolean(),
        wrap: {
          label: internals.wrap,
          array: internals.wrap,
          string: internals.wrap
        }
      },
      externals: Joi2.boolean(),
      messages: Joi2.object(),
      noDefaults: Joi2.boolean(),
      nonEnumerables: Joi2.boolean(),
      presence: Joi2.valid("required", "optional", "forbidden"),
      skipFunctions: Joi2.boolean(),
      stripUnknown: Joi2.object({
        arrays: Joi2.boolean(),
        objects: Joi2.boolean()
      }).or("arrays", "objects").allow(true, false),
      warnings: Joi2.boolean()
    }).strict();
    internals.nameRx = /^[a-zA-Z0-9]\w*$/;
    internals.rule = Joi2.object({
      alias: Joi2.array().items(Joi2.string().pattern(internals.nameRx)).single(),
      args: Joi2.array().items(
        Joi2.string(),
        Joi2.object({
          name: Joi2.string().pattern(internals.nameRx).required(),
          ref: Joi2.boolean(),
          assert: Joi2.alternatives([
            Joi2.function(),
            Joi2.object().schema()
          ]).conditional("ref", { is: true, then: Joi2.required() }),
          normalize: Joi2.function(),
          message: Joi2.string().when("assert", { is: Joi2.function(), then: Joi2.required() })
        })
      ),
      convert: Joi2.boolean(),
      manifest: Joi2.boolean(),
      method: Joi2.function().allow(false),
      multi: Joi2.boolean(),
      validate: Joi2.function()
    });
    exports.extension = Joi2.object({
      type: Joi2.alternatives([
        Joi2.string(),
        Joi2.object().regex()
      ]).required(),
      args: Joi2.function(),
      cast: Joi2.object().pattern(internals.nameRx, Joi2.object({
        from: Joi2.function().maxArity(1).required(),
        to: Joi2.function().minArity(1).maxArity(2).required()
      })),
      base: Joi2.object().schema().when("type", { is: Joi2.object().regex(), then: Joi2.forbidden() }),
      coerce: [
        Joi2.function().maxArity(3),
        Joi2.object({ method: Joi2.function().maxArity(3).required(), from: Joi2.array().items(Joi2.string()).single() })
      ],
      flags: Joi2.object().pattern(internals.nameRx, Joi2.object({
        setter: Joi2.string(),
        default: Joi2.any()
      })),
      manifest: {
        build: Joi2.function().arity(2)
      },
      messages: [Joi2.object(), Joi2.string()],
      modifiers: Joi2.object().pattern(internals.nameRx, Joi2.function().minArity(1).maxArity(2)),
      overrides: Joi2.object().pattern(internals.nameRx, Joi2.function()),
      prepare: Joi2.function().maxArity(3),
      rebuild: Joi2.function().arity(1),
      rules: Joi2.object().pattern(internals.nameRx, internals.rule),
      terms: Joi2.object().pattern(internals.nameRx, Joi2.object({
        init: Joi2.array().allow(null).required(),
        manifest: Joi2.object().pattern(/.+/, [
          Joi2.valid("schema", "single"),
          Joi2.object({
            mapped: Joi2.object({
              from: Joi2.string().required(),
              to: Joi2.string().required()
            }).required()
          })
        ])
      })),
      validate: Joi2.function().maxArity(3)
    }).strict();
    exports.extensions = Joi2.array().items(Joi2.object(), Joi2.function().arity(1)).strict();
    internals.desc = {
      buffer: Joi2.object({
        buffer: Joi2.string()
      }),
      func: Joi2.object({
        function: Joi2.function().required(),
        options: {
          literal: true
        }
      }),
      override: Joi2.object({
        override: true
      }),
      ref: Joi2.object({
        ref: Joi2.object({
          type: Joi2.valid("value", "global", "local"),
          path: Joi2.array().required(),
          separator: Joi2.string().length(1).allow(false),
          ancestor: Joi2.number().min(0).integer().allow("root"),
          map: Joi2.array().items(Joi2.array().length(2)).min(1),
          adjust: Joi2.function(),
          iterables: Joi2.boolean(),
          in: Joi2.boolean(),
          render: Joi2.boolean()
        }).required()
      }),
      regex: Joi2.object({
        regex: Joi2.string().min(3)
      }),
      special: Joi2.object({
        special: Joi2.valid("deep").required()
      }),
      template: Joi2.object({
        template: Joi2.string().required(),
        options: Joi2.object()
      }),
      value: Joi2.object({
        value: Joi2.alternatives([Joi2.object(), Joi2.array()]).required()
      })
    };
    internals.desc.entity = Joi2.alternatives([
      Joi2.array().items(Joi2.link("...")),
      Joi2.boolean(),
      Joi2.function(),
      Joi2.number(),
      Joi2.string(),
      internals.desc.buffer,
      internals.desc.func,
      internals.desc.ref,
      internals.desc.regex,
      internals.desc.special,
      internals.desc.template,
      internals.desc.value,
      Joi2.link("/")
    ]);
    internals.desc.values = Joi2.array().items(
      null,
      Joi2.boolean(),
      Joi2.function(),
      Joi2.number().allow(Infinity, -Infinity),
      Joi2.string().allow(""),
      Joi2.symbol(),
      internals.desc.buffer,
      internals.desc.func,
      internals.desc.override,
      internals.desc.ref,
      internals.desc.regex,
      internals.desc.template,
      internals.desc.value
    );
    internals.desc.messages = Joi2.object().pattern(/.+/, [
      Joi2.string(),
      internals.desc.template,
      Joi2.object().pattern(/.+/, [Joi2.string(), internals.desc.template])
    ]);
    exports.description = Joi2.object({
      type: Joi2.string().required(),
      flags: Joi2.object({
        cast: Joi2.string(),
        default: Joi2.any(),
        description: Joi2.string(),
        empty: Joi2.link("/"),
        failover: internals.desc.entity,
        id: Joi2.string(),
        label: Joi2.string(),
        only: true,
        presence: ["optional", "required", "forbidden"],
        result: ["raw", "strip"],
        strip: Joi2.boolean(),
        unit: Joi2.string()
      }).unknown(),
      preferences: {
        allowUnknown: Joi2.boolean(),
        abortEarly: Joi2.boolean(),
        artifacts: Joi2.boolean(),
        cache: Joi2.boolean(),
        convert: Joi2.boolean(),
        dateFormat: ["date", "iso", "string", "time", "utc"],
        errors: {
          escapeHtml: Joi2.boolean(),
          label: ["path", "key"],
          language: [
            Joi2.string(),
            internals.desc.ref
          ],
          wrap: {
            label: internals.wrap,
            array: internals.wrap
          }
        },
        externals: Joi2.boolean(),
        messages: internals.desc.messages,
        noDefaults: Joi2.boolean(),
        nonEnumerables: Joi2.boolean(),
        presence: ["required", "optional", "forbidden"],
        skipFunctions: Joi2.boolean(),
        stripUnknown: Joi2.object({
          arrays: Joi2.boolean(),
          objects: Joi2.boolean()
        }).or("arrays", "objects").allow(true, false),
        warnings: Joi2.boolean()
      },
      allow: internals.desc.values,
      invalid: internals.desc.values,
      rules: Joi2.array().min(1).items({
        name: Joi2.string().required(),
        args: Joi2.object().min(1),
        keep: Joi2.boolean(),
        message: [
          Joi2.string(),
          internals.desc.messages
        ],
        warn: Joi2.boolean()
      }),
      // Terms
      keys: Joi2.object().pattern(/.*/, Joi2.link("/")),
      link: internals.desc.ref
    }).pattern(/^[a-z]\w*$/, Joi2.any());
  }
});

// node_modules/@hapi/hoek/lib/escapeHtml.js
var require_escapeHtml = __commonJS({
  "node_modules/@hapi/hoek/lib/escapeHtml.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var internals = {};
    module.exports = function(input) {
      if (!input) {
        return "";
      }
      let escaped = "";
      for (let i = 0; i < input.length; ++i) {
        const charCode = input.charCodeAt(i);
        if (internals.isSafe(charCode)) {
          escaped += input[i];
        } else {
          escaped += internals.escapeHtmlChar(charCode);
        }
      }
      return escaped;
    };
    internals.escapeHtmlChar = function(charCode) {
      const namedEscape = internals.namedHtml.get(charCode);
      if (namedEscape) {
        return namedEscape;
      }
      if (charCode >= 256) {
        return "&#" + charCode + ";";
      }
      const hexValue = charCode.toString(16).padStart(2, "0");
      return `&#x${hexValue};`;
    };
    internals.isSafe = function(charCode) {
      return internals.safeCharCodes.has(charCode);
    };
    internals.namedHtml = /* @__PURE__ */ new Map([
      [38, "&amp;"],
      [60, "&lt;"],
      [62, "&gt;"],
      [34, "&quot;"],
      [160, "&nbsp;"],
      [162, "&cent;"],
      [163, "&pound;"],
      [164, "&curren;"],
      [169, "&copy;"],
      [174, "&reg;"]
    ]);
    internals.safeCharCodes = function() {
      const safe = /* @__PURE__ */ new Set();
      for (let i = 32; i < 123; ++i) {
        if (i >= 97 || // a-z
        i >= 65 && i <= 90 || // A-Z
        i >= 48 && i <= 57 || // 0-9
        i === 32 || // space
        i === 46 || // .
        i === 44 || // ,
        i === 45 || // -
        i === 58 || // :
        i === 95) {
          safe.add(i);
        }
      }
      return safe;
    }();
  }
});

// node_modules/@sideway/formula/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/@sideway/formula/lib/index.js"(exports) {
    "use strict";
    init_cjs_shim();
    var internals = {
      operators: ["!", "^", "*", "/", "%", "+", "-", "<", "<=", ">", ">=", "==", "!=", "&&", "||", "??"],
      operatorCharacters: ["!", "^", "*", "/", "%", "+", "-", "<", "=", ">", "&", "|", "?"],
      operatorsOrder: [["^"], ["*", "/", "%"], ["+", "-"], ["<", "<=", ">", ">="], ["==", "!="], ["&&"], ["||", "??"]],
      operatorsPrefix: ["!", "n"],
      literals: {
        '"': '"',
        "`": "`",
        "'": "'",
        "[": "]"
      },
      numberRx: /^(?:[0-9]*(\.[0-9]*)?){1}$/,
      tokenRx: /^[\w\$\#\.\@\:\{\}]+$/,
      symbol: Symbol("formula"),
      settings: Symbol("settings")
    };
    exports.Parser = class {
      constructor(string, options = {}) {
        if (!options[internals.settings] && options.constants) {
          for (const constant in options.constants) {
            const value = options.constants[constant];
            if (value !== null && !["boolean", "number", "string"].includes(typeof value)) {
              throw new Error(`Formula constant ${constant} contains invalid ${typeof value} value type`);
            }
          }
        }
        this.settings = options[internals.settings] ? options : Object.assign({ [internals.settings]: true, constants: {}, functions: {} }, options);
        this.single = null;
        this._parts = null;
        this._parse(string);
      }
      _parse(string) {
        let parts = [];
        let current = "";
        let parenthesis = 0;
        let literal = false;
        const flush = /* @__PURE__ */ __name((inner) => {
          if (parenthesis) {
            throw new Error("Formula missing closing parenthesis");
          }
          const last = parts.length ? parts[parts.length - 1] : null;
          if (!literal && !current && !inner) {
            return;
          }
          if (last && last.type === "reference" && inner === ")") {
            last.type = "function";
            last.value = this._subFormula(current, last.value);
            current = "";
            return;
          }
          if (inner === ")") {
            const sub = new exports.Parser(current, this.settings);
            parts.push({ type: "segment", value: sub });
          } else if (literal) {
            if (literal === "]") {
              parts.push({ type: "reference", value: current });
              current = "";
              return;
            }
            parts.push({ type: "literal", value: current });
          } else if (internals.operatorCharacters.includes(current)) {
            if (last && last.type === "operator" && internals.operators.includes(last.value + current)) {
              last.value += current;
            } else {
              parts.push({ type: "operator", value: current });
            }
          } else if (current.match(internals.numberRx)) {
            parts.push({ type: "constant", value: parseFloat(current) });
          } else if (this.settings.constants[current] !== void 0) {
            parts.push({ type: "constant", value: this.settings.constants[current] });
          } else {
            if (!current.match(internals.tokenRx)) {
              throw new Error(`Formula contains invalid token: ${current}`);
            }
            parts.push({ type: "reference", value: current });
          }
          current = "";
        }, "flush");
        for (const c of string) {
          if (literal) {
            if (c === literal) {
              flush();
              literal = false;
            } else {
              current += c;
            }
          } else if (parenthesis) {
            if (c === "(") {
              current += c;
              ++parenthesis;
            } else if (c === ")") {
              --parenthesis;
              if (!parenthesis) {
                flush(c);
              } else {
                current += c;
              }
            } else {
              current += c;
            }
          } else if (c in internals.literals) {
            literal = internals.literals[c];
          } else if (c === "(") {
            flush();
            ++parenthesis;
          } else if (internals.operatorCharacters.includes(c)) {
            flush();
            current = c;
            flush();
          } else if (c !== " ") {
            current += c;
          } else {
            flush();
          }
        }
        flush();
        parts = parts.map((part, i) => {
          if (part.type !== "operator" || part.value !== "-" || i && parts[i - 1].type !== "operator") {
            return part;
          }
          return { type: "operator", value: "n" };
        });
        let operator = false;
        for (const part of parts) {
          if (part.type === "operator") {
            if (internals.operatorsPrefix.includes(part.value)) {
              continue;
            }
            if (!operator) {
              throw new Error("Formula contains an operator in invalid position");
            }
            if (!internals.operators.includes(part.value)) {
              throw new Error(`Formula contains an unknown operator ${part.value}`);
            }
          } else if (operator) {
            throw new Error("Formula missing expected operator");
          }
          operator = !operator;
        }
        if (!operator) {
          throw new Error("Formula contains invalid trailing operator");
        }
        if (parts.length === 1 && ["reference", "literal", "constant"].includes(parts[0].type)) {
          this.single = { type: parts[0].type === "reference" ? "reference" : "value", value: parts[0].value };
        }
        this._parts = parts.map((part) => {
          if (part.type === "operator") {
            return internals.operatorsPrefix.includes(part.value) ? part : part.value;
          }
          if (part.type !== "reference") {
            return part.value;
          }
          if (this.settings.tokenRx && !this.settings.tokenRx.test(part.value)) {
            throw new Error(`Formula contains invalid reference ${part.value}`);
          }
          if (this.settings.reference) {
            return this.settings.reference(part.value);
          }
          return internals.reference(part.value);
        });
      }
      _subFormula(string, name) {
        const method = this.settings.functions[name];
        if (typeof method !== "function") {
          throw new Error(`Formula contains unknown function ${name}`);
        }
        let args = [];
        if (string) {
          let current = "";
          let parenthesis = 0;
          let literal = false;
          const flush = /* @__PURE__ */ __name(() => {
            if (!current) {
              throw new Error(`Formula contains function ${name} with invalid arguments ${string}`);
            }
            args.push(current);
            current = "";
          }, "flush");
          for (let i = 0; i < string.length; ++i) {
            const c = string[i];
            if (literal) {
              current += c;
              if (c === literal) {
                literal = false;
              }
            } else if (c in internals.literals && !parenthesis) {
              current += c;
              literal = internals.literals[c];
            } else if (c === "," && !parenthesis) {
              flush();
            } else {
              current += c;
              if (c === "(") {
                ++parenthesis;
              } else if (c === ")") {
                --parenthesis;
              }
            }
          }
          flush();
        }
        args = args.map((arg) => new exports.Parser(arg, this.settings));
        return function(context) {
          const innerValues = [];
          for (const arg of args) {
            innerValues.push(arg.evaluate(context));
          }
          return method.call(context, ...innerValues);
        };
      }
      evaluate(context) {
        const parts = this._parts.slice();
        for (let i = parts.length - 2; i >= 0; --i) {
          const part = parts[i];
          if (part && part.type === "operator") {
            const current = parts[i + 1];
            parts.splice(i + 1, 1);
            const value = internals.evaluate(current, context);
            parts[i] = internals.single(part.value, value);
          }
        }
        internals.operatorsOrder.forEach((set) => {
          for (let i = 1; i < parts.length - 1; ) {
            if (set.includes(parts[i])) {
              const operator = parts[i];
              const left = internals.evaluate(parts[i - 1], context);
              const right = internals.evaluate(parts[i + 1], context);
              parts.splice(i, 2);
              const result = internals.calculate(operator, left, right);
              parts[i - 1] = result === 0 ? 0 : result;
            } else {
              i += 2;
            }
          }
        });
        return internals.evaluate(parts[0], context);
      }
    };
    exports.Parser.prototype[internals.symbol] = true;
    internals.reference = function(name) {
      return function(context) {
        return context && context[name] !== void 0 ? context[name] : null;
      };
    };
    internals.evaluate = function(part, context) {
      if (part === null) {
        return null;
      }
      if (typeof part === "function") {
        return part(context);
      }
      if (part[internals.symbol]) {
        return part.evaluate(context);
      }
      return part;
    };
    internals.single = function(operator, value) {
      if (operator === "!") {
        return value ? false : true;
      }
      const negative = -value;
      if (negative === 0) {
        return 0;
      }
      return negative;
    };
    internals.calculate = function(operator, left, right) {
      if (operator === "??") {
        return internals.exists(left) ? left : right;
      }
      if (typeof left === "string" || typeof right === "string") {
        if (operator === "+") {
          left = internals.exists(left) ? left : "";
          right = internals.exists(right) ? right : "";
          return left + right;
        }
      } else {
        switch (operator) {
          case "^":
            return Math.pow(left, right);
          case "*":
            return left * right;
          case "/":
            return left / right;
          case "%":
            return left % right;
          case "+":
            return left + right;
          case "-":
            return left - right;
        }
      }
      switch (operator) {
        case "<":
          return left < right;
        case "<=":
          return left <= right;
        case ">":
          return left > right;
        case ">=":
          return left >= right;
        case "==":
          return left === right;
        case "!=":
          return left !== right;
        case "&&":
          return left && right;
        case "||":
          return left || right;
      }
      return null;
    };
    internals.exists = function(value) {
      return value !== null && value !== void 0;
    };
  }
});

// node_modules/joi/lib/annotate.js
var require_annotate = __commonJS({
  "node_modules/joi/lib/annotate.js"(exports) {
    "use strict";
    init_cjs_shim();
    var Clone = require_clone();
    var Common = require_common();
    var internals = {
      annotations: Symbol("annotations")
    };
    exports.error = function(stripColorCodes) {
      if (!this._original || typeof this._original !== "object") {
        return this.details[0].message;
      }
      const redFgEscape = stripColorCodes ? "" : "\x1B[31m";
      const redBgEscape = stripColorCodes ? "" : "\x1B[41m";
      const endColor = stripColorCodes ? "" : "\x1B[0m";
      const obj = Clone(this._original);
      for (let i = this.details.length - 1; i >= 0; --i) {
        const pos = i + 1;
        const error = this.details[i];
        const path5 = error.path;
        let node = obj;
        for (let j = 0; ; ++j) {
          const seg = path5[j];
          if (Common.isSchema(node)) {
            node = node.clone();
          }
          if (j + 1 < path5.length && typeof node[seg] !== "string") {
            node = node[seg];
          } else {
            const refAnnotations = node[internals.annotations] || { errors: {}, missing: {} };
            node[internals.annotations] = refAnnotations;
            const cacheKey = seg || error.context.key;
            if (node[seg] !== void 0) {
              refAnnotations.errors[cacheKey] = refAnnotations.errors[cacheKey] || [];
              refAnnotations.errors[cacheKey].push(pos);
            } else {
              refAnnotations.missing[cacheKey] = pos;
            }
            break;
          }
        }
      }
      const replacers = {
        key: /_\$key\$_([, \d]+)_\$end\$_"/g,
        missing: /"_\$miss\$_([^|]+)\|(\d+)_\$end\$_": "__missing__"/g,
        arrayIndex: /\s*"_\$idx\$_([, \d]+)_\$end\$_",?\n(.*)/g,
        specials: /"\[(NaN|Symbol.*|-?Infinity|function.*|\(.*)]"/g
      };
      let message = internals.safeStringify(obj, 2).replace(replacers.key, ($0, $1) => `" ${redFgEscape}[${$1}]${endColor}`).replace(replacers.missing, ($0, $1, $2) => `${redBgEscape}"${$1}"${endColor}${redFgEscape} [${$2}]: -- missing --${endColor}`).replace(replacers.arrayIndex, ($0, $1, $2) => `
${$2} ${redFgEscape}[${$1}]${endColor}`).replace(replacers.specials, ($0, $1) => $1);
      message = `${message}
${redFgEscape}`;
      for (let i = 0; i < this.details.length; ++i) {
        const pos = i + 1;
        message = `${message}
[${pos}] ${this.details[i].message}`;
      }
      message = message + endColor;
      return message;
    };
    internals.safeStringify = function(obj, spaces) {
      return JSON.stringify(obj, internals.serializer(), spaces);
    };
    internals.serializer = function() {
      const keys = [];
      const stack = [];
      const cycleReplacer = /* @__PURE__ */ __name((key, value) => {
        if (stack[0] === value) {
          return "[Circular ~]";
        }
        return "[Circular ~." + keys.slice(0, stack.indexOf(value)).join(".") + "]";
      }, "cycleReplacer");
      return function(key, value) {
        if (stack.length > 0) {
          const thisPos = stack.indexOf(this);
          if (~thisPos) {
            stack.length = thisPos + 1;
            keys.length = thisPos + 1;
            keys[thisPos] = key;
          } else {
            stack.push(this);
            keys.push(key);
          }
          if (~stack.indexOf(value)) {
            value = cycleReplacer.call(this, key, value);
          }
        } else {
          stack.push(value);
        }
        if (value) {
          const annotations = value[internals.annotations];
          if (annotations) {
            if (Array.isArray(value)) {
              const annotated = [];
              for (let i = 0; i < value.length; ++i) {
                if (annotations.errors[i]) {
                  annotated.push(`_$idx$_${annotations.errors[i].sort().join(", ")}_$end$_`);
                }
                annotated.push(value[i]);
              }
              value = annotated;
            } else {
              for (const errorKey in annotations.errors) {
                value[`${errorKey}_$key$_${annotations.errors[errorKey].sort().join(", ")}_$end$_`] = value[errorKey];
                value[errorKey] = void 0;
              }
              for (const missingKey in annotations.missing) {
                value[`_$miss$_${missingKey}|${annotations.missing[missingKey]}_$end$_`] = "__missing__";
              }
            }
            return value;
          }
        }
        if (value === Infinity || value === -Infinity || Number.isNaN(value) || typeof value === "function" || typeof value === "symbol") {
          return "[" + value.toString() + "]";
        }
        return value;
      };
    };
  }
});

// node_modules/joi/lib/errors.js
var require_errors2 = __commonJS({
  "node_modules/joi/lib/errors.js"(exports) {
    "use strict";
    init_cjs_shim();
    var Annotate = require_annotate();
    var Common = require_common();
    var Template = require_template();
    exports.Report = class {
      constructor(code, value, local, flags, messages, state, prefs) {
        this.code = code;
        this.flags = flags;
        this.messages = messages;
        this.path = state.path;
        this.prefs = prefs;
        this.state = state;
        this.value = value;
        this.message = null;
        this.template = null;
        this.local = local || {};
        this.local.label = exports.label(this.flags, this.state, this.prefs, this.messages);
        if (this.value !== void 0 && !this.local.hasOwnProperty("value")) {
          this.local.value = this.value;
        }
        if (this.path.length) {
          const key = this.path[this.path.length - 1];
          if (typeof key !== "object") {
            this.local.key = key;
          }
        }
      }
      _setTemplate(template) {
        this.template = template;
        if (!this.flags.label && this.path.length === 0) {
          const localized = this._template(this.template, "root");
          if (localized) {
            this.local.label = localized;
          }
        }
      }
      toString() {
        if (this.message) {
          return this.message;
        }
        const code = this.code;
        if (!this.prefs.errors.render) {
          return this.code;
        }
        const template = this._template(this.template) || this._template(this.prefs.messages) || this._template(this.messages);
        if (template === void 0) {
          return `Error code "${code}" is not defined, your custom type is missing the correct messages definition`;
        }
        this.message = template.render(this.value, this.state, this.prefs, this.local, { errors: this.prefs.errors, messages: [this.prefs.messages, this.messages] });
        if (!this.prefs.errors.label) {
          this.message = this.message.replace(/^"" /, "").trim();
        }
        return this.message;
      }
      _template(messages, code) {
        return exports.template(this.value, messages, code || this.code, this.state, this.prefs);
      }
    };
    exports.path = function(path5) {
      let label = "";
      for (const segment of path5) {
        if (typeof segment === "object") {
          continue;
        }
        if (typeof segment === "string") {
          if (label) {
            label += ".";
          }
          label += segment;
        } else {
          label += `[${segment}]`;
        }
      }
      return label;
    };
    exports.template = function(value, messages, code, state, prefs) {
      if (!messages) {
        return;
      }
      if (Template.isTemplate(messages)) {
        return code !== "root" ? messages : null;
      }
      let lang = prefs.errors.language;
      if (Common.isResolvable(lang)) {
        lang = lang.resolve(value, state, prefs);
      }
      if (lang && messages[lang]) {
        if (messages[lang][code] !== void 0) {
          return messages[lang][code];
        }
        if (messages[lang]["*"] !== void 0) {
          return messages[lang]["*"];
        }
      }
      if (!messages[code]) {
        return messages["*"];
      }
      return messages[code];
    };
    exports.label = function(flags, state, prefs, messages) {
      if (!prefs.errors.label) {
        return "";
      }
      if (flags.label) {
        return flags.label;
      }
      let path5 = state.path;
      if (prefs.errors.label === "key" && state.path.length > 1) {
        path5 = state.path.slice(-1);
      }
      const normalized = exports.path(path5);
      if (normalized) {
        return normalized;
      }
      return exports.template(null, prefs.messages, "root", state, prefs) || messages && exports.template(null, messages, "root", state, prefs) || "value";
    };
    exports.process = function(errors, original, prefs) {
      if (!errors) {
        return null;
      }
      const { override, message, details } = exports.details(errors);
      if (override) {
        return override;
      }
      if (prefs.errors.stack) {
        return new exports.ValidationError(message, details, original);
      }
      const limit = Error.stackTraceLimit;
      Error.stackTraceLimit = 0;
      const validationError = new exports.ValidationError(message, details, original);
      Error.stackTraceLimit = limit;
      return validationError;
    };
    exports.details = function(errors, options = {}) {
      let messages = [];
      const details = [];
      for (const item of errors) {
        if (item instanceof Error) {
          if (options.override !== false) {
            return { override: item };
          }
          const message2 = item.toString();
          messages.push(message2);
          details.push({
            message: message2,
            type: "override",
            context: { error: item }
          });
          continue;
        }
        const message = item.toString();
        messages.push(message);
        details.push({
          message,
          path: item.path.filter((v) => typeof v !== "object"),
          type: item.code,
          context: item.local
        });
      }
      if (messages.length > 1) {
        messages = [...new Set(messages)];
      }
      return { message: messages.join(". "), details };
    };
    exports.ValidationError = class extends Error {
      constructor(message, details, original) {
        super(message);
        this._original = original;
        this.details = details;
      }
      static isError(err) {
        return err instanceof exports.ValidationError;
      }
    };
    exports.ValidationError.prototype.isJoi = true;
    exports.ValidationError.prototype.name = "ValidationError";
    exports.ValidationError.prototype.annotate = Annotate.error;
  }
});

// node_modules/joi/lib/ref.js
var require_ref = __commonJS({
  "node_modules/joi/lib/ref.js"(exports) {
    "use strict";
    init_cjs_shim();
    var Assert = require_assert();
    var Clone = require_clone();
    var Reach = require_reach();
    var Common = require_common();
    var Template;
    var internals = {
      symbol: Symbol("ref"),
      // Used to internally identify references (shared with other joi versions)
      defaults: {
        adjust: null,
        in: false,
        iterables: null,
        map: null,
        separator: ".",
        type: "value"
      }
    };
    exports.create = function(key, options = {}) {
      Assert(typeof key === "string", "Invalid reference key:", key);
      Common.assertOptions(options, ["adjust", "ancestor", "in", "iterables", "map", "prefix", "render", "separator"]);
      Assert(!options.prefix || typeof options.prefix === "object", "options.prefix must be of type object");
      const ref = Object.assign({}, internals.defaults, options);
      delete ref.prefix;
      const separator = ref.separator;
      const context = internals.context(key, separator, options.prefix);
      ref.type = context.type;
      key = context.key;
      if (ref.type === "value") {
        if (context.root) {
          Assert(!separator || key[0] !== separator, "Cannot specify relative path with root prefix");
          ref.ancestor = "root";
          if (!key) {
            key = null;
          }
        }
        if (separator && separator === key) {
          key = null;
          ref.ancestor = 0;
        } else {
          if (ref.ancestor !== void 0) {
            Assert(!separator || !key || key[0] !== separator, "Cannot combine prefix with ancestor option");
          } else {
            const [ancestor, slice] = internals.ancestor(key, separator);
            if (slice) {
              key = key.slice(slice);
              if (key === "") {
                key = null;
              }
            }
            ref.ancestor = ancestor;
          }
        }
      }
      ref.path = separator ? key === null ? [] : key.split(separator) : [key];
      return new internals.Ref(ref);
    };
    exports.in = function(key, options = {}) {
      return exports.create(key, { ...options, in: true });
    };
    exports.isRef = function(ref) {
      return ref ? !!ref[Common.symbols.ref] : false;
    };
    internals.Ref = class {
      constructor(options) {
        Assert(typeof options === "object", "Invalid reference construction");
        Common.assertOptions(options, [
          "adjust",
          "ancestor",
          "in",
          "iterables",
          "map",
          "path",
          "render",
          "separator",
          "type",
          // Copied
          "depth",
          "key",
          "root",
          "display"
          // Overridden
        ]);
        Assert([false, void 0].includes(options.separator) || typeof options.separator === "string" && options.separator.length === 1, "Invalid separator");
        Assert(!options.adjust || typeof options.adjust === "function", "options.adjust must be a function");
        Assert(!options.map || Array.isArray(options.map), "options.map must be an array");
        Assert(!options.map || !options.adjust, "Cannot set both map and adjust options");
        Object.assign(this, internals.defaults, options);
        Assert(this.type === "value" || this.ancestor === void 0, "Non-value references cannot reference ancestors");
        if (Array.isArray(this.map)) {
          this.map = new Map(this.map);
        }
        this.depth = this.path.length;
        this.key = this.path.length ? this.path.join(this.separator) : null;
        this.root = this.path[0];
        this.updateDisplay();
      }
      resolve(value, state, prefs, local, options = {}) {
        Assert(!this.in || options.in, "Invalid in() reference usage");
        if (this.type === "global") {
          return this._resolve(prefs.context, state, options);
        }
        if (this.type === "local") {
          return this._resolve(local, state, options);
        }
        if (!this.ancestor) {
          return this._resolve(value, state, options);
        }
        if (this.ancestor === "root") {
          return this._resolve(state.ancestors[state.ancestors.length - 1], state, options);
        }
        Assert(this.ancestor <= state.ancestors.length, "Invalid reference exceeds the schema root:", this.display);
        return this._resolve(state.ancestors[this.ancestor - 1], state, options);
      }
      _resolve(target, state, options) {
        let resolved;
        if (this.type === "value" && state.mainstay.shadow && options.shadow !== false) {
          resolved = state.mainstay.shadow.get(this.absolute(state));
        }
        if (resolved === void 0) {
          resolved = Reach(target, this.path, { iterables: this.iterables, functions: true });
        }
        if (this.adjust) {
          resolved = this.adjust(resolved);
        }
        if (this.map) {
          const mapped = this.map.get(resolved);
          if (mapped !== void 0) {
            resolved = mapped;
          }
        }
        if (state.mainstay) {
          state.mainstay.tracer.resolve(state, this, resolved);
        }
        return resolved;
      }
      toString() {
        return this.display;
      }
      absolute(state) {
        return [...state.path.slice(0, -this.ancestor), ...this.path];
      }
      clone() {
        return new internals.Ref(this);
      }
      describe() {
        const ref = { path: this.path };
        if (this.type !== "value") {
          ref.type = this.type;
        }
        if (this.separator !== ".") {
          ref.separator = this.separator;
        }
        if (this.type === "value" && this.ancestor !== 1) {
          ref.ancestor = this.ancestor;
        }
        if (this.map) {
          ref.map = [...this.map];
        }
        for (const key of ["adjust", "iterables", "render"]) {
          if (this[key] !== null && this[key] !== void 0) {
            ref[key] = this[key];
          }
        }
        if (this.in !== false) {
          ref.in = true;
        }
        return { ref };
      }
      updateDisplay() {
        const key = this.key !== null ? this.key : "";
        if (this.type !== "value") {
          this.display = `ref:${this.type}:${key}`;
          return;
        }
        if (!this.separator) {
          this.display = `ref:${key}`;
          return;
        }
        if (!this.ancestor) {
          this.display = `ref:${this.separator}${key}`;
          return;
        }
        if (this.ancestor === "root") {
          this.display = `ref:root:${key}`;
          return;
        }
        if (this.ancestor === 1) {
          this.display = `ref:${key || ".."}`;
          return;
        }
        const lead = new Array(this.ancestor + 1).fill(this.separator).join("");
        this.display = `ref:${lead}${key || ""}`;
      }
    };
    internals.Ref.prototype[Common.symbols.ref] = true;
    exports.build = function(desc) {
      desc = Object.assign({}, internals.defaults, desc);
      if (desc.type === "value" && desc.ancestor === void 0) {
        desc.ancestor = 1;
      }
      return new internals.Ref(desc);
    };
    internals.context = function(key, separator, prefix = {}) {
      key = key.trim();
      if (prefix) {
        const globalp = prefix.global === void 0 ? "$" : prefix.global;
        if (globalp !== separator && key.startsWith(globalp)) {
          return { key: key.slice(globalp.length), type: "global" };
        }
        const local = prefix.local === void 0 ? "#" : prefix.local;
        if (local !== separator && key.startsWith(local)) {
          return { key: key.slice(local.length), type: "local" };
        }
        const root = prefix.root === void 0 ? "/" : prefix.root;
        if (root !== separator && key.startsWith(root)) {
          return { key: key.slice(root.length), type: "value", root: true };
        }
      }
      return { key, type: "value" };
    };
    internals.ancestor = function(key, separator) {
      if (!separator) {
        return [1, 0];
      }
      if (key[0] !== separator) {
        return [1, 0];
      }
      if (key[1] !== separator) {
        return [0, 1];
      }
      let i = 2;
      while (key[i] === separator) {
        ++i;
      }
      return [i - 1, i];
    };
    exports.toSibling = 0;
    exports.toParent = 1;
    exports.Manager = class {
      constructor() {
        this.refs = [];
      }
      register(source, target) {
        if (!source) {
          return;
        }
        target = target === void 0 ? exports.toParent : target;
        if (Array.isArray(source)) {
          for (const ref of source) {
            this.register(ref, target);
          }
          return;
        }
        if (Common.isSchema(source)) {
          for (const item of source._refs.refs) {
            if (item.ancestor - target >= 0) {
              this.refs.push({ ancestor: item.ancestor - target, root: item.root });
            }
          }
          return;
        }
        if (exports.isRef(source) && source.type === "value" && source.ancestor - target >= 0) {
          this.refs.push({ ancestor: source.ancestor - target, root: source.root });
        }
        Template = Template || require_template();
        if (Template.isTemplate(source)) {
          this.register(source.refs(), target);
        }
      }
      get length() {
        return this.refs.length;
      }
      clone() {
        const copy = new exports.Manager();
        copy.refs = Clone(this.refs);
        return copy;
      }
      reset() {
        this.refs = [];
      }
      roots() {
        return this.refs.filter((ref) => !ref.ancestor).map((ref) => ref.root);
      }
    };
  }
});

// node_modules/joi/lib/template.js
var require_template = __commonJS({
  "node_modules/joi/lib/template.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var Assert = require_assert();
    var Clone = require_clone();
    var EscapeHtml = require_escapeHtml();
    var Formula = require_lib2();
    var Common = require_common();
    var Errors = require_errors2();
    var Ref = require_ref();
    var internals = {
      symbol: Symbol("template"),
      opens: new Array(1e3).join("\0"),
      closes: new Array(1e3).join(""),
      dateFormat: {
        date: Date.prototype.toDateString,
        iso: Date.prototype.toISOString,
        string: Date.prototype.toString,
        time: Date.prototype.toTimeString,
        utc: Date.prototype.toUTCString
      }
    };
    module.exports = exports = internals.Template = class {
      constructor(source, options) {
        Assert(typeof source === "string", "Template source must be a string");
        Assert(!source.includes("\0") && !source.includes(""), "Template source cannot contain reserved control characters");
        this.source = source;
        this.rendered = source;
        this._template = null;
        if (options) {
          const { functions, ...opts } = options;
          this._settings = Object.keys(opts).length ? Clone(opts) : void 0;
          this._functions = functions;
          if (this._functions) {
            Assert(Object.keys(this._functions).every((key) => typeof key === "string"), "Functions keys must be strings");
            Assert(Object.values(this._functions).every((key) => typeof key === "function"), "Functions values must be functions");
          }
        } else {
          this._settings = void 0;
          this._functions = void 0;
        }
        this._parse();
      }
      _parse() {
        if (!this.source.includes("{")) {
          return;
        }
        const encoded = internals.encode(this.source);
        const parts = internals.split(encoded);
        let refs = false;
        const processed = [];
        const head = parts.shift();
        if (head) {
          processed.push(head);
        }
        for (const part of parts) {
          const raw = part[0] !== "{";
          const ender = raw ? "}" : "}}";
          const end = part.indexOf(ender);
          if (end === -1 || // Ignore non-matching closing
          part[1] === "{") {
            processed.push(`{${internals.decode(part)}`);
            continue;
          }
          let variable = part.slice(raw ? 0 : 1, end);
          const wrapped = variable[0] === ":";
          if (wrapped) {
            variable = variable.slice(1);
          }
          const dynamic = this._ref(internals.decode(variable), { raw, wrapped });
          processed.push(dynamic);
          if (typeof dynamic !== "string") {
            refs = true;
          }
          const rest = part.slice(end + ender.length);
          if (rest) {
            processed.push(internals.decode(rest));
          }
        }
        if (!refs) {
          this.rendered = processed.join("");
          return;
        }
        this._template = processed;
      }
      static date(date, prefs) {
        return internals.dateFormat[prefs.dateFormat].call(date);
      }
      describe(options = {}) {
        if (!this._settings && options.compact) {
          return this.source;
        }
        const desc = { template: this.source };
        if (this._settings) {
          desc.options = this._settings;
        }
        if (this._functions) {
          desc.functions = this._functions;
        }
        return desc;
      }
      static build(desc) {
        return new internals.Template(desc.template, desc.options || desc.functions ? { ...desc.options, functions: desc.functions } : void 0);
      }
      isDynamic() {
        return !!this._template;
      }
      static isTemplate(template) {
        return template ? !!template[Common.symbols.template] : false;
      }
      refs() {
        if (!this._template) {
          return;
        }
        const refs = [];
        for (const part of this._template) {
          if (typeof part !== "string") {
            refs.push(...part.refs);
          }
        }
        return refs;
      }
      resolve(value, state, prefs, local) {
        if (this._template && this._template.length === 1) {
          return this._part(
            this._template[0],
            /* context -> [*/
            value,
            state,
            prefs,
            local,
            {}
            /*] */
          );
        }
        return this.render(value, state, prefs, local);
      }
      _part(part, ...args) {
        if (part.ref) {
          return part.ref.resolve(...args);
        }
        return part.formula.evaluate(args);
      }
      render(value, state, prefs, local, options = {}) {
        if (!this.isDynamic()) {
          return this.rendered;
        }
        const parts = [];
        for (const part of this._template) {
          if (typeof part === "string") {
            parts.push(part);
          } else {
            const rendered = this._part(
              part,
              /* context -> [*/
              value,
              state,
              prefs,
              local,
              options
              /*] */
            );
            const string = internals.stringify(rendered, value, state, prefs, local, options);
            if (string !== void 0) {
              const result = part.raw || (options.errors && options.errors.escapeHtml) === false ? string : EscapeHtml(string);
              parts.push(internals.wrap(result, part.wrapped && prefs.errors.wrap.label));
            }
          }
        }
        return parts.join("");
      }
      _ref(content, { raw, wrapped }) {
        const refs = [];
        const reference = /* @__PURE__ */ __name((variable) => {
          const ref = Ref.create(variable, this._settings);
          refs.push(ref);
          return (context) => {
            const resolved = ref.resolve(...context);
            return resolved !== void 0 ? resolved : null;
          };
        }, "reference");
        try {
          const functions = this._functions ? { ...internals.functions, ...this._functions } : internals.functions;
          var formula = new Formula.Parser(content, { reference, functions, constants: internals.constants });
        } catch (err) {
          err.message = `Invalid template variable "${content}" fails due to: ${err.message}`;
          throw err;
        }
        if (formula.single) {
          if (formula.single.type === "reference") {
            const ref = refs[0];
            return { ref, raw, refs, wrapped: wrapped || ref.type === "local" && ref.key === "label" };
          }
          return internals.stringify(formula.single.value);
        }
        return { formula, raw, refs };
      }
      toString() {
        return this.source;
      }
    };
    internals.Template.prototype[Common.symbols.template] = true;
    internals.Template.prototype.isImmutable = true;
    internals.encode = function(string) {
      return string.replace(/\\(\{+)/g, ($0, $1) => {
        return internals.opens.slice(0, $1.length);
      }).replace(/\\(\}+)/g, ($0, $1) => {
        return internals.closes.slice(0, $1.length);
      });
    };
    internals.decode = function(string) {
      return string.replace(/\u0000/g, "{").replace(/\u0001/g, "}");
    };
    internals.split = function(string) {
      const parts = [];
      let current = "";
      for (let i = 0; i < string.length; ++i) {
        const char = string[i];
        if (char === "{") {
          let next = "";
          while (i + 1 < string.length && string[i + 1] === "{") {
            next += "{";
            ++i;
          }
          parts.push(current);
          current = next;
        } else {
          current += char;
        }
      }
      parts.push(current);
      return parts;
    };
    internals.wrap = function(value, ends) {
      if (!ends) {
        return value;
      }
      if (ends.length === 1) {
        return `${ends}${value}${ends}`;
      }
      return `${ends[0]}${value}${ends[1]}`;
    };
    internals.stringify = function(value, original, state, prefs, local, options = {}) {
      const type = typeof value;
      const wrap = prefs && prefs.errors && prefs.errors.wrap || {};
      let skipWrap = false;
      if (Ref.isRef(value) && value.render) {
        skipWrap = value.in;
        value = value.resolve(original, state, prefs, local, { in: value.in, ...options });
      }
      if (value === null) {
        return "null";
      }
      if (type === "string") {
        return internals.wrap(value, options.arrayItems && wrap.string);
      }
      if (type === "number" || type === "function" || type === "symbol") {
        return value.toString();
      }
      if (type !== "object") {
        return JSON.stringify(value);
      }
      if (value instanceof Date) {
        return internals.Template.date(value, prefs);
      }
      if (value instanceof Map) {
        const pairs = [];
        for (const [key, sym] of value.entries()) {
          pairs.push(`${key.toString()} -> ${sym.toString()}`);
        }
        value = pairs;
      }
      if (!Array.isArray(value)) {
        return value.toString();
      }
      const values = [];
      for (const item of value) {
        values.push(internals.stringify(item, original, state, prefs, local, { arrayItems: true, ...options }));
      }
      return internals.wrap(values.join(", "), !skipWrap && wrap.array);
    };
    internals.constants = {
      true: true,
      false: false,
      null: null,
      second: 1e3,
      minute: 60 * 1e3,
      hour: 60 * 60 * 1e3,
      day: 24 * 60 * 60 * 1e3
    };
    internals.functions = {
      if(condition, then, otherwise) {
        return condition ? then : otherwise;
      },
      length(item) {
        if (typeof item === "string") {
          return item.length;
        }
        if (!item || typeof item !== "object") {
          return null;
        }
        if (Array.isArray(item)) {
          return item.length;
        }
        return Object.keys(item).length;
      },
      msg(code) {
        const [value, state, prefs, local, options] = this;
        const messages = options.messages;
        if (!messages) {
          return "";
        }
        const template = Errors.template(value, messages[0], code, state, prefs) || Errors.template(value, messages[1], code, state, prefs);
        if (!template) {
          return "";
        }
        return template.render(value, state, prefs, local, options);
      },
      number(value) {
        if (typeof value === "number") {
          return value;
        }
        if (typeof value === "string") {
          return parseFloat(value);
        }
        if (typeof value === "boolean") {
          return value ? 1 : 0;
        }
        if (value instanceof Date) {
          return value.getTime();
        }
        return null;
      }
    };
  }
});

// node_modules/joi/lib/messages.js
var require_messages = __commonJS({
  "node_modules/joi/lib/messages.js"(exports) {
    "use strict";
    init_cjs_shim();
    var Assert = require_assert();
    var Clone = require_clone();
    var Template = require_template();
    exports.compile = function(messages, target) {
      if (typeof messages === "string") {
        Assert(!target, "Cannot set single message string");
        return new Template(messages);
      }
      if (Template.isTemplate(messages)) {
        Assert(!target, "Cannot set single message template");
        return messages;
      }
      Assert(typeof messages === "object" && !Array.isArray(messages), "Invalid message options");
      target = target ? Clone(target) : {};
      for (let code in messages) {
        const message = messages[code];
        if (code === "root" || Template.isTemplate(message)) {
          target[code] = message;
          continue;
        }
        if (typeof message === "string") {
          target[code] = new Template(message);
          continue;
        }
        Assert(typeof message === "object" && !Array.isArray(message), "Invalid message for", code);
        const language = code;
        target[language] = target[language] || {};
        for (code in message) {
          const localized = message[code];
          if (code === "root" || Template.isTemplate(localized)) {
            target[language][code] = localized;
            continue;
          }
          Assert(typeof localized === "string", "Invalid message for", code, "in", language);
          target[language][code] = new Template(localized);
        }
      }
      return target;
    };
    exports.decompile = function(messages) {
      const target = {};
      for (let code in messages) {
        const message = messages[code];
        if (code === "root") {
          target.root = message;
          continue;
        }
        if (Template.isTemplate(message)) {
          target[code] = message.describe({ compact: true });
          continue;
        }
        const language = code;
        target[language] = {};
        for (code in message) {
          const localized = message[code];
          if (code === "root") {
            target[language].root = localized;
            continue;
          }
          target[language][code] = localized.describe({ compact: true });
        }
      }
      return target;
    };
    exports.merge = function(base, extended) {
      if (!base) {
        return exports.compile(extended);
      }
      if (!extended) {
        return base;
      }
      if (typeof extended === "string") {
        return new Template(extended);
      }
      if (Template.isTemplate(extended)) {
        return extended;
      }
      const target = Clone(base);
      for (let code in extended) {
        const message = extended[code];
        if (code === "root" || Template.isTemplate(message)) {
          target[code] = message;
          continue;
        }
        if (typeof message === "string") {
          target[code] = new Template(message);
          continue;
        }
        Assert(typeof message === "object" && !Array.isArray(message), "Invalid message for", code);
        const language = code;
        target[language] = target[language] || {};
        for (code in message) {
          const localized = message[code];
          if (code === "root" || Template.isTemplate(localized)) {
            target[language][code] = localized;
            continue;
          }
          Assert(typeof localized === "string", "Invalid message for", code, "in", language);
          target[language][code] = new Template(localized);
        }
      }
      return target;
    };
  }
});

// node_modules/joi/lib/common.js
var require_common = __commonJS({
  "node_modules/joi/lib/common.js"(exports) {
    "use strict";
    init_cjs_shim();
    var Assert = require_assert();
    var AssertError = require_error();
    var Pkg = require_package();
    var Messages;
    var Schemas;
    var internals = {
      isoDate: /^(?:[-+]\d{2})?(?:\d{4}(?!\d{2}\b))(?:(-?)(?:(?:0[1-9]|1[0-2])(?:\1(?:[12]\d|0[1-9]|3[01]))?|W(?:[0-4]\d|5[0-2])(?:-?[1-7])?|(?:00[1-9]|0[1-9]\d|[12]\d{2}|3(?:[0-5]\d|6[1-6])))(?![T]$|[T][\d]+Z$)(?:[T\s](?:(?:(?:[01]\d|2[0-3])(?:(:?)[0-5]\d)?|24\:?00)(?:[.,]\d+(?!:))?)(?:\2[0-5]\d(?:[.,]\d+)?)?(?:[Z]|(?:[+-])(?:[01]\d|2[0-3])(?::?[0-5]\d)?)?)?)?$/
    };
    exports.version = Pkg.version;
    exports.defaults = {
      abortEarly: true,
      allowUnknown: false,
      artifacts: false,
      cache: true,
      context: null,
      convert: true,
      dateFormat: "iso",
      errors: {
        escapeHtml: false,
        label: "path",
        language: null,
        render: true,
        stack: false,
        wrap: {
          label: '"',
          array: "[]"
        }
      },
      externals: true,
      messages: {},
      nonEnumerables: false,
      noDefaults: false,
      presence: "optional",
      skipFunctions: false,
      stripUnknown: false,
      warnings: false
    };
    exports.symbols = {
      any: Symbol.for("@hapi/joi/schema"),
      // Used to internally identify any-based types (shared with other joi versions)
      arraySingle: Symbol("arraySingle"),
      deepDefault: Symbol("deepDefault"),
      errors: Symbol("errors"),
      literal: Symbol("literal"),
      override: Symbol("override"),
      parent: Symbol("parent"),
      prefs: Symbol("prefs"),
      ref: Symbol("ref"),
      template: Symbol("template"),
      values: Symbol("values")
    };
    exports.assertOptions = function(options, keys, name = "Options") {
      Assert(options && typeof options === "object" && !Array.isArray(options), "Options must be of type object");
      const unknownKeys = Object.keys(options).filter((k) => !keys.includes(k));
      Assert(unknownKeys.length === 0, `${name} contain unknown keys: ${unknownKeys}`);
    };
    exports.checkPreferences = function(prefs) {
      Schemas = Schemas || require_schemas();
      const result = Schemas.preferences.validate(prefs);
      if (result.error) {
        throw new AssertError([result.error.details[0].message]);
      }
    };
    exports.compare = function(a, b, operator) {
      switch (operator) {
        case "=":
          return a === b;
        case ">":
          return a > b;
        case "<":
          return a < b;
        case ">=":
          return a >= b;
        case "<=":
          return a <= b;
      }
    };
    exports.default = function(value, defaultValue) {
      return value === void 0 ? defaultValue : value;
    };
    exports.isIsoDate = function(date) {
      return internals.isoDate.test(date);
    };
    exports.isNumber = function(value) {
      return typeof value === "number" && !isNaN(value);
    };
    exports.isResolvable = function(obj) {
      if (!obj) {
        return false;
      }
      return obj[exports.symbols.ref] || obj[exports.symbols.template];
    };
    exports.isSchema = function(schema, options = {}) {
      const any = schema && schema[exports.symbols.any];
      if (!any) {
        return false;
      }
      Assert(options.legacy || any.version === exports.version, "Cannot mix different versions of joi schemas");
      return true;
    };
    exports.isValues = function(obj) {
      return obj[exports.symbols.values];
    };
    exports.limit = function(value) {
      return Number.isSafeInteger(value) && value >= 0;
    };
    exports.preferences = function(target, source) {
      Messages = Messages || require_messages();
      target = target || {};
      source = source || {};
      const merged = Object.assign({}, target, source);
      if (source.errors && target.errors) {
        merged.errors = Object.assign({}, target.errors, source.errors);
        merged.errors.wrap = Object.assign({}, target.errors.wrap, source.errors.wrap);
      }
      if (source.messages) {
        merged.messages = Messages.compile(source.messages, target.messages);
      }
      delete merged[exports.symbols.prefs];
      return merged;
    };
    exports.tryWithPath = function(fn, key, options = {}) {
      try {
        return fn();
      } catch (err) {
        if (err.path !== void 0) {
          err.path = key + "." + err.path;
        } else {
          err.path = key;
        }
        if (options.append) {
          err.message = `${err.message} (${err.path})`;
        }
        throw err;
      }
    };
    exports.validateArg = function(value, label, { assert, message }) {
      if (exports.isSchema(assert)) {
        const result = assert.validate(value);
        if (!result.error) {
          return;
        }
        return result.error.message;
      } else if (!assert(value)) {
        return label ? `${label} ${message}` : message;
      }
    };
    exports.verifyFlat = function(args, method) {
      for (const arg of args) {
        Assert(!Array.isArray(arg), "Method no longer accepts array arguments:", method);
      }
    };
  }
});

// node_modules/joi/lib/cache.js
var require_cache2 = __commonJS({
  "node_modules/joi/lib/cache.js"(exports) {
    "use strict";
    init_cjs_shim();
    var Assert = require_assert();
    var Clone = require_clone();
    var Common = require_common();
    var internals = {
      max: 1e3,
      supported: /* @__PURE__ */ new Set(["undefined", "boolean", "number", "string"])
    };
    exports.provider = {
      provision(options) {
        return new internals.Cache(options);
      }
    };
    internals.Cache = class {
      constructor(options = {}) {
        Common.assertOptions(options, ["max"]);
        Assert(options.max === void 0 || options.max && options.max > 0 && isFinite(options.max), "Invalid max cache size");
        this._max = options.max || internals.max;
        this._map = /* @__PURE__ */ new Map();
        this._list = new internals.List();
      }
      get length() {
        return this._map.size;
      }
      set(key, value) {
        if (key !== null && !internals.supported.has(typeof key)) {
          return;
        }
        let node = this._map.get(key);
        if (node) {
          node.value = value;
          this._list.first(node);
          return;
        }
        node = this._list.unshift({ key, value });
        this._map.set(key, node);
        this._compact();
      }
      get(key) {
        const node = this._map.get(key);
        if (node) {
          this._list.first(node);
          return Clone(node.value);
        }
      }
      _compact() {
        if (this._map.size > this._max) {
          const node = this._list.pop();
          this._map.delete(node.key);
        }
      }
    };
    internals.List = class {
      constructor() {
        this.tail = null;
        this.head = null;
      }
      unshift(node) {
        node.next = null;
        node.prev = this.head;
        if (this.head) {
          this.head.next = node;
        }
        this.head = node;
        if (!this.tail) {
          this.tail = node;
        }
        return node;
      }
      first(node) {
        if (node === this.head) {
          return;
        }
        this._remove(node);
        this.unshift(node);
      }
      pop() {
        return this._remove(this.tail);
      }
      _remove(node) {
        const { next, prev } = node;
        next.prev = prev;
        if (prev) {
          prev.next = next;
        }
        if (node === this.tail) {
          this.tail = next;
        }
        node.prev = null;
        node.next = null;
        return node;
      }
    };
  }
});

// node_modules/joi/lib/compile.js
var require_compile = __commonJS({
  "node_modules/joi/lib/compile.js"(exports) {
    "use strict";
    init_cjs_shim();
    var Assert = require_assert();
    var Common = require_common();
    var Ref = require_ref();
    var internals = {};
    exports.schema = function(Joi2, config, options = {}) {
      Common.assertOptions(options, ["appendPath", "override"]);
      try {
        return internals.schema(Joi2, config, options);
      } catch (err) {
        if (options.appendPath && err.path !== void 0) {
          err.message = `${err.message} (${err.path})`;
        }
        throw err;
      }
    };
    internals.schema = function(Joi2, config, options) {
      Assert(config !== void 0, "Invalid undefined schema");
      if (Array.isArray(config)) {
        Assert(config.length, "Invalid empty array schema");
        if (config.length === 1) {
          config = config[0];
        }
      }
      const valid = /* @__PURE__ */ __name((base, ...values) => {
        if (options.override !== false) {
          return base.valid(Joi2.override, ...values);
        }
        return base.valid(...values);
      }, "valid");
      if (internals.simple(config)) {
        return valid(Joi2, config);
      }
      if (typeof config === "function") {
        return Joi2.custom(config);
      }
      Assert(typeof config === "object", "Invalid schema content:", typeof config);
      if (Common.isResolvable(config)) {
        return valid(Joi2, config);
      }
      if (Common.isSchema(config)) {
        return config;
      }
      if (Array.isArray(config)) {
        for (const item of config) {
          if (!internals.simple(item)) {
            return Joi2.alternatives().try(...config);
          }
        }
        return valid(Joi2, ...config);
      }
      if (config instanceof RegExp) {
        return Joi2.string().regex(config);
      }
      if (config instanceof Date) {
        return valid(Joi2.date(), config);
      }
      Assert(Object.getPrototypeOf(config) === Object.getPrototypeOf({}), "Schema can only contain plain objects");
      return Joi2.object().keys(config);
    };
    exports.ref = function(id, options) {
      return Ref.isRef(id) ? id : Ref.create(id, options);
    };
    exports.compile = function(root, schema, options = {}) {
      Common.assertOptions(options, ["legacy"]);
      const any = schema && schema[Common.symbols.any];
      if (any) {
        Assert(options.legacy || any.version === Common.version, "Cannot mix different versions of joi schemas:", any.version, Common.version);
        return schema;
      }
      if (typeof schema !== "object" || !options.legacy) {
        return exports.schema(root, schema, { appendPath: true });
      }
      const compiler = internals.walk(schema);
      if (!compiler) {
        return exports.schema(root, schema, { appendPath: true });
      }
      return compiler.compile(compiler.root, schema);
    };
    internals.walk = function(schema) {
      if (typeof schema !== "object") {
        return null;
      }
      if (Array.isArray(schema)) {
        for (const item of schema) {
          const compiler = internals.walk(item);
          if (compiler) {
            return compiler;
          }
        }
        return null;
      }
      const any = schema[Common.symbols.any];
      if (any) {
        return { root: schema[any.root], compile: any.compile };
      }
      Assert(Object.getPrototypeOf(schema) === Object.getPrototypeOf({}), "Schema can only contain plain objects");
      for (const key in schema) {
        const compiler = internals.walk(schema[key]);
        if (compiler) {
          return compiler;
        }
      }
      return null;
    };
    internals.simple = function(value) {
      return value === null || ["boolean", "string", "number"].includes(typeof value);
    };
    exports.when = function(schema, condition, options) {
      if (options === void 0) {
        Assert(condition && typeof condition === "object", "Missing options");
        options = condition;
        condition = Ref.create(".");
      }
      if (Array.isArray(options)) {
        options = { switch: options };
      }
      Common.assertOptions(options, ["is", "not", "then", "otherwise", "switch", "break"]);
      if (Common.isSchema(condition)) {
        Assert(options.is === void 0, '"is" can not be used with a schema condition');
        Assert(options.not === void 0, '"not" can not be used with a schema condition');
        Assert(options.switch === void 0, '"switch" can not be used with a schema condition');
        return internals.condition(schema, { is: condition, then: options.then, otherwise: options.otherwise, break: options.break });
      }
      Assert(Ref.isRef(condition) || typeof condition === "string", "Invalid condition:", condition);
      Assert(options.not === void 0 || options.is === void 0, 'Cannot combine "is" with "not"');
      if (options.switch === void 0) {
        let rule2 = options;
        if (options.not !== void 0) {
          rule2 = { is: options.not, then: options.otherwise, otherwise: options.then, break: options.break };
        }
        let is = rule2.is !== void 0 ? schema.$_compile(rule2.is) : schema.$_root.invalid(null, false, 0, "").required();
        Assert(rule2.then !== void 0 || rule2.otherwise !== void 0, 'options must have at least one of "then", "otherwise", or "switch"');
        Assert(rule2.break === void 0 || rule2.then === void 0 || rule2.otherwise === void 0, "Cannot specify then, otherwise, and break all together");
        if (options.is !== void 0 && !Ref.isRef(options.is) && !Common.isSchema(options.is)) {
          is = is.required();
        }
        return internals.condition(schema, { ref: exports.ref(condition), is, then: rule2.then, otherwise: rule2.otherwise, break: rule2.break });
      }
      Assert(Array.isArray(options.switch), '"switch" must be an array');
      Assert(options.is === void 0, 'Cannot combine "switch" with "is"');
      Assert(options.not === void 0, 'Cannot combine "switch" with "not"');
      Assert(options.then === void 0, 'Cannot combine "switch" with "then"');
      const rule = {
        ref: exports.ref(condition),
        switch: [],
        break: options.break
      };
      for (let i = 0; i < options.switch.length; ++i) {
        const test = options.switch[i];
        const last = i === options.switch.length - 1;
        Common.assertOptions(test, last ? ["is", "then", "otherwise"] : ["is", "then"]);
        Assert(test.is !== void 0, 'Switch statement missing "is"');
        Assert(test.then !== void 0, 'Switch statement missing "then"');
        const item = {
          is: schema.$_compile(test.is),
          then: schema.$_compile(test.then)
        };
        if (!Ref.isRef(test.is) && !Common.isSchema(test.is)) {
          item.is = item.is.required();
        }
        if (last) {
          Assert(options.otherwise === void 0 || test.otherwise === void 0, 'Cannot specify "otherwise" inside and outside a "switch"');
          const otherwise = options.otherwise !== void 0 ? options.otherwise : test.otherwise;
          if (otherwise !== void 0) {
            Assert(rule.break === void 0, "Cannot specify both otherwise and break");
            item.otherwise = schema.$_compile(otherwise);
          }
        }
        rule.switch.push(item);
      }
      return rule;
    };
    internals.condition = function(schema, condition) {
      for (const key of ["then", "otherwise"]) {
        if (condition[key] === void 0) {
          delete condition[key];
        } else {
          condition[key] = schema.$_compile(condition[key]);
        }
      }
      return condition;
    };
  }
});

// node_modules/joi/lib/extend.js
var require_extend = __commonJS({
  "node_modules/joi/lib/extend.js"(exports) {
    "use strict";
    init_cjs_shim();
    var Assert = require_assert();
    var Clone = require_clone();
    var Common = require_common();
    var Messages = require_messages();
    var internals = {};
    exports.type = function(from, options) {
      const base = Object.getPrototypeOf(from);
      const prototype = Clone(base);
      const schema = from._assign(Object.create(prototype));
      const def = Object.assign({}, options);
      delete def.base;
      prototype._definition = def;
      const parent = base._definition || {};
      def.messages = Messages.merge(parent.messages, def.messages);
      def.properties = Object.assign({}, parent.properties, def.properties);
      schema.type = def.type;
      def.flags = Object.assign({}, parent.flags, def.flags);
      const terms = Object.assign({}, parent.terms);
      if (def.terms) {
        for (const name in def.terms) {
          const term = def.terms[name];
          Assert(schema.$_terms[name] === void 0, "Invalid term override for", def.type, name);
          schema.$_terms[name] = term.init;
          terms[name] = term;
        }
      }
      def.terms = terms;
      if (!def.args) {
        def.args = parent.args;
      }
      def.prepare = internals.prepare(def.prepare, parent.prepare);
      if (def.coerce) {
        if (typeof def.coerce === "function") {
          def.coerce = { method: def.coerce };
        }
        if (def.coerce.from && !Array.isArray(def.coerce.from)) {
          def.coerce = { method: def.coerce.method, from: [].concat(def.coerce.from) };
        }
      }
      def.coerce = internals.coerce(def.coerce, parent.coerce);
      def.validate = internals.validate(def.validate, parent.validate);
      const rules = Object.assign({}, parent.rules);
      if (def.rules) {
        for (const name in def.rules) {
          const rule = def.rules[name];
          Assert(typeof rule === "object", "Invalid rule definition for", def.type, name);
          let method = rule.method;
          if (method === void 0) {
            method = /* @__PURE__ */ __name(function() {
              return this.$_addRule(name);
            }, "method");
          }
          if (method) {
            Assert(!prototype[name], "Rule conflict in", def.type, name);
            prototype[name] = method;
          }
          Assert(!rules[name], "Rule conflict in", def.type, name);
          rules[name] = rule;
          if (rule.alias) {
            const aliases = [].concat(rule.alias);
            for (const alias of aliases) {
              prototype[alias] = rule.method;
            }
          }
          if (rule.args) {
            rule.argsByName = /* @__PURE__ */ new Map();
            rule.args = rule.args.map((arg) => {
              if (typeof arg === "string") {
                arg = { name: arg };
              }
              Assert(!rule.argsByName.has(arg.name), "Duplicated argument name", arg.name);
              if (Common.isSchema(arg.assert)) {
                arg.assert = arg.assert.strict().label(arg.name);
              }
              rule.argsByName.set(arg.name, arg);
              return arg;
            });
          }
        }
      }
      def.rules = rules;
      const modifiers = Object.assign({}, parent.modifiers);
      if (def.modifiers) {
        for (const name in def.modifiers) {
          Assert(!prototype[name], "Rule conflict in", def.type, name);
          const modifier = def.modifiers[name];
          Assert(typeof modifier === "function", "Invalid modifier definition for", def.type, name);
          const method = /* @__PURE__ */ __name(function(arg) {
            return this.rule({ [name]: arg });
          }, "method");
          prototype[name] = method;
          modifiers[name] = modifier;
        }
      }
      def.modifiers = modifiers;
      if (def.overrides) {
        prototype._super = base;
        schema.$_super = {};
        for (const override in def.overrides) {
          Assert(base[override], "Cannot override missing", override);
          def.overrides[override][Common.symbols.parent] = base[override];
          schema.$_super[override] = base[override].bind(schema);
        }
        Object.assign(prototype, def.overrides);
      }
      def.cast = Object.assign({}, parent.cast, def.cast);
      const manifest = Object.assign({}, parent.manifest, def.manifest);
      manifest.build = internals.build(def.manifest && def.manifest.build, parent.manifest && parent.manifest.build);
      def.manifest = manifest;
      def.rebuild = internals.rebuild(def.rebuild, parent.rebuild);
      return schema;
    };
    internals.build = function(child, parent) {
      if (!child || !parent) {
        return child || parent;
      }
      return function(obj, desc) {
        return parent(child(obj, desc), desc);
      };
    };
    internals.coerce = function(child, parent) {
      if (!child || !parent) {
        return child || parent;
      }
      return {
        from: child.from && parent.from ? [.../* @__PURE__ */ new Set([...child.from, ...parent.from])] : null,
        method(value, helpers) {
          let coerced;
          if (!parent.from || parent.from.includes(typeof value)) {
            coerced = parent.method(value, helpers);
            if (coerced) {
              if (coerced.errors || coerced.value === void 0) {
                return coerced;
              }
              value = coerced.value;
            }
          }
          if (!child.from || child.from.includes(typeof value)) {
            const own = child.method(value, helpers);
            if (own) {
              return own;
            }
          }
          return coerced;
        }
      };
    };
    internals.prepare = function(child, parent) {
      if (!child || !parent) {
        return child || parent;
      }
      return function(value, helpers) {
        const prepared = child(value, helpers);
        if (prepared) {
          if (prepared.errors || prepared.value === void 0) {
            return prepared;
          }
          value = prepared.value;
        }
        return parent(value, helpers) || prepared;
      };
    };
    internals.rebuild = function(child, parent) {
      if (!child || !parent) {
        return child || parent;
      }
      return function(schema) {
        parent(schema);
        child(schema);
      };
    };
    internals.validate = function(child, parent) {
      if (!child || !parent) {
        return child || parent;
      }
      return function(value, helpers) {
        const result = parent(value, helpers);
        if (result) {
          if (result.errors && (!Array.isArray(result.errors) || result.errors.length)) {
            return result;
          }
          value = result.value;
        }
        return child(value, helpers) || result;
      };
    };
  }
});

// node_modules/joi/lib/manifest.js
var require_manifest = __commonJS({
  "node_modules/joi/lib/manifest.js"(exports) {
    "use strict";
    init_cjs_shim();
    var Assert = require_assert();
    var Clone = require_clone();
    var Common = require_common();
    var Messages = require_messages();
    var Ref = require_ref();
    var Template = require_template();
    var Schemas;
    var internals = {};
    exports.describe = function(schema) {
      const def = schema._definition;
      const desc = {
        type: schema.type,
        flags: {},
        rules: []
      };
      for (const flag in schema._flags) {
        if (flag[0] !== "_") {
          desc.flags[flag] = internals.describe(schema._flags[flag]);
        }
      }
      if (!Object.keys(desc.flags).length) {
        delete desc.flags;
      }
      if (schema._preferences) {
        desc.preferences = Clone(schema._preferences, { shallow: ["messages"] });
        delete desc.preferences[Common.symbols.prefs];
        if (desc.preferences.messages) {
          desc.preferences.messages = Messages.decompile(desc.preferences.messages);
        }
      }
      if (schema._valids) {
        desc.allow = schema._valids.describe();
      }
      if (schema._invalids) {
        desc.invalid = schema._invalids.describe();
      }
      for (const rule of schema._rules) {
        const ruleDef = def.rules[rule.name];
        if (ruleDef.manifest === false) {
          continue;
        }
        const item = { name: rule.name };
        for (const custom in def.modifiers) {
          if (rule[custom] !== void 0) {
            item[custom] = internals.describe(rule[custom]);
          }
        }
        if (rule.args) {
          item.args = {};
          for (const key in rule.args) {
            const arg = rule.args[key];
            if (key === "options" && !Object.keys(arg).length) {
              continue;
            }
            item.args[key] = internals.describe(arg, { assign: key });
          }
          if (!Object.keys(item.args).length) {
            delete item.args;
          }
        }
        desc.rules.push(item);
      }
      if (!desc.rules.length) {
        delete desc.rules;
      }
      for (const term in schema.$_terms) {
        if (term[0] === "_") {
          continue;
        }
        Assert(!desc[term], "Cannot describe schema due to internal name conflict with", term);
        const items = schema.$_terms[term];
        if (!items) {
          continue;
        }
        if (items instanceof Map) {
          if (items.size) {
            desc[term] = [...items.entries()];
          }
          continue;
        }
        if (Common.isValues(items)) {
          desc[term] = items.describe();
          continue;
        }
        Assert(def.terms[term], "Term", term, "missing configuration");
        const manifest = def.terms[term].manifest;
        const mapped = typeof manifest === "object";
        if (!items.length && !mapped) {
          continue;
        }
        const normalized = [];
        for (const item of items) {
          normalized.push(internals.describe(item));
        }
        if (mapped) {
          const { from, to } = manifest.mapped;
          desc[term] = {};
          for (const item of normalized) {
            desc[term][item[to]] = item[from];
          }
          continue;
        }
        if (manifest === "single") {
          Assert(normalized.length === 1, "Term", term, "contains more than one item");
          desc[term] = normalized[0];
          continue;
        }
        desc[term] = normalized;
      }
      internals.validate(schema.$_root, desc);
      return desc;
    };
    internals.describe = function(item, options = {}) {
      if (Array.isArray(item)) {
        return item.map(internals.describe);
      }
      if (item === Common.symbols.deepDefault) {
        return { special: "deep" };
      }
      if (typeof item !== "object" || item === null) {
        return item;
      }
      if (options.assign === "options") {
        return Clone(item);
      }
      if (Buffer && Buffer.isBuffer(item)) {
        return { buffer: item.toString("binary") };
      }
      if (item instanceof Date) {
        return item.toISOString();
      }
      if (item instanceof Error) {
        return item;
      }
      if (item instanceof RegExp) {
        if (options.assign === "regex") {
          return item.toString();
        }
        return { regex: item.toString() };
      }
      if (item[Common.symbols.literal]) {
        return { function: item.literal };
      }
      if (typeof item.describe === "function") {
        if (options.assign === "ref") {
          return item.describe().ref;
        }
        return item.describe();
      }
      const normalized = {};
      for (const key in item) {
        const value = item[key];
        if (value === void 0) {
          continue;
        }
        normalized[key] = internals.describe(value, { assign: key });
      }
      return normalized;
    };
    exports.build = function(joi, desc) {
      const builder = new internals.Builder(joi);
      return builder.parse(desc);
    };
    internals.Builder = class {
      constructor(joi) {
        this.joi = joi;
      }
      parse(desc) {
        internals.validate(this.joi, desc);
        let schema = this.joi[desc.type]()._bare();
        const def = schema._definition;
        if (desc.flags) {
          for (const flag in desc.flags) {
            const setter = def.flags[flag] && def.flags[flag].setter || flag;
            Assert(typeof schema[setter] === "function", "Invalid flag", flag, "for type", desc.type);
            schema = schema[setter](this.build(desc.flags[flag]));
          }
        }
        if (desc.preferences) {
          schema = schema.preferences(this.build(desc.preferences));
        }
        if (desc.allow) {
          schema = schema.allow(...this.build(desc.allow));
        }
        if (desc.invalid) {
          schema = schema.invalid(...this.build(desc.invalid));
        }
        if (desc.rules) {
          for (const rule of desc.rules) {
            Assert(typeof schema[rule.name] === "function", "Invalid rule", rule.name, "for type", desc.type);
            const args = [];
            if (rule.args) {
              const built = {};
              for (const key in rule.args) {
                built[key] = this.build(rule.args[key], { assign: key });
              }
              const keys = Object.keys(built);
              const definition = def.rules[rule.name].args;
              if (definition) {
                Assert(keys.length <= definition.length, "Invalid number of arguments for", desc.type, rule.name, "(expected up to", definition.length, ", found", keys.length, ")");
                for (const { name } of definition) {
                  args.push(built[name]);
                }
              } else {
                Assert(keys.length === 1, "Invalid number of arguments for", desc.type, rule.name, "(expected up to 1, found", keys.length, ")");
                args.push(built[keys[0]]);
              }
            }
            schema = schema[rule.name](...args);
            const options = {};
            for (const custom in def.modifiers) {
              if (rule[custom] !== void 0) {
                options[custom] = this.build(rule[custom]);
              }
            }
            if (Object.keys(options).length) {
              schema = schema.rule(options);
            }
          }
        }
        const terms = {};
        for (const key in desc) {
          if (["allow", "flags", "invalid", "whens", "preferences", "rules", "type"].includes(key)) {
            continue;
          }
          Assert(def.terms[key], "Term", key, "missing configuration");
          const manifest = def.terms[key].manifest;
          if (manifest === "schema") {
            terms[key] = desc[key].map((item) => this.parse(item));
            continue;
          }
          if (manifest === "values") {
            terms[key] = desc[key].map((item) => this.build(item));
            continue;
          }
          if (manifest === "single") {
            terms[key] = this.build(desc[key]);
            continue;
          }
          if (typeof manifest === "object") {
            terms[key] = {};
            for (const name in desc[key]) {
              const value = desc[key][name];
              terms[key][name] = this.parse(value);
            }
            continue;
          }
          terms[key] = this.build(desc[key]);
        }
        if (desc.whens) {
          terms.whens = desc.whens.map((when) => this.build(when));
        }
        schema = def.manifest.build(schema, terms);
        schema.$_temp.ruleset = false;
        return schema;
      }
      build(desc, options = {}) {
        if (desc === null) {
          return null;
        }
        if (Array.isArray(desc)) {
          return desc.map((item) => this.build(item));
        }
        if (desc instanceof Error) {
          return desc;
        }
        if (options.assign === "options") {
          return Clone(desc);
        }
        if (options.assign === "regex") {
          return internals.regex(desc);
        }
        if (options.assign === "ref") {
          return Ref.build(desc);
        }
        if (typeof desc !== "object") {
          return desc;
        }
        if (Object.keys(desc).length === 1) {
          if (desc.buffer) {
            Assert(Buffer, "Buffers are not supported");
            return Buffer && Buffer.from(desc.buffer, "binary");
          }
          if (desc.function) {
            return { [Common.symbols.literal]: true, literal: desc.function };
          }
          if (desc.override) {
            return Common.symbols.override;
          }
          if (desc.ref) {
            return Ref.build(desc.ref);
          }
          if (desc.regex) {
            return internals.regex(desc.regex);
          }
          if (desc.special) {
            Assert(["deep"].includes(desc.special), "Unknown special value", desc.special);
            return Common.symbols.deepDefault;
          }
          if (desc.value) {
            return Clone(desc.value);
          }
        }
        if (desc.type) {
          return this.parse(desc);
        }
        if (desc.template) {
          return Template.build(desc);
        }
        const normalized = {};
        for (const key in desc) {
          normalized[key] = this.build(desc[key], { assign: key });
        }
        return normalized;
      }
    };
    internals.regex = function(string) {
      const end = string.lastIndexOf("/");
      const exp = string.slice(1, end);
      const flags = string.slice(end + 1);
      return new RegExp(exp, flags);
    };
    internals.validate = function(joi, desc) {
      Schemas = Schemas || require_schemas();
      joi.assert(desc, Schemas.description);
    };
  }
});

// node_modules/@hapi/hoek/lib/deepEqual.js
var require_deepEqual = __commonJS({
  "node_modules/@hapi/hoek/lib/deepEqual.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var Types = require_types();
    var internals = {
      mismatched: null
    };
    module.exports = function(obj, ref, options) {
      options = Object.assign({ prototype: true }, options);
      return !!internals.isDeepEqual(obj, ref, options, []);
    };
    internals.isDeepEqual = function(obj, ref, options, seen) {
      if (obj === ref) {
        return obj !== 0 || 1 / obj === 1 / ref;
      }
      const type = typeof obj;
      if (type !== typeof ref) {
        return false;
      }
      if (obj === null || ref === null) {
        return false;
      }
      if (type === "function") {
        if (!options.deepFunction || obj.toString() !== ref.toString()) {
          return false;
        }
      } else if (type !== "object") {
        return obj !== obj && ref !== ref;
      }
      const instanceType = internals.getSharedType(obj, ref, !!options.prototype);
      switch (instanceType) {
        case Types.buffer:
          return Buffer && Buffer.prototype.equals.call(obj, ref);
        case Types.promise:
          return obj === ref;
        case Types.regex:
          return obj.toString() === ref.toString();
        case internals.mismatched:
          return false;
      }
      for (let i = seen.length - 1; i >= 0; --i) {
        if (seen[i].isSame(obj, ref)) {
          return true;
        }
      }
      seen.push(new internals.SeenEntry(obj, ref));
      try {
        return !!internals.isDeepEqualObj(instanceType, obj, ref, options, seen);
      } finally {
        seen.pop();
      }
    };
    internals.getSharedType = function(obj, ref, checkPrototype) {
      if (checkPrototype) {
        if (Object.getPrototypeOf(obj) !== Object.getPrototypeOf(ref)) {
          return internals.mismatched;
        }
        return Types.getInternalProto(obj);
      }
      const type = Types.getInternalProto(obj);
      if (type !== Types.getInternalProto(ref)) {
        return internals.mismatched;
      }
      return type;
    };
    internals.valueOf = function(obj) {
      const objValueOf = obj.valueOf;
      if (objValueOf === void 0) {
        return obj;
      }
      try {
        return objValueOf.call(obj);
      } catch (err) {
        return err;
      }
    };
    internals.hasOwnEnumerableProperty = function(obj, key) {
      return Object.prototype.propertyIsEnumerable.call(obj, key);
    };
    internals.isSetSimpleEqual = function(obj, ref) {
      for (const entry of Set.prototype.values.call(obj)) {
        if (!Set.prototype.has.call(ref, entry)) {
          return false;
        }
      }
      return true;
    };
    internals.isDeepEqualObj = function(instanceType, obj, ref, options, seen) {
      const { isDeepEqual, valueOf, hasOwnEnumerableProperty } = internals;
      const { keys, getOwnPropertySymbols } = Object;
      if (instanceType === Types.array) {
        if (options.part) {
          for (const objValue of obj) {
            for (const refValue of ref) {
              if (isDeepEqual(objValue, refValue, options, seen)) {
                return true;
              }
            }
          }
        } else {
          if (obj.length !== ref.length) {
            return false;
          }
          for (let i = 0; i < obj.length; ++i) {
            if (!isDeepEqual(obj[i], ref[i], options, seen)) {
              return false;
            }
          }
          return true;
        }
      } else if (instanceType === Types.set) {
        if (obj.size !== ref.size) {
          return false;
        }
        if (!internals.isSetSimpleEqual(obj, ref)) {
          const ref2 = new Set(Set.prototype.values.call(ref));
          for (const objEntry of Set.prototype.values.call(obj)) {
            if (ref2.delete(objEntry)) {
              continue;
            }
            let found = false;
            for (const refEntry of ref2) {
              if (isDeepEqual(objEntry, refEntry, options, seen)) {
                ref2.delete(refEntry);
                found = true;
                break;
              }
            }
            if (!found) {
              return false;
            }
          }
        }
      } else if (instanceType === Types.map) {
        if (obj.size !== ref.size) {
          return false;
        }
        for (const [key, value] of Map.prototype.entries.call(obj)) {
          if (value === void 0 && !Map.prototype.has.call(ref, key)) {
            return false;
          }
          if (!isDeepEqual(value, Map.prototype.get.call(ref, key), options, seen)) {
            return false;
          }
        }
      } else if (instanceType === Types.error) {
        if (obj.name !== ref.name || obj.message !== ref.message) {
          return false;
        }
      }
      const valueOfObj = valueOf(obj);
      const valueOfRef = valueOf(ref);
      if ((obj !== valueOfObj || ref !== valueOfRef) && !isDeepEqual(valueOfObj, valueOfRef, options, seen)) {
        return false;
      }
      const objKeys = keys(obj);
      if (!options.part && objKeys.length !== keys(ref).length && !options.skip) {
        return false;
      }
      let skipped = 0;
      for (const key of objKeys) {
        if (options.skip && options.skip.includes(key)) {
          if (ref[key] === void 0) {
            ++skipped;
          }
          continue;
        }
        if (!hasOwnEnumerableProperty(ref, key)) {
          return false;
        }
        if (!isDeepEqual(obj[key], ref[key], options, seen)) {
          return false;
        }
      }
      if (!options.part && objKeys.length - skipped !== keys(ref).length) {
        return false;
      }
      if (options.symbols !== false) {
        const objSymbols = getOwnPropertySymbols(obj);
        const refSymbols = new Set(getOwnPropertySymbols(ref));
        for (const key of objSymbols) {
          if (!options.skip || !options.skip.includes(key)) {
            if (hasOwnEnumerableProperty(obj, key)) {
              if (!hasOwnEnumerableProperty(ref, key)) {
                return false;
              }
              if (!isDeepEqual(obj[key], ref[key], options, seen)) {
                return false;
              }
            } else if (hasOwnEnumerableProperty(ref, key)) {
              return false;
            }
          }
          refSymbols.delete(key);
        }
        for (const key of refSymbols) {
          if (hasOwnEnumerableProperty(ref, key)) {
            return false;
          }
        }
      }
      return true;
    };
    internals.SeenEntry = class {
      constructor(obj, ref) {
        this.obj = obj;
        this.ref = ref;
      }
      isSame(obj, ref) {
        return this.obj === obj && this.ref === ref;
      }
    };
  }
});

// node_modules/@sideway/pinpoint/lib/index.js
var require_lib3 = __commonJS({
  "node_modules/@sideway/pinpoint/lib/index.js"(exports) {
    "use strict";
    init_cjs_shim();
    exports.location = function(depth = 0) {
      const orig = Error.prepareStackTrace;
      Error.prepareStackTrace = (ignore, stack) => stack;
      const capture = {};
      Error.captureStackTrace(capture, this);
      const line = capture.stack[depth + 1];
      Error.prepareStackTrace = orig;
      return {
        filename: line.getFileName(),
        line: line.getLineNumber()
      };
    };
  }
});

// node_modules/joi/lib/trace.js
var require_trace = __commonJS({
  "node_modules/joi/lib/trace.js"(exports) {
    "use strict";
    init_cjs_shim();
    var DeepEqual = require_deepEqual();
    var Pinpoint = require_lib3();
    var Errors = require_errors2();
    var internals = {
      codes: {
        error: 1,
        pass: 2,
        full: 3
      },
      labels: {
        0: "never used",
        1: "always error",
        2: "always pass"
      }
    };
    exports.setup = function(root) {
      const trace = /* @__PURE__ */ __name(function() {
        root._tracer = root._tracer || new internals.Tracer();
        return root._tracer;
      }, "trace");
      root.trace = trace;
      root[Symbol.for("@hapi/lab/coverage/initialize")] = trace;
      root.untrace = () => {
        root._tracer = null;
      };
    };
    exports.location = function(schema) {
      return schema.$_setFlag("_tracerLocation", Pinpoint.location(2));
    };
    internals.Tracer = class {
      constructor() {
        this.name = "Joi";
        this._schemas = /* @__PURE__ */ new Map();
      }
      _register(schema) {
        const existing = this._schemas.get(schema);
        if (existing) {
          return existing.store;
        }
        const store = new internals.Store(schema);
        const { filename, line } = schema._flags._tracerLocation || Pinpoint.location(5);
        this._schemas.set(schema, { filename, line, store });
        return store;
      }
      _combine(merged, sources) {
        for (const { store } of this._schemas.values()) {
          store._combine(merged, sources);
        }
      }
      report(file) {
        const coverage = [];
        for (const { filename, line, store } of this._schemas.values()) {
          if (file && file !== filename) {
            continue;
          }
          const missing = [];
          const skipped = [];
          for (const [schema, log] of store._sources.entries()) {
            if (internals.sub(log.paths, skipped)) {
              continue;
            }
            if (!log.entry) {
              missing.push({
                status: "never reached",
                paths: [...log.paths]
              });
              skipped.push(...log.paths);
              continue;
            }
            for (const type of ["valid", "invalid"]) {
              const set = schema[`_${type}s`];
              if (!set) {
                continue;
              }
              const values = new Set(set._values);
              const refs = new Set(set._refs);
              for (const { value, ref } of log[type]) {
                values.delete(value);
                refs.delete(ref);
              }
              if (values.size || refs.size) {
                missing.push({
                  status: [...values, ...[...refs].map((ref) => ref.display)],
                  rule: `${type}s`
                });
              }
            }
            const rules = schema._rules.map((rule) => rule.name);
            for (const type of ["default", "failover"]) {
              if (schema._flags[type] !== void 0) {
                rules.push(type);
              }
            }
            for (const name of rules) {
              const status = internals.labels[log.rule[name] || 0];
              if (status) {
                const report = { rule: name, status };
                if (log.paths.size) {
                  report.paths = [...log.paths];
                }
                missing.push(report);
              }
            }
          }
          if (missing.length) {
            coverage.push({
              filename,
              line,
              missing,
              severity: "error",
              message: `Schema missing tests for ${missing.map(internals.message).join(", ")}`
            });
          }
        }
        return coverage.length ? coverage : null;
      }
    };
    internals.Store = class {
      constructor(schema) {
        this.active = true;
        this._sources = /* @__PURE__ */ new Map();
        this._combos = /* @__PURE__ */ new Map();
        this._scan(schema);
      }
      debug(state, source, name, result) {
        state.mainstay.debug && state.mainstay.debug.push({ type: source, name, result, path: state.path });
      }
      entry(schema, state) {
        internals.debug(state, { type: "entry" });
        this._record(schema, (log) => {
          log.entry = true;
        });
      }
      filter(schema, state, source, value) {
        internals.debug(state, { type: source, ...value });
        this._record(schema, (log) => {
          log[source].add(value);
        });
      }
      log(schema, state, source, name, result) {
        internals.debug(state, { type: source, name, result: result === "full" ? "pass" : result });
        this._record(schema, (log) => {
          log[source][name] = log[source][name] || 0;
          log[source][name] |= internals.codes[result];
        });
      }
      resolve(state, ref, to) {
        if (!state.mainstay.debug) {
          return;
        }
        const log = { type: "resolve", ref: ref.display, to, path: state.path };
        state.mainstay.debug.push(log);
      }
      value(state, by, from, to, name) {
        if (!state.mainstay.debug || DeepEqual(from, to)) {
          return;
        }
        const log = { type: "value", by, from, to, path: state.path };
        if (name) {
          log.name = name;
        }
        state.mainstay.debug.push(log);
      }
      _record(schema, each) {
        const log = this._sources.get(schema);
        if (log) {
          each(log);
          return;
        }
        const sources = this._combos.get(schema);
        for (const source of sources) {
          this._record(source, each);
        }
      }
      _scan(schema, _path) {
        const path5 = _path || [];
        let log = this._sources.get(schema);
        if (!log) {
          log = {
            paths: /* @__PURE__ */ new Set(),
            entry: false,
            rule: {},
            valid: /* @__PURE__ */ new Set(),
            invalid: /* @__PURE__ */ new Set()
          };
          this._sources.set(schema, log);
        }
        if (path5.length) {
          log.paths.add(path5);
        }
        const each = /* @__PURE__ */ __name((sub, source) => {
          const subId = internals.id(sub, source);
          this._scan(sub, path5.concat(subId));
        }, "each");
        schema.$_modify({ each, ref: false });
      }
      _combine(merged, sources) {
        this._combos.set(merged, sources);
      }
    };
    internals.message = function(item) {
      const path5 = item.paths ? Errors.path(item.paths[0]) + (item.rule ? ":" : "") : "";
      return `${path5}${item.rule || ""} (${item.status})`;
    };
    internals.id = function(schema, { source, name, path: path5, key }) {
      if (schema._flags.id) {
        return schema._flags.id;
      }
      if (key) {
        return key;
      }
      name = `@${name}`;
      if (source === "terms") {
        return [name, path5[Math.min(path5.length - 1, 1)]];
      }
      return name;
    };
    internals.sub = function(paths, skipped) {
      for (const path5 of paths) {
        for (const skip of skipped) {
          if (DeepEqual(path5.slice(0, skip.length), skip)) {
            return true;
          }
        }
      }
      return false;
    };
    internals.debug = function(state, event) {
      if (state.mainstay.debug) {
        event.path = state.debug ? [...state.path, state.debug] : state.path;
        state.mainstay.debug.push(event);
      }
    };
  }
});

// node_modules/@hapi/hoek/lib/merge.js
var require_merge = __commonJS({
  "node_modules/@hapi/hoek/lib/merge.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var Assert = require_assert();
    var Clone = require_clone();
    var Utils = require_utils3();
    var internals = {};
    module.exports = internals.merge = function(target, source, options) {
      Assert(target && typeof target === "object", "Invalid target value: must be an object");
      Assert(source === null || source === void 0 || typeof source === "object", "Invalid source value: must be null, undefined, or an object");
      if (!source) {
        return target;
      }
      options = Object.assign({ nullOverride: true, mergeArrays: true }, options);
      if (Array.isArray(source)) {
        Assert(Array.isArray(target), "Cannot merge array onto an object");
        if (!options.mergeArrays) {
          target.length = 0;
        }
        for (let i = 0; i < source.length; ++i) {
          target.push(Clone(source[i], { symbols: options.symbols }));
        }
        return target;
      }
      const keys = Utils.keys(source, options);
      for (let i = 0; i < keys.length; ++i) {
        const key = keys[i];
        if (key === "__proto__" || !Object.prototype.propertyIsEnumerable.call(source, key)) {
          continue;
        }
        const value = source[key];
        if (value && typeof value === "object") {
          if (target[key] === value) {
            continue;
          }
          if (!target[key] || typeof target[key] !== "object" || Array.isArray(target[key]) !== Array.isArray(value) || value instanceof Date || Buffer && Buffer.isBuffer(value) || // $lab:coverage:ignore$
          value instanceof RegExp) {
            target[key] = Clone(value, { symbols: options.symbols });
          } else {
            internals.merge(target[key], value, options);
          }
        } else {
          if (value !== null && value !== void 0) {
            target[key] = value;
          } else if (options.nullOverride) {
            target[key] = value;
          }
        }
      }
      return target;
    };
  }
});

// node_modules/joi/lib/modify.js
var require_modify = __commonJS({
  "node_modules/joi/lib/modify.js"(exports) {
    "use strict";
    init_cjs_shim();
    var Assert = require_assert();
    var Common = require_common();
    var Ref = require_ref();
    var internals = {};
    exports.Ids = internals.Ids = class {
      constructor() {
        this._byId = /* @__PURE__ */ new Map();
        this._byKey = /* @__PURE__ */ new Map();
        this._schemaChain = false;
      }
      clone() {
        const clone = new internals.Ids();
        clone._byId = new Map(this._byId);
        clone._byKey = new Map(this._byKey);
        clone._schemaChain = this._schemaChain;
        return clone;
      }
      concat(source) {
        if (source._schemaChain) {
          this._schemaChain = true;
        }
        for (const [id, value] of source._byId.entries()) {
          Assert(!this._byKey.has(id), "Schema id conflicts with existing key:", id);
          this._byId.set(id, value);
        }
        for (const [key, value] of source._byKey.entries()) {
          Assert(!this._byId.has(key), "Schema key conflicts with existing id:", key);
          this._byKey.set(key, value);
        }
      }
      fork(path5, adjuster, root) {
        const chain = this._collect(path5);
        chain.push({ schema: root });
        const tail = chain.shift();
        let adjusted = { id: tail.id, schema: adjuster(tail.schema) };
        Assert(Common.isSchema(adjusted.schema), "adjuster function failed to return a joi schema type");
        for (const node of chain) {
          adjusted = { id: node.id, schema: internals.fork(node.schema, adjusted.id, adjusted.schema) };
        }
        return adjusted.schema;
      }
      labels(path5, behind = []) {
        const current = path5[0];
        const node = this._get(current);
        if (!node) {
          return [...behind, ...path5].join(".");
        }
        const forward = path5.slice(1);
        behind = [...behind, node.schema._flags.label || current];
        if (!forward.length) {
          return behind.join(".");
        }
        return node.schema._ids.labels(forward, behind);
      }
      reach(path5, behind = []) {
        const current = path5[0];
        const node = this._get(current);
        Assert(node, "Schema does not contain path", [...behind, ...path5].join("."));
        const forward = path5.slice(1);
        if (!forward.length) {
          return node.schema;
        }
        return node.schema._ids.reach(forward, [...behind, current]);
      }
      register(schema, { key } = {}) {
        if (!schema || !Common.isSchema(schema)) {
          return;
        }
        if (schema.$_property("schemaChain") || schema._ids._schemaChain) {
          this._schemaChain = true;
        }
        const id = schema._flags.id;
        if (id) {
          const existing = this._byId.get(id);
          Assert(!existing || existing.schema === schema, "Cannot add different schemas with the same id:", id);
          Assert(!this._byKey.has(id), "Schema id conflicts with existing key:", id);
          this._byId.set(id, { schema, id });
        }
        if (key) {
          Assert(!this._byKey.has(key), "Schema already contains key:", key);
          Assert(!this._byId.has(key), "Schema key conflicts with existing id:", key);
          this._byKey.set(key, { schema, id: key });
        }
      }
      reset() {
        this._byId = /* @__PURE__ */ new Map();
        this._byKey = /* @__PURE__ */ new Map();
        this._schemaChain = false;
      }
      _collect(path5, behind = [], nodes = []) {
        const current = path5[0];
        const node = this._get(current);
        Assert(node, "Schema does not contain path", [...behind, ...path5].join("."));
        nodes = [node, ...nodes];
        const forward = path5.slice(1);
        if (!forward.length) {
          return nodes;
        }
        return node.schema._ids._collect(forward, [...behind, current], nodes);
      }
      _get(id) {
        return this._byId.get(id) || this._byKey.get(id);
      }
    };
    internals.fork = function(schema, id, replacement) {
      const each = /* @__PURE__ */ __name((item, { key }) => {
        if (id === (item._flags.id || key)) {
          return replacement;
        }
      }, "each");
      const obj = exports.schema(schema, { each, ref: false });
      return obj ? obj.$_mutateRebuild() : schema;
    };
    exports.schema = function(schema, options) {
      let obj;
      for (const name in schema._flags) {
        if (name[0] === "_") {
          continue;
        }
        const result = internals.scan(schema._flags[name], { source: "flags", name }, options);
        if (result !== void 0) {
          obj = obj || schema.clone();
          obj._flags[name] = result;
        }
      }
      for (let i = 0; i < schema._rules.length; ++i) {
        const rule = schema._rules[i];
        const result = internals.scan(rule.args, { source: "rules", name: rule.name }, options);
        if (result !== void 0) {
          obj = obj || schema.clone();
          const clone = Object.assign({}, rule);
          clone.args = result;
          obj._rules[i] = clone;
          const existingUnique = obj._singleRules.get(rule.name);
          if (existingUnique === rule) {
            obj._singleRules.set(rule.name, clone);
          }
        }
      }
      for (const name in schema.$_terms) {
        if (name[0] === "_") {
          continue;
        }
        const result = internals.scan(schema.$_terms[name], { source: "terms", name }, options);
        if (result !== void 0) {
          obj = obj || schema.clone();
          obj.$_terms[name] = result;
        }
      }
      return obj;
    };
    internals.scan = function(item, source, options, _path, _key) {
      const path5 = _path || [];
      if (item === null || typeof item !== "object") {
        return;
      }
      let clone;
      if (Array.isArray(item)) {
        for (let i = 0; i < item.length; ++i) {
          const key = source.source === "terms" && source.name === "keys" && item[i].key;
          const result = internals.scan(item[i], source, options, [i, ...path5], key);
          if (result !== void 0) {
            clone = clone || item.slice();
            clone[i] = result;
          }
        }
        return clone;
      }
      if (options.schema !== false && Common.isSchema(item) || options.ref !== false && Ref.isRef(item)) {
        const result = options.each(item, { ...source, path: path5, key: _key });
        if (result === item) {
          return;
        }
        return result;
      }
      for (const key in item) {
        if (key[0] === "_") {
          continue;
        }
        const result = internals.scan(item[key], source, options, [key, ...path5], _key);
        if (result !== void 0) {
          clone = clone || Object.assign({}, item);
          clone[key] = result;
        }
      }
      return clone;
    };
  }
});

// node_modules/@hapi/hoek/lib/ignore.js
var require_ignore = __commonJS({
  "node_modules/@hapi/hoek/lib/ignore.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    module.exports = function() {
    };
  }
});

// node_modules/joi/lib/state.js
var require_state = __commonJS({
  "node_modules/joi/lib/state.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var Clone = require_clone();
    var Reach = require_reach();
    var Common = require_common();
    var internals = {
      value: Symbol("value")
    };
    module.exports = internals.State = class {
      constructor(path5, ancestors, state) {
        this.path = path5;
        this.ancestors = ancestors;
        this.mainstay = state.mainstay;
        this.schemas = state.schemas;
        this.debug = null;
      }
      localize(path5, ancestors = null, schema = null) {
        const state = new internals.State(path5, ancestors, this);
        if (schema && state.schemas) {
          state.schemas = [internals.schemas(schema), ...state.schemas];
        }
        return state;
      }
      nest(schema, debug) {
        const state = new internals.State(this.path, this.ancestors, this);
        state.schemas = state.schemas && [internals.schemas(schema), ...state.schemas];
        state.debug = debug;
        return state;
      }
      shadow(value, reason) {
        this.mainstay.shadow = this.mainstay.shadow || new internals.Shadow();
        this.mainstay.shadow.set(this.path, value, reason);
      }
      snapshot() {
        if (this.mainstay.shadow) {
          this._snapshot = Clone(this.mainstay.shadow.node(this.path));
        }
        this.mainstay.snapshot();
      }
      restore() {
        if (this.mainstay.shadow) {
          this.mainstay.shadow.override(this.path, this._snapshot);
          this._snapshot = void 0;
        }
        this.mainstay.restore();
      }
      commit() {
        if (this.mainstay.shadow) {
          this.mainstay.shadow.override(this.path, this._snapshot);
          this._snapshot = void 0;
        }
        this.mainstay.commit();
      }
    };
    internals.schemas = function(schema) {
      if (Common.isSchema(schema)) {
        return { schema };
      }
      return schema;
    };
    internals.Shadow = class {
      constructor() {
        this._values = null;
      }
      set(path5, value, reason) {
        if (!path5.length) {
          return;
        }
        if (reason === "strip" && typeof path5[path5.length - 1] === "number") {
          return;
        }
        this._values = this._values || /* @__PURE__ */ new Map();
        let node = this._values;
        for (let i = 0; i < path5.length; ++i) {
          const segment = path5[i];
          let next = node.get(segment);
          if (!next) {
            next = /* @__PURE__ */ new Map();
            node.set(segment, next);
          }
          node = next;
        }
        node[internals.value] = value;
      }
      get(path5) {
        const node = this.node(path5);
        if (node) {
          return node[internals.value];
        }
      }
      node(path5) {
        if (!this._values) {
          return;
        }
        return Reach(this._values, path5, { iterables: true });
      }
      override(path5, node) {
        if (!this._values) {
          return;
        }
        const parents = path5.slice(0, -1);
        const own = path5[path5.length - 1];
        const parent = Reach(this._values, parents, { iterables: true });
        if (node) {
          parent.set(own, node);
          return;
        }
        if (parent) {
          parent.delete(own);
        }
      }
    };
  }
});

// node_modules/joi/lib/validator.js
var require_validator = __commonJS({
  "node_modules/joi/lib/validator.js"(exports) {
    "use strict";
    init_cjs_shim();
    var Assert = require_assert();
    var Clone = require_clone();
    var Ignore = require_ignore();
    var Reach = require_reach();
    var Common = require_common();
    var Errors = require_errors2();
    var State = require_state();
    var internals = {
      result: Symbol("result")
    };
    exports.entry = function(value, schema, prefs) {
      let settings = Common.defaults;
      if (prefs) {
        Assert(prefs.warnings === void 0, "Cannot override warnings preference in synchronous validation");
        Assert(prefs.artifacts === void 0, "Cannot override artifacts preference in synchronous validation");
        settings = Common.preferences(Common.defaults, prefs);
      }
      const result = internals.entry(value, schema, settings);
      Assert(!result.mainstay.externals.length, "Schema with external rules must use validateAsync()");
      const outcome = { value: result.value };
      if (result.error) {
        outcome.error = result.error;
      }
      if (result.mainstay.warnings.length) {
        outcome.warning = Errors.details(result.mainstay.warnings);
      }
      if (result.mainstay.debug) {
        outcome.debug = result.mainstay.debug;
      }
      if (result.mainstay.artifacts) {
        outcome.artifacts = result.mainstay.artifacts;
      }
      return outcome;
    };
    exports.entryAsync = async function(value, schema, prefs) {
      let settings = Common.defaults;
      if (prefs) {
        settings = Common.preferences(Common.defaults, prefs);
      }
      const result = internals.entry(value, schema, settings);
      const mainstay = result.mainstay;
      if (result.error) {
        if (mainstay.debug) {
          result.error.debug = mainstay.debug;
        }
        throw result.error;
      }
      if (mainstay.externals.length) {
        let root = result.value;
        const errors = [];
        for (const external of mainstay.externals) {
          const path5 = external.state.path;
          const linked = external.schema.type === "link" ? mainstay.links.get(external.schema) : null;
          let node = root;
          let key;
          let parent;
          const ancestors = path5.length ? [root] : [];
          const original = path5.length ? Reach(value, path5) : value;
          if (path5.length) {
            key = path5[path5.length - 1];
            let current = root;
            for (const segment of path5.slice(0, -1)) {
              current = current[segment];
              ancestors.unshift(current);
            }
            parent = ancestors[0];
            node = parent[key];
          }
          try {
            const createError = /* @__PURE__ */ __name((code, local) => (linked || external.schema).$_createError(code, node, local, external.state, settings), "createError");
            const output = await external.method(node, {
              schema: external.schema,
              linked,
              state: external.state,
              prefs,
              original,
              error: createError,
              errorsArray: internals.errorsArray,
              warn: /* @__PURE__ */ __name((code, local) => mainstay.warnings.push((linked || external.schema).$_createError(code, node, local, external.state, settings)), "warn"),
              message: /* @__PURE__ */ __name((messages, local) => (linked || external.schema).$_createError("external", node, local, external.state, settings, { messages }), "message")
            });
            if (output === void 0 || output === node) {
              continue;
            }
            if (output instanceof Errors.Report) {
              mainstay.tracer.log(external.schema, external.state, "rule", "external", "error");
              errors.push(output);
              if (settings.abortEarly) {
                break;
              }
              continue;
            }
            if (Array.isArray(output) && output[Common.symbols.errors]) {
              mainstay.tracer.log(external.schema, external.state, "rule", "external", "error");
              errors.push(...output);
              if (settings.abortEarly) {
                break;
              }
              continue;
            }
            if (parent) {
              mainstay.tracer.value(external.state, "rule", node, output, "external");
              parent[key] = output;
            } else {
              mainstay.tracer.value(external.state, "rule", root, output, "external");
              root = output;
            }
          } catch (err) {
            if (settings.errors.label) {
              err.message += ` (${external.label})`;
            }
            throw err;
          }
        }
        result.value = root;
        if (errors.length) {
          result.error = Errors.process(errors, value, settings);
          if (mainstay.debug) {
            result.error.debug = mainstay.debug;
          }
          throw result.error;
        }
      }
      if (!settings.warnings && !settings.debug && !settings.artifacts) {
        return result.value;
      }
      const outcome = { value: result.value };
      if (mainstay.warnings.length) {
        outcome.warning = Errors.details(mainstay.warnings);
      }
      if (mainstay.debug) {
        outcome.debug = mainstay.debug;
      }
      if (mainstay.artifacts) {
        outcome.artifacts = mainstay.artifacts;
      }
      return outcome;
    };
    internals.Mainstay = class {
      constructor(tracer, debug, links) {
        this.externals = [];
        this.warnings = [];
        this.tracer = tracer;
        this.debug = debug;
        this.links = links;
        this.shadow = null;
        this.artifacts = null;
        this._snapshots = [];
      }
      snapshot() {
        this._snapshots.push({
          externals: this.externals.slice(),
          warnings: this.warnings.slice()
        });
      }
      restore() {
        const snapshot = this._snapshots.pop();
        this.externals = snapshot.externals;
        this.warnings = snapshot.warnings;
      }
      commit() {
        this._snapshots.pop();
      }
    };
    internals.entry = function(value, schema, prefs) {
      const { tracer, cleanup } = internals.tracer(schema, prefs);
      const debug = prefs.debug ? [] : null;
      const links = schema._ids._schemaChain ? /* @__PURE__ */ new Map() : null;
      const mainstay = new internals.Mainstay(tracer, debug, links);
      const schemas = schema._ids._schemaChain ? [{ schema }] : null;
      const state = new State([], [], { mainstay, schemas });
      const result = exports.validate(value, schema, state, prefs);
      if (cleanup) {
        schema.$_root.untrace();
      }
      const error = Errors.process(result.errors, value, prefs);
      return { value: result.value, error, mainstay };
    };
    internals.tracer = function(schema, prefs) {
      if (schema.$_root._tracer) {
        return { tracer: schema.$_root._tracer._register(schema) };
      }
      if (prefs.debug) {
        Assert(schema.$_root.trace, "Debug mode not supported");
        return { tracer: schema.$_root.trace()._register(schema), cleanup: true };
      }
      return { tracer: internals.ignore };
    };
    exports.validate = function(value, schema, state, prefs, overrides = {}) {
      if (schema.$_terms.whens) {
        schema = schema._generate(value, state, prefs).schema;
      }
      if (schema._preferences) {
        prefs = internals.prefs(schema, prefs);
      }
      if (schema._cache && prefs.cache) {
        const result = schema._cache.get(value);
        state.mainstay.tracer.debug(state, "validate", "cached", !!result);
        if (result) {
          return result;
        }
      }
      const createError = /* @__PURE__ */ __name((code, local, localState) => schema.$_createError(code, value, local, localState || state, prefs), "createError");
      const helpers = {
        original: value,
        prefs,
        schema,
        state,
        error: createError,
        errorsArray: internals.errorsArray,
        warn: /* @__PURE__ */ __name((code, local, localState) => state.mainstay.warnings.push(createError(code, local, localState)), "warn"),
        message: /* @__PURE__ */ __name((messages, local) => schema.$_createError("custom", value, local, state, prefs, { messages }), "message")
      };
      state.mainstay.tracer.entry(schema, state);
      const def = schema._definition;
      if (def.prepare && value !== void 0 && prefs.convert) {
        const prepared = def.prepare(value, helpers);
        if (prepared) {
          state.mainstay.tracer.value(state, "prepare", value, prepared.value);
          if (prepared.errors) {
            return internals.finalize(prepared.value, [].concat(prepared.errors), helpers);
          }
          value = prepared.value;
        }
      }
      if (def.coerce && value !== void 0 && prefs.convert && (!def.coerce.from || def.coerce.from.includes(typeof value))) {
        const coerced = def.coerce.method(value, helpers);
        if (coerced) {
          state.mainstay.tracer.value(state, "coerced", value, coerced.value);
          if (coerced.errors) {
            return internals.finalize(coerced.value, [].concat(coerced.errors), helpers);
          }
          value = coerced.value;
        }
      }
      const empty = schema._flags.empty;
      if (empty && empty.$_match(internals.trim(value, schema), state.nest(empty), Common.defaults)) {
        state.mainstay.tracer.value(state, "empty", value, void 0);
        value = void 0;
      }
      const presence = overrides.presence || schema._flags.presence || (schema._flags._endedSwitch ? null : prefs.presence);
      if (value === void 0) {
        if (presence === "forbidden") {
          return internals.finalize(value, null, helpers);
        }
        if (presence === "required") {
          return internals.finalize(value, [schema.$_createError("any.required", value, null, state, prefs)], helpers);
        }
        if (presence === "optional") {
          if (schema._flags.default !== Common.symbols.deepDefault) {
            return internals.finalize(value, null, helpers);
          }
          state.mainstay.tracer.value(state, "default", value, {});
          value = {};
        }
      } else if (presence === "forbidden") {
        return internals.finalize(value, [schema.$_createError("any.unknown", value, null, state, prefs)], helpers);
      }
      const errors = [];
      if (schema._valids) {
        const match = schema._valids.get(value, state, prefs, schema._flags.insensitive);
        if (match) {
          if (prefs.convert) {
            state.mainstay.tracer.value(state, "valids", value, match.value);
            value = match.value;
          }
          state.mainstay.tracer.filter(schema, state, "valid", match);
          return internals.finalize(value, null, helpers);
        }
        if (schema._flags.only) {
          const report = schema.$_createError("any.only", value, { valids: schema._valids.values({ display: true }) }, state, prefs);
          if (prefs.abortEarly) {
            return internals.finalize(value, [report], helpers);
          }
          errors.push(report);
        }
      }
      if (schema._invalids) {
        const match = schema._invalids.get(value, state, prefs, schema._flags.insensitive);
        if (match) {
          state.mainstay.tracer.filter(schema, state, "invalid", match);
          const report = schema.$_createError("any.invalid", value, { invalids: schema._invalids.values({ display: true }) }, state, prefs);
          if (prefs.abortEarly) {
            return internals.finalize(value, [report], helpers);
          }
          errors.push(report);
        }
      }
      if (def.validate) {
        const base = def.validate(value, helpers);
        if (base) {
          state.mainstay.tracer.value(state, "base", value, base.value);
          value = base.value;
          if (base.errors) {
            if (!Array.isArray(base.errors)) {
              errors.push(base.errors);
              return internals.finalize(value, errors, helpers);
            }
            if (base.errors.length) {
              errors.push(...base.errors);
              return internals.finalize(value, errors, helpers);
            }
          }
        }
      }
      if (!schema._rules.length) {
        return internals.finalize(value, errors, helpers);
      }
      return internals.rules(value, errors, helpers);
    };
    internals.rules = function(value, errors, helpers) {
      const { schema, state, prefs } = helpers;
      for (const rule of schema._rules) {
        const definition = schema._definition.rules[rule.method];
        if (definition.convert && prefs.convert) {
          state.mainstay.tracer.log(schema, state, "rule", rule.name, "full");
          continue;
        }
        let ret;
        let args = rule.args;
        if (rule._resolve.length) {
          args = Object.assign({}, args);
          for (const key of rule._resolve) {
            const resolver = definition.argsByName.get(key);
            const resolved = args[key].resolve(value, state, prefs);
            const normalized = resolver.normalize ? resolver.normalize(resolved) : resolved;
            const invalid = Common.validateArg(normalized, null, resolver);
            if (invalid) {
              ret = schema.$_createError("any.ref", resolved, { arg: key, ref: args[key], reason: invalid }, state, prefs);
              break;
            }
            args[key] = normalized;
          }
        }
        ret = ret || definition.validate(value, helpers, args, rule);
        const result = internals.rule(ret, rule);
        if (result.errors) {
          state.mainstay.tracer.log(schema, state, "rule", rule.name, "error");
          if (rule.warn) {
            state.mainstay.warnings.push(...result.errors);
            continue;
          }
          if (prefs.abortEarly) {
            return internals.finalize(value, result.errors, helpers);
          }
          errors.push(...result.errors);
        } else {
          state.mainstay.tracer.log(schema, state, "rule", rule.name, "pass");
          state.mainstay.tracer.value(state, "rule", value, result.value, rule.name);
          value = result.value;
        }
      }
      return internals.finalize(value, errors, helpers);
    };
    internals.rule = function(ret, rule) {
      if (ret instanceof Errors.Report) {
        internals.error(ret, rule);
        return { errors: [ret], value: null };
      }
      if (Array.isArray(ret) && ret[Common.symbols.errors]) {
        ret.forEach((report) => internals.error(report, rule));
        return { errors: ret, value: null };
      }
      return { errors: null, value: ret };
    };
    internals.error = function(report, rule) {
      if (rule.message) {
        report._setTemplate(rule.message);
      }
      return report;
    };
    internals.finalize = function(value, errors, helpers) {
      errors = errors || [];
      const { schema, state, prefs } = helpers;
      if (errors.length) {
        const failover = internals.default("failover", void 0, errors, helpers);
        if (failover !== void 0) {
          state.mainstay.tracer.value(state, "failover", value, failover);
          value = failover;
          errors = [];
        }
      }
      if (errors.length && schema._flags.error) {
        if (typeof schema._flags.error === "function") {
          errors = schema._flags.error(errors);
          if (!Array.isArray(errors)) {
            errors = [errors];
          }
          for (const error of errors) {
            Assert(error instanceof Error || error instanceof Errors.Report, "error() must return an Error object");
          }
        } else {
          errors = [schema._flags.error];
        }
      }
      if (value === void 0) {
        const defaulted = internals.default("default", value, errors, helpers);
        state.mainstay.tracer.value(state, "default", value, defaulted);
        value = defaulted;
      }
      if (schema._flags.cast && value !== void 0) {
        const caster = schema._definition.cast[schema._flags.cast];
        if (caster.from(value)) {
          const casted = caster.to(value, helpers);
          state.mainstay.tracer.value(state, "cast", value, casted, schema._flags.cast);
          value = casted;
        }
      }
      if (schema.$_terms.externals && prefs.externals && prefs._externals !== false) {
        for (const { method } of schema.$_terms.externals) {
          state.mainstay.externals.push({ method, schema, state, label: Errors.label(schema._flags, state, prefs) });
        }
      }
      const result = { value, errors: errors.length ? errors : null };
      if (schema._flags.result) {
        result.value = schema._flags.result === "strip" ? void 0 : (
          /* raw */
          helpers.original
        );
        state.mainstay.tracer.value(state, schema._flags.result, value, result.value);
        state.shadow(value, schema._flags.result);
      }
      if (schema._cache && prefs.cache !== false && !schema._refs.length) {
        schema._cache.set(helpers.original, result);
      }
      if (value !== void 0 && !result.errors && schema._flags.artifact !== void 0) {
        state.mainstay.artifacts = state.mainstay.artifacts || /* @__PURE__ */ new Map();
        if (!state.mainstay.artifacts.has(schema._flags.artifact)) {
          state.mainstay.artifacts.set(schema._flags.artifact, []);
        }
        state.mainstay.artifacts.get(schema._flags.artifact).push(state.path);
      }
      return result;
    };
    internals.prefs = function(schema, prefs) {
      const isDefaultOptions = prefs === Common.defaults;
      if (isDefaultOptions && schema._preferences[Common.symbols.prefs]) {
        return schema._preferences[Common.symbols.prefs];
      }
      prefs = Common.preferences(prefs, schema._preferences);
      if (isDefaultOptions) {
        schema._preferences[Common.symbols.prefs] = prefs;
      }
      return prefs;
    };
    internals.default = function(flag, value, errors, helpers) {
      const { schema, state, prefs } = helpers;
      const source = schema._flags[flag];
      if (prefs.noDefaults || source === void 0) {
        return value;
      }
      state.mainstay.tracer.log(schema, state, "rule", flag, "full");
      if (!source) {
        return source;
      }
      if (typeof source === "function") {
        const args = source.length ? [Clone(state.ancestors[0]), helpers] : [];
        try {
          return source(...args);
        } catch (err) {
          errors.push(schema.$_createError(`any.${flag}`, null, { error: err }, state, prefs));
          return;
        }
      }
      if (typeof source !== "object") {
        return source;
      }
      if (source[Common.symbols.literal]) {
        return source.literal;
      }
      if (Common.isResolvable(source)) {
        return source.resolve(value, state, prefs);
      }
      return Clone(source);
    };
    internals.trim = function(value, schema) {
      if (typeof value !== "string") {
        return value;
      }
      const trim = schema.$_getRule("trim");
      if (!trim || !trim.args.enabled) {
        return value;
      }
      return value.trim();
    };
    internals.ignore = {
      active: false,
      debug: Ignore,
      entry: Ignore,
      filter: Ignore,
      log: Ignore,
      resolve: Ignore,
      value: Ignore
    };
    internals.errorsArray = function() {
      const errors = [];
      errors[Common.symbols.errors] = true;
      return errors;
    };
  }
});

// node_modules/joi/lib/values.js
var require_values = __commonJS({
  "node_modules/joi/lib/values.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var Assert = require_assert();
    var DeepEqual = require_deepEqual();
    var Common = require_common();
    var internals = {};
    module.exports = internals.Values = class {
      constructor(values, refs) {
        this._values = new Set(values);
        this._refs = new Set(refs);
        this._lowercase = internals.lowercases(values);
        this._override = false;
      }
      get length() {
        return this._values.size + this._refs.size;
      }
      add(value, refs) {
        if (Common.isResolvable(value)) {
          if (!this._refs.has(value)) {
            this._refs.add(value);
            if (refs) {
              refs.register(value);
            }
          }
          return;
        }
        if (!this.has(value, null, null, false)) {
          this._values.add(value);
          if (typeof value === "string") {
            this._lowercase.set(value.toLowerCase(), value);
          }
        }
      }
      static merge(target, source, remove) {
        target = target || new internals.Values();
        if (source) {
          if (source._override) {
            return source.clone();
          }
          for (const item of [...source._values, ...source._refs]) {
            target.add(item);
          }
        }
        if (remove) {
          for (const item of [...remove._values, ...remove._refs]) {
            target.remove(item);
          }
        }
        return target.length ? target : null;
      }
      remove(value) {
        if (Common.isResolvable(value)) {
          this._refs.delete(value);
          return;
        }
        this._values.delete(value);
        if (typeof value === "string") {
          this._lowercase.delete(value.toLowerCase());
        }
      }
      has(value, state, prefs, insensitive) {
        return !!this.get(value, state, prefs, insensitive);
      }
      get(value, state, prefs, insensitive) {
        if (!this.length) {
          return false;
        }
        if (this._values.has(value)) {
          return { value };
        }
        if (typeof value === "string" && value && insensitive) {
          const found = this._lowercase.get(value.toLowerCase());
          if (found) {
            return { value: found };
          }
        }
        if (!this._refs.size && typeof value !== "object") {
          return false;
        }
        if (typeof value === "object") {
          for (const item of this._values) {
            if (DeepEqual(item, value)) {
              return { value: item };
            }
          }
        }
        if (state) {
          for (const ref of this._refs) {
            const resolved = ref.resolve(value, state, prefs, null, { in: true });
            if (resolved === void 0) {
              continue;
            }
            const items = !ref.in || typeof resolved !== "object" ? [resolved] : Array.isArray(resolved) ? resolved : Object.keys(resolved);
            for (const item of items) {
              if (typeof item !== typeof value) {
                continue;
              }
              if (insensitive && value && typeof value === "string") {
                if (item.toLowerCase() === value.toLowerCase()) {
                  return { value: item, ref };
                }
              } else {
                if (DeepEqual(item, value)) {
                  return { value: item, ref };
                }
              }
            }
          }
        }
        return false;
      }
      override() {
        this._override = true;
      }
      values(options) {
        if (options && options.display) {
          const values = [];
          for (const item of [...this._values, ...this._refs]) {
            if (item !== void 0) {
              values.push(item);
            }
          }
          return values;
        }
        return Array.from([...this._values, ...this._refs]);
      }
      clone() {
        const set = new internals.Values(this._values, this._refs);
        set._override = this._override;
        return set;
      }
      concat(source) {
        Assert(!source._override, "Cannot concat override set of values");
        const set = new internals.Values([...this._values, ...source._values], [...this._refs, ...source._refs]);
        set._override = this._override;
        return set;
      }
      describe() {
        const normalized = [];
        if (this._override) {
          normalized.push({ override: true });
        }
        for (const value of this._values.values()) {
          normalized.push(value && typeof value === "object" ? { value } : value);
        }
        for (const value of this._refs.values()) {
          normalized.push(value.describe());
        }
        return normalized;
      }
    };
    internals.Values.prototype[Common.symbols.values] = true;
    internals.Values.prototype.slice = internals.Values.prototype.clone;
    internals.lowercases = function(from) {
      const map = /* @__PURE__ */ new Map();
      if (from) {
        for (const value of from) {
          if (typeof value === "string") {
            map.set(value.toLowerCase(), value);
          }
        }
      }
      return map;
    };
  }
});

// node_modules/joi/lib/base.js
var require_base = __commonJS({
  "node_modules/joi/lib/base.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var Assert = require_assert();
    var Clone = require_clone();
    var DeepEqual = require_deepEqual();
    var Merge = require_merge();
    var Cache = require_cache2();
    var Common = require_common();
    var Compile = require_compile();
    var Errors = require_errors2();
    var Extend = require_extend();
    var Manifest = require_manifest();
    var Messages = require_messages();
    var Modify = require_modify();
    var Ref = require_ref();
    var Trace = require_trace();
    var Validator = require_validator();
    var Values = require_values();
    var internals = {};
    internals.Base = class {
      constructor(type) {
        this.type = type;
        this.$_root = null;
        this._definition = {};
        this._reset();
      }
      _reset() {
        this._ids = new Modify.Ids();
        this._preferences = null;
        this._refs = new Ref.Manager();
        this._cache = null;
        this._valids = null;
        this._invalids = null;
        this._flags = {};
        this._rules = [];
        this._singleRules = /* @__PURE__ */ new Map();
        this.$_terms = {};
        this.$_temp = {
          // Runtime state (not cloned)
          ruleset: null,
          // null: use last, false: error, number: start position
          whens: {}
          // Runtime cache of generated whens
        };
      }
      // Manifest
      describe() {
        Assert(typeof Manifest.describe === "function", "Manifest functionality disabled");
        return Manifest.describe(this);
      }
      // Rules
      allow(...values) {
        Common.verifyFlat(values, "allow");
        return this._values(values, "_valids");
      }
      alter(targets) {
        Assert(targets && typeof targets === "object" && !Array.isArray(targets), "Invalid targets argument");
        Assert(!this._inRuleset(), "Cannot set alterations inside a ruleset");
        const obj = this.clone();
        obj.$_terms.alterations = obj.$_terms.alterations || [];
        for (const target in targets) {
          const adjuster = targets[target];
          Assert(typeof adjuster === "function", "Alteration adjuster for", target, "must be a function");
          obj.$_terms.alterations.push({ target, adjuster });
        }
        obj.$_temp.ruleset = false;
        return obj;
      }
      artifact(id) {
        Assert(id !== void 0, "Artifact cannot be undefined");
        Assert(!this._cache, "Cannot set an artifact with a rule cache");
        return this.$_setFlag("artifact", id);
      }
      cast(to) {
        Assert(to === false || typeof to === "string", "Invalid to value");
        Assert(to === false || this._definition.cast[to], "Type", this.type, "does not support casting to", to);
        return this.$_setFlag("cast", to === false ? void 0 : to);
      }
      default(value, options) {
        return this._default("default", value, options);
      }
      description(desc) {
        Assert(desc && typeof desc === "string", "Description must be a non-empty string");
        return this.$_setFlag("description", desc);
      }
      empty(schema) {
        const obj = this.clone();
        if (schema !== void 0) {
          schema = obj.$_compile(schema, { override: false });
        }
        return obj.$_setFlag("empty", schema, { clone: false });
      }
      error(err) {
        Assert(err, "Missing error");
        Assert(err instanceof Error || typeof err === "function", "Must provide a valid Error object or a function");
        return this.$_setFlag("error", err);
      }
      example(example, options = {}) {
        Assert(example !== void 0, "Missing example");
        Common.assertOptions(options, ["override"]);
        return this._inner("examples", example, { single: true, override: options.override });
      }
      external(method, description) {
        if (typeof method === "object") {
          Assert(!description, "Cannot combine options with description");
          description = method.description;
          method = method.method;
        }
        Assert(typeof method === "function", "Method must be a function");
        Assert(description === void 0 || description && typeof description === "string", "Description must be a non-empty string");
        return this._inner("externals", { method, description }, { single: true });
      }
      failover(value, options) {
        return this._default("failover", value, options);
      }
      forbidden() {
        return this.presence("forbidden");
      }
      id(id) {
        if (!id) {
          return this.$_setFlag("id", void 0);
        }
        Assert(typeof id === "string", "id must be a non-empty string");
        Assert(/^[^\.]+$/.test(id), "id cannot contain period character");
        return this.$_setFlag("id", id);
      }
      invalid(...values) {
        return this._values(values, "_invalids");
      }
      label(name) {
        Assert(name && typeof name === "string", "Label name must be a non-empty string");
        return this.$_setFlag("label", name);
      }
      meta(meta) {
        Assert(meta !== void 0, "Meta cannot be undefined");
        return this._inner("metas", meta, { single: true });
      }
      note(...notes) {
        Assert(notes.length, "Missing notes");
        for (const note of notes) {
          Assert(note && typeof note === "string", "Notes must be non-empty strings");
        }
        return this._inner("notes", notes);
      }
      only(mode = true) {
        Assert(typeof mode === "boolean", "Invalid mode:", mode);
        return this.$_setFlag("only", mode);
      }
      optional() {
        return this.presence("optional");
      }
      prefs(prefs) {
        Assert(prefs, "Missing preferences");
        Assert(prefs.context === void 0, "Cannot override context");
        Assert(prefs.externals === void 0, "Cannot override externals");
        Assert(prefs.warnings === void 0, "Cannot override warnings");
        Assert(prefs.debug === void 0, "Cannot override debug");
        Common.checkPreferences(prefs);
        const obj = this.clone();
        obj._preferences = Common.preferences(obj._preferences, prefs);
        return obj;
      }
      presence(mode) {
        Assert(["optional", "required", "forbidden"].includes(mode), "Unknown presence mode", mode);
        return this.$_setFlag("presence", mode);
      }
      raw(enabled = true) {
        return this.$_setFlag("result", enabled ? "raw" : void 0);
      }
      result(mode) {
        Assert(["raw", "strip"].includes(mode), "Unknown result mode", mode);
        return this.$_setFlag("result", mode);
      }
      required() {
        return this.presence("required");
      }
      strict(enabled) {
        const obj = this.clone();
        const convert = enabled === void 0 ? false : !enabled;
        obj._preferences = Common.preferences(obj._preferences, { convert });
        return obj;
      }
      strip(enabled = true) {
        return this.$_setFlag("result", enabled ? "strip" : void 0);
      }
      tag(...tags) {
        Assert(tags.length, "Missing tags");
        for (const tag of tags) {
          Assert(tag && typeof tag === "string", "Tags must be non-empty strings");
        }
        return this._inner("tags", tags);
      }
      unit(name) {
        Assert(name && typeof name === "string", "Unit name must be a non-empty string");
        return this.$_setFlag("unit", name);
      }
      valid(...values) {
        Common.verifyFlat(values, "valid");
        const obj = this.allow(...values);
        obj.$_setFlag("only", !!obj._valids, { clone: false });
        return obj;
      }
      when(condition, options) {
        const obj = this.clone();
        if (!obj.$_terms.whens) {
          obj.$_terms.whens = [];
        }
        const when = Compile.when(obj, condition, options);
        if (!["any", "link"].includes(obj.type)) {
          const conditions = when.is ? [when] : when.switch;
          for (const item of conditions) {
            Assert(!item.then || item.then.type === "any" || item.then.type === obj.type, "Cannot combine", obj.type, "with", item.then && item.then.type);
            Assert(!item.otherwise || item.otherwise.type === "any" || item.otherwise.type === obj.type, "Cannot combine", obj.type, "with", item.otherwise && item.otherwise.type);
          }
        }
        obj.$_terms.whens.push(when);
        return obj.$_mutateRebuild();
      }
      // Helpers
      cache(cache) {
        Assert(!this._inRuleset(), "Cannot set caching inside a ruleset");
        Assert(!this._cache, "Cannot override schema cache");
        Assert(this._flags.artifact === void 0, "Cannot cache a rule with an artifact");
        const obj = this.clone();
        obj._cache = cache || Cache.provider.provision();
        obj.$_temp.ruleset = false;
        return obj;
      }
      clone() {
        const obj = Object.create(Object.getPrototypeOf(this));
        return this._assign(obj);
      }
      concat(source) {
        Assert(Common.isSchema(source), "Invalid schema object");
        Assert(this.type === "any" || source.type === "any" || source.type === this.type, "Cannot merge type", this.type, "with another type:", source.type);
        Assert(!this._inRuleset(), "Cannot concatenate onto a schema with open ruleset");
        Assert(!source._inRuleset(), "Cannot concatenate a schema with open ruleset");
        let obj = this.clone();
        if (this.type === "any" && source.type !== "any") {
          const tmpObj = source.clone();
          for (const key of Object.keys(obj)) {
            if (key !== "type") {
              tmpObj[key] = obj[key];
            }
          }
          obj = tmpObj;
        }
        obj._ids.concat(source._ids);
        obj._refs.register(source, Ref.toSibling);
        obj._preferences = obj._preferences ? Common.preferences(obj._preferences, source._preferences) : source._preferences;
        obj._valids = Values.merge(obj._valids, source._valids, source._invalids);
        obj._invalids = Values.merge(obj._invalids, source._invalids, source._valids);
        for (const name of source._singleRules.keys()) {
          if (obj._singleRules.has(name)) {
            obj._rules = obj._rules.filter((target) => target.keep || target.name !== name);
            obj._singleRules.delete(name);
          }
        }
        for (const test of source._rules) {
          if (!source._definition.rules[test.method].multi) {
            obj._singleRules.set(test.name, test);
          }
          obj._rules.push(test);
        }
        if (obj._flags.empty && source._flags.empty) {
          obj._flags.empty = obj._flags.empty.concat(source._flags.empty);
          const flags = Object.assign({}, source._flags);
          delete flags.empty;
          Merge(obj._flags, flags);
        } else if (source._flags.empty) {
          obj._flags.empty = source._flags.empty;
          const flags = Object.assign({}, source._flags);
          delete flags.empty;
          Merge(obj._flags, flags);
        } else {
          Merge(obj._flags, source._flags);
        }
        for (const key in source.$_terms) {
          const terms = source.$_terms[key];
          if (!terms) {
            if (!obj.$_terms[key]) {
              obj.$_terms[key] = terms;
            }
            continue;
          }
          if (!obj.$_terms[key]) {
            obj.$_terms[key] = terms.slice();
            continue;
          }
          obj.$_terms[key] = obj.$_terms[key].concat(terms);
        }
        if (this.$_root._tracer) {
          this.$_root._tracer._combine(obj, [this, source]);
        }
        return obj.$_mutateRebuild();
      }
      extend(options) {
        Assert(!options.base, "Cannot extend type with another base");
        return Extend.type(this, options);
      }
      extract(path5) {
        path5 = Array.isArray(path5) ? path5 : path5.split(".");
        return this._ids.reach(path5);
      }
      fork(paths, adjuster) {
        Assert(!this._inRuleset(), "Cannot fork inside a ruleset");
        let obj = this;
        for (let path5 of [].concat(paths)) {
          path5 = Array.isArray(path5) ? path5 : path5.split(".");
          obj = obj._ids.fork(path5, adjuster, obj);
        }
        obj.$_temp.ruleset = false;
        return obj;
      }
      rule(options) {
        const def = this._definition;
        Common.assertOptions(options, Object.keys(def.modifiers));
        Assert(this.$_temp.ruleset !== false, "Cannot apply rules to empty ruleset or the last rule added does not support rule properties");
        const start = this.$_temp.ruleset === null ? this._rules.length - 1 : this.$_temp.ruleset;
        Assert(start >= 0 && start < this._rules.length, "Cannot apply rules to empty ruleset");
        const obj = this.clone();
        for (let i = start; i < obj._rules.length; ++i) {
          const original = obj._rules[i];
          const rule = Clone(original);
          for (const name in options) {
            def.modifiers[name](rule, options[name]);
            Assert(rule.name === original.name, "Cannot change rule name");
          }
          obj._rules[i] = rule;
          if (obj._singleRules.get(rule.name) === original) {
            obj._singleRules.set(rule.name, rule);
          }
        }
        obj.$_temp.ruleset = false;
        return obj.$_mutateRebuild();
      }
      get ruleset() {
        Assert(!this._inRuleset(), "Cannot start a new ruleset without closing the previous one");
        const obj = this.clone();
        obj.$_temp.ruleset = obj._rules.length;
        return obj;
      }
      get $() {
        return this.ruleset;
      }
      tailor(targets) {
        targets = [].concat(targets);
        Assert(!this._inRuleset(), "Cannot tailor inside a ruleset");
        let obj = this;
        if (this.$_terms.alterations) {
          for (const { target, adjuster } of this.$_terms.alterations) {
            if (targets.includes(target)) {
              obj = adjuster(obj);
              Assert(Common.isSchema(obj), "Alteration adjuster for", target, "failed to return a schema object");
            }
          }
        }
        obj = obj.$_modify({ each: /* @__PURE__ */ __name((item) => item.tailor(targets), "each"), ref: false });
        obj.$_temp.ruleset = false;
        return obj.$_mutateRebuild();
      }
      tracer() {
        return Trace.location ? Trace.location(this) : this;
      }
      validate(value, options) {
        return Validator.entry(value, this, options);
      }
      validateAsync(value, options) {
        return Validator.entryAsync(value, this, options);
      }
      // Extensions
      $_addRule(options) {
        if (typeof options === "string") {
          options = { name: options };
        }
        Assert(options && typeof options === "object", "Invalid options");
        Assert(options.name && typeof options.name === "string", "Invalid rule name");
        for (const key in options) {
          Assert(key[0] !== "_", "Cannot set private rule properties");
        }
        const rule = Object.assign({}, options);
        rule._resolve = [];
        rule.method = rule.method || rule.name;
        const definition = this._definition.rules[rule.method];
        const args = rule.args;
        Assert(definition, "Unknown rule", rule.method);
        const obj = this.clone();
        if (args) {
          Assert(Object.keys(args).length === 1 || Object.keys(args).length === this._definition.rules[rule.name].args.length, "Invalid rule definition for", this.type, rule.name);
          for (const key in args) {
            let arg = args[key];
            if (definition.argsByName) {
              const resolver = definition.argsByName.get(key);
              if (resolver.ref && Common.isResolvable(arg)) {
                rule._resolve.push(key);
                obj.$_mutateRegister(arg);
              } else {
                if (resolver.normalize) {
                  arg = resolver.normalize(arg);
                  args[key] = arg;
                }
                if (resolver.assert) {
                  const error = Common.validateArg(arg, key, resolver);
                  Assert(!error, error, "or reference");
                }
              }
            }
            if (arg === void 0) {
              delete args[key];
              continue;
            }
            args[key] = arg;
          }
        }
        if (!definition.multi) {
          obj._ruleRemove(rule.name, { clone: false });
          obj._singleRules.set(rule.name, rule);
        }
        if (obj.$_temp.ruleset === false) {
          obj.$_temp.ruleset = null;
        }
        if (definition.priority) {
          obj._rules.unshift(rule);
        } else {
          obj._rules.push(rule);
        }
        return obj;
      }
      $_compile(schema, options) {
        return Compile.schema(this.$_root, schema, options);
      }
      $_createError(code, value, local, state, prefs, options = {}) {
        const flags = options.flags !== false ? this._flags : {};
        const messages = options.messages ? Messages.merge(this._definition.messages, options.messages) : this._definition.messages;
        return new Errors.Report(code, value, local, flags, messages, state, prefs);
      }
      $_getFlag(name) {
        return this._flags[name];
      }
      $_getRule(name) {
        return this._singleRules.get(name);
      }
      $_mapLabels(path5) {
        path5 = Array.isArray(path5) ? path5 : path5.split(".");
        return this._ids.labels(path5);
      }
      $_match(value, state, prefs, overrides) {
        prefs = Object.assign({}, prefs);
        prefs.abortEarly = true;
        prefs._externals = false;
        state.snapshot();
        const result = !Validator.validate(value, this, state, prefs, overrides).errors;
        state.restore();
        return result;
      }
      $_modify(options) {
        Common.assertOptions(options, ["each", "once", "ref", "schema"]);
        return Modify.schema(this, options) || this;
      }
      $_mutateRebuild() {
        Assert(!this._inRuleset(), "Cannot add this rule inside a ruleset");
        this._refs.reset();
        this._ids.reset();
        const each = /* @__PURE__ */ __name((item, { source, name, path: path5, key }) => {
          const family = this._definition[source][name] && this._definition[source][name].register;
          if (family !== false) {
            this.$_mutateRegister(item, { family, key });
          }
        }, "each");
        this.$_modify({ each });
        if (this._definition.rebuild) {
          this._definition.rebuild(this);
        }
        this.$_temp.ruleset = false;
        return this;
      }
      $_mutateRegister(schema, { family, key } = {}) {
        this._refs.register(schema, family);
        this._ids.register(schema, { key });
      }
      $_property(name) {
        return this._definition.properties[name];
      }
      $_reach(path5) {
        return this._ids.reach(path5);
      }
      $_rootReferences() {
        return this._refs.roots();
      }
      $_setFlag(name, value, options = {}) {
        Assert(name[0] === "_" || !this._inRuleset(), "Cannot set flag inside a ruleset");
        const flag = this._definition.flags[name] || {};
        if (DeepEqual(value, flag.default)) {
          value = void 0;
        }
        if (DeepEqual(value, this._flags[name])) {
          return this;
        }
        const obj = options.clone !== false ? this.clone() : this;
        if (value !== void 0) {
          obj._flags[name] = value;
          obj.$_mutateRegister(value);
        } else {
          delete obj._flags[name];
        }
        if (name[0] !== "_") {
          obj.$_temp.ruleset = false;
        }
        return obj;
      }
      $_parent(method, ...args) {
        return this[method][Common.symbols.parent].call(this, ...args);
      }
      $_validate(value, state, prefs) {
        return Validator.validate(value, this, state, prefs);
      }
      // Internals
      _assign(target) {
        target.type = this.type;
        target.$_root = this.$_root;
        target.$_temp = Object.assign({}, this.$_temp);
        target.$_temp.whens = {};
        target._ids = this._ids.clone();
        target._preferences = this._preferences;
        target._valids = this._valids && this._valids.clone();
        target._invalids = this._invalids && this._invalids.clone();
        target._rules = this._rules.slice();
        target._singleRules = Clone(this._singleRules, { shallow: true });
        target._refs = this._refs.clone();
        target._flags = Object.assign({}, this._flags);
        target._cache = null;
        target.$_terms = {};
        for (const key in this.$_terms) {
          target.$_terms[key] = this.$_terms[key] ? this.$_terms[key].slice() : null;
        }
        target.$_super = {};
        for (const override in this.$_super) {
          target.$_super[override] = this._super[override].bind(target);
        }
        return target;
      }
      _bare() {
        const obj = this.clone();
        obj._reset();
        const terms = obj._definition.terms;
        for (const name in terms) {
          const term = terms[name];
          obj.$_terms[name] = term.init;
        }
        return obj.$_mutateRebuild();
      }
      _default(flag, value, options = {}) {
        Common.assertOptions(options, "literal");
        Assert(value !== void 0, "Missing", flag, "value");
        Assert(typeof value === "function" || !options.literal, "Only function value supports literal option");
        if (typeof value === "function" && options.literal) {
          value = {
            [Common.symbols.literal]: true,
            literal: value
          };
        }
        const obj = this.$_setFlag(flag, value);
        return obj;
      }
      _generate(value, state, prefs) {
        if (!this.$_terms.whens) {
          return { schema: this };
        }
        const whens = [];
        const ids = [];
        for (let i = 0; i < this.$_terms.whens.length; ++i) {
          const when = this.$_terms.whens[i];
          if (when.concat) {
            whens.push(when.concat);
            ids.push(`${i}.concat`);
            continue;
          }
          const input = when.ref ? when.ref.resolve(value, state, prefs) : value;
          const tests = when.is ? [when] : when.switch;
          const before = ids.length;
          for (let j = 0; j < tests.length; ++j) {
            const { is, then, otherwise } = tests[j];
            const baseId = `${i}${when.switch ? "." + j : ""}`;
            if (is.$_match(input, state.nest(is, `${baseId}.is`), prefs)) {
              if (then) {
                const localState = state.localize([...state.path, `${baseId}.then`], state.ancestors, state.schemas);
                const { schema: generated, id: id2 } = then._generate(value, localState, prefs);
                whens.push(generated);
                ids.push(`${baseId}.then${id2 ? `(${id2})` : ""}`);
                break;
              }
            } else if (otherwise) {
              const localState = state.localize([...state.path, `${baseId}.otherwise`], state.ancestors, state.schemas);
              const { schema: generated, id: id2 } = otherwise._generate(value, localState, prefs);
              whens.push(generated);
              ids.push(`${baseId}.otherwise${id2 ? `(${id2})` : ""}`);
              break;
            }
          }
          if (when.break && ids.length > before) {
            break;
          }
        }
        const id = ids.join(", ");
        state.mainstay.tracer.debug(state, "rule", "when", id);
        if (!id) {
          return { schema: this };
        }
        if (!state.mainstay.tracer.active && this.$_temp.whens[id]) {
          return { schema: this.$_temp.whens[id], id };
        }
        let obj = this;
        if (this._definition.generate) {
          obj = this._definition.generate(this, value, state, prefs);
        }
        for (const when of whens) {
          obj = obj.concat(when);
        }
        if (this.$_root._tracer) {
          this.$_root._tracer._combine(obj, [this, ...whens]);
        }
        this.$_temp.whens[id] = obj;
        return { schema: obj, id };
      }
      _inner(type, values, options = {}) {
        Assert(!this._inRuleset(), `Cannot set ${type} inside a ruleset`);
        const obj = this.clone();
        if (!obj.$_terms[type] || options.override) {
          obj.$_terms[type] = [];
        }
        if (options.single) {
          obj.$_terms[type].push(values);
        } else {
          obj.$_terms[type].push(...values);
        }
        obj.$_temp.ruleset = false;
        return obj;
      }
      _inRuleset() {
        return this.$_temp.ruleset !== null && this.$_temp.ruleset !== false;
      }
      _ruleRemove(name, options = {}) {
        if (!this._singleRules.has(name)) {
          return this;
        }
        const obj = options.clone !== false ? this.clone() : this;
        obj._singleRules.delete(name);
        const filtered = [];
        for (let i = 0; i < obj._rules.length; ++i) {
          const test = obj._rules[i];
          if (test.name === name && !test.keep) {
            if (obj._inRuleset() && i < obj.$_temp.ruleset) {
              --obj.$_temp.ruleset;
            }
            continue;
          }
          filtered.push(test);
        }
        obj._rules = filtered;
        return obj;
      }
      _values(values, key) {
        Common.verifyFlat(values, key.slice(1, -1));
        const obj = this.clone();
        const override = values[0] === Common.symbols.override;
        if (override) {
          values = values.slice(1);
        }
        if (!obj[key] && values.length) {
          obj[key] = new Values();
        } else if (override) {
          obj[key] = values.length ? new Values() : null;
          obj.$_mutateRebuild();
        }
        if (!obj[key]) {
          return obj;
        }
        if (override) {
          obj[key].override();
        }
        for (const value of values) {
          Assert(value !== void 0, "Cannot call allow/valid/invalid with undefined");
          Assert(value !== Common.symbols.override, "Override must be the first value");
          const other = key === "_invalids" ? "_valids" : "_invalids";
          if (obj[other]) {
            obj[other].remove(value);
            if (!obj[other].length) {
              Assert(key === "_valids" || !obj._flags.only, "Setting invalid value", value, "leaves schema rejecting all values due to previous valid rule");
              obj[other] = null;
            }
          }
          obj[key].add(value, obj._refs);
        }
        return obj;
      }
    };
    internals.Base.prototype[Common.symbols.any] = {
      version: Common.version,
      compile: Compile.compile,
      root: "$_root"
    };
    internals.Base.prototype.isImmutable = true;
    internals.Base.prototype.deny = internals.Base.prototype.invalid;
    internals.Base.prototype.disallow = internals.Base.prototype.invalid;
    internals.Base.prototype.equal = internals.Base.prototype.valid;
    internals.Base.prototype.exist = internals.Base.prototype.required;
    internals.Base.prototype.not = internals.Base.prototype.invalid;
    internals.Base.prototype.options = internals.Base.prototype.prefs;
    internals.Base.prototype.preferences = internals.Base.prototype.prefs;
    module.exports = new internals.Base();
  }
});

// node_modules/joi/lib/types/any.js
var require_any = __commonJS({
  "node_modules/joi/lib/types/any.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var Assert = require_assert();
    var Base = require_base();
    var Common = require_common();
    var Messages = require_messages();
    module.exports = Base.extend({
      type: "any",
      flags: {
        only: { default: false }
      },
      terms: {
        alterations: { init: null },
        examples: { init: null },
        externals: { init: null },
        metas: { init: [] },
        notes: { init: [] },
        shared: { init: null },
        tags: { init: [] },
        whens: { init: null }
      },
      rules: {
        custom: {
          method(method, description) {
            Assert(typeof method === "function", "Method must be a function");
            Assert(description === void 0 || description && typeof description === "string", "Description must be a non-empty string");
            return this.$_addRule({ name: "custom", args: { method, description } });
          },
          validate(value, helpers, { method }) {
            try {
              return method(value, helpers);
            } catch (err) {
              return helpers.error("any.custom", { error: err });
            }
          },
          args: ["method", "description"],
          multi: true
        },
        messages: {
          method(messages) {
            return this.prefs({ messages });
          }
        },
        shared: {
          method(schema) {
            Assert(Common.isSchema(schema) && schema._flags.id, "Schema must be a schema with an id");
            const obj = this.clone();
            obj.$_terms.shared = obj.$_terms.shared || [];
            obj.$_terms.shared.push(schema);
            obj.$_mutateRegister(schema);
            return obj;
          }
        },
        warning: {
          method(code, local) {
            Assert(code && typeof code === "string", "Invalid warning code");
            return this.$_addRule({ name: "warning", args: { code, local }, warn: true });
          },
          validate(value, helpers, { code, local }) {
            return helpers.error(code, local);
          },
          args: ["code", "local"],
          multi: true
        }
      },
      modifiers: {
        keep(rule, enabled = true) {
          rule.keep = enabled;
        },
        message(rule, message) {
          rule.message = Messages.compile(message);
        },
        warn(rule, enabled = true) {
          rule.warn = enabled;
        }
      },
      manifest: {
        build(obj, desc) {
          for (const key in desc) {
            const values = desc[key];
            if (["examples", "externals", "metas", "notes", "tags"].includes(key)) {
              for (const value of values) {
                obj = obj[key.slice(0, -1)](value);
              }
              continue;
            }
            if (key === "alterations") {
              const alter = {};
              for (const { target, adjuster } of values) {
                alter[target] = adjuster;
              }
              obj = obj.alter(alter);
              continue;
            }
            if (key === "whens") {
              for (const value of values) {
                const { ref, is, not, then, otherwise, concat } = value;
                if (concat) {
                  obj = obj.concat(concat);
                } else if (ref) {
                  obj = obj.when(ref, { is, not, then, otherwise, switch: value.switch, break: value.break });
                } else {
                  obj = obj.when(is, { then, otherwise, break: value.break });
                }
              }
              continue;
            }
            if (key === "shared") {
              for (const value of values) {
                obj = obj.shared(value);
              }
            }
          }
          return obj;
        }
      },
      messages: {
        "any.custom": "{{#label}} failed custom validation because {{#error.message}}",
        "any.default": "{{#label}} threw an error when running default method",
        "any.failover": "{{#label}} threw an error when running failover method",
        "any.invalid": "{{#label}} contains an invalid value",
        "any.only": '{{#label}} must be {if(#valids.length == 1, "", "one of ")}{{#valids}}',
        "any.ref": "{{#label}} {{#arg}} references {{:#ref}} which {{#reason}}",
        "any.required": "{{#label}} is required",
        "any.unknown": "{{#label}} is not allowed"
      }
    });
  }
});

// node_modules/joi/lib/types/alternatives.js
var require_alternatives = __commonJS({
  "node_modules/joi/lib/types/alternatives.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var Assert = require_assert();
    var Merge = require_merge();
    var Any = require_any();
    var Common = require_common();
    var Compile = require_compile();
    var Errors = require_errors2();
    var Ref = require_ref();
    var internals = {};
    module.exports = Any.extend({
      type: "alternatives",
      flags: {
        match: { default: "any" }
        // 'any', 'one', 'all'
      },
      terms: {
        matches: { init: [], register: Ref.toSibling }
      },
      args(schema, ...schemas) {
        if (schemas.length === 1) {
          if (Array.isArray(schemas[0])) {
            return schema.try(...schemas[0]);
          }
        }
        return schema.try(...schemas);
      },
      validate(value, helpers) {
        const { schema, error, state, prefs } = helpers;
        if (schema._flags.match) {
          const matched = [];
          const failed = [];
          for (let i = 0; i < schema.$_terms.matches.length; ++i) {
            const item = schema.$_terms.matches[i];
            const localState = state.nest(item.schema, `match.${i}`);
            localState.snapshot();
            const result = item.schema.$_validate(value, localState, prefs);
            if (!result.errors) {
              matched.push(result.value);
              localState.commit();
            } else {
              failed.push(result.errors);
              localState.restore();
            }
          }
          if (matched.length === 0) {
            const context = {
              details: failed.map((f) => Errors.details(f, { override: false }))
            };
            return { errors: error("alternatives.any", context) };
          }
          if (schema._flags.match === "one") {
            return matched.length === 1 ? { value: matched[0] } : { errors: error("alternatives.one") };
          }
          if (matched.length !== schema.$_terms.matches.length) {
            const context = {
              details: failed.map((f) => Errors.details(f, { override: false }))
            };
            return { errors: error("alternatives.all", context) };
          }
          const isAnyObj = /* @__PURE__ */ __name((alternative) => {
            return alternative.$_terms.matches.some((v) => {
              return v.schema.type === "object" || v.schema.type === "alternatives" && isAnyObj(v.schema);
            });
          }, "isAnyObj");
          return isAnyObj(schema) ? { value: matched.reduce((acc, v) => Merge(acc, v, { mergeArrays: false })) } : { value: matched[matched.length - 1] };
        }
        const errors = [];
        for (let i = 0; i < schema.$_terms.matches.length; ++i) {
          const item = schema.$_terms.matches[i];
          if (item.schema) {
            const localState = state.nest(item.schema, `match.${i}`);
            localState.snapshot();
            const result = item.schema.$_validate(value, localState, prefs);
            if (!result.errors) {
              localState.commit();
              return result;
            }
            localState.restore();
            errors.push({ schema: item.schema, reports: result.errors });
            continue;
          }
          const input = item.ref ? item.ref.resolve(value, state, prefs) : value;
          const tests = item.is ? [item] : item.switch;
          for (let j = 0; j < tests.length; ++j) {
            const test = tests[j];
            const { is, then, otherwise } = test;
            const id = `match.${i}${item.switch ? "." + j : ""}`;
            if (!is.$_match(input, state.nest(is, `${id}.is`), prefs)) {
              if (otherwise) {
                return otherwise.$_validate(value, state.nest(otherwise, `${id}.otherwise`), prefs);
              }
            } else if (then) {
              return then.$_validate(value, state.nest(then, `${id}.then`), prefs);
            }
          }
        }
        return internals.errors(errors, helpers);
      },
      rules: {
        conditional: {
          method(condition, options) {
            Assert(!this._flags._endedSwitch, "Unreachable condition");
            Assert(!this._flags.match, "Cannot combine match mode", this._flags.match, "with conditional rule");
            Assert(options.break === void 0, "Cannot use break option with alternatives conditional");
            const obj = this.clone();
            const match = Compile.when(obj, condition, options);
            const conditions = match.is ? [match] : match.switch;
            for (const item of conditions) {
              if (item.then && item.otherwise) {
                obj.$_setFlag("_endedSwitch", true, { clone: false });
                break;
              }
            }
            obj.$_terms.matches.push(match);
            return obj.$_mutateRebuild();
          }
        },
        match: {
          method(mode) {
            Assert(["any", "one", "all"].includes(mode), "Invalid alternatives match mode", mode);
            if (mode !== "any") {
              for (const match of this.$_terms.matches) {
                Assert(match.schema, "Cannot combine match mode", mode, "with conditional rules");
              }
            }
            return this.$_setFlag("match", mode);
          }
        },
        try: {
          method(...schemas) {
            Assert(schemas.length, "Missing alternative schemas");
            Common.verifyFlat(schemas, "try");
            Assert(!this._flags._endedSwitch, "Unreachable condition");
            const obj = this.clone();
            for (const schema of schemas) {
              obj.$_terms.matches.push({ schema: obj.$_compile(schema) });
            }
            return obj.$_mutateRebuild();
          }
        }
      },
      overrides: {
        label(name) {
          const obj = this.$_parent("label", name);
          const each = /* @__PURE__ */ __name((item, source) => {
            return source.path[0] !== "is" && typeof item._flags.label !== "string" ? item.label(name) : void 0;
          }, "each");
          return obj.$_modify({ each, ref: false });
        }
      },
      rebuild(schema) {
        const each = /* @__PURE__ */ __name((item) => {
          if (Common.isSchema(item) && item.type === "array") {
            schema.$_setFlag("_arrayItems", true, { clone: false });
          }
        }, "each");
        schema.$_modify({ each });
      },
      manifest: {
        build(obj, desc) {
          if (desc.matches) {
            for (const match of desc.matches) {
              const { schema, ref, is, not, then, otherwise } = match;
              if (schema) {
                obj = obj.try(schema);
              } else if (ref) {
                obj = obj.conditional(ref, { is, then, not, otherwise, switch: match.switch });
              } else {
                obj = obj.conditional(is, { then, otherwise });
              }
            }
          }
          return obj;
        }
      },
      messages: {
        "alternatives.all": "{{#label}} does not match all of the required types",
        "alternatives.any": "{{#label}} does not match any of the allowed types",
        "alternatives.match": "{{#label}} does not match any of the allowed types",
        "alternatives.one": "{{#label}} matches more than one allowed type",
        "alternatives.types": "{{#label}} must be one of {{#types}}"
      }
    });
    internals.errors = function(failures, { error, state }) {
      if (!failures.length) {
        return { errors: error("alternatives.any") };
      }
      if (failures.length === 1) {
        return { errors: failures[0].reports };
      }
      const valids = /* @__PURE__ */ new Set();
      const complex = [];
      for (const { reports, schema } of failures) {
        if (reports.length > 1) {
          return internals.unmatched(failures, error);
        }
        const report = reports[0];
        if (report instanceof Errors.Report === false) {
          return internals.unmatched(failures, error);
        }
        if (report.state.path.length !== state.path.length) {
          complex.push({ type: schema.type, report });
          continue;
        }
        if (report.code === "any.only") {
          for (const valid of report.local.valids) {
            valids.add(valid);
          }
          continue;
        }
        const [type, code] = report.code.split(".");
        if (code !== "base") {
          complex.push({ type: schema.type, report });
          continue;
        }
        valids.add(type);
      }
      if (!complex.length) {
        return { errors: error("alternatives.types", { types: [...valids] }) };
      }
      if (complex.length === 1) {
        return { errors: complex[0].report };
      }
      return internals.unmatched(failures, error);
    };
    internals.unmatched = function(failures, error) {
      const errors = [];
      for (const failure of failures) {
        errors.push(...failure.reports);
      }
      return { errors: error("alternatives.match", Errors.details(errors, { override: false })) };
    };
  }
});

// node_modules/joi/lib/types/array.js
var require_array = __commonJS({
  "node_modules/joi/lib/types/array.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var Assert = require_assert();
    var DeepEqual = require_deepEqual();
    var Reach = require_reach();
    var Any = require_any();
    var Common = require_common();
    var Compile = require_compile();
    var internals = {};
    module.exports = Any.extend({
      type: "array",
      flags: {
        single: { default: false },
        sparse: { default: false }
      },
      terms: {
        items: { init: [], manifest: "schema" },
        ordered: { init: [], manifest: "schema" },
        _exclusions: { init: [] },
        _inclusions: { init: [] },
        _requireds: { init: [] }
      },
      coerce: {
        from: "object",
        method(value, { schema, state, prefs }) {
          if (!Array.isArray(value)) {
            return;
          }
          const sort = schema.$_getRule("sort");
          if (!sort) {
            return;
          }
          return internals.sort(schema, value, sort.args.options, state, prefs);
        }
      },
      validate(value, { schema, error }) {
        if (!Array.isArray(value)) {
          if (schema._flags.single) {
            const single = [value];
            single[Common.symbols.arraySingle] = true;
            return { value: single };
          }
          return { errors: error("array.base") };
        }
        if (!schema.$_getRule("items") && !schema.$_terms.externals) {
          return;
        }
        return { value: value.slice() };
      },
      rules: {
        has: {
          method(schema) {
            schema = this.$_compile(schema, { appendPath: true });
            const obj = this.$_addRule({ name: "has", args: { schema } });
            obj.$_mutateRegister(schema);
            return obj;
          },
          validate(value, { state, prefs, error }, { schema: has }) {
            const ancestors = [value, ...state.ancestors];
            for (let i = 0; i < value.length; ++i) {
              const localState = state.localize([...state.path, i], ancestors, has);
              if (has.$_match(value[i], localState, prefs)) {
                return value;
              }
            }
            const patternLabel = has._flags.label;
            if (patternLabel) {
              return error("array.hasKnown", { patternLabel });
            }
            return error("array.hasUnknown", null);
          },
          multi: true
        },
        items: {
          method(...schemas) {
            Common.verifyFlat(schemas, "items");
            const obj = this.$_addRule("items");
            for (let i = 0; i < schemas.length; ++i) {
              const type = Common.tryWithPath(() => this.$_compile(schemas[i]), i, { append: true });
              obj.$_terms.items.push(type);
            }
            return obj.$_mutateRebuild();
          },
          validate(value, { schema, error, state, prefs, errorsArray }) {
            const requireds = schema.$_terms._requireds.slice();
            const ordereds = schema.$_terms.ordered.slice();
            const inclusions = [...schema.$_terms._inclusions, ...requireds];
            const wasArray = !value[Common.symbols.arraySingle];
            delete value[Common.symbols.arraySingle];
            const errors = errorsArray();
            let il = value.length;
            for (let i = 0; i < il; ++i) {
              const item = value[i];
              let errored = false;
              let isValid = false;
              const key = wasArray ? i : new Number(i);
              const path5 = [...state.path, key];
              if (!schema._flags.sparse && item === void 0) {
                errors.push(error("array.sparse", { key, path: path5, pos: i, value: void 0 }, state.localize(path5)));
                if (prefs.abortEarly) {
                  return errors;
                }
                ordereds.shift();
                continue;
              }
              const ancestors = [value, ...state.ancestors];
              for (const exclusion of schema.$_terms._exclusions) {
                if (!exclusion.$_match(item, state.localize(path5, ancestors, exclusion), prefs, { presence: "ignore" })) {
                  continue;
                }
                errors.push(error("array.excludes", { pos: i, value: item }, state.localize(path5)));
                if (prefs.abortEarly) {
                  return errors;
                }
                errored = true;
                ordereds.shift();
                break;
              }
              if (errored) {
                continue;
              }
              if (schema.$_terms.ordered.length) {
                if (ordereds.length) {
                  const ordered = ordereds.shift();
                  const res = ordered.$_validate(item, state.localize(path5, ancestors, ordered), prefs);
                  if (!res.errors) {
                    if (ordered._flags.result === "strip") {
                      internals.fastSplice(value, i);
                      --i;
                      --il;
                    } else if (!schema._flags.sparse && res.value === void 0) {
                      errors.push(error("array.sparse", { key, path: path5, pos: i, value: void 0 }, state.localize(path5)));
                      if (prefs.abortEarly) {
                        return errors;
                      }
                      continue;
                    } else {
                      value[i] = res.value;
                    }
                  } else {
                    errors.push(...res.errors);
                    if (prefs.abortEarly) {
                      return errors;
                    }
                  }
                  continue;
                } else if (!schema.$_terms.items.length) {
                  errors.push(error("array.orderedLength", { pos: i, limit: schema.$_terms.ordered.length }));
                  if (prefs.abortEarly) {
                    return errors;
                  }
                  break;
                }
              }
              const requiredChecks = [];
              let jl = requireds.length;
              for (let j = 0; j < jl; ++j) {
                const localState = state.localize(path5, ancestors, requireds[j]);
                localState.snapshot();
                const res = requireds[j].$_validate(item, localState, prefs);
                requiredChecks[j] = res;
                if (!res.errors) {
                  localState.commit();
                  value[i] = res.value;
                  isValid = true;
                  internals.fastSplice(requireds, j);
                  --j;
                  --jl;
                  if (!schema._flags.sparse && res.value === void 0) {
                    errors.push(error("array.sparse", { key, path: path5, pos: i, value: void 0 }, state.localize(path5)));
                    if (prefs.abortEarly) {
                      return errors;
                    }
                  }
                  break;
                }
                localState.restore();
              }
              if (isValid) {
                continue;
              }
              const stripUnknown = prefs.stripUnknown && !!prefs.stripUnknown.arrays || false;
              jl = inclusions.length;
              for (const inclusion of inclusions) {
                let res;
                const previousCheck = requireds.indexOf(inclusion);
                if (previousCheck !== -1) {
                  res = requiredChecks[previousCheck];
                } else {
                  const localState = state.localize(path5, ancestors, inclusion);
                  localState.snapshot();
                  res = inclusion.$_validate(item, localState, prefs);
                  if (!res.errors) {
                    localState.commit();
                    if (inclusion._flags.result === "strip") {
                      internals.fastSplice(value, i);
                      --i;
                      --il;
                    } else if (!schema._flags.sparse && res.value === void 0) {
                      errors.push(error("array.sparse", { key, path: path5, pos: i, value: void 0 }, state.localize(path5)));
                      errored = true;
                    } else {
                      value[i] = res.value;
                    }
                    isValid = true;
                    break;
                  }
                  localState.restore();
                }
                if (jl === 1) {
                  if (stripUnknown) {
                    internals.fastSplice(value, i);
                    --i;
                    --il;
                    isValid = true;
                    break;
                  }
                  errors.push(...res.errors);
                  if (prefs.abortEarly) {
                    return errors;
                  }
                  errored = true;
                  break;
                }
              }
              if (errored) {
                continue;
              }
              if ((schema.$_terms._inclusions.length || schema.$_terms._requireds.length) && !isValid) {
                if (stripUnknown) {
                  internals.fastSplice(value, i);
                  --i;
                  --il;
                  continue;
                }
                errors.push(error("array.includes", { pos: i, value: item }, state.localize(path5)));
                if (prefs.abortEarly) {
                  return errors;
                }
              }
            }
            if (requireds.length) {
              internals.fillMissedErrors(schema, errors, requireds, value, state, prefs);
            }
            if (ordereds.length) {
              internals.fillOrderedErrors(schema, errors, ordereds, value, state, prefs);
              if (!errors.length) {
                internals.fillDefault(ordereds, value, state, prefs);
              }
            }
            return errors.length ? errors : value;
          },
          priority: true,
          manifest: false
        },
        length: {
          method(limit) {
            return this.$_addRule({ name: "length", args: { limit }, operator: "=" });
          },
          validate(value, helpers, { limit }, { name, operator, args }) {
            if (Common.compare(value.length, limit, operator)) {
              return value;
            }
            return helpers.error("array." + name, { limit: args.limit, value });
          },
          args: [
            {
              name: "limit",
              ref: true,
              assert: Common.limit,
              message: "must be a positive integer"
            }
          ]
        },
        max: {
          method(limit) {
            return this.$_addRule({ name: "max", method: "length", args: { limit }, operator: "<=" });
          }
        },
        min: {
          method(limit) {
            return this.$_addRule({ name: "min", method: "length", args: { limit }, operator: ">=" });
          }
        },
        ordered: {
          method(...schemas) {
            Common.verifyFlat(schemas, "ordered");
            const obj = this.$_addRule("items");
            for (let i = 0; i < schemas.length; ++i) {
              const type = Common.tryWithPath(() => this.$_compile(schemas[i]), i, { append: true });
              internals.validateSingle(type, obj);
              obj.$_mutateRegister(type);
              obj.$_terms.ordered.push(type);
            }
            return obj.$_mutateRebuild();
          }
        },
        single: {
          method(enabled) {
            const value = enabled === void 0 ? true : !!enabled;
            Assert(!value || !this._flags._arrayItems, "Cannot specify single rule when array has array items");
            return this.$_setFlag("single", value);
          }
        },
        sort: {
          method(options = {}) {
            Common.assertOptions(options, ["by", "order"]);
            const settings = {
              order: options.order || "ascending"
            };
            if (options.by) {
              settings.by = Compile.ref(options.by, { ancestor: 0 });
              Assert(!settings.by.ancestor, "Cannot sort by ancestor");
            }
            return this.$_addRule({ name: "sort", args: { options: settings } });
          },
          validate(value, { error, state, prefs, schema }, { options }) {
            const { value: sorted, errors } = internals.sort(schema, value, options, state, prefs);
            if (errors) {
              return errors;
            }
            for (let i = 0; i < value.length; ++i) {
              if (value[i] !== sorted[i]) {
                return error("array.sort", { order: options.order, by: options.by ? options.by.key : "value" });
              }
            }
            return value;
          },
          convert: true
        },
        sparse: {
          method(enabled) {
            const value = enabled === void 0 ? true : !!enabled;
            if (this._flags.sparse === value) {
              return this;
            }
            const obj = value ? this.clone() : this.$_addRule("items");
            return obj.$_setFlag("sparse", value, { clone: false });
          }
        },
        unique: {
          method(comparator, options = {}) {
            Assert(!comparator || typeof comparator === "function" || typeof comparator === "string", "comparator must be a function or a string");
            Common.assertOptions(options, ["ignoreUndefined", "separator"]);
            const rule = { name: "unique", args: { options, comparator } };
            if (comparator) {
              if (typeof comparator === "string") {
                const separator = Common.default(options.separator, ".");
                rule.path = separator ? comparator.split(separator) : [comparator];
              } else {
                rule.comparator = comparator;
              }
            }
            return this.$_addRule(rule);
          },
          validate(value, { state, error, schema }, { comparator: raw, options }, { comparator, path: path5 }) {
            const found = {
              string: /* @__PURE__ */ Object.create(null),
              number: /* @__PURE__ */ Object.create(null),
              undefined: /* @__PURE__ */ Object.create(null),
              boolean: /* @__PURE__ */ Object.create(null),
              bigint: /* @__PURE__ */ Object.create(null),
              object: /* @__PURE__ */ new Map(),
              function: /* @__PURE__ */ new Map(),
              custom: /* @__PURE__ */ new Map()
            };
            const compare = comparator || DeepEqual;
            const ignoreUndefined = options.ignoreUndefined;
            for (let i = 0; i < value.length; ++i) {
              const item = path5 ? Reach(value[i], path5) : value[i];
              const records = comparator ? found.custom : found[typeof item];
              Assert(records, "Failed to find unique map container for type", typeof item);
              if (records instanceof Map) {
                const entries = records.entries();
                let current;
                while (!(current = entries.next()).done) {
                  if (compare(current.value[0], item)) {
                    const localState = state.localize([...state.path, i], [value, ...state.ancestors]);
                    const context = {
                      pos: i,
                      value: value[i],
                      dupePos: current.value[1],
                      dupeValue: value[current.value[1]]
                    };
                    if (path5) {
                      context.path = raw;
                    }
                    return error("array.unique", context, localState);
                  }
                }
                records.set(item, i);
              } else {
                if ((!ignoreUndefined || item !== void 0) && records[item] !== void 0) {
                  const context = {
                    pos: i,
                    value: value[i],
                    dupePos: records[item],
                    dupeValue: value[records[item]]
                  };
                  if (path5) {
                    context.path = raw;
                  }
                  const localState = state.localize([...state.path, i], [value, ...state.ancestors]);
                  return error("array.unique", context, localState);
                }
                records[item] = i;
              }
            }
            return value;
          },
          args: ["comparator", "options"],
          multi: true
        }
      },
      cast: {
        set: {
          from: Array.isArray,
          to(value, helpers) {
            return new Set(value);
          }
        }
      },
      rebuild(schema) {
        schema.$_terms._inclusions = [];
        schema.$_terms._exclusions = [];
        schema.$_terms._requireds = [];
        for (const type of schema.$_terms.items) {
          internals.validateSingle(type, schema);
          if (type._flags.presence === "required") {
            schema.$_terms._requireds.push(type);
          } else if (type._flags.presence === "forbidden") {
            schema.$_terms._exclusions.push(type);
          } else {
            schema.$_terms._inclusions.push(type);
          }
        }
        for (const type of schema.$_terms.ordered) {
          internals.validateSingle(type, schema);
        }
      },
      manifest: {
        build(obj, desc) {
          if (desc.items) {
            obj = obj.items(...desc.items);
          }
          if (desc.ordered) {
            obj = obj.ordered(...desc.ordered);
          }
          return obj;
        }
      },
      messages: {
        "array.base": "{{#label}} must be an array",
        "array.excludes": "{{#label}} contains an excluded value",
        "array.hasKnown": "{{#label}} does not contain at least one required match for type {:#patternLabel}",
        "array.hasUnknown": "{{#label}} does not contain at least one required match",
        "array.includes": "{{#label}} does not match any of the allowed types",
        "array.includesRequiredBoth": "{{#label}} does not contain {{#knownMisses}} and {{#unknownMisses}} other required value(s)",
        "array.includesRequiredKnowns": "{{#label}} does not contain {{#knownMisses}}",
        "array.includesRequiredUnknowns": "{{#label}} does not contain {{#unknownMisses}} required value(s)",
        "array.length": "{{#label}} must contain {{#limit}} items",
        "array.max": "{{#label}} must contain less than or equal to {{#limit}} items",
        "array.min": "{{#label}} must contain at least {{#limit}} items",
        "array.orderedLength": "{{#label}} must contain at most {{#limit}} items",
        "array.sort": "{{#label}} must be sorted in {#order} order by {{#by}}",
        "array.sort.mismatching": "{{#label}} cannot be sorted due to mismatching types",
        "array.sort.unsupported": "{{#label}} cannot be sorted due to unsupported type {#type}",
        "array.sparse": "{{#label}} must not be a sparse array item",
        "array.unique": "{{#label}} contains a duplicate value"
      }
    });
    internals.fillMissedErrors = function(schema, errors, requireds, value, state, prefs) {
      const knownMisses = [];
      let unknownMisses = 0;
      for (const required of requireds) {
        const label = required._flags.label;
        if (label) {
          knownMisses.push(label);
        } else {
          ++unknownMisses;
        }
      }
      if (knownMisses.length) {
        if (unknownMisses) {
          errors.push(schema.$_createError("array.includesRequiredBoth", value, { knownMisses, unknownMisses }, state, prefs));
        } else {
          errors.push(schema.$_createError("array.includesRequiredKnowns", value, { knownMisses }, state, prefs));
        }
      } else {
        errors.push(schema.$_createError("array.includesRequiredUnknowns", value, { unknownMisses }, state, prefs));
      }
    };
    internals.fillOrderedErrors = function(schema, errors, ordereds, value, state, prefs) {
      const requiredOrdereds = [];
      for (const ordered of ordereds) {
        if (ordered._flags.presence === "required") {
          requiredOrdereds.push(ordered);
        }
      }
      if (requiredOrdereds.length) {
        internals.fillMissedErrors(schema, errors, requiredOrdereds, value, state, prefs);
      }
    };
    internals.fillDefault = function(ordereds, value, state, prefs) {
      const overrides = [];
      let trailingUndefined = true;
      for (let i = ordereds.length - 1; i >= 0; --i) {
        const ordered = ordereds[i];
        const ancestors = [value, ...state.ancestors];
        const override = ordered.$_validate(void 0, state.localize(state.path, ancestors, ordered), prefs).value;
        if (trailingUndefined) {
          if (override === void 0) {
            continue;
          }
          trailingUndefined = false;
        }
        overrides.unshift(override);
      }
      if (overrides.length) {
        value.push(...overrides);
      }
    };
    internals.fastSplice = function(arr, i) {
      let pos = i;
      while (pos < arr.length) {
        arr[pos++] = arr[pos];
      }
      --arr.length;
    };
    internals.validateSingle = function(type, obj) {
      if (type.type === "array" || type._flags._arrayItems) {
        Assert(!obj._flags.single, "Cannot specify array item with single rule enabled");
        obj.$_setFlag("_arrayItems", true, { clone: false });
      }
    };
    internals.sort = function(schema, value, settings, state, prefs) {
      const order = settings.order === "ascending" ? 1 : -1;
      const aFirst = -1 * order;
      const bFirst = order;
      const sort = /* @__PURE__ */ __name((a, b) => {
        let compare = internals.compare(a, b, aFirst, bFirst);
        if (compare !== null) {
          return compare;
        }
        if (settings.by) {
          a = settings.by.resolve(a, state, prefs);
          b = settings.by.resolve(b, state, prefs);
        }
        compare = internals.compare(a, b, aFirst, bFirst);
        if (compare !== null) {
          return compare;
        }
        const type = typeof a;
        if (type !== typeof b) {
          throw schema.$_createError("array.sort.mismatching", value, null, state, prefs);
        }
        if (type !== "number" && type !== "string") {
          throw schema.$_createError("array.sort.unsupported", value, { type }, state, prefs);
        }
        if (type === "number") {
          return (a - b) * order;
        }
        return a < b ? aFirst : bFirst;
      }, "sort");
      try {
        return { value: value.slice().sort(sort) };
      } catch (err) {
        return { errors: err };
      }
    };
    internals.compare = function(a, b, aFirst, bFirst) {
      if (a === b) {
        return 0;
      }
      if (a === void 0) {
        return 1;
      }
      if (b === void 0) {
        return -1;
      }
      if (a === null) {
        return bFirst;
      }
      if (b === null) {
        return aFirst;
      }
      return null;
    };
  }
});

// node_modules/joi/lib/types/boolean.js
var require_boolean = __commonJS({
  "node_modules/joi/lib/types/boolean.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var Assert = require_assert();
    var Any = require_any();
    var Common = require_common();
    var Values = require_values();
    var internals = {};
    internals.isBool = function(value) {
      return typeof value === "boolean";
    };
    module.exports = Any.extend({
      type: "boolean",
      flags: {
        sensitive: { default: false }
      },
      terms: {
        falsy: {
          init: null,
          manifest: "values"
        },
        truthy: {
          init: null,
          manifest: "values"
        }
      },
      coerce(value, { schema }) {
        if (typeof value === "boolean") {
          return;
        }
        if (typeof value === "string") {
          const normalized = schema._flags.sensitive ? value : value.toLowerCase();
          value = normalized === "true" ? true : normalized === "false" ? false : value;
        }
        if (typeof value !== "boolean") {
          value = schema.$_terms.truthy && schema.$_terms.truthy.has(value, null, null, !schema._flags.sensitive) || (schema.$_terms.falsy && schema.$_terms.falsy.has(value, null, null, !schema._flags.sensitive) ? false : value);
        }
        return { value };
      },
      validate(value, { error }) {
        if (typeof value !== "boolean") {
          return { value, errors: error("boolean.base") };
        }
      },
      rules: {
        truthy: {
          method(...values) {
            Common.verifyFlat(values, "truthy");
            const obj = this.clone();
            obj.$_terms.truthy = obj.$_terms.truthy || new Values();
            for (let i = 0; i < values.length; ++i) {
              const value = values[i];
              Assert(value !== void 0, "Cannot call truthy with undefined");
              obj.$_terms.truthy.add(value);
            }
            return obj;
          }
        },
        falsy: {
          method(...values) {
            Common.verifyFlat(values, "falsy");
            const obj = this.clone();
            obj.$_terms.falsy = obj.$_terms.falsy || new Values();
            for (let i = 0; i < values.length; ++i) {
              const value = values[i];
              Assert(value !== void 0, "Cannot call falsy with undefined");
              obj.$_terms.falsy.add(value);
            }
            return obj;
          }
        },
        sensitive: {
          method(enabled = true) {
            return this.$_setFlag("sensitive", enabled);
          }
        }
      },
      cast: {
        number: {
          from: internals.isBool,
          to(value, helpers) {
            return value ? 1 : 0;
          }
        },
        string: {
          from: internals.isBool,
          to(value, helpers) {
            return value ? "true" : "false";
          }
        }
      },
      manifest: {
        build(obj, desc) {
          if (desc.truthy) {
            obj = obj.truthy(...desc.truthy);
          }
          if (desc.falsy) {
            obj = obj.falsy(...desc.falsy);
          }
          return obj;
        }
      },
      messages: {
        "boolean.base": "{{#label}} must be a boolean"
      }
    });
  }
});

// node_modules/joi/lib/types/date.js
var require_date = __commonJS({
  "node_modules/joi/lib/types/date.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var Assert = require_assert();
    var Any = require_any();
    var Common = require_common();
    var Template = require_template();
    var internals = {};
    internals.isDate = function(value) {
      return value instanceof Date;
    };
    module.exports = Any.extend({
      type: "date",
      coerce: {
        from: ["number", "string"],
        method(value, { schema }) {
          return { value: internals.parse(value, schema._flags.format) || value };
        }
      },
      validate(value, { schema, error, prefs }) {
        if (value instanceof Date && !isNaN(value.getTime())) {
          return;
        }
        const format = schema._flags.format;
        if (!prefs.convert || !format || typeof value !== "string") {
          return { value, errors: error("date.base") };
        }
        return { value, errors: error("date.format", { format }) };
      },
      rules: {
        compare: {
          method: false,
          validate(value, helpers, { date }, { name, operator, args }) {
            const to = date === "now" ? Date.now() : date.getTime();
            if (Common.compare(value.getTime(), to, operator)) {
              return value;
            }
            return helpers.error("date." + name, { limit: args.date, value });
          },
          args: [
            {
              name: "date",
              ref: true,
              normalize: /* @__PURE__ */ __name((date) => {
                return date === "now" ? date : internals.parse(date);
              }, "normalize"),
              assert: /* @__PURE__ */ __name((date) => date !== null, "assert"),
              message: "must have a valid date format"
            }
          ]
        },
        format: {
          method(format) {
            Assert(["iso", "javascript", "unix"].includes(format), "Unknown date format", format);
            return this.$_setFlag("format", format);
          }
        },
        greater: {
          method(date) {
            return this.$_addRule({ name: "greater", method: "compare", args: { date }, operator: ">" });
          }
        },
        iso: {
          method() {
            return this.format("iso");
          }
        },
        less: {
          method(date) {
            return this.$_addRule({ name: "less", method: "compare", args: { date }, operator: "<" });
          }
        },
        max: {
          method(date) {
            return this.$_addRule({ name: "max", method: "compare", args: { date }, operator: "<=" });
          }
        },
        min: {
          method(date) {
            return this.$_addRule({ name: "min", method: "compare", args: { date }, operator: ">=" });
          }
        },
        timestamp: {
          method(type = "javascript") {
            Assert(["javascript", "unix"].includes(type), '"type" must be one of "javascript, unix"');
            return this.format(type);
          }
        }
      },
      cast: {
        number: {
          from: internals.isDate,
          to(value, helpers) {
            return value.getTime();
          }
        },
        string: {
          from: internals.isDate,
          to(value, { prefs }) {
            return Template.date(value, prefs);
          }
        }
      },
      messages: {
        "date.base": "{{#label}} must be a valid date",
        "date.format": '{{#label}} must be in {msg("date.format." + #format) || #format} format',
        "date.greater": "{{#label}} must be greater than {{:#limit}}",
        "date.less": "{{#label}} must be less than {{:#limit}}",
        "date.max": "{{#label}} must be less than or equal to {{:#limit}}",
        "date.min": "{{#label}} must be greater than or equal to {{:#limit}}",
        // Messages used in date.format
        "date.format.iso": "ISO 8601 date",
        "date.format.javascript": "timestamp or number of milliseconds",
        "date.format.unix": "timestamp or number of seconds"
      }
    });
    internals.parse = function(value, format) {
      if (value instanceof Date) {
        return value;
      }
      if (typeof value !== "string" && (isNaN(value) || !isFinite(value))) {
        return null;
      }
      if (/^\s*$/.test(value)) {
        return null;
      }
      if (format === "iso") {
        if (!Common.isIsoDate(value)) {
          return null;
        }
        return internals.date(value.toString());
      }
      const original = value;
      if (typeof value === "string" && /^[+-]?\d+(\.\d+)?$/.test(value)) {
        value = parseFloat(value);
      }
      if (format) {
        if (format === "javascript") {
          return internals.date(1 * value);
        }
        if (format === "unix") {
          return internals.date(1e3 * value);
        }
        if (typeof original === "string") {
          return null;
        }
      }
      return internals.date(value);
    };
    internals.date = function(value) {
      const date = new Date(value);
      if (!isNaN(date.getTime())) {
        return date;
      }
      return null;
    };
  }
});

// node_modules/@hapi/hoek/lib/applyToDefaults.js
var require_applyToDefaults = __commonJS({
  "node_modules/@hapi/hoek/lib/applyToDefaults.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var Assert = require_assert();
    var Clone = require_clone();
    var Merge = require_merge();
    var Reach = require_reach();
    var internals = {};
    module.exports = function(defaults, source, options = {}) {
      Assert(defaults && typeof defaults === "object", "Invalid defaults value: must be an object");
      Assert(!source || source === true || typeof source === "object", "Invalid source value: must be true, falsy or an object");
      Assert(typeof options === "object", "Invalid options: must be an object");
      if (!source) {
        return null;
      }
      if (options.shallow) {
        return internals.applyToDefaultsWithShallow(defaults, source, options);
      }
      const copy = Clone(defaults);
      if (source === true) {
        return copy;
      }
      const nullOverride = options.nullOverride !== void 0 ? options.nullOverride : false;
      return Merge(copy, source, { nullOverride, mergeArrays: false });
    };
    internals.applyToDefaultsWithShallow = function(defaults, source, options) {
      const keys = options.shallow;
      Assert(Array.isArray(keys), "Invalid keys");
      const seen = /* @__PURE__ */ new Map();
      const merge = source === true ? null : /* @__PURE__ */ new Set();
      for (let key of keys) {
        key = Array.isArray(key) ? key : key.split(".");
        const ref = Reach(defaults, key);
        if (ref && typeof ref === "object") {
          seen.set(ref, merge && Reach(source, key) || ref);
        } else if (merge) {
          merge.add(key);
        }
      }
      const copy = Clone(defaults, {}, seen);
      if (!merge) {
        return copy;
      }
      for (const key of merge) {
        internals.reachCopy(copy, source, key);
      }
      const nullOverride = options.nullOverride !== void 0 ? options.nullOverride : false;
      return Merge(copy, source, { nullOverride, mergeArrays: false });
    };
    internals.reachCopy = function(dst, src, path5) {
      for (const segment of path5) {
        if (!(segment in src)) {
          return;
        }
        const val = src[segment];
        if (typeof val !== "object" || val === null) {
          return;
        }
        src = val;
      }
      const value = src;
      let ref = dst;
      for (let i = 0; i < path5.length - 1; ++i) {
        const segment = path5[i];
        if (typeof ref[segment] !== "object") {
          ref[segment] = {};
        }
        ref = ref[segment];
      }
      ref[path5[path5.length - 1]] = value;
    };
  }
});

// node_modules/@hapi/topo/lib/index.js
var require_lib4 = __commonJS({
  "node_modules/@hapi/topo/lib/index.js"(exports) {
    "use strict";
    init_cjs_shim();
    var Assert = require_assert();
    var internals = {};
    exports.Sorter = class {
      constructor() {
        this._items = [];
        this.nodes = [];
      }
      add(nodes, options) {
        options = options || {};
        const before = [].concat(options.before || []);
        const after = [].concat(options.after || []);
        const group = options.group || "?";
        const sort = options.sort || 0;
        Assert(!before.includes(group), `Item cannot come before itself: ${group}`);
        Assert(!before.includes("?"), "Item cannot come before unassociated items");
        Assert(!after.includes(group), `Item cannot come after itself: ${group}`);
        Assert(!after.includes("?"), "Item cannot come after unassociated items");
        if (!Array.isArray(nodes)) {
          nodes = [nodes];
        }
        for (const node of nodes) {
          const item = {
            seq: this._items.length,
            sort,
            before,
            after,
            group,
            node
          };
          this._items.push(item);
        }
        if (!options.manual) {
          const valid = this._sort();
          Assert(valid, "item", group !== "?" ? `added into group ${group}` : "", "created a dependencies error");
        }
        return this.nodes;
      }
      merge(others) {
        if (!Array.isArray(others)) {
          others = [others];
        }
        for (const other of others) {
          if (other) {
            for (const item of other._items) {
              this._items.push(Object.assign({}, item));
            }
          }
        }
        this._items.sort(internals.mergeSort);
        for (let i = 0; i < this._items.length; ++i) {
          this._items[i].seq = i;
        }
        const valid = this._sort();
        Assert(valid, "merge created a dependencies error");
        return this.nodes;
      }
      sort() {
        const valid = this._sort();
        Assert(valid, "sort created a dependencies error");
        return this.nodes;
      }
      _sort() {
        const graph = {};
        const graphAfters = /* @__PURE__ */ Object.create(null);
        const groups = /* @__PURE__ */ Object.create(null);
        for (const item of this._items) {
          const seq = item.seq;
          const group = item.group;
          groups[group] = groups[group] || [];
          groups[group].push(seq);
          graph[seq] = item.before;
          for (const after of item.after) {
            graphAfters[after] = graphAfters[after] || [];
            graphAfters[after].push(seq);
          }
        }
        for (const node in graph) {
          const expandedGroups = [];
          for (const graphNodeItem in graph[node]) {
            const group = graph[node][graphNodeItem];
            groups[group] = groups[group] || [];
            expandedGroups.push(...groups[group]);
          }
          graph[node] = expandedGroups;
        }
        for (const group in graphAfters) {
          if (groups[group]) {
            for (const node of groups[group]) {
              graph[node].push(...graphAfters[group]);
            }
          }
        }
        const ancestors = {};
        for (const node in graph) {
          const children = graph[node];
          for (const child of children) {
            ancestors[child] = ancestors[child] || [];
            ancestors[child].push(node);
          }
        }
        const visited = {};
        const sorted = [];
        for (let i = 0; i < this._items.length; ++i) {
          let next = i;
          if (ancestors[i]) {
            next = null;
            for (let j = 0; j < this._items.length; ++j) {
              if (visited[j] === true) {
                continue;
              }
              if (!ancestors[j]) {
                ancestors[j] = [];
              }
              const shouldSeeCount = ancestors[j].length;
              let seenCount = 0;
              for (let k = 0; k < shouldSeeCount; ++k) {
                if (visited[ancestors[j][k]]) {
                  ++seenCount;
                }
              }
              if (seenCount === shouldSeeCount) {
                next = j;
                break;
              }
            }
          }
          if (next !== null) {
            visited[next] = true;
            sorted.push(next);
          }
        }
        if (sorted.length !== this._items.length) {
          return false;
        }
        const seqIndex = {};
        for (const item of this._items) {
          seqIndex[item.seq] = item;
        }
        this._items = [];
        this.nodes = [];
        for (const value of sorted) {
          const sortedItem = seqIndex[value];
          this.nodes.push(sortedItem.node);
          this._items.push(sortedItem);
        }
        return true;
      }
    };
    internals.mergeSort = (a, b) => {
      return a.sort === b.sort ? 0 : a.sort < b.sort ? -1 : 1;
    };
  }
});

// node_modules/joi/lib/types/keys.js
var require_keys = __commonJS({
  "node_modules/joi/lib/types/keys.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var ApplyToDefaults = require_applyToDefaults();
    var Assert = require_assert();
    var Clone = require_clone();
    var Topo = require_lib4();
    var Any = require_any();
    var Common = require_common();
    var Compile = require_compile();
    var Errors = require_errors2();
    var Ref = require_ref();
    var Template = require_template();
    var internals = {
      renameDefaults: {
        alias: false,
        // Keep old value in place
        multiple: false,
        // Allow renaming multiple keys into the same target
        override: false
        // Overrides an existing key
      }
    };
    module.exports = Any.extend({
      type: "_keys",
      properties: {
        typeof: "object"
      },
      flags: {
        unknown: { default: false }
      },
      terms: {
        dependencies: { init: null },
        keys: { init: null, manifest: { mapped: { from: "schema", to: "key" } } },
        patterns: { init: null },
        renames: { init: null }
      },
      args(schema, keys) {
        return schema.keys(keys);
      },
      validate(value, { schema, error, state, prefs }) {
        if (!value || typeof value !== schema.$_property("typeof") || Array.isArray(value)) {
          return { value, errors: error("object.base", { type: schema.$_property("typeof") }) };
        }
        if (!schema.$_terms.renames && !schema.$_terms.dependencies && !schema.$_terms.keys && // null allows any keys
        !schema.$_terms.patterns && !schema.$_terms.externals) {
          return;
        }
        value = internals.clone(value, prefs);
        const errors = [];
        if (schema.$_terms.renames && !internals.rename(schema, value, state, prefs, errors)) {
          return { value, errors };
        }
        if (!schema.$_terms.keys && // null allows any keys
        !schema.$_terms.patterns && !schema.$_terms.dependencies) {
          return { value, errors };
        }
        const unprocessed = new Set(Object.keys(value));
        if (schema.$_terms.keys) {
          const ancestors = [value, ...state.ancestors];
          for (const child of schema.$_terms.keys) {
            const key = child.key;
            const item = value[key];
            unprocessed.delete(key);
            const localState = state.localize([...state.path, key], ancestors, child);
            const result = child.schema.$_validate(item, localState, prefs);
            if (result.errors) {
              if (prefs.abortEarly) {
                return { value, errors: result.errors };
              }
              if (result.value !== void 0) {
                value[key] = result.value;
              }
              errors.push(...result.errors);
            } else if (child.schema._flags.result === "strip" || result.value === void 0 && item !== void 0) {
              delete value[key];
            } else if (result.value !== void 0) {
              value[key] = result.value;
            }
          }
        }
        if (unprocessed.size || schema._flags._hasPatternMatch) {
          const early = internals.unknown(schema, value, unprocessed, errors, state, prefs);
          if (early) {
            return early;
          }
        }
        if (schema.$_terms.dependencies) {
          for (const dep of schema.$_terms.dependencies) {
            if (dep.key !== null && internals.isPresent(dep.options)(dep.key.resolve(value, state, prefs, null, { shadow: false })) === false) {
              continue;
            }
            const failed = internals.dependencies[dep.rel](schema, dep, value, state, prefs);
            if (failed) {
              const report = schema.$_createError(failed.code, value, failed.context, state, prefs);
              if (prefs.abortEarly) {
                return { value, errors: report };
              }
              errors.push(report);
            }
          }
        }
        return { value, errors };
      },
      rules: {
        and: {
          method(...peers) {
            Common.verifyFlat(peers, "and");
            return internals.dependency(this, "and", null, peers);
          }
        },
        append: {
          method(schema) {
            if (schema === null || schema === void 0 || Object.keys(schema).length === 0) {
              return this;
            }
            return this.keys(schema);
          }
        },
        assert: {
          method(subject, schema, message) {
            if (!Template.isTemplate(subject)) {
              subject = Compile.ref(subject);
            }
            Assert(message === void 0 || typeof message === "string", "Message must be a string");
            schema = this.$_compile(schema, { appendPath: true });
            const obj = this.$_addRule({ name: "assert", args: { subject, schema, message } });
            obj.$_mutateRegister(subject);
            obj.$_mutateRegister(schema);
            return obj;
          },
          validate(value, { error, prefs, state }, { subject, schema, message }) {
            const about = subject.resolve(value, state, prefs);
            const path5 = Ref.isRef(subject) ? subject.absolute(state) : [];
            if (schema.$_match(about, state.localize(path5, [value, ...state.ancestors], schema), prefs)) {
              return value;
            }
            return error("object.assert", { subject, message });
          },
          args: ["subject", "schema", "message"],
          multi: true
        },
        instance: {
          method(constructor, name) {
            Assert(typeof constructor === "function", "constructor must be a function");
            name = name || constructor.name;
            return this.$_addRule({ name: "instance", args: { constructor, name } });
          },
          validate(value, helpers, { constructor, name }) {
            if (value instanceof constructor) {
              return value;
            }
            return helpers.error("object.instance", { type: name, value });
          },
          args: ["constructor", "name"]
        },
        keys: {
          method(schema) {
            Assert(schema === void 0 || typeof schema === "object", "Object schema must be a valid object");
            Assert(!Common.isSchema(schema), "Object schema cannot be a joi schema");
            const obj = this.clone();
            if (!schema) {
              obj.$_terms.keys = null;
            } else if (!Object.keys(schema).length) {
              obj.$_terms.keys = new internals.Keys();
            } else {
              obj.$_terms.keys = obj.$_terms.keys ? obj.$_terms.keys.filter((child) => !schema.hasOwnProperty(child.key)) : new internals.Keys();
              for (const key in schema) {
                Common.tryWithPath(() => obj.$_terms.keys.push({ key, schema: this.$_compile(schema[key]) }), key);
              }
            }
            return obj.$_mutateRebuild();
          }
        },
        length: {
          method(limit) {
            return this.$_addRule({ name: "length", args: { limit }, operator: "=" });
          },
          validate(value, helpers, { limit }, { name, operator, args }) {
            if (Common.compare(Object.keys(value).length, limit, operator)) {
              return value;
            }
            return helpers.error("object." + name, { limit: args.limit, value });
          },
          args: [
            {
              name: "limit",
              ref: true,
              assert: Common.limit,
              message: "must be a positive integer"
            }
          ]
        },
        max: {
          method(limit) {
            return this.$_addRule({ name: "max", method: "length", args: { limit }, operator: "<=" });
          }
        },
        min: {
          method(limit) {
            return this.$_addRule({ name: "min", method: "length", args: { limit }, operator: ">=" });
          }
        },
        nand: {
          method(...peers) {
            Common.verifyFlat(peers, "nand");
            return internals.dependency(this, "nand", null, peers);
          }
        },
        or: {
          method(...peers) {
            Common.verifyFlat(peers, "or");
            return internals.dependency(this, "or", null, peers);
          }
        },
        oxor: {
          method(...peers) {
            return internals.dependency(this, "oxor", null, peers);
          }
        },
        pattern: {
          method(pattern, schema, options = {}) {
            const isRegExp = pattern instanceof RegExp;
            if (!isRegExp) {
              pattern = this.$_compile(pattern, { appendPath: true });
            }
            Assert(schema !== void 0, "Invalid rule");
            Common.assertOptions(options, ["fallthrough", "matches"]);
            if (isRegExp) {
              Assert(!pattern.flags.includes("g") && !pattern.flags.includes("y"), "pattern should not use global or sticky mode");
            }
            schema = this.$_compile(schema, { appendPath: true });
            const obj = this.clone();
            obj.$_terms.patterns = obj.$_terms.patterns || [];
            const config = { [isRegExp ? "regex" : "schema"]: pattern, rule: schema };
            if (options.matches) {
              config.matches = this.$_compile(options.matches);
              if (config.matches.type !== "array") {
                config.matches = config.matches.$_root.array().items(config.matches);
              }
              obj.$_mutateRegister(config.matches);
              obj.$_setFlag("_hasPatternMatch", true, { clone: false });
            }
            if (options.fallthrough) {
              config.fallthrough = true;
            }
            obj.$_terms.patterns.push(config);
            obj.$_mutateRegister(schema);
            return obj;
          }
        },
        ref: {
          method() {
            return this.$_addRule("ref");
          },
          validate(value, helpers) {
            if (Ref.isRef(value)) {
              return value;
            }
            return helpers.error("object.refType", { value });
          }
        },
        regex: {
          method() {
            return this.$_addRule("regex");
          },
          validate(value, helpers) {
            if (value instanceof RegExp) {
              return value;
            }
            return helpers.error("object.regex", { value });
          }
        },
        rename: {
          method(from, to, options = {}) {
            Assert(typeof from === "string" || from instanceof RegExp, "Rename missing the from argument");
            Assert(typeof to === "string" || to instanceof Template, "Invalid rename to argument");
            Assert(to !== from, "Cannot rename key to same name:", from);
            Common.assertOptions(options, ["alias", "ignoreUndefined", "override", "multiple"]);
            const obj = this.clone();
            obj.$_terms.renames = obj.$_terms.renames || [];
            for (const rename of obj.$_terms.renames) {
              Assert(rename.from !== from, "Cannot rename the same key multiple times");
            }
            if (to instanceof Template) {
              obj.$_mutateRegister(to);
            }
            obj.$_terms.renames.push({
              from,
              to,
              options: ApplyToDefaults(internals.renameDefaults, options)
            });
            return obj;
          }
        },
        schema: {
          method(type = "any") {
            return this.$_addRule({ name: "schema", args: { type } });
          },
          validate(value, helpers, { type }) {
            if (Common.isSchema(value) && (type === "any" || value.type === type)) {
              return value;
            }
            return helpers.error("object.schema", { type });
          }
        },
        unknown: {
          method(allow) {
            return this.$_setFlag("unknown", allow !== false);
          }
        },
        with: {
          method(key, peers, options = {}) {
            return internals.dependency(this, "with", key, peers, options);
          }
        },
        without: {
          method(key, peers, options = {}) {
            return internals.dependency(this, "without", key, peers, options);
          }
        },
        xor: {
          method(...peers) {
            Common.verifyFlat(peers, "xor");
            return internals.dependency(this, "xor", null, peers);
          }
        }
      },
      overrides: {
        default(value, options) {
          if (value === void 0) {
            value = Common.symbols.deepDefault;
          }
          return this.$_parent("default", value, options);
        }
      },
      rebuild(schema) {
        if (schema.$_terms.keys) {
          const topo = new Topo.Sorter();
          for (const child of schema.$_terms.keys) {
            Common.tryWithPath(() => topo.add(child, { after: child.schema.$_rootReferences(), group: child.key }), child.key);
          }
          schema.$_terms.keys = new internals.Keys(...topo.nodes);
        }
      },
      manifest: {
        build(obj, desc) {
          if (desc.keys) {
            obj = obj.keys(desc.keys);
          }
          if (desc.dependencies) {
            for (const { rel, key = null, peers, options } of desc.dependencies) {
              obj = internals.dependency(obj, rel, key, peers, options);
            }
          }
          if (desc.patterns) {
            for (const { regex, schema, rule, fallthrough, matches } of desc.patterns) {
              obj = obj.pattern(regex || schema, rule, { fallthrough, matches });
            }
          }
          if (desc.renames) {
            for (const { from, to, options } of desc.renames) {
              obj = obj.rename(from, to, options);
            }
          }
          return obj;
        }
      },
      messages: {
        "object.and": "{{#label}} contains {{#presentWithLabels}} without its required peers {{#missingWithLabels}}",
        "object.assert": '{{#label}} is invalid because {if(#subject.key, `"` + #subject.key + `" failed to ` + (#message || "pass the assertion test"), #message || "the assertion failed")}',
        "object.base": "{{#label}} must be of type {{#type}}",
        "object.instance": "{{#label}} must be an instance of {{:#type}}",
        "object.length": '{{#label}} must have {{#limit}} key{if(#limit == 1, "", "s")}',
        "object.max": '{{#label}} must have less than or equal to {{#limit}} key{if(#limit == 1, "", "s")}',
        "object.min": '{{#label}} must have at least {{#limit}} key{if(#limit == 1, "", "s")}',
        "object.missing": "{{#label}} must contain at least one of {{#peersWithLabels}}",
        "object.nand": "{{:#mainWithLabel}} must not exist simultaneously with {{#peersWithLabels}}",
        "object.oxor": "{{#label}} contains a conflict between optional exclusive peers {{#peersWithLabels}}",
        "object.pattern.match": "{{#label}} keys failed to match pattern requirements",
        "object.refType": "{{#label}} must be a Joi reference",
        "object.regex": "{{#label}} must be a RegExp object",
        "object.rename.multiple": "{{#label}} cannot rename {{:#from}} because multiple renames are disabled and another key was already renamed to {{:#to}}",
        "object.rename.override": "{{#label}} cannot rename {{:#from}} because override is disabled and target {{:#to}} exists",
        "object.schema": "{{#label}} must be a Joi schema of {{#type}} type",
        "object.unknown": "{{#label}} is not allowed",
        "object.with": "{{:#mainWithLabel}} missing required peer {{:#peerWithLabel}}",
        "object.without": "{{:#mainWithLabel}} conflict with forbidden peer {{:#peerWithLabel}}",
        "object.xor": "{{#label}} contains a conflict between exclusive peers {{#peersWithLabels}}"
      }
    });
    internals.clone = function(value, prefs) {
      if (typeof value === "object") {
        if (prefs.nonEnumerables) {
          return Clone(value, { shallow: true });
        }
        const clone2 = Object.create(Object.getPrototypeOf(value));
        Object.assign(clone2, value);
        return clone2;
      }
      const clone = /* @__PURE__ */ __name(function(...args) {
        return value.apply(this, args);
      }, "clone");
      clone.prototype = Clone(value.prototype);
      Object.defineProperty(clone, "name", { value: value.name, writable: false });
      Object.defineProperty(clone, "length", { value: value.length, writable: false });
      Object.assign(clone, value);
      return clone;
    };
    internals.dependency = function(schema, rel, key, peers, options) {
      Assert(key === null || typeof key === "string", rel, "key must be a strings");
      if (!options) {
        options = peers.length > 1 && typeof peers[peers.length - 1] === "object" ? peers.pop() : {};
      }
      Common.assertOptions(options, ["separator", "isPresent"]);
      peers = [].concat(peers);
      const separator = Common.default(options.separator, ".");
      const paths = [];
      for (const peer of peers) {
        Assert(typeof peer === "string", rel, "peers must be strings");
        paths.push(Compile.ref(peer, { separator, ancestor: 0, prefix: false }));
      }
      if (key !== null) {
        key = Compile.ref(key, { separator, ancestor: 0, prefix: false });
      }
      const obj = schema.clone();
      obj.$_terms.dependencies = obj.$_terms.dependencies || [];
      obj.$_terms.dependencies.push(new internals.Dependency(rel, key, paths, peers, options));
      return obj;
    };
    internals.dependencies = {
      and(schema, dep, value, state, prefs) {
        const missing = [];
        const present = [];
        const count = dep.peers.length;
        const isPresent = internals.isPresent(dep.options);
        for (const peer of dep.peers) {
          if (isPresent(peer.resolve(value, state, prefs, null, { shadow: false })) === false) {
            missing.push(peer.key);
          } else {
            present.push(peer.key);
          }
        }
        if (missing.length !== count && present.length !== count) {
          return {
            code: "object.and",
            context: {
              present,
              presentWithLabels: internals.keysToLabels(schema, present),
              missing,
              missingWithLabels: internals.keysToLabels(schema, missing)
            }
          };
        }
      },
      nand(schema, dep, value, state, prefs) {
        const present = [];
        const isPresent = internals.isPresent(dep.options);
        for (const peer of dep.peers) {
          if (isPresent(peer.resolve(value, state, prefs, null, { shadow: false }))) {
            present.push(peer.key);
          }
        }
        if (present.length !== dep.peers.length) {
          return;
        }
        const main = dep.paths[0];
        const values = dep.paths.slice(1);
        return {
          code: "object.nand",
          context: {
            main,
            mainWithLabel: internals.keysToLabels(schema, main),
            peers: values,
            peersWithLabels: internals.keysToLabels(schema, values)
          }
        };
      },
      or(schema, dep, value, state, prefs) {
        const isPresent = internals.isPresent(dep.options);
        for (const peer of dep.peers) {
          if (isPresent(peer.resolve(value, state, prefs, null, { shadow: false }))) {
            return;
          }
        }
        return {
          code: "object.missing",
          context: {
            peers: dep.paths,
            peersWithLabels: internals.keysToLabels(schema, dep.paths)
          }
        };
      },
      oxor(schema, dep, value, state, prefs) {
        const present = [];
        const isPresent = internals.isPresent(dep.options);
        for (const peer of dep.peers) {
          if (isPresent(peer.resolve(value, state, prefs, null, { shadow: false }))) {
            present.push(peer.key);
          }
        }
        if (!present.length || present.length === 1) {
          return;
        }
        const context = { peers: dep.paths, peersWithLabels: internals.keysToLabels(schema, dep.paths) };
        context.present = present;
        context.presentWithLabels = internals.keysToLabels(schema, present);
        return { code: "object.oxor", context };
      },
      with(schema, dep, value, state, prefs) {
        const isPresent = internals.isPresent(dep.options);
        for (const peer of dep.peers) {
          if (isPresent(peer.resolve(value, state, prefs, null, { shadow: false })) === false) {
            return {
              code: "object.with",
              context: {
                main: dep.key.key,
                mainWithLabel: internals.keysToLabels(schema, dep.key.key),
                peer: peer.key,
                peerWithLabel: internals.keysToLabels(schema, peer.key)
              }
            };
          }
        }
      },
      without(schema, dep, value, state, prefs) {
        const isPresent = internals.isPresent(dep.options);
        for (const peer of dep.peers) {
          if (isPresent(peer.resolve(value, state, prefs, null, { shadow: false }))) {
            return {
              code: "object.without",
              context: {
                main: dep.key.key,
                mainWithLabel: internals.keysToLabels(schema, dep.key.key),
                peer: peer.key,
                peerWithLabel: internals.keysToLabels(schema, peer.key)
              }
            };
          }
        }
      },
      xor(schema, dep, value, state, prefs) {
        const present = [];
        const isPresent = internals.isPresent(dep.options);
        for (const peer of dep.peers) {
          if (isPresent(peer.resolve(value, state, prefs, null, { shadow: false }))) {
            present.push(peer.key);
          }
        }
        if (present.length === 1) {
          return;
        }
        const context = { peers: dep.paths, peersWithLabels: internals.keysToLabels(schema, dep.paths) };
        if (present.length === 0) {
          return { code: "object.missing", context };
        }
        context.present = present;
        context.presentWithLabels = internals.keysToLabels(schema, present);
        return { code: "object.xor", context };
      }
    };
    internals.keysToLabels = function(schema, keys) {
      if (Array.isArray(keys)) {
        return keys.map((key) => schema.$_mapLabels(key));
      }
      return schema.$_mapLabels(keys);
    };
    internals.isPresent = function(options) {
      return typeof options.isPresent === "function" ? options.isPresent : (resolved) => resolved !== void 0;
    };
    internals.rename = function(schema, value, state, prefs, errors) {
      const renamed = {};
      for (const rename of schema.$_terms.renames) {
        const matches = [];
        const pattern = typeof rename.from !== "string";
        if (!pattern) {
          if (Object.prototype.hasOwnProperty.call(value, rename.from) && (value[rename.from] !== void 0 || !rename.options.ignoreUndefined)) {
            matches.push(rename);
          }
        } else {
          for (const from in value) {
            if (value[from] === void 0 && rename.options.ignoreUndefined) {
              continue;
            }
            if (from === rename.to) {
              continue;
            }
            const match = rename.from.exec(from);
            if (!match) {
              continue;
            }
            matches.push({ from, to: rename.to, match });
          }
        }
        for (const match of matches) {
          const from = match.from;
          let to = match.to;
          if (to instanceof Template) {
            to = to.render(value, state, prefs, match.match);
          }
          if (from === to) {
            continue;
          }
          if (!rename.options.multiple && renamed[to]) {
            errors.push(schema.$_createError("object.rename.multiple", value, { from, to, pattern }, state, prefs));
            if (prefs.abortEarly) {
              return false;
            }
          }
          if (Object.prototype.hasOwnProperty.call(value, to) && !rename.options.override && !renamed[to]) {
            errors.push(schema.$_createError("object.rename.override", value, { from, to, pattern }, state, prefs));
            if (prefs.abortEarly) {
              return false;
            }
          }
          if (value[from] === void 0) {
            delete value[to];
          } else {
            value[to] = value[from];
          }
          renamed[to] = true;
          if (!rename.options.alias) {
            delete value[from];
          }
        }
      }
      return true;
    };
    internals.unknown = function(schema, value, unprocessed, errors, state, prefs) {
      if (schema.$_terms.patterns) {
        let hasMatches = false;
        const matches = schema.$_terms.patterns.map((pattern) => {
          if (pattern.matches) {
            hasMatches = true;
            return [];
          }
        });
        const ancestors = [value, ...state.ancestors];
        for (const key of unprocessed) {
          const item = value[key];
          const path5 = [...state.path, key];
          for (let i = 0; i < schema.$_terms.patterns.length; ++i) {
            const pattern = schema.$_terms.patterns[i];
            if (pattern.regex) {
              const match = pattern.regex.test(key);
              state.mainstay.tracer.debug(state, "rule", `pattern.${i}`, match ? "pass" : "error");
              if (!match) {
                continue;
              }
            } else {
              if (!pattern.schema.$_match(key, state.nest(pattern.schema, `pattern.${i}`), prefs)) {
                continue;
              }
            }
            unprocessed.delete(key);
            const localState = state.localize(path5, ancestors, { schema: pattern.rule, key });
            const result = pattern.rule.$_validate(item, localState, prefs);
            if (result.errors) {
              if (prefs.abortEarly) {
                return { value, errors: result.errors };
              }
              errors.push(...result.errors);
            }
            if (pattern.matches) {
              matches[i].push(key);
            }
            value[key] = result.value;
            if (!pattern.fallthrough) {
              break;
            }
          }
        }
        if (hasMatches) {
          for (let i = 0; i < matches.length; ++i) {
            const match = matches[i];
            if (!match) {
              continue;
            }
            const stpm = schema.$_terms.patterns[i].matches;
            const localState = state.localize(state.path, ancestors, stpm);
            const result = stpm.$_validate(match, localState, prefs);
            if (result.errors) {
              const details = Errors.details(result.errors, { override: false });
              details.matches = match;
              const report = schema.$_createError("object.pattern.match", value, details, state, prefs);
              if (prefs.abortEarly) {
                return { value, errors: report };
              }
              errors.push(report);
            }
          }
        }
      }
      if (!unprocessed.size || !schema.$_terms.keys && !schema.$_terms.patterns) {
        return;
      }
      if (prefs.stripUnknown && !schema._flags.unknown || prefs.skipFunctions) {
        const stripUnknown = prefs.stripUnknown ? prefs.stripUnknown === true ? true : !!prefs.stripUnknown.objects : false;
        for (const key of unprocessed) {
          if (stripUnknown) {
            delete value[key];
            unprocessed.delete(key);
          } else if (typeof value[key] === "function") {
            unprocessed.delete(key);
          }
        }
      }
      const forbidUnknown = !Common.default(schema._flags.unknown, prefs.allowUnknown);
      if (forbidUnknown) {
        for (const unprocessedKey of unprocessed) {
          const localState = state.localize([...state.path, unprocessedKey], []);
          const report = schema.$_createError("object.unknown", value[unprocessedKey], { child: unprocessedKey }, localState, prefs, { flags: false });
          if (prefs.abortEarly) {
            return { value, errors: report };
          }
          errors.push(report);
        }
      }
    };
    internals.Dependency = class {
      constructor(rel, key, peers, paths, options) {
        this.rel = rel;
        this.key = key;
        this.peers = peers;
        this.paths = paths;
        this.options = options;
      }
      describe() {
        const desc = {
          rel: this.rel,
          peers: this.paths
        };
        if (this.key !== null) {
          desc.key = this.key.key;
        }
        if (this.peers[0].separator !== ".") {
          desc.options = { ...desc.options, separator: this.peers[0].separator };
        }
        if (this.options.isPresent) {
          desc.options = { ...desc.options, isPresent: this.options.isPresent };
        }
        return desc;
      }
    };
    internals.Keys = class extends Array {
      concat(source) {
        const result = this.slice();
        const keys = /* @__PURE__ */ new Map();
        for (let i = 0; i < result.length; ++i) {
          keys.set(result[i].key, i);
        }
        for (const item of source) {
          const key = item.key;
          const pos = keys.get(key);
          if (pos !== void 0) {
            result[pos] = { key, schema: result[pos].schema.concat(item.schema) };
          } else {
            result.push(item);
          }
        }
        return result;
      }
    };
  }
});

// node_modules/joi/lib/types/function.js
var require_function = __commonJS({
  "node_modules/joi/lib/types/function.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var Assert = require_assert();
    var Keys = require_keys();
    module.exports = Keys.extend({
      type: "function",
      properties: {
        typeof: "function"
      },
      rules: {
        arity: {
          method(n) {
            Assert(Number.isSafeInteger(n) && n >= 0, "n must be a positive integer");
            return this.$_addRule({ name: "arity", args: { n } });
          },
          validate(value, helpers, { n }) {
            if (value.length === n) {
              return value;
            }
            return helpers.error("function.arity", { n });
          }
        },
        class: {
          method() {
            return this.$_addRule("class");
          },
          validate(value, helpers) {
            if (/^\s*class\s/.test(value.toString())) {
              return value;
            }
            return helpers.error("function.class", { value });
          }
        },
        minArity: {
          method(n) {
            Assert(Number.isSafeInteger(n) && n > 0, "n must be a strict positive integer");
            return this.$_addRule({ name: "minArity", args: { n } });
          },
          validate(value, helpers, { n }) {
            if (value.length >= n) {
              return value;
            }
            return helpers.error("function.minArity", { n });
          }
        },
        maxArity: {
          method(n) {
            Assert(Number.isSafeInteger(n) && n >= 0, "n must be a positive integer");
            return this.$_addRule({ name: "maxArity", args: { n } });
          },
          validate(value, helpers, { n }) {
            if (value.length <= n) {
              return value;
            }
            return helpers.error("function.maxArity", { n });
          }
        }
      },
      messages: {
        "function.arity": "{{#label}} must have an arity of {{#n}}",
        "function.class": "{{#label}} must be a class",
        "function.maxArity": "{{#label}} must have an arity lesser or equal to {{#n}}",
        "function.minArity": "{{#label}} must have an arity greater or equal to {{#n}}"
      }
    });
  }
});

// node_modules/joi/lib/types/link.js
var require_link = __commonJS({
  "node_modules/joi/lib/types/link.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var Assert = require_assert();
    var Any = require_any();
    var Common = require_common();
    var Compile = require_compile();
    var Errors = require_errors2();
    var internals = {};
    module.exports = Any.extend({
      type: "link",
      properties: {
        schemaChain: true
      },
      terms: {
        link: { init: null, manifest: "single", register: false }
      },
      args(schema, ref) {
        return schema.ref(ref);
      },
      validate(value, { schema, state, prefs }) {
        Assert(schema.$_terms.link, "Uninitialized link schema");
        const linked = internals.generate(schema, value, state, prefs);
        const ref = schema.$_terms.link[0].ref;
        return linked.$_validate(value, state.nest(linked, `link:${ref.display}:${linked.type}`), prefs);
      },
      generate(schema, value, state, prefs) {
        return internals.generate(schema, value, state, prefs);
      },
      rules: {
        ref: {
          method(ref) {
            Assert(!this.$_terms.link, "Cannot reinitialize schema");
            ref = Compile.ref(ref);
            Assert(ref.type === "value" || ref.type === "local", "Invalid reference type:", ref.type);
            Assert(ref.type === "local" || ref.ancestor === "root" || ref.ancestor > 0, "Link cannot reference itself");
            const obj = this.clone();
            obj.$_terms.link = [{ ref }];
            return obj;
          }
        },
        relative: {
          method(enabled = true) {
            return this.$_setFlag("relative", enabled);
          }
        }
      },
      overrides: {
        concat(source) {
          Assert(this.$_terms.link, "Uninitialized link schema");
          Assert(Common.isSchema(source), "Invalid schema object");
          Assert(source.type !== "link", "Cannot merge type link with another link");
          const obj = this.clone();
          if (!obj.$_terms.whens) {
            obj.$_terms.whens = [];
          }
          obj.$_terms.whens.push({ concat: source });
          return obj.$_mutateRebuild();
        }
      },
      manifest: {
        build(obj, desc) {
          Assert(desc.link, "Invalid link description missing link");
          return obj.ref(desc.link);
        }
      }
    });
    internals.generate = function(schema, value, state, prefs) {
      let linked = state.mainstay.links.get(schema);
      if (linked) {
        return linked._generate(value, state, prefs).schema;
      }
      const ref = schema.$_terms.link[0].ref;
      const { perspective, path: path5 } = internals.perspective(ref, state);
      internals.assert(perspective, "which is outside of schema boundaries", ref, schema, state, prefs);
      try {
        linked = path5.length ? perspective.$_reach(path5) : perspective;
      } catch (ignoreErr) {
        internals.assert(false, "to non-existing schema", ref, schema, state, prefs);
      }
      internals.assert(linked.type !== "link", "which is another link", ref, schema, state, prefs);
      if (!schema._flags.relative) {
        state.mainstay.links.set(schema, linked);
      }
      return linked._generate(value, state, prefs).schema;
    };
    internals.perspective = function(ref, state) {
      if (ref.type === "local") {
        for (const { schema, key } of state.schemas) {
          const id = schema._flags.id || key;
          if (id === ref.path[0]) {
            return { perspective: schema, path: ref.path.slice(1) };
          }
          if (schema.$_terms.shared) {
            for (const shared of schema.$_terms.shared) {
              if (shared._flags.id === ref.path[0]) {
                return { perspective: shared, path: ref.path.slice(1) };
              }
            }
          }
        }
        return { perspective: null, path: null };
      }
      if (ref.ancestor === "root") {
        return { perspective: state.schemas[state.schemas.length - 1].schema, path: ref.path };
      }
      return { perspective: state.schemas[ref.ancestor] && state.schemas[ref.ancestor].schema, path: ref.path };
    };
    internals.assert = function(condition, message, ref, schema, state, prefs) {
      if (condition) {
        return;
      }
      Assert(false, `"${Errors.label(schema._flags, state, prefs)}" contains link reference "${ref.display}" ${message}`);
    };
  }
});

// node_modules/joi/lib/types/number.js
var require_number = __commonJS({
  "node_modules/joi/lib/types/number.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var Assert = require_assert();
    var Any = require_any();
    var Common = require_common();
    var internals = {
      numberRx: /^\s*[+-]?(?:(?:\d+(?:\.\d*)?)|(?:\.\d+))(?:e([+-]?\d+))?\s*$/i,
      precisionRx: /(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/,
      exponentialPartRegex: /[eE][+-]?\d+$/,
      leadingSignAndZerosRegex: /^[+-]?(0*)?/,
      dotRegex: /\./,
      trailingZerosRegex: /0+$/,
      decimalPlaces(value) {
        const str = value.toString();
        const dindex = str.indexOf(".");
        const eindex = str.indexOf("e");
        return (dindex < 0 ? 0 : (eindex < 0 ? str.length : eindex) - dindex - 1) + (eindex < 0 ? 0 : Math.max(0, -parseInt(str.slice(eindex + 1))));
      }
    };
    module.exports = Any.extend({
      type: "number",
      flags: {
        unsafe: { default: false }
      },
      coerce: {
        from: "string",
        method(value, { schema, error }) {
          const matches = value.match(internals.numberRx);
          if (!matches) {
            return;
          }
          value = value.trim();
          const result = { value: parseFloat(value) };
          if (result.value === 0) {
            result.value = 0;
          }
          if (!schema._flags.unsafe) {
            if (value.match(/e/i)) {
              if (internals.extractSignificantDigits(value) !== internals.extractSignificantDigits(String(result.value))) {
                result.errors = error("number.unsafe");
                return result;
              }
            } else {
              const string = result.value.toString();
              if (string.match(/e/i)) {
                return result;
              }
              if (string !== internals.normalizeDecimal(value)) {
                result.errors = error("number.unsafe");
                return result;
              }
            }
          }
          return result;
        }
      },
      validate(value, { schema, error, prefs }) {
        if (value === Infinity || value === -Infinity) {
          return { value, errors: error("number.infinity") };
        }
        if (!Common.isNumber(value)) {
          return { value, errors: error("number.base") };
        }
        const result = { value };
        if (prefs.convert) {
          const rule = schema.$_getRule("precision");
          if (rule) {
            const precision = Math.pow(10, rule.args.limit);
            result.value = Math.round(result.value * precision) / precision;
          }
        }
        if (result.value === 0) {
          result.value = 0;
        }
        if (!schema._flags.unsafe && (value > Number.MAX_SAFE_INTEGER || value < Number.MIN_SAFE_INTEGER)) {
          result.errors = error("number.unsafe");
        }
        return result;
      },
      rules: {
        compare: {
          method: false,
          validate(value, helpers, { limit }, { name, operator, args }) {
            if (Common.compare(value, limit, operator)) {
              return value;
            }
            return helpers.error("number." + name, { limit: args.limit, value });
          },
          args: [
            {
              name: "limit",
              ref: true,
              assert: Common.isNumber,
              message: "must be a number"
            }
          ]
        },
        greater: {
          method(limit) {
            return this.$_addRule({ name: "greater", method: "compare", args: { limit }, operator: ">" });
          }
        },
        integer: {
          method() {
            return this.$_addRule("integer");
          },
          validate(value, helpers) {
            if (Math.trunc(value) - value === 0) {
              return value;
            }
            return helpers.error("number.integer");
          }
        },
        less: {
          method(limit) {
            return this.$_addRule({ name: "less", method: "compare", args: { limit }, operator: "<" });
          }
        },
        max: {
          method(limit) {
            return this.$_addRule({ name: "max", method: "compare", args: { limit }, operator: "<=" });
          }
        },
        min: {
          method(limit) {
            return this.$_addRule({ name: "min", method: "compare", args: { limit }, operator: ">=" });
          }
        },
        multiple: {
          method(base) {
            const baseDecimalPlace = typeof base === "number" ? internals.decimalPlaces(base) : null;
            const pfactor = Math.pow(10, baseDecimalPlace);
            return this.$_addRule({
              name: "multiple",
              args: {
                base,
                baseDecimalPlace,
                pfactor
              }
            });
          },
          validate(value, helpers, { base, baseDecimalPlace, pfactor }, options) {
            const valueDecimalPlace = internals.decimalPlaces(value);
            if (valueDecimalPlace > baseDecimalPlace) {
              return helpers.error("number.multiple", { multiple: options.args.base, value });
            }
            return Math.round(pfactor * value) % Math.round(pfactor * base) === 0 ? value : helpers.error("number.multiple", { multiple: options.args.base, value });
          },
          args: [
            {
              name: "base",
              ref: true,
              assert: /* @__PURE__ */ __name((value) => typeof value === "number" && isFinite(value) && value > 0, "assert"),
              message: "must be a positive number"
            },
            "baseDecimalPlace",
            "pfactor"
          ],
          multi: true
        },
        negative: {
          method() {
            return this.sign("negative");
          }
        },
        port: {
          method() {
            return this.$_addRule("port");
          },
          validate(value, helpers) {
            if (Number.isSafeInteger(value) && value >= 0 && value <= 65535) {
              return value;
            }
            return helpers.error("number.port");
          }
        },
        positive: {
          method() {
            return this.sign("positive");
          }
        },
        precision: {
          method(limit) {
            Assert(Number.isSafeInteger(limit), "limit must be an integer");
            return this.$_addRule({ name: "precision", args: { limit } });
          },
          validate(value, helpers, { limit }) {
            const places = value.toString().match(internals.precisionRx);
            const decimals = Math.max((places[1] ? places[1].length : 0) - (places[2] ? parseInt(places[2], 10) : 0), 0);
            if (decimals <= limit) {
              return value;
            }
            return helpers.error("number.precision", { limit, value });
          },
          convert: true
        },
        sign: {
          method(sign) {
            Assert(["negative", "positive"].includes(sign), "Invalid sign", sign);
            return this.$_addRule({ name: "sign", args: { sign } });
          },
          validate(value, helpers, { sign }) {
            if (sign === "negative" && value < 0 || sign === "positive" && value > 0) {
              return value;
            }
            return helpers.error(`number.${sign}`);
          }
        },
        unsafe: {
          method(enabled = true) {
            Assert(typeof enabled === "boolean", "enabled must be a boolean");
            return this.$_setFlag("unsafe", enabled);
          }
        }
      },
      cast: {
        string: {
          from: /* @__PURE__ */ __name((value) => typeof value === "number", "from"),
          to(value, helpers) {
            return value.toString();
          }
        }
      },
      messages: {
        "number.base": "{{#label}} must be a number",
        "number.greater": "{{#label}} must be greater than {{#limit}}",
        "number.infinity": "{{#label}} cannot be infinity",
        "number.integer": "{{#label}} must be an integer",
        "number.less": "{{#label}} must be less than {{#limit}}",
        "number.max": "{{#label}} must be less than or equal to {{#limit}}",
        "number.min": "{{#label}} must be greater than or equal to {{#limit}}",
        "number.multiple": "{{#label}} must be a multiple of {{#multiple}}",
        "number.negative": "{{#label}} must be a negative number",
        "number.port": "{{#label}} must be a valid port",
        "number.positive": "{{#label}} must be a positive number",
        "number.precision": "{{#label}} must have no more than {{#limit}} decimal places",
        "number.unsafe": "{{#label}} must be a safe number"
      }
    });
    internals.extractSignificantDigits = function(value) {
      return value.replace(internals.exponentialPartRegex, "").replace(internals.dotRegex, "").replace(internals.trailingZerosRegex, "").replace(internals.leadingSignAndZerosRegex, "");
    };
    internals.normalizeDecimal = function(str) {
      str = str.replace(/^\+/, "").replace(/\.0*$/, "").replace(/^(-?)\.([^\.]*)$/, "$10.$2").replace(/^(-?)0+([0-9])/, "$1$2");
      if (str.includes(".") && str.endsWith("0")) {
        str = str.replace(/0+$/, "");
      }
      if (str === "-0") {
        return "0";
      }
      return str;
    };
  }
});

// node_modules/joi/lib/types/object.js
var require_object = __commonJS({
  "node_modules/joi/lib/types/object.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var Keys = require_keys();
    module.exports = Keys.extend({
      type: "object",
      cast: {
        map: {
          from: /* @__PURE__ */ __name((value) => value && typeof value === "object", "from"),
          to(value, helpers) {
            return new Map(Object.entries(value));
          }
        }
      }
    });
  }
});

// node_modules/@sideway/address/lib/errors.js
var require_errors3 = __commonJS({
  "node_modules/@sideway/address/lib/errors.js"(exports) {
    "use strict";
    init_cjs_shim();
    exports.codes = {
      EMPTY_STRING: "Address must be a non-empty string",
      FORBIDDEN_UNICODE: "Address contains forbidden Unicode characters",
      MULTIPLE_AT_CHAR: "Address cannot contain more than one @ character",
      MISSING_AT_CHAR: "Address must contain one @ character",
      EMPTY_LOCAL: "Address local part cannot be empty",
      ADDRESS_TOO_LONG: "Address too long",
      LOCAL_TOO_LONG: "Address local part too long",
      EMPTY_LOCAL_SEGMENT: "Address local part contains empty dot-separated segment",
      INVALID_LOCAL_CHARS: "Address local part contains invalid character",
      DOMAIN_NON_EMPTY_STRING: "Domain must be a non-empty string",
      DOMAIN_TOO_LONG: "Domain too long",
      DOMAIN_INVALID_UNICODE_CHARS: "Domain contains forbidden Unicode characters",
      DOMAIN_INVALID_CHARS: "Domain contains invalid character",
      DOMAIN_INVALID_TLDS_CHARS: "Domain contains invalid tld character",
      DOMAIN_SEGMENTS_COUNT: "Domain lacks the minimum required number of segments",
      DOMAIN_SEGMENTS_COUNT_MAX: "Domain contains too many segments",
      DOMAIN_FORBIDDEN_TLDS: "Domain uses forbidden TLD",
      DOMAIN_EMPTY_SEGMENT: "Domain contains empty dot-separated segment",
      DOMAIN_LONG_SEGMENT: "Domain contains dot-separated segment that is too long"
    };
    exports.code = function(code) {
      return { code, error: exports.codes[code] };
    };
  }
});

// node_modules/@sideway/address/lib/domain.js
var require_domain = __commonJS({
  "node_modules/@sideway/address/lib/domain.js"(exports) {
    "use strict";
    init_cjs_shim();
    var Url = __require("url");
    var Errors = require_errors3();
    var internals = {
      minDomainSegments: 2,
      nonAsciiRx: /[^\x00-\x7f]/,
      domainControlRx: /[\x00-\x20@\:\/\\#!\$&\'\(\)\*\+,;=\?]/,
      // Control + space + separators
      tldSegmentRx: /^[a-zA-Z](?:[a-zA-Z0-9\-]*[a-zA-Z0-9])?$/,
      domainSegmentRx: /^[a-zA-Z0-9](?:[a-zA-Z0-9\-]*[a-zA-Z0-9])?$/,
      URL: Url.URL || URL
      // $lab:coverage:ignore$
    };
    exports.analyze = function(domain, options = {}) {
      if (!domain) {
        return Errors.code("DOMAIN_NON_EMPTY_STRING");
      }
      if (typeof domain !== "string") {
        throw new Error("Invalid input: domain must be a string");
      }
      if (domain.length > 256) {
        return Errors.code("DOMAIN_TOO_LONG");
      }
      const ascii = !internals.nonAsciiRx.test(domain);
      if (!ascii) {
        if (options.allowUnicode === false) {
          return Errors.code("DOMAIN_INVALID_UNICODE_CHARS");
        }
        domain = domain.normalize("NFC");
      }
      if (internals.domainControlRx.test(domain)) {
        return Errors.code("DOMAIN_INVALID_CHARS");
      }
      domain = internals.punycode(domain);
      if (options.allowFullyQualified && domain[domain.length - 1] === ".") {
        domain = domain.slice(0, -1);
      }
      const minDomainSegments = options.minDomainSegments || internals.minDomainSegments;
      const segments = domain.split(".");
      if (segments.length < minDomainSegments) {
        return Errors.code("DOMAIN_SEGMENTS_COUNT");
      }
      if (options.maxDomainSegments) {
        if (segments.length > options.maxDomainSegments) {
          return Errors.code("DOMAIN_SEGMENTS_COUNT_MAX");
        }
      }
      const tlds = options.tlds;
      if (tlds) {
        const tld = segments[segments.length - 1].toLowerCase();
        if (tlds.deny && tlds.deny.has(tld) || tlds.allow && !tlds.allow.has(tld)) {
          return Errors.code("DOMAIN_FORBIDDEN_TLDS");
        }
      }
      for (let i = 0; i < segments.length; ++i) {
        const segment = segments[i];
        if (!segment.length) {
          return Errors.code("DOMAIN_EMPTY_SEGMENT");
        }
        if (segment.length > 63) {
          return Errors.code("DOMAIN_LONG_SEGMENT");
        }
        if (i < segments.length - 1) {
          if (!internals.domainSegmentRx.test(segment)) {
            return Errors.code("DOMAIN_INVALID_CHARS");
          }
        } else {
          if (!internals.tldSegmentRx.test(segment)) {
            return Errors.code("DOMAIN_INVALID_TLDS_CHARS");
          }
        }
      }
      return null;
    };
    exports.isValid = function(domain, options) {
      return !exports.analyze(domain, options);
    };
    internals.punycode = function(domain) {
      if (domain.includes("%")) {
        domain = domain.replace(/%/g, "%25");
      }
      try {
        return new internals.URL(`http://${domain}`).host;
      } catch (err) {
        return domain;
      }
    };
  }
});

// node_modules/@sideway/address/lib/email.js
var require_email = __commonJS({
  "node_modules/@sideway/address/lib/email.js"(exports) {
    "use strict";
    init_cjs_shim();
    var Util = __require("util");
    var Domain = require_domain();
    var Errors = require_errors3();
    var internals = {
      nonAsciiRx: /[^\x00-\x7f]/,
      encoder: new (Util.TextEncoder || TextEncoder)()
      // $lab:coverage:ignore$
    };
    exports.analyze = function(email, options) {
      return internals.email(email, options);
    };
    exports.isValid = function(email, options) {
      return !internals.email(email, options);
    };
    internals.email = function(email, options = {}) {
      if (typeof email !== "string") {
        throw new Error("Invalid input: email must be a string");
      }
      if (!email) {
        return Errors.code("EMPTY_STRING");
      }
      const ascii = !internals.nonAsciiRx.test(email);
      if (!ascii) {
        if (options.allowUnicode === false) {
          return Errors.code("FORBIDDEN_UNICODE");
        }
        email = email.normalize("NFC");
      }
      const parts = email.split("@");
      if (parts.length !== 2) {
        return parts.length > 2 ? Errors.code("MULTIPLE_AT_CHAR") : Errors.code("MISSING_AT_CHAR");
      }
      const [local, domain] = parts;
      if (!local) {
        return Errors.code("EMPTY_LOCAL");
      }
      if (!options.ignoreLength) {
        if (email.length > 254) {
          return Errors.code("ADDRESS_TOO_LONG");
        }
        if (internals.encoder.encode(local).length > 64) {
          return Errors.code("LOCAL_TOO_LONG");
        }
      }
      return internals.local(local, ascii) || Domain.analyze(domain, options);
    };
    internals.local = function(local, ascii) {
      const segments = local.split(".");
      for (const segment of segments) {
        if (!segment.length) {
          return Errors.code("EMPTY_LOCAL_SEGMENT");
        }
        if (ascii) {
          if (!internals.atextRx.test(segment)) {
            return Errors.code("INVALID_LOCAL_CHARS");
          }
          continue;
        }
        for (const char of segment) {
          if (internals.atextRx.test(char)) {
            continue;
          }
          const binary = internals.binary(char);
          if (!internals.atomRx.test(binary)) {
            return Errors.code("INVALID_LOCAL_CHARS");
          }
        }
      }
    };
    internals.binary = function(char) {
      return Array.from(internals.encoder.encode(char)).map((v) => String.fromCharCode(v)).join("");
    };
    internals.atextRx = /^[\w!#\$%&'\*\+\-/=\?\^`\{\|\}~]+$/;
    internals.atomRx = new RegExp([
      //  %xC2-DF UTF8-tail
      "(?:[\\xc2-\\xdf][\\x80-\\xbf])",
      //  %xE0 %xA0-BF UTF8-tail              %xE1-EC 2( UTF8-tail )            %xED %x80-9F UTF8-tail              %xEE-EF 2( UTF8-tail )
      "(?:\\xe0[\\xa0-\\xbf][\\x80-\\xbf])|(?:[\\xe1-\\xec][\\x80-\\xbf]{2})|(?:\\xed[\\x80-\\x9f][\\x80-\\xbf])|(?:[\\xee-\\xef][\\x80-\\xbf]{2})",
      //  %xF0 %x90-BF 2( UTF8-tail )            %xF1-F3 3( UTF8-tail )            %xF4 %x80-8F 2( UTF8-tail )
      "(?:\\xf0[\\x90-\\xbf][\\x80-\\xbf]{2})|(?:[\\xf1-\\xf3][\\x80-\\xbf]{3})|(?:\\xf4[\\x80-\\x8f][\\x80-\\xbf]{2})"
    ].join("|"));
  }
});

// node_modules/@hapi/hoek/lib/escapeRegex.js
var require_escapeRegex = __commonJS({
  "node_modules/@hapi/hoek/lib/escapeRegex.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    module.exports = function(string) {
      return string.replace(/[\^\$\.\*\+\-\?\=\!\:\|\\\/\(\)\[\]\{\}\,]/g, "\\$&");
    };
  }
});

// node_modules/@sideway/address/lib/uri.js
var require_uri = __commonJS({
  "node_modules/@sideway/address/lib/uri.js"(exports) {
    "use strict";
    init_cjs_shim();
    var Assert = require_assert();
    var EscapeRegex = require_escapeRegex();
    var internals = {};
    internals.generate = function() {
      const rfc3986 = {};
      const hexDigit = "\\dA-Fa-f";
      const hexDigitOnly = "[" + hexDigit + "]";
      const unreserved = "\\w-\\.~";
      const subDelims = "!\\$&'\\(\\)\\*\\+,;=";
      const pctEncoded = "%" + hexDigit;
      const pchar = unreserved + pctEncoded + subDelims + ":@";
      const pcharOnly = "[" + pchar + "]";
      const decOctect = "(?:0{0,2}\\d|0?[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])";
      rfc3986.ipv4address = "(?:" + decOctect + "\\.){3}" + decOctect;
      const h16 = hexDigitOnly + "{1,4}";
      const ls32 = "(?:" + h16 + ":" + h16 + "|" + rfc3986.ipv4address + ")";
      const IPv6SixHex = "(?:" + h16 + ":){6}" + ls32;
      const IPv6FiveHex = "::(?:" + h16 + ":){5}" + ls32;
      const IPv6FourHex = "(?:" + h16 + ")?::(?:" + h16 + ":){4}" + ls32;
      const IPv6ThreeHex = "(?:(?:" + h16 + ":){0,1}" + h16 + ")?::(?:" + h16 + ":){3}" + ls32;
      const IPv6TwoHex = "(?:(?:" + h16 + ":){0,2}" + h16 + ")?::(?:" + h16 + ":){2}" + ls32;
      const IPv6OneHex = "(?:(?:" + h16 + ":){0,3}" + h16 + ")?::" + h16 + ":" + ls32;
      const IPv6NoneHex = "(?:(?:" + h16 + ":){0,4}" + h16 + ")?::" + ls32;
      const IPv6NoneHex2 = "(?:(?:" + h16 + ":){0,5}" + h16 + ")?::" + h16;
      const IPv6NoneHex3 = "(?:(?:" + h16 + ":){0,6}" + h16 + ")?::";
      rfc3986.ipv4Cidr = "(?:\\d|[1-2]\\d|3[0-2])";
      rfc3986.ipv6Cidr = "(?:0{0,2}\\d|0?[1-9]\\d|1[01]\\d|12[0-8])";
      rfc3986.ipv6address = "(?:" + IPv6SixHex + "|" + IPv6FiveHex + "|" + IPv6FourHex + "|" + IPv6ThreeHex + "|" + IPv6TwoHex + "|" + IPv6OneHex + "|" + IPv6NoneHex + "|" + IPv6NoneHex2 + "|" + IPv6NoneHex3 + ")";
      rfc3986.ipvFuture = "v" + hexDigitOnly + "+\\.[" + unreserved + subDelims + ":]+";
      rfc3986.scheme = "[a-zA-Z][a-zA-Z\\d+-\\.]*";
      rfc3986.schemeRegex = new RegExp(rfc3986.scheme);
      const userinfo = "[" + unreserved + pctEncoded + subDelims + ":]*";
      const IPLiteral = "\\[(?:" + rfc3986.ipv6address + "|" + rfc3986.ipvFuture + ")\\]";
      const regName = "[" + unreserved + pctEncoded + subDelims + "]{1,255}";
      const host = "(?:" + IPLiteral + "|" + rfc3986.ipv4address + "|" + regName + ")";
      const port = "\\d*";
      const authority = "(?:" + userinfo + "@)?" + host + "(?::" + port + ")?";
      const authorityCapture = "(?:" + userinfo + "@)?(" + host + ")(?::" + port + ")?";
      const segment = pcharOnly + "*";
      const segmentNz = pcharOnly + "+";
      const segmentNzNc = "[" + unreserved + pctEncoded + subDelims + "@]+";
      const pathEmpty = "";
      const pathAbEmpty = "(?:\\/" + segment + ")*";
      const pathAbsolute = "\\/(?:" + segmentNz + pathAbEmpty + ")?";
      const pathRootless = segmentNz + pathAbEmpty;
      const pathNoScheme = segmentNzNc + pathAbEmpty;
      const pathAbNoAuthority = "(?:\\/\\/\\/" + segment + pathAbEmpty + ")";
      rfc3986.hierPart = "(?:(?:\\/\\/" + authority + pathAbEmpty + ")|" + pathAbsolute + "|" + pathRootless + "|" + pathAbNoAuthority + ")";
      rfc3986.hierPartCapture = "(?:(?:\\/\\/" + authorityCapture + pathAbEmpty + ")|" + pathAbsolute + "|" + pathRootless + ")";
      rfc3986.relativeRef = "(?:(?:\\/\\/" + authority + pathAbEmpty + ")|" + pathAbsolute + "|" + pathNoScheme + "|" + pathEmpty + ")";
      rfc3986.relativeRefCapture = "(?:(?:\\/\\/" + authorityCapture + pathAbEmpty + ")|" + pathAbsolute + "|" + pathNoScheme + "|" + pathEmpty + ")";
      rfc3986.query = "[" + pchar + "\\/\\?]*(?=#|$)";
      rfc3986.queryWithSquareBrackets = "[" + pchar + "\\[\\]\\/\\?]*(?=#|$)";
      rfc3986.fragment = "[" + pchar + "\\/\\?]*";
      return rfc3986;
    };
    internals.rfc3986 = internals.generate();
    exports.ip = {
      v4Cidr: internals.rfc3986.ipv4Cidr,
      v6Cidr: internals.rfc3986.ipv6Cidr,
      ipv4: internals.rfc3986.ipv4address,
      ipv6: internals.rfc3986.ipv6address,
      ipvfuture: internals.rfc3986.ipvFuture
    };
    internals.createRegex = function(options) {
      const rfc = internals.rfc3986;
      const query = options.allowQuerySquareBrackets ? rfc.queryWithSquareBrackets : rfc.query;
      const suffix = "(?:\\?" + query + ")?(?:#" + rfc.fragment + ")?";
      const relative = options.domain ? rfc.relativeRefCapture : rfc.relativeRef;
      if (options.relativeOnly) {
        return internals.wrap(relative + suffix);
      }
      let customScheme = "";
      if (options.scheme) {
        Assert(options.scheme instanceof RegExp || typeof options.scheme === "string" || Array.isArray(options.scheme), "scheme must be a RegExp, String, or Array");
        const schemes = [].concat(options.scheme);
        Assert(schemes.length >= 1, "scheme must have at least 1 scheme specified");
        const selections = [];
        for (let i = 0; i < schemes.length; ++i) {
          const scheme2 = schemes[i];
          Assert(scheme2 instanceof RegExp || typeof scheme2 === "string", "scheme at position " + i + " must be a RegExp or String");
          if (scheme2 instanceof RegExp) {
            selections.push(scheme2.source.toString());
          } else {
            Assert(rfc.schemeRegex.test(scheme2), "scheme at position " + i + " must be a valid scheme");
            selections.push(EscapeRegex(scheme2));
          }
        }
        customScheme = selections.join("|");
      }
      const scheme = customScheme ? "(?:" + customScheme + ")" : rfc.scheme;
      const absolute = "(?:" + scheme + ":" + (options.domain ? rfc.hierPartCapture : rfc.hierPart) + ")";
      const prefix = options.allowRelative ? "(?:" + absolute + "|" + relative + ")" : absolute;
      return internals.wrap(prefix + suffix, customScheme);
    };
    internals.wrap = function(raw, scheme) {
      raw = `(?=.)(?!https?:/(?:$|[^/]))(?!https?:///)(?!https?:[^/])${raw}`;
      return {
        raw,
        regex: new RegExp(`^${raw}$`),
        scheme
      };
    };
    internals.uriRegex = internals.createRegex({});
    exports.regex = function(options = {}) {
      if (options.scheme || options.allowRelative || options.relativeOnly || options.allowQuerySquareBrackets || options.domain) {
        return internals.createRegex(options);
      }
      return internals.uriRegex;
    };
  }
});

// node_modules/@sideway/address/lib/ip.js
var require_ip = __commonJS({
  "node_modules/@sideway/address/lib/ip.js"(exports) {
    "use strict";
    init_cjs_shim();
    var Assert = require_assert();
    var Uri = require_uri();
    exports.regex = function(options = {}) {
      Assert(options.cidr === void 0 || typeof options.cidr === "string", "options.cidr must be a string");
      const cidr = options.cidr ? options.cidr.toLowerCase() : "optional";
      Assert(["required", "optional", "forbidden"].includes(cidr), "options.cidr must be one of required, optional, forbidden");
      Assert(options.version === void 0 || typeof options.version === "string" || Array.isArray(options.version), "options.version must be a string or an array of string");
      let versions = options.version || ["ipv4", "ipv6", "ipvfuture"];
      if (!Array.isArray(versions)) {
        versions = [versions];
      }
      Assert(versions.length >= 1, "options.version must have at least 1 version specified");
      for (let i = 0; i < versions.length; ++i) {
        Assert(typeof versions[i] === "string", "options.version must only contain strings");
        versions[i] = versions[i].toLowerCase();
        Assert(["ipv4", "ipv6", "ipvfuture"].includes(versions[i]), "options.version contains unknown version " + versions[i] + " - must be one of ipv4, ipv6, ipvfuture");
      }
      versions = Array.from(new Set(versions));
      const parts = versions.map((version2) => {
        if (cidr === "forbidden") {
          return Uri.ip[version2];
        }
        const cidrpart = `\\/${version2 === "ipv4" ? Uri.ip.v4Cidr : Uri.ip.v6Cidr}`;
        if (cidr === "required") {
          return `${Uri.ip[version2]}${cidrpart}`;
        }
        return `${Uri.ip[version2]}(?:${cidrpart})?`;
      });
      const raw = `(?:${parts.join("|")})`;
      const regex = new RegExp(`^${raw}$`);
      return { cidr, versions, regex, raw };
    };
  }
});

// node_modules/@sideway/address/lib/tlds.js
var require_tlds = __commonJS({
  "node_modules/@sideway/address/lib/tlds.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var internals = {};
    internals.tlds = [
      "AAA",
      "AARP",
      "ABB",
      "ABBOTT",
      "ABBVIE",
      "ABC",
      "ABLE",
      "ABOGADO",
      "ABUDHABI",
      "AC",
      "ACADEMY",
      "ACCENTURE",
      "ACCOUNTANT",
      "ACCOUNTANTS",
      "ACO",
      "ACTOR",
      "AD",
      "ADS",
      "ADULT",
      "AE",
      "AEG",
      "AERO",
      "AETNA",
      "AF",
      "AFL",
      "AFRICA",
      "AG",
      "AGAKHAN",
      "AGENCY",
      "AI",
      "AIG",
      "AIRBUS",
      "AIRFORCE",
      "AIRTEL",
      "AKDN",
      "AL",
      "ALIBABA",
      "ALIPAY",
      "ALLFINANZ",
      "ALLSTATE",
      "ALLY",
      "ALSACE",
      "ALSTOM",
      "AM",
      "AMAZON",
      "AMERICANEXPRESS",
      "AMERICANFAMILY",
      "AMEX",
      "AMFAM",
      "AMICA",
      "AMSTERDAM",
      "ANALYTICS",
      "ANDROID",
      "ANQUAN",
      "ANZ",
      "AO",
      "AOL",
      "APARTMENTS",
      "APP",
      "APPLE",
      "AQ",
      "AQUARELLE",
      "AR",
      "ARAB",
      "ARAMCO",
      "ARCHI",
      "ARMY",
      "ARPA",
      "ART",
      "ARTE",
      "AS",
      "ASDA",
      "ASIA",
      "ASSOCIATES",
      "AT",
      "ATHLETA",
      "ATTORNEY",
      "AU",
      "AUCTION",
      "AUDI",
      "AUDIBLE",
      "AUDIO",
      "AUSPOST",
      "AUTHOR",
      "AUTO",
      "AUTOS",
      "AVIANCA",
      "AW",
      "AWS",
      "AX",
      "AXA",
      "AZ",
      "AZURE",
      "BA",
      "BABY",
      "BAIDU",
      "BANAMEX",
      "BAND",
      "BANK",
      "BAR",
      "BARCELONA",
      "BARCLAYCARD",
      "BARCLAYS",
      "BAREFOOT",
      "BARGAINS",
      "BASEBALL",
      "BASKETBALL",
      "BAUHAUS",
      "BAYERN",
      "BB",
      "BBC",
      "BBT",
      "BBVA",
      "BCG",
      "BCN",
      "BD",
      "BE",
      "BEATS",
      "BEAUTY",
      "BEER",
      "BENTLEY",
      "BERLIN",
      "BEST",
      "BESTBUY",
      "BET",
      "BF",
      "BG",
      "BH",
      "BHARTI",
      "BI",
      "BIBLE",
      "BID",
      "BIKE",
      "BING",
      "BINGO",
      "BIO",
      "BIZ",
      "BJ",
      "BLACK",
      "BLACKFRIDAY",
      "BLOCKBUSTER",
      "BLOG",
      "BLOOMBERG",
      "BLUE",
      "BM",
      "BMS",
      "BMW",
      "BN",
      "BNPPARIBAS",
      "BO",
      "BOATS",
      "BOEHRINGER",
      "BOFA",
      "BOM",
      "BOND",
      "BOO",
      "BOOK",
      "BOOKING",
      "BOSCH",
      "BOSTIK",
      "BOSTON",
      "BOT",
      "BOUTIQUE",
      "BOX",
      "BR",
      "BRADESCO",
      "BRIDGESTONE",
      "BROADWAY",
      "BROKER",
      "BROTHER",
      "BRUSSELS",
      "BS",
      "BT",
      "BUILD",
      "BUILDERS",
      "BUSINESS",
      "BUY",
      "BUZZ",
      "BV",
      "BW",
      "BY",
      "BZ",
      "BZH",
      "CA",
      "CAB",
      "CAFE",
      "CAL",
      "CALL",
      "CALVINKLEIN",
      "CAM",
      "CAMERA",
      "CAMP",
      "CANON",
      "CAPETOWN",
      "CAPITAL",
      "CAPITALONE",
      "CAR",
      "CARAVAN",
      "CARDS",
      "CARE",
      "CAREER",
      "CAREERS",
      "CARS",
      "CASA",
      "CASE",
      "CASH",
      "CASINO",
      "CAT",
      "CATERING",
      "CATHOLIC",
      "CBA",
      "CBN",
      "CBRE",
      "CC",
      "CD",
      "CENTER",
      "CEO",
      "CERN",
      "CF",
      "CFA",
      "CFD",
      "CG",
      "CH",
      "CHANEL",
      "CHANNEL",
      "CHARITY",
      "CHASE",
      "CHAT",
      "CHEAP",
      "CHINTAI",
      "CHRISTMAS",
      "CHROME",
      "CHURCH",
      "CI",
      "CIPRIANI",
      "CIRCLE",
      "CISCO",
      "CITADEL",
      "CITI",
      "CITIC",
      "CITY",
      "CK",
      "CL",
      "CLAIMS",
      "CLEANING",
      "CLICK",
      "CLINIC",
      "CLINIQUE",
      "CLOTHING",
      "CLOUD",
      "CLUB",
      "CLUBMED",
      "CM",
      "CN",
      "CO",
      "COACH",
      "CODES",
      "COFFEE",
      "COLLEGE",
      "COLOGNE",
      "COM",
      "COMCAST",
      "COMMBANK",
      "COMMUNITY",
      "COMPANY",
      "COMPARE",
      "COMPUTER",
      "COMSEC",
      "CONDOS",
      "CONSTRUCTION",
      "CONSULTING",
      "CONTACT",
      "CONTRACTORS",
      "COOKING",
      "COOL",
      "COOP",
      "CORSICA",
      "COUNTRY",
      "COUPON",
      "COUPONS",
      "COURSES",
      "CPA",
      "CR",
      "CREDIT",
      "CREDITCARD",
      "CREDITUNION",
      "CRICKET",
      "CROWN",
      "CRS",
      "CRUISE",
      "CRUISES",
      "CU",
      "CUISINELLA",
      "CV",
      "CW",
      "CX",
      "CY",
      "CYMRU",
      "CYOU",
      "CZ",
      "DABUR",
      "DAD",
      "DANCE",
      "DATA",
      "DATE",
      "DATING",
      "DATSUN",
      "DAY",
      "DCLK",
      "DDS",
      "DE",
      "DEAL",
      "DEALER",
      "DEALS",
      "DEGREE",
      "DELIVERY",
      "DELL",
      "DELOITTE",
      "DELTA",
      "DEMOCRAT",
      "DENTAL",
      "DENTIST",
      "DESI",
      "DESIGN",
      "DEV",
      "DHL",
      "DIAMONDS",
      "DIET",
      "DIGITAL",
      "DIRECT",
      "DIRECTORY",
      "DISCOUNT",
      "DISCOVER",
      "DISH",
      "DIY",
      "DJ",
      "DK",
      "DM",
      "DNP",
      "DO",
      "DOCS",
      "DOCTOR",
      "DOG",
      "DOMAINS",
      "DOT",
      "DOWNLOAD",
      "DRIVE",
      "DTV",
      "DUBAI",
      "DUNLOP",
      "DUPONT",
      "DURBAN",
      "DVAG",
      "DVR",
      "DZ",
      "EARTH",
      "EAT",
      "EC",
      "ECO",
      "EDEKA",
      "EDU",
      "EDUCATION",
      "EE",
      "EG",
      "EMAIL",
      "EMERCK",
      "ENERGY",
      "ENGINEER",
      "ENGINEERING",
      "ENTERPRISES",
      "EPSON",
      "EQUIPMENT",
      "ER",
      "ERICSSON",
      "ERNI",
      "ES",
      "ESQ",
      "ESTATE",
      "ET",
      "EU",
      "EUROVISION",
      "EUS",
      "EVENTS",
      "EXCHANGE",
      "EXPERT",
      "EXPOSED",
      "EXPRESS",
      "EXTRASPACE",
      "FAGE",
      "FAIL",
      "FAIRWINDS",
      "FAITH",
      "FAMILY",
      "FAN",
      "FANS",
      "FARM",
      "FARMERS",
      "FASHION",
      "FAST",
      "FEDEX",
      "FEEDBACK",
      "FERRARI",
      "FERRERO",
      "FI",
      "FIDELITY",
      "FIDO",
      "FILM",
      "FINAL",
      "FINANCE",
      "FINANCIAL",
      "FIRE",
      "FIRESTONE",
      "FIRMDALE",
      "FISH",
      "FISHING",
      "FIT",
      "FITNESS",
      "FJ",
      "FK",
      "FLICKR",
      "FLIGHTS",
      "FLIR",
      "FLORIST",
      "FLOWERS",
      "FLY",
      "FM",
      "FO",
      "FOO",
      "FOOD",
      "FOOTBALL",
      "FORD",
      "FOREX",
      "FORSALE",
      "FORUM",
      "FOUNDATION",
      "FOX",
      "FR",
      "FREE",
      "FRESENIUS",
      "FRL",
      "FROGANS",
      "FRONTIER",
      "FTR",
      "FUJITSU",
      "FUN",
      "FUND",
      "FURNITURE",
      "FUTBOL",
      "FYI",
      "GA",
      "GAL",
      "GALLERY",
      "GALLO",
      "GALLUP",
      "GAME",
      "GAMES",
      "GAP",
      "GARDEN",
      "GAY",
      "GB",
      "GBIZ",
      "GD",
      "GDN",
      "GE",
      "GEA",
      "GENT",
      "GENTING",
      "GEORGE",
      "GF",
      "GG",
      "GGEE",
      "GH",
      "GI",
      "GIFT",
      "GIFTS",
      "GIVES",
      "GIVING",
      "GL",
      "GLASS",
      "GLE",
      "GLOBAL",
      "GLOBO",
      "GM",
      "GMAIL",
      "GMBH",
      "GMO",
      "GMX",
      "GN",
      "GODADDY",
      "GOLD",
      "GOLDPOINT",
      "GOLF",
      "GOO",
      "GOODYEAR",
      "GOOG",
      "GOOGLE",
      "GOP",
      "GOT",
      "GOV",
      "GP",
      "GQ",
      "GR",
      "GRAINGER",
      "GRAPHICS",
      "GRATIS",
      "GREEN",
      "GRIPE",
      "GROCERY",
      "GROUP",
      "GS",
      "GT",
      "GU",
      "GUARDIAN",
      "GUCCI",
      "GUGE",
      "GUIDE",
      "GUITARS",
      "GURU",
      "GW",
      "GY",
      "HAIR",
      "HAMBURG",
      "HANGOUT",
      "HAUS",
      "HBO",
      "HDFC",
      "HDFCBANK",
      "HEALTH",
      "HEALTHCARE",
      "HELP",
      "HELSINKI",
      "HERE",
      "HERMES",
      "HIPHOP",
      "HISAMITSU",
      "HITACHI",
      "HIV",
      "HK",
      "HKT",
      "HM",
      "HN",
      "HOCKEY",
      "HOLDINGS",
      "HOLIDAY",
      "HOMEDEPOT",
      "HOMEGOODS",
      "HOMES",
      "HOMESENSE",
      "HONDA",
      "HORSE",
      "HOSPITAL",
      "HOST",
      "HOSTING",
      "HOT",
      "HOTELS",
      "HOTMAIL",
      "HOUSE",
      "HOW",
      "HR",
      "HSBC",
      "HT",
      "HU",
      "HUGHES",
      "HYATT",
      "HYUNDAI",
      "IBM",
      "ICBC",
      "ICE",
      "ICU",
      "ID",
      "IE",
      "IEEE",
      "IFM",
      "IKANO",
      "IL",
      "IM",
      "IMAMAT",
      "IMDB",
      "IMMO",
      "IMMOBILIEN",
      "IN",
      "INC",
      "INDUSTRIES",
      "INFINITI",
      "INFO",
      "ING",
      "INK",
      "INSTITUTE",
      "INSURANCE",
      "INSURE",
      "INT",
      "INTERNATIONAL",
      "INTUIT",
      "INVESTMENTS",
      "IO",
      "IPIRANGA",
      "IQ",
      "IR",
      "IRISH",
      "IS",
      "ISMAILI",
      "IST",
      "ISTANBUL",
      "IT",
      "ITAU",
      "ITV",
      "JAGUAR",
      "JAVA",
      "JCB",
      "JE",
      "JEEP",
      "JETZT",
      "JEWELRY",
      "JIO",
      "JLL",
      "JM",
      "JMP",
      "JNJ",
      "JO",
      "JOBS",
      "JOBURG",
      "JOT",
      "JOY",
      "JP",
      "JPMORGAN",
      "JPRS",
      "JUEGOS",
      "JUNIPER",
      "KAUFEN",
      "KDDI",
      "KE",
      "KERRYHOTELS",
      "KERRYLOGISTICS",
      "KERRYPROPERTIES",
      "KFH",
      "KG",
      "KH",
      "KI",
      "KIA",
      "KIDS",
      "KIM",
      "KINDLE",
      "KITCHEN",
      "KIWI",
      "KM",
      "KN",
      "KOELN",
      "KOMATSU",
      "KOSHER",
      "KP",
      "KPMG",
      "KPN",
      "KR",
      "KRD",
      "KRED",
      "KUOKGROUP",
      "KW",
      "KY",
      "KYOTO",
      "KZ",
      "LA",
      "LACAIXA",
      "LAMBORGHINI",
      "LAMER",
      "LANCASTER",
      "LAND",
      "LANDROVER",
      "LANXESS",
      "LASALLE",
      "LAT",
      "LATINO",
      "LATROBE",
      "LAW",
      "LAWYER",
      "LB",
      "LC",
      "LDS",
      "LEASE",
      "LECLERC",
      "LEFRAK",
      "LEGAL",
      "LEGO",
      "LEXUS",
      "LGBT",
      "LI",
      "LIDL",
      "LIFE",
      "LIFEINSURANCE",
      "LIFESTYLE",
      "LIGHTING",
      "LIKE",
      "LILLY",
      "LIMITED",
      "LIMO",
      "LINCOLN",
      "LINK",
      "LIPSY",
      "LIVE",
      "LIVING",
      "LK",
      "LLC",
      "LLP",
      "LOAN",
      "LOANS",
      "LOCKER",
      "LOCUS",
      "LOL",
      "LONDON",
      "LOTTE",
      "LOTTO",
      "LOVE",
      "LPL",
      "LPLFINANCIAL",
      "LR",
      "LS",
      "LT",
      "LTD",
      "LTDA",
      "LU",
      "LUNDBECK",
      "LUXE",
      "LUXURY",
      "LV",
      "LY",
      "MA",
      "MADRID",
      "MAIF",
      "MAISON",
      "MAKEUP",
      "MAN",
      "MANAGEMENT",
      "MANGO",
      "MAP",
      "MARKET",
      "MARKETING",
      "MARKETS",
      "MARRIOTT",
      "MARSHALLS",
      "MATTEL",
      "MBA",
      "MC",
      "MCKINSEY",
      "MD",
      "ME",
      "MED",
      "MEDIA",
      "MEET",
      "MELBOURNE",
      "MEME",
      "MEMORIAL",
      "MEN",
      "MENU",
      "MERCKMSD",
      "MG",
      "MH",
      "MIAMI",
      "MICROSOFT",
      "MIL",
      "MINI",
      "MINT",
      "MIT",
      "MITSUBISHI",
      "MK",
      "ML",
      "MLB",
      "MLS",
      "MM",
      "MMA",
      "MN",
      "MO",
      "MOBI",
      "MOBILE",
      "MODA",
      "MOE",
      "MOI",
      "MOM",
      "MONASH",
      "MONEY",
      "MONSTER",
      "MORMON",
      "MORTGAGE",
      "MOSCOW",
      "MOTO",
      "MOTORCYCLES",
      "MOV",
      "MOVIE",
      "MP",
      "MQ",
      "MR",
      "MS",
      "MSD",
      "MT",
      "MTN",
      "MTR",
      "MU",
      "MUSEUM",
      "MUSIC",
      "MV",
      "MW",
      "MX",
      "MY",
      "MZ",
      "NA",
      "NAB",
      "NAGOYA",
      "NAME",
      "NATURA",
      "NAVY",
      "NBA",
      "NC",
      "NE",
      "NEC",
      "NET",
      "NETBANK",
      "NETFLIX",
      "NETWORK",
      "NEUSTAR",
      "NEW",
      "NEWS",
      "NEXT",
      "NEXTDIRECT",
      "NEXUS",
      "NF",
      "NFL",
      "NG",
      "NGO",
      "NHK",
      "NI",
      "NICO",
      "NIKE",
      "NIKON",
      "NINJA",
      "NISSAN",
      "NISSAY",
      "NL",
      "NO",
      "NOKIA",
      "NORTON",
      "NOW",
      "NOWRUZ",
      "NOWTV",
      "NP",
      "NR",
      "NRA",
      "NRW",
      "NTT",
      "NU",
      "NYC",
      "NZ",
      "OBI",
      "OBSERVER",
      "OFFICE",
      "OKINAWA",
      "OLAYAN",
      "OLAYANGROUP",
      "OLLO",
      "OM",
      "OMEGA",
      "ONE",
      "ONG",
      "ONL",
      "ONLINE",
      "OOO",
      "OPEN",
      "ORACLE",
      "ORANGE",
      "ORG",
      "ORGANIC",
      "ORIGINS",
      "OSAKA",
      "OTSUKA",
      "OTT",
      "OVH",
      "PA",
      "PAGE",
      "PANASONIC",
      "PARIS",
      "PARS",
      "PARTNERS",
      "PARTS",
      "PARTY",
      "PAY",
      "PCCW",
      "PE",
      "PET",
      "PF",
      "PFIZER",
      "PG",
      "PH",
      "PHARMACY",
      "PHD",
      "PHILIPS",
      "PHONE",
      "PHOTO",
      "PHOTOGRAPHY",
      "PHOTOS",
      "PHYSIO",
      "PICS",
      "PICTET",
      "PICTURES",
      "PID",
      "PIN",
      "PING",
      "PINK",
      "PIONEER",
      "PIZZA",
      "PK",
      "PL",
      "PLACE",
      "PLAY",
      "PLAYSTATION",
      "PLUMBING",
      "PLUS",
      "PM",
      "PN",
      "PNC",
      "POHL",
      "POKER",
      "POLITIE",
      "PORN",
      "POST",
      "PR",
      "PRAMERICA",
      "PRAXI",
      "PRESS",
      "PRIME",
      "PRO",
      "PROD",
      "PRODUCTIONS",
      "PROF",
      "PROGRESSIVE",
      "PROMO",
      "PROPERTIES",
      "PROPERTY",
      "PROTECTION",
      "PRU",
      "PRUDENTIAL",
      "PS",
      "PT",
      "PUB",
      "PW",
      "PWC",
      "PY",
      "QA",
      "QPON",
      "QUEBEC",
      "QUEST",
      "RACING",
      "RADIO",
      "RE",
      "READ",
      "REALESTATE",
      "REALTOR",
      "REALTY",
      "RECIPES",
      "RED",
      "REDSTONE",
      "REDUMBRELLA",
      "REHAB",
      "REISE",
      "REISEN",
      "REIT",
      "RELIANCE",
      "REN",
      "RENT",
      "RENTALS",
      "REPAIR",
      "REPORT",
      "REPUBLICAN",
      "REST",
      "RESTAURANT",
      "REVIEW",
      "REVIEWS",
      "REXROTH",
      "RICH",
      "RICHARDLI",
      "RICOH",
      "RIL",
      "RIO",
      "RIP",
      "RO",
      "ROCKS",
      "RODEO",
      "ROGERS",
      "ROOM",
      "RS",
      "RSVP",
      "RU",
      "RUGBY",
      "RUHR",
      "RUN",
      "RW",
      "RWE",
      "RYUKYU",
      "SA",
      "SAARLAND",
      "SAFE",
      "SAFETY",
      "SAKURA",
      "SALE",
      "SALON",
      "SAMSCLUB",
      "SAMSUNG",
      "SANDVIK",
      "SANDVIKCOROMANT",
      "SANOFI",
      "SAP",
      "SARL",
      "SAS",
      "SAVE",
      "SAXO",
      "SB",
      "SBI",
      "SBS",
      "SC",
      "SCB",
      "SCHAEFFLER",
      "SCHMIDT",
      "SCHOLARSHIPS",
      "SCHOOL",
      "SCHULE",
      "SCHWARZ",
      "SCIENCE",
      "SCOT",
      "SD",
      "SE",
      "SEARCH",
      "SEAT",
      "SECURE",
      "SECURITY",
      "SEEK",
      "SELECT",
      "SENER",
      "SERVICES",
      "SEVEN",
      "SEW",
      "SEX",
      "SEXY",
      "SFR",
      "SG",
      "SH",
      "SHANGRILA",
      "SHARP",
      "SHAW",
      "SHELL",
      "SHIA",
      "SHIKSHA",
      "SHOES",
      "SHOP",
      "SHOPPING",
      "SHOUJI",
      "SHOW",
      "SI",
      "SILK",
      "SINA",
      "SINGLES",
      "SITE",
      "SJ",
      "SK",
      "SKI",
      "SKIN",
      "SKY",
      "SKYPE",
      "SL",
      "SLING",
      "SM",
      "SMART",
      "SMILE",
      "SN",
      "SNCF",
      "SO",
      "SOCCER",
      "SOCIAL",
      "SOFTBANK",
      "SOFTWARE",
      "SOHU",
      "SOLAR",
      "SOLUTIONS",
      "SONG",
      "SONY",
      "SOY",
      "SPA",
      "SPACE",
      "SPORT",
      "SPOT",
      "SR",
      "SRL",
      "SS",
      "ST",
      "STADA",
      "STAPLES",
      "STAR",
      "STATEBANK",
      "STATEFARM",
      "STC",
      "STCGROUP",
      "STOCKHOLM",
      "STORAGE",
      "STORE",
      "STREAM",
      "STUDIO",
      "STUDY",
      "STYLE",
      "SU",
      "SUCKS",
      "SUPPLIES",
      "SUPPLY",
      "SUPPORT",
      "SURF",
      "SURGERY",
      "SUZUKI",
      "SV",
      "SWATCH",
      "SWISS",
      "SX",
      "SY",
      "SYDNEY",
      "SYSTEMS",
      "SZ",
      "TAB",
      "TAIPEI",
      "TALK",
      "TAOBAO",
      "TARGET",
      "TATAMOTORS",
      "TATAR",
      "TATTOO",
      "TAX",
      "TAXI",
      "TC",
      "TCI",
      "TD",
      "TDK",
      "TEAM",
      "TECH",
      "TECHNOLOGY",
      "TEL",
      "TEMASEK",
      "TENNIS",
      "TEVA",
      "TF",
      "TG",
      "TH",
      "THD",
      "THEATER",
      "THEATRE",
      "TIAA",
      "TICKETS",
      "TIENDA",
      "TIPS",
      "TIRES",
      "TIROL",
      "TJ",
      "TJMAXX",
      "TJX",
      "TK",
      "TKMAXX",
      "TL",
      "TM",
      "TMALL",
      "TN",
      "TO",
      "TODAY",
      "TOKYO",
      "TOOLS",
      "TOP",
      "TORAY",
      "TOSHIBA",
      "TOTAL",
      "TOURS",
      "TOWN",
      "TOYOTA",
      "TOYS",
      "TR",
      "TRADE",
      "TRADING",
      "TRAINING",
      "TRAVEL",
      "TRAVELERS",
      "TRAVELERSINSURANCE",
      "TRUST",
      "TRV",
      "TT",
      "TUBE",
      "TUI",
      "TUNES",
      "TUSHU",
      "TV",
      "TVS",
      "TW",
      "TZ",
      "UA",
      "UBANK",
      "UBS",
      "UG",
      "UK",
      "UNICOM",
      "UNIVERSITY",
      "UNO",
      "UOL",
      "UPS",
      "US",
      "UY",
      "UZ",
      "VA",
      "VACATIONS",
      "VANA",
      "VANGUARD",
      "VC",
      "VE",
      "VEGAS",
      "VENTURES",
      "VERISIGN",
      "VERSICHERUNG",
      "VET",
      "VG",
      "VI",
      "VIAJES",
      "VIDEO",
      "VIG",
      "VIKING",
      "VILLAS",
      "VIN",
      "VIP",
      "VIRGIN",
      "VISA",
      "VISION",
      "VIVA",
      "VIVO",
      "VLAANDEREN",
      "VN",
      "VODKA",
      "VOLVO",
      "VOTE",
      "VOTING",
      "VOTO",
      "VOYAGE",
      "VU",
      "WALES",
      "WALMART",
      "WALTER",
      "WANG",
      "WANGGOU",
      "WATCH",
      "WATCHES",
      "WEATHER",
      "WEATHERCHANNEL",
      "WEBCAM",
      "WEBER",
      "WEBSITE",
      "WED",
      "WEDDING",
      "WEIBO",
      "WEIR",
      "WF",
      "WHOSWHO",
      "WIEN",
      "WIKI",
      "WILLIAMHILL",
      "WIN",
      "WINDOWS",
      "WINE",
      "WINNERS",
      "WME",
      "WOLTERSKLUWER",
      "WOODSIDE",
      "WORK",
      "WORKS",
      "WORLD",
      "WOW",
      "WS",
      "WTC",
      "WTF",
      "XBOX",
      "XEROX",
      "XFINITY",
      "XIHUAN",
      "XIN",
      "XN--11B4C3D",
      "XN--1CK2E1B",
      "XN--1QQW23A",
      "XN--2SCRJ9C",
      "XN--30RR7Y",
      "XN--3BST00M",
      "XN--3DS443G",
      "XN--3E0B707E",
      "XN--3HCRJ9C",
      "XN--3PXU8K",
      "XN--42C2D9A",
      "XN--45BR5CYL",
      "XN--45BRJ9C",
      "XN--45Q11C",
      "XN--4DBRK0CE",
      "XN--4GBRIM",
      "XN--54B7FTA0CC",
      "XN--55QW42G",
      "XN--55QX5D",
      "XN--5SU34J936BGSG",
      "XN--5TZM5G",
      "XN--6FRZ82G",
      "XN--6QQ986B3XL",
      "XN--80ADXHKS",
      "XN--80AO21A",
      "XN--80AQECDR1A",
      "XN--80ASEHDB",
      "XN--80ASWG",
      "XN--8Y0A063A",
      "XN--90A3AC",
      "XN--90AE",
      "XN--90AIS",
      "XN--9DBQ2A",
      "XN--9ET52U",
      "XN--9KRT00A",
      "XN--B4W605FERD",
      "XN--BCK1B9A5DRE4C",
      "XN--C1AVG",
      "XN--C2BR7G",
      "XN--CCK2B3B",
      "XN--CCKWCXETD",
      "XN--CG4BKI",
      "XN--CLCHC0EA0B2G2A9GCD",
      "XN--CZR694B",
      "XN--CZRS0T",
      "XN--CZRU2D",
      "XN--D1ACJ3B",
      "XN--D1ALF",
      "XN--E1A4C",
      "XN--ECKVDTC9D",
      "XN--EFVY88H",
      "XN--FCT429K",
      "XN--FHBEI",
      "XN--FIQ228C5HS",
      "XN--FIQ64B",
      "XN--FIQS8S",
      "XN--FIQZ9S",
      "XN--FJQ720A",
      "XN--FLW351E",
      "XN--FPCRJ9C3D",
      "XN--FZC2C9E2C",
      "XN--FZYS8D69UVGM",
      "XN--G2XX48C",
      "XN--GCKR3F0F",
      "XN--GECRJ9C",
      "XN--GK3AT1E",
      "XN--H2BREG3EVE",
      "XN--H2BRJ9C",
      "XN--H2BRJ9C8C",
      "XN--HXT814E",
      "XN--I1B6B1A6A2E",
      "XN--IMR513N",
      "XN--IO0A7I",
      "XN--J1AEF",
      "XN--J1AMH",
      "XN--J6W193G",
      "XN--JLQ480N2RG",
      "XN--JVR189M",
      "XN--KCRX77D1X4A",
      "XN--KPRW13D",
      "XN--KPRY57D",
      "XN--KPUT3I",
      "XN--L1ACC",
      "XN--LGBBAT1AD8J",
      "XN--MGB9AWBF",
      "XN--MGBA3A3EJT",
      "XN--MGBA3A4F16A",
      "XN--MGBA7C0BBN0A",
      "XN--MGBAAM7A8H",
      "XN--MGBAB2BD",
      "XN--MGBAH1A3HJKRD",
      "XN--MGBAI9AZGQP6J",
      "XN--MGBAYH7GPA",
      "XN--MGBBH1A",
      "XN--MGBBH1A71E",
      "XN--MGBC0A9AZCG",
      "XN--MGBCA7DZDO",
      "XN--MGBCPQ6GPA1A",
      "XN--MGBERP4A5D4AR",
      "XN--MGBGU82A",
      "XN--MGBI4ECEXP",
      "XN--MGBPL2FH",
      "XN--MGBT3DHD",
      "XN--MGBTX2B",
      "XN--MGBX4CD0AB",
      "XN--MIX891F",
      "XN--MK1BU44C",
      "XN--MXTQ1M",
      "XN--NGBC5AZD",
      "XN--NGBE9E0A",
      "XN--NGBRX",
      "XN--NODE",
      "XN--NQV7F",
      "XN--NQV7FS00EMA",
      "XN--NYQY26A",
      "XN--O3CW4H",
      "XN--OGBPF8FL",
      "XN--OTU796D",
      "XN--P1ACF",
      "XN--P1AI",
      "XN--PGBS0DH",
      "XN--PSSY2U",
      "XN--Q7CE6A",
      "XN--Q9JYB4C",
      "XN--QCKA1PMC",
      "XN--QXA6A",
      "XN--QXAM",
      "XN--RHQV96G",
      "XN--ROVU88B",
      "XN--RVC1E0AM3E",
      "XN--S9BRJ9C",
      "XN--SES554G",
      "XN--T60B56A",
      "XN--TCKWE",
      "XN--TIQ49XQYJ",
      "XN--UNUP4Y",
      "XN--VERMGENSBERATER-CTB",
      "XN--VERMGENSBERATUNG-PWB",
      "XN--VHQUV",
      "XN--VUQ861B",
      "XN--W4R85EL8FHU5DNRA",
      "XN--W4RS40L",
      "XN--WGBH1C",
      "XN--WGBL6A",
      "XN--XHQ521B",
      "XN--XKC2AL3HYE2A",
      "XN--XKC2DL3A5EE0H",
      "XN--Y9A3AQ",
      "XN--YFRO4I67O",
      "XN--YGBI2AMMX",
      "XN--ZFR164B",
      "XXX",
      "XYZ",
      "YACHTS",
      "YAHOO",
      "YAMAXUN",
      "YANDEX",
      "YE",
      "YODOBASHI",
      "YOGA",
      "YOKOHAMA",
      "YOU",
      "YOUTUBE",
      "YT",
      "YUN",
      "ZA",
      "ZAPPOS",
      "ZARA",
      "ZERO",
      "ZIP",
      "ZM",
      "ZONE",
      "ZUERICH",
      "ZW"
    ];
    module.exports = new Set(internals.tlds.map((tld) => tld.toLowerCase()));
  }
});

// node_modules/joi/lib/types/string.js
var require_string = __commonJS({
  "node_modules/joi/lib/types/string.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var Assert = require_assert();
    var Domain = require_domain();
    var Email = require_email();
    var Ip = require_ip();
    var EscapeRegex = require_escapeRegex();
    var Tlds = require_tlds();
    var Uri = require_uri();
    var Any = require_any();
    var Common = require_common();
    var internals = {
      tlds: Tlds instanceof Set ? { tlds: { allow: Tlds, deny: null } } : false,
      // $lab:coverage:ignore$
      base64Regex: {
        // paddingRequired
        true: {
          // urlSafe
          true: /^(?:[\w\-]{2}[\w\-]{2})*(?:[\w\-]{2}==|[\w\-]{3}=)?$/,
          false: /^(?:[A-Za-z0-9+\/]{2}[A-Za-z0-9+\/]{2})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/
        },
        false: {
          true: /^(?:[\w\-]{2}[\w\-]{2})*(?:[\w\-]{2}(==)?|[\w\-]{3}=?)?$/,
          false: /^(?:[A-Za-z0-9+\/]{2}[A-Za-z0-9+\/]{2})*(?:[A-Za-z0-9+\/]{2}(==)?|[A-Za-z0-9+\/]{3}=?)?$/
        }
      },
      dataUriRegex: /^data:[\w+.-]+\/[\w+.-]+;((charset=[\w-]+|base64),)?(.*)$/,
      hexRegex: {
        withPrefix: /^0x[0-9a-f]+$/i,
        withOptionalPrefix: /^(?:0x)?[0-9a-f]+$/i,
        withoutPrefix: /^[0-9a-f]+$/i
      },
      ipRegex: Ip.regex({ cidr: "forbidden" }).regex,
      isoDurationRegex: /^P(?!$)(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d)(\d+H)?(\d+M)?(\d+S)?)?$/,
      guidBrackets: {
        "{": "}",
        "[": "]",
        "(": ")",
        "": ""
      },
      guidVersions: {
        uuidv1: "1",
        uuidv2: "2",
        uuidv3: "3",
        uuidv4: "4",
        uuidv5: "5",
        uuidv6: "6",
        uuidv7: "7",
        uuidv8: "8"
      },
      guidSeparators: /* @__PURE__ */ new Set([void 0, true, false, "-", ":"]),
      normalizationForms: ["NFC", "NFD", "NFKC", "NFKD"]
    };
    module.exports = Any.extend({
      type: "string",
      flags: {
        insensitive: { default: false },
        truncate: { default: false }
      },
      terms: {
        replacements: { init: null }
      },
      coerce: {
        from: "string",
        method(value, { schema, state, prefs }) {
          const normalize = schema.$_getRule("normalize");
          if (normalize) {
            value = value.normalize(normalize.args.form);
          }
          const casing = schema.$_getRule("case");
          if (casing) {
            value = casing.args.direction === "upper" ? value.toLocaleUpperCase() : value.toLocaleLowerCase();
          }
          const trim = schema.$_getRule("trim");
          if (trim && trim.args.enabled) {
            value = value.trim();
          }
          if (schema.$_terms.replacements) {
            for (const replacement of schema.$_terms.replacements) {
              value = value.replace(replacement.pattern, replacement.replacement);
            }
          }
          const hex = schema.$_getRule("hex");
          if (hex && hex.args.options.byteAligned && value.length % 2 !== 0) {
            value = `0${value}`;
          }
          if (schema.$_getRule("isoDate")) {
            const iso = internals.isoDate(value);
            if (iso) {
              value = iso;
            }
          }
          if (schema._flags.truncate) {
            const rule = schema.$_getRule("max");
            if (rule) {
              let limit = rule.args.limit;
              if (Common.isResolvable(limit)) {
                limit = limit.resolve(value, state, prefs);
                if (!Common.limit(limit)) {
                  return { value, errors: schema.$_createError("any.ref", limit, { ref: rule.args.limit, arg: "limit", reason: "must be a positive integer" }, state, prefs) };
                }
              }
              value = value.slice(0, limit);
            }
          }
          return { value };
        }
      },
      validate(value, { schema, error }) {
        if (typeof value !== "string") {
          return { value, errors: error("string.base") };
        }
        if (value === "") {
          const min = schema.$_getRule("min");
          if (min && min.args.limit === 0) {
            return;
          }
          return { value, errors: error("string.empty") };
        }
      },
      rules: {
        alphanum: {
          method() {
            return this.$_addRule("alphanum");
          },
          validate(value, helpers) {
            if (/^[a-zA-Z0-9]+$/.test(value)) {
              return value;
            }
            return helpers.error("string.alphanum");
          }
        },
        base64: {
          method(options = {}) {
            Common.assertOptions(options, ["paddingRequired", "urlSafe"]);
            options = { urlSafe: false, paddingRequired: true, ...options };
            Assert(typeof options.paddingRequired === "boolean", "paddingRequired must be boolean");
            Assert(typeof options.urlSafe === "boolean", "urlSafe must be boolean");
            return this.$_addRule({ name: "base64", args: { options } });
          },
          validate(value, helpers, { options }) {
            const regex = internals.base64Regex[options.paddingRequired][options.urlSafe];
            if (regex.test(value)) {
              return value;
            }
            return helpers.error("string.base64");
          }
        },
        case: {
          method(direction) {
            Assert(["lower", "upper"].includes(direction), "Invalid case:", direction);
            return this.$_addRule({ name: "case", args: { direction } });
          },
          validate(value, helpers, { direction }) {
            if (direction === "lower" && value === value.toLocaleLowerCase() || direction === "upper" && value === value.toLocaleUpperCase()) {
              return value;
            }
            return helpers.error(`string.${direction}case`);
          },
          convert: true
        },
        creditCard: {
          method() {
            return this.$_addRule("creditCard");
          },
          validate(value, helpers) {
            let i = value.length;
            let sum = 0;
            let mul = 1;
            while (i--) {
              const char = value.charAt(i) * mul;
              sum = sum + (char - (char > 9) * 9);
              mul = mul ^ 3;
            }
            if (sum > 0 && sum % 10 === 0) {
              return value;
            }
            return helpers.error("string.creditCard");
          }
        },
        dataUri: {
          method(options = {}) {
            Common.assertOptions(options, ["paddingRequired"]);
            options = { paddingRequired: true, ...options };
            Assert(typeof options.paddingRequired === "boolean", "paddingRequired must be boolean");
            return this.$_addRule({ name: "dataUri", args: { options } });
          },
          validate(value, helpers, { options }) {
            const matches = value.match(internals.dataUriRegex);
            if (matches) {
              if (!matches[2]) {
                return value;
              }
              if (matches[2] !== "base64") {
                return value;
              }
              const base64regex = internals.base64Regex[options.paddingRequired].false;
              if (base64regex.test(matches[3])) {
                return value;
              }
            }
            return helpers.error("string.dataUri");
          }
        },
        domain: {
          method(options) {
            if (options) {
              Common.assertOptions(options, ["allowFullyQualified", "allowUnicode", "maxDomainSegments", "minDomainSegments", "tlds"]);
            }
            const address = internals.addressOptions(options);
            return this.$_addRule({ name: "domain", args: { options }, address });
          },
          validate(value, helpers, args, { address }) {
            if (Domain.isValid(value, address)) {
              return value;
            }
            return helpers.error("string.domain");
          }
        },
        email: {
          method(options = {}) {
            Common.assertOptions(options, ["allowFullyQualified", "allowUnicode", "ignoreLength", "maxDomainSegments", "minDomainSegments", "multiple", "separator", "tlds"]);
            Assert(options.multiple === void 0 || typeof options.multiple === "boolean", "multiple option must be an boolean");
            const address = internals.addressOptions(options);
            const regex = new RegExp(`\\s*[${options.separator ? EscapeRegex(options.separator) : ","}]\\s*`);
            return this.$_addRule({ name: "email", args: { options }, regex, address });
          },
          validate(value, helpers, { options }, { regex, address }) {
            const emails = options.multiple ? value.split(regex) : [value];
            const invalids = [];
            for (const email of emails) {
              if (!Email.isValid(email, address)) {
                invalids.push(email);
              }
            }
            if (!invalids.length) {
              return value;
            }
            return helpers.error("string.email", { value, invalids });
          }
        },
        guid: {
          alias: "uuid",
          method(options = {}) {
            Common.assertOptions(options, ["version", "separator"]);
            let versionNumbers = "";
            if (options.version) {
              const versions = [].concat(options.version);
              Assert(versions.length >= 1, "version must have at least 1 valid version specified");
              const set = /* @__PURE__ */ new Set();
              for (let i = 0; i < versions.length; ++i) {
                const version2 = versions[i];
                Assert(typeof version2 === "string", "version at position " + i + " must be a string");
                const versionNumber = internals.guidVersions[version2.toLowerCase()];
                Assert(versionNumber, "version at position " + i + " must be one of " + Object.keys(internals.guidVersions).join(", "));
                Assert(!set.has(versionNumber), "version at position " + i + " must not be a duplicate");
                versionNumbers += versionNumber;
                set.add(versionNumber);
              }
            }
            Assert(internals.guidSeparators.has(options.separator), 'separator must be one of true, false, "-", or ":"');
            const separator = options.separator === void 0 ? "[:-]?" : options.separator === true ? "[:-]" : options.separator === false ? "[]?" : `\\${options.separator}`;
            const regex = new RegExp(`^([\\[{\\(]?)[0-9A-F]{8}(${separator})[0-9A-F]{4}\\2?[${versionNumbers || "0-9A-F"}][0-9A-F]{3}\\2?[${versionNumbers ? "89AB" : "0-9A-F"}][0-9A-F]{3}\\2?[0-9A-F]{12}([\\]}\\)]?)$`, "i");
            return this.$_addRule({ name: "guid", args: { options }, regex });
          },
          validate(value, helpers, args, { regex }) {
            const results = regex.exec(value);
            if (!results) {
              return helpers.error("string.guid");
            }
            if (internals.guidBrackets[results[1]] !== results[results.length - 1]) {
              return helpers.error("string.guid");
            }
            return value;
          }
        },
        hex: {
          method(options = {}) {
            Common.assertOptions(options, ["byteAligned", "prefix"]);
            options = { byteAligned: false, prefix: false, ...options };
            Assert(typeof options.byteAligned === "boolean", "byteAligned must be boolean");
            Assert(typeof options.prefix === "boolean" || options.prefix === "optional", 'prefix must be boolean or "optional"');
            return this.$_addRule({ name: "hex", args: { options } });
          },
          validate(value, helpers, { options }) {
            const re = options.prefix === "optional" ? internals.hexRegex.withOptionalPrefix : options.prefix === true ? internals.hexRegex.withPrefix : internals.hexRegex.withoutPrefix;
            if (!re.test(value)) {
              return helpers.error("string.hex");
            }
            if (options.byteAligned && value.length % 2 !== 0) {
              return helpers.error("string.hexAlign");
            }
            return value;
          }
        },
        hostname: {
          method() {
            return this.$_addRule("hostname");
          },
          validate(value, helpers) {
            if (Domain.isValid(value, { minDomainSegments: 1 }) || internals.ipRegex.test(value)) {
              return value;
            }
            return helpers.error("string.hostname");
          }
        },
        insensitive: {
          method() {
            return this.$_setFlag("insensitive", true);
          }
        },
        ip: {
          method(options = {}) {
            Common.assertOptions(options, ["cidr", "version"]);
            const { cidr, versions, regex } = Ip.regex(options);
            const version2 = options.version ? versions : void 0;
            return this.$_addRule({ name: "ip", args: { options: { cidr, version: version2 } }, regex });
          },
          validate(value, helpers, { options }, { regex }) {
            if (regex.test(value)) {
              return value;
            }
            if (options.version) {
              return helpers.error("string.ipVersion", { value, cidr: options.cidr, version: options.version });
            }
            return helpers.error("string.ip", { value, cidr: options.cidr });
          }
        },
        isoDate: {
          method() {
            return this.$_addRule("isoDate");
          },
          validate(value, { error }) {
            if (internals.isoDate(value)) {
              return value;
            }
            return error("string.isoDate");
          }
        },
        isoDuration: {
          method() {
            return this.$_addRule("isoDuration");
          },
          validate(value, helpers) {
            if (internals.isoDurationRegex.test(value)) {
              return value;
            }
            return helpers.error("string.isoDuration");
          }
        },
        length: {
          method(limit, encoding) {
            return internals.length(this, "length", limit, "=", encoding);
          },
          validate(value, helpers, { limit, encoding }, { name, operator, args }) {
            const length = encoding ? Buffer && Buffer.byteLength(value, encoding) : value.length;
            if (Common.compare(length, limit, operator)) {
              return value;
            }
            return helpers.error("string." + name, { limit: args.limit, value, encoding });
          },
          args: [
            {
              name: "limit",
              ref: true,
              assert: Common.limit,
              message: "must be a positive integer"
            },
            "encoding"
          ]
        },
        lowercase: {
          method() {
            return this.case("lower");
          }
        },
        max: {
          method(limit, encoding) {
            return internals.length(this, "max", limit, "<=", encoding);
          },
          args: ["limit", "encoding"]
        },
        min: {
          method(limit, encoding) {
            return internals.length(this, "min", limit, ">=", encoding);
          },
          args: ["limit", "encoding"]
        },
        normalize: {
          method(form = "NFC") {
            Assert(internals.normalizationForms.includes(form), "normalization form must be one of " + internals.normalizationForms.join(", "));
            return this.$_addRule({ name: "normalize", args: { form } });
          },
          validate(value, { error }, { form }) {
            if (value === value.normalize(form)) {
              return value;
            }
            return error("string.normalize", { value, form });
          },
          convert: true
        },
        pattern: {
          alias: "regex",
          method(regex, options = {}) {
            Assert(regex instanceof RegExp, "regex must be a RegExp");
            Assert(!regex.flags.includes("g") && !regex.flags.includes("y"), "regex should not use global or sticky mode");
            if (typeof options === "string") {
              options = { name: options };
            }
            Common.assertOptions(options, ["invert", "name"]);
            const errorCode = ["string.pattern", options.invert ? ".invert" : "", options.name ? ".name" : ".base"].join("");
            return this.$_addRule({ name: "pattern", args: { regex, options }, errorCode });
          },
          validate(value, helpers, { regex, options }, { errorCode }) {
            const patternMatch = regex.test(value);
            if (patternMatch ^ options.invert) {
              return value;
            }
            return helpers.error(errorCode, { name: options.name, regex, value });
          },
          args: ["regex", "options"],
          multi: true
        },
        replace: {
          method(pattern, replacement) {
            if (typeof pattern === "string") {
              pattern = new RegExp(EscapeRegex(pattern), "g");
            }
            Assert(pattern instanceof RegExp, "pattern must be a RegExp");
            Assert(typeof replacement === "string", "replacement must be a String");
            const obj = this.clone();
            if (!obj.$_terms.replacements) {
              obj.$_terms.replacements = [];
            }
            obj.$_terms.replacements.push({ pattern, replacement });
            return obj;
          }
        },
        token: {
          method() {
            return this.$_addRule("token");
          },
          validate(value, helpers) {
            if (/^\w+$/.test(value)) {
              return value;
            }
            return helpers.error("string.token");
          }
        },
        trim: {
          method(enabled = true) {
            Assert(typeof enabled === "boolean", "enabled must be a boolean");
            return this.$_addRule({ name: "trim", args: { enabled } });
          },
          validate(value, helpers, { enabled }) {
            if (!enabled || value === value.trim()) {
              return value;
            }
            return helpers.error("string.trim");
          },
          convert: true
        },
        truncate: {
          method(enabled = true) {
            Assert(typeof enabled === "boolean", "enabled must be a boolean");
            return this.$_setFlag("truncate", enabled);
          }
        },
        uppercase: {
          method() {
            return this.case("upper");
          }
        },
        uri: {
          method(options = {}) {
            Common.assertOptions(options, ["allowRelative", "allowQuerySquareBrackets", "domain", "relativeOnly", "scheme", "encodeUri"]);
            if (options.domain) {
              Common.assertOptions(options.domain, ["allowFullyQualified", "allowUnicode", "maxDomainSegments", "minDomainSegments", "tlds"]);
            }
            const { regex, scheme } = Uri.regex(options);
            const domain = options.domain ? internals.addressOptions(options.domain) : null;
            return this.$_addRule({ name: "uri", args: { options }, regex, domain, scheme });
          },
          validate(value, helpers, { options }, { regex, domain, scheme }) {
            if (["http:/", "https:/"].includes(value)) {
              return helpers.error("string.uri");
            }
            let match = regex.exec(value);
            if (!match && helpers.prefs.convert && options.encodeUri) {
              const encoded = encodeURI(value);
              match = regex.exec(encoded);
              if (match) {
                value = encoded;
              }
            }
            if (match) {
              const matched = match[1] || match[2];
              if (domain && (!options.allowRelative || matched) && !Domain.isValid(matched, domain)) {
                return helpers.error("string.domain", { value: matched });
              }
              return value;
            }
            if (options.relativeOnly) {
              return helpers.error("string.uriRelativeOnly");
            }
            if (options.scheme) {
              return helpers.error("string.uriCustomScheme", { scheme, value });
            }
            return helpers.error("string.uri");
          }
        }
      },
      manifest: {
        build(obj, desc) {
          if (desc.replacements) {
            for (const { pattern, replacement } of desc.replacements) {
              obj = obj.replace(pattern, replacement);
            }
          }
          return obj;
        }
      },
      messages: {
        "string.alphanum": "{{#label}} must only contain alpha-numeric characters",
        "string.base": "{{#label}} must be a string",
        "string.base64": "{{#label}} must be a valid base64 string",
        "string.creditCard": "{{#label}} must be a credit card",
        "string.dataUri": "{{#label}} must be a valid dataUri string",
        "string.domain": "{{#label}} must contain a valid domain name",
        "string.email": "{{#label}} must be a valid email",
        "string.empty": "{{#label}} is not allowed to be empty",
        "string.guid": "{{#label}} must be a valid GUID",
        "string.hex": "{{#label}} must only contain hexadecimal characters",
        "string.hexAlign": "{{#label}} hex decoded representation must be byte aligned",
        "string.hostname": "{{#label}} must be a valid hostname",
        "string.ip": "{{#label}} must be a valid ip address with a {{#cidr}} CIDR",
        "string.ipVersion": "{{#label}} must be a valid ip address of one of the following versions {{#version}} with a {{#cidr}} CIDR",
        "string.isoDate": "{{#label}} must be in iso format",
        "string.isoDuration": "{{#label}} must be a valid ISO 8601 duration",
        "string.length": "{{#label}} length must be {{#limit}} characters long",
        "string.lowercase": "{{#label}} must only contain lowercase characters",
        "string.max": "{{#label}} length must be less than or equal to {{#limit}} characters long",
        "string.min": "{{#label}} length must be at least {{#limit}} characters long",
        "string.normalize": "{{#label}} must be unicode normalized in the {{#form}} form",
        "string.token": "{{#label}} must only contain alpha-numeric and underscore characters",
        "string.pattern.base": "{{#label}} with value {:[.]} fails to match the required pattern: {{#regex}}",
        "string.pattern.name": "{{#label}} with value {:[.]} fails to match the {{#name}} pattern",
        "string.pattern.invert.base": "{{#label}} with value {:[.]} matches the inverted pattern: {{#regex}}",
        "string.pattern.invert.name": "{{#label}} with value {:[.]} matches the inverted {{#name}} pattern",
        "string.trim": "{{#label}} must not have leading or trailing whitespace",
        "string.uri": "{{#label}} must be a valid uri",
        "string.uriCustomScheme": "{{#label}} must be a valid uri with a scheme matching the {{#scheme}} pattern",
        "string.uriRelativeOnly": "{{#label}} must be a valid relative uri",
        "string.uppercase": "{{#label}} must only contain uppercase characters"
      }
    });
    internals.addressOptions = function(options) {
      if (!options) {
        return internals.tlds || options;
      }
      Assert(options.minDomainSegments === void 0 || Number.isSafeInteger(options.minDomainSegments) && options.minDomainSegments > 0, "minDomainSegments must be a positive integer");
      Assert(options.maxDomainSegments === void 0 || Number.isSafeInteger(options.maxDomainSegments) && options.maxDomainSegments > 0, "maxDomainSegments must be a positive integer");
      if (options.tlds === false) {
        return options;
      }
      if (options.tlds === true || options.tlds === void 0) {
        Assert(internals.tlds, "Built-in TLD list disabled");
        return Object.assign({}, options, internals.tlds);
      }
      Assert(typeof options.tlds === "object", "tlds must be true, false, or an object");
      const deny = options.tlds.deny;
      if (deny) {
        if (Array.isArray(deny)) {
          options = Object.assign({}, options, { tlds: { deny: new Set(deny) } });
        }
        Assert(options.tlds.deny instanceof Set, "tlds.deny must be an array, Set, or boolean");
        Assert(!options.tlds.allow, "Cannot specify both tlds.allow and tlds.deny lists");
        internals.validateTlds(options.tlds.deny, "tlds.deny");
        return options;
      }
      const allow = options.tlds.allow;
      if (!allow) {
        return options;
      }
      if (allow === true) {
        Assert(internals.tlds, "Built-in TLD list disabled");
        return Object.assign({}, options, internals.tlds);
      }
      if (Array.isArray(allow)) {
        options = Object.assign({}, options, { tlds: { allow: new Set(allow) } });
      }
      Assert(options.tlds.allow instanceof Set, "tlds.allow must be an array, Set, or boolean");
      internals.validateTlds(options.tlds.allow, "tlds.allow");
      return options;
    };
    internals.validateTlds = function(set, source) {
      for (const tld of set) {
        Assert(Domain.isValid(tld, { minDomainSegments: 1, maxDomainSegments: 1 }), `${source} must contain valid top level domain names`);
      }
    };
    internals.isoDate = function(value) {
      if (!Common.isIsoDate(value)) {
        return null;
      }
      if (/.*T.*[+-]\d\d$/.test(value)) {
        value += "00";
      }
      const date = new Date(value);
      if (isNaN(date.getTime())) {
        return null;
      }
      return date.toISOString();
    };
    internals.length = function(schema, name, limit, operator, encoding) {
      Assert(!encoding || Buffer && Buffer.isEncoding(encoding), "Invalid encoding:", encoding);
      return schema.$_addRule({ name, method: "length", args: { limit, encoding }, operator });
    };
  }
});

// node_modules/joi/lib/types/symbol.js
var require_symbol = __commonJS({
  "node_modules/joi/lib/types/symbol.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var Assert = require_assert();
    var Any = require_any();
    var internals = {};
    internals.Map = class extends Map {
      slice() {
        return new internals.Map(this);
      }
    };
    module.exports = Any.extend({
      type: "symbol",
      terms: {
        map: { init: new internals.Map() }
      },
      coerce: {
        method(value, { schema, error }) {
          const lookup = schema.$_terms.map.get(value);
          if (lookup) {
            value = lookup;
          }
          if (!schema._flags.only || typeof value === "symbol") {
            return { value };
          }
          return { value, errors: error("symbol.map", { map: schema.$_terms.map }) };
        }
      },
      validate(value, { error }) {
        if (typeof value !== "symbol") {
          return { value, errors: error("symbol.base") };
        }
      },
      rules: {
        map: {
          method(iterable) {
            if (iterable && !iterable[Symbol.iterator] && typeof iterable === "object") {
              iterable = Object.entries(iterable);
            }
            Assert(iterable && iterable[Symbol.iterator], "Iterable must be an iterable or object");
            const obj = this.clone();
            const symbols = [];
            for (const entry of iterable) {
              Assert(entry && entry[Symbol.iterator], "Entry must be an iterable");
              const [key, value] = entry;
              Assert(typeof key !== "object" && typeof key !== "function" && typeof key !== "symbol", "Key must not be of type object, function, or Symbol");
              Assert(typeof value === "symbol", "Value must be a Symbol");
              obj.$_terms.map.set(key, value);
              symbols.push(value);
            }
            return obj.valid(...symbols);
          }
        }
      },
      manifest: {
        build(obj, desc) {
          if (desc.map) {
            obj = obj.map(desc.map);
          }
          return obj;
        }
      },
      messages: {
        "symbol.base": "{{#label}} must be a symbol",
        "symbol.map": "{{#label}} must be one of {{#map}}"
      }
    });
  }
});

// node_modules/joi/lib/types/binary.js
var require_binary = __commonJS({
  "node_modules/joi/lib/types/binary.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var Assert = require_assert();
    var Any = require_any();
    var Common = require_common();
    module.exports = Any.extend({
      type: "binary",
      coerce: {
        from: ["string", "object"],
        method(value, { schema }) {
          if (typeof value === "string" || value !== null && value.type === "Buffer") {
            try {
              return { value: Buffer.from(value, schema._flags.encoding) };
            } catch (ignoreErr) {
            }
          }
        }
      },
      validate(value, { error }) {
        if (!Buffer.isBuffer(value)) {
          return { value, errors: error("binary.base") };
        }
      },
      rules: {
        encoding: {
          method(encoding) {
            Assert(Buffer.isEncoding(encoding), "Invalid encoding:", encoding);
            return this.$_setFlag("encoding", encoding);
          }
        },
        length: {
          method(limit) {
            return this.$_addRule({ name: "length", method: "length", args: { limit }, operator: "=" });
          },
          validate(value, helpers, { limit }, { name, operator, args }) {
            if (Common.compare(value.length, limit, operator)) {
              return value;
            }
            return helpers.error("binary." + name, { limit: args.limit, value });
          },
          args: [
            {
              name: "limit",
              ref: true,
              assert: Common.limit,
              message: "must be a positive integer"
            }
          ]
        },
        max: {
          method(limit) {
            return this.$_addRule({ name: "max", method: "length", args: { limit }, operator: "<=" });
          }
        },
        min: {
          method(limit) {
            return this.$_addRule({ name: "min", method: "length", args: { limit }, operator: ">=" });
          }
        }
      },
      cast: {
        string: {
          from: /* @__PURE__ */ __name((value) => Buffer.isBuffer(value), "from"),
          to(value, helpers) {
            return value.toString();
          }
        }
      },
      messages: {
        "binary.base": "{{#label}} must be a buffer or a string",
        "binary.length": "{{#label}} must be {{#limit}} bytes",
        "binary.max": "{{#label}} must be less than or equal to {{#limit}} bytes",
        "binary.min": "{{#label}} must be at least {{#limit}} bytes"
      }
    });
  }
});

// node_modules/joi/lib/index.js
var require_lib5 = __commonJS({
  "node_modules/joi/lib/index.js"(exports, module) {
    "use strict";
    init_cjs_shim();
    var Assert = require_assert();
    var Clone = require_clone();
    var Cache = require_cache2();
    var Common = require_common();
    var Compile = require_compile();
    var Errors = require_errors2();
    var Extend = require_extend();
    var Manifest = require_manifest();
    var Ref = require_ref();
    var Template = require_template();
    var Trace = require_trace();
    var Schemas;
    var internals = {
      types: {
        alternatives: require_alternatives(),
        any: require_any(),
        array: require_array(),
        boolean: require_boolean(),
        date: require_date(),
        function: require_function(),
        link: require_link(),
        number: require_number(),
        object: require_object(),
        string: require_string(),
        symbol: require_symbol()
      },
      aliases: {
        alt: "alternatives",
        bool: "boolean",
        func: "function"
      }
    };
    if (Buffer) {
      internals.types.binary = require_binary();
    }
    internals.root = function() {
      const root = {
        _types: new Set(Object.keys(internals.types))
      };
      for (const type of root._types) {
        root[type] = function(...args) {
          Assert(!args.length || ["alternatives", "link", "object"].includes(type), "The", type, "type does not allow arguments");
          return internals.generate(this, internals.types[type], args);
        };
      }
      for (const method of ["allow", "custom", "disallow", "equal", "exist", "forbidden", "invalid", "not", "only", "optional", "options", "prefs", "preferences", "required", "strip", "valid", "when"]) {
        root[method] = function(...args) {
          return this.any()[method](...args);
        };
      }
      Object.assign(root, internals.methods);
      for (const alias in internals.aliases) {
        const target = internals.aliases[alias];
        root[alias] = root[target];
      }
      root.x = root.expression;
      if (Trace.setup) {
        Trace.setup(root);
      }
      return root;
    };
    internals.methods = {
      ValidationError: Errors.ValidationError,
      version: Common.version,
      cache: Cache.provider,
      assert(value, schema, ...args) {
        internals.assert(value, schema, true, args);
      },
      attempt(value, schema, ...args) {
        return internals.assert(value, schema, false, args);
      },
      build(desc) {
        Assert(typeof Manifest.build === "function", "Manifest functionality disabled");
        return Manifest.build(this, desc);
      },
      checkPreferences(prefs) {
        Common.checkPreferences(prefs);
      },
      compile(schema, options) {
        return Compile.compile(this, schema, options);
      },
      defaults(modifier) {
        Assert(typeof modifier === "function", "modifier must be a function");
        const joi = Object.assign({}, this);
        for (const type of joi._types) {
          const schema = modifier(joi[type]());
          Assert(Common.isSchema(schema), "modifier must return a valid schema object");
          joi[type] = function(...args) {
            return internals.generate(this, schema, args);
          };
        }
        return joi;
      },
      expression(...args) {
        return new Template(...args);
      },
      extend(...extensions) {
        Common.verifyFlat(extensions, "extend");
        Schemas = Schemas || require_schemas();
        Assert(extensions.length, "You need to provide at least one extension");
        this.assert(extensions, Schemas.extensions);
        const joi = Object.assign({}, this);
        joi._types = new Set(joi._types);
        for (let extension of extensions) {
          if (typeof extension === "function") {
            extension = extension(joi);
          }
          this.assert(extension, Schemas.extension);
          const expanded = internals.expandExtension(extension, joi);
          for (const item of expanded) {
            Assert(joi[item.type] === void 0 || joi._types.has(item.type), "Cannot override name", item.type);
            const base = item.base || this.any();
            const schema = Extend.type(base, item);
            joi._types.add(item.type);
            joi[item.type] = function(...args) {
              return internals.generate(this, schema, args);
            };
          }
        }
        return joi;
      },
      isError: Errors.ValidationError.isError,
      isExpression: Template.isTemplate,
      isRef: Ref.isRef,
      isSchema: Common.isSchema,
      in(...args) {
        return Ref.in(...args);
      },
      override: Common.symbols.override,
      ref(...args) {
        return Ref.create(...args);
      },
      types() {
        const types = {};
        for (const type of this._types) {
          types[type] = this[type]();
        }
        for (const target in internals.aliases) {
          types[target] = this[target]();
        }
        return types;
      }
    };
    internals.assert = function(value, schema, annotate, args) {
      const message = args[0] instanceof Error || typeof args[0] === "string" ? args[0] : null;
      const options = message !== null ? args[1] : args[0];
      const result = schema.validate(value, Common.preferences({ errors: { stack: true } }, options || {}));
      let error = result.error;
      if (!error) {
        return result.value;
      }
      if (message instanceof Error) {
        throw message;
      }
      const display = annotate && typeof error.annotate === "function" ? error.annotate() : error.message;
      if (error instanceof Errors.ValidationError === false) {
        error = Clone(error);
      }
      error.message = message ? `${message} ${display}` : display;
      throw error;
    };
    internals.generate = function(root, schema, args) {
      Assert(root, "Must be invoked on a Joi instance.");
      schema.$_root = root;
      if (!schema._definition.args || !args.length) {
        return schema;
      }
      return schema._definition.args(schema, ...args);
    };
    internals.expandExtension = function(extension, joi) {
      if (typeof extension.type === "string") {
        return [extension];
      }
      const extended = [];
      for (const type of joi._types) {
        if (extension.type.test(type)) {
          const item = Object.assign({}, extension);
          item.type = type;
          item.base = joi[type]();
          extended.push(item);
        }
      }
      return extended;
    };
    module.exports = internals.root();
  }
});

// actions/action-get-changed-dirs/bin/bin.mts
init_cjs_shim();
import { inspect } from "node:util";

// node_modules/zx/build/globals.js
init_cjs_shim();

// node_modules/zx/build/deno.js
init_cjs_shim();
import { createRequire as createRequire2 } from "node:module";
if (globalThis.Deno) {
  globalThis.require = createRequire2(import.meta.url);
  globalThis.__filename = new URL(import.meta.url).pathname;
  globalThis.__dirname = new URL(".", import.meta.url).pathname;
}

// node_modules/zx/build/globals.js
var {} = await Promise.resolve().then(() => __toESM(require_globals(), 1));

// lib/get-changed-directories.ts
init_cjs_shim();
import * as path4 from "node:path";

// lib/git.ts
init_cjs_shim();

// lib/constants.ts
init_cjs_shim();
import path3 from "node:path";
var __dirname = import.meta.dirname;
var rootDir = path3.join(__dirname, "..");
var actionsDir = path3.join(rootDir, "actions");

// lib/git.ts
async function gitDiffLines(baseSHA2) {
  const lineRegex = /^(\w+)\s+(\S.+)$/;
  return (await $`git diff --name-status ${baseSHA2}`).stdout.split("\n").map((line) => line.trim()).filter((line) => line !== "").map((line) => lineRegex.exec(line)).filter((arr) => arr != null).map((arr) => [
    // Git status
    arr[1],
    // Path
    arr[2]
  ]);
}
__name(gitDiffLines, "gitDiffLines");

// lib/get-changed-directories.ts
async function getChangedDirectories({
  baseSHA: baseSHA2,
  directoryRegex: directoryRegex2,
  maxDepth: maxDepth2,
  ignoreIfAllDeletions: ignoreIfAllDeletions2
}) {
  directoryRegex2 ??= /.*/;
  maxDepth2 ??= 0;
  const diffLines = (await gitDiffLines(baseSHA2)).filter(
    ([, p]) => directoryRegex2.test(p)
  );
  const aggregatedChanges = diffLines.map(([s, p]) => [s, path4.dirname(p)]).reduce((acc, [gitStatus, p]) => {
    const dir = p.split("/").slice(0, maxDepth2 + 1).join("/");
    if (dir in acc) {
      const oldStatus = acc[dir];
      acc[dir] = oldStatus || !oldStatus && gitStatus !== "D";
    } else {
      acc[dir] = gitStatus !== "D";
    }
    return acc;
  }, {});
  const cleanedChanges = Object.keys(
    Object.fromEntries(
      Object.entries(aggregatedChanges).filter(([, status]) => {
        return !(ignoreIfAllDeletions2 && status === false);
      })
    )
  );
  return cleanedChanges;
}
__name(getChangedDirectories, "getChangedDirectories");

// actions/action-get-changed-dirs/bin/bin.mts
var import_core = __toESM(require_core2(), 1);
var import_joi = __toESM(require_lib5(), 1);
var baseSHA = (0, import_core.getInput)("base-sha", { required: true });
var directoryRegex = new RegExp((0, import_core.getInput)("regex") || ".*");
var maxDepth = import_joi.default.attempt(
  (0, import_core.getInput)("max-depth") || "0",
  import_joi.default.number().required()
);
var ignoreIfAllDeletions = import_joi.default.attempt(
  (0, import_core.getInput)("ignore-if-all-deletions") || "false",
  import_joi.default.boolean().required()
);
var changes = await getChangedDirectories({
  baseSHA,
  directoryRegex,
  maxDepth,
  ignoreIfAllDeletions
});
console.log(`Changes: ${inspect(changes)}`);
(0, import_core.setOutput)(
  "matrix",
  JSON.stringify({
    directory: changes
  })
);
(0, import_core.setOutput)("matrix-empty", changes.length === 0);
/*! Bundled license information:

zx/build/vendor.cjs:
  (*! Bundled license information:
  
  is-extglob/index.js:
    (*!
     * is-extglob <https://github.com/jonschlinkert/is-extglob>
     *
     * Copyright (c) 2014-2016, Jon Schlinkert.
     * Licensed under the MIT License.
     *)
  
  is-glob/index.js:
    (*!
     * is-glob <https://github.com/jonschlinkert/is-glob>
     *
     * Copyright (c) 2014-2017, Jon Schlinkert.
     * Released under the MIT License.
     *)
  
  is-number/index.js:
    (*!
     * is-number <https://github.com/jonschlinkert/is-number>
     *
     * Copyright (c) 2014-present, Jon Schlinkert.
     * Released under the MIT License.
     *)
  
  to-regex-range/index.js:
    (*!
     * to-regex-range <https://github.com/micromatch/to-regex-range>
     *
     * Copyright (c) 2015-present, Jon Schlinkert.
     * Released under the MIT License.
     *)
  
  fill-range/index.js:
    (*!
     * fill-range <https://github.com/jonschlinkert/fill-range>
     *
     * Copyright (c) 2014-present, Jon Schlinkert.
     * Licensed under the MIT License.
     *)
  
  queue-microtask/index.js:
    (*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)
  
  run-parallel/index.js:
    (*! run-parallel. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)
  
  node-fetch-native/dist/node.mjs:
    (**
    * @license
    * web-streams-polyfill v3.3.3
    * Copyright 2024 Mattias Buelens, Diwank Singh Tomer and other contributors.
    * This code is released under the MIT license.
    * SPDX-License-Identifier: MIT
    *)
    (*! fetch-blob. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> *)
    (*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> *)
    (*! node-domexception. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> *)
  *)

undici/lib/fetch/body.js:
  (*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> *)

undici/lib/websocket/frame.js:
  (*! ws. MIT License. Einar Otto Stangvik <einaros@gmail.com> *)
*/
